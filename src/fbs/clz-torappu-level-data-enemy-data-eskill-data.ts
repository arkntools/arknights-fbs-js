// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';


export class clz_Torappu_LevelData_EnemyData_ESkillData implements flatbuffers.IUnpackableObject<clz_Torappu_LevelData_EnemyData_ESkillDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_LevelData_EnemyData_ESkillData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_LevelData_EnemyData_ESkillData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_EnemyData_ESkillData):clz_Torappu_LevelData_EnemyData_ESkillData {
  return (obj || new clz_Torappu_LevelData_EnemyData_ESkillData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_LevelData_EnemyData_ESkillData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_EnemyData_ESkillData):clz_Torappu_LevelData_EnemyData_ESkillData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_LevelData_EnemyData_ESkillData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prefabKey():string|null
prefabKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prefabKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

cooldown():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

initCooldown():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

spCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

blackboard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blackboardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_LevelData_EnemyData_ESkillData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPrefabKey(builder:flatbuffers.Builder, prefabKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, prefabKeyOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt32(1, priority, 0);
}

static addCooldown(builder:flatbuffers.Builder, cooldown:number) {
  builder.addFieldFloat32(2, cooldown, 0.0);
}

static addInitCooldown(builder:flatbuffers.Builder, initCooldown:number) {
  builder.addFieldFloat32(3, initCooldown, 0.0);
}

static addSpCost(builder:flatbuffers.Builder, spCost:number) {
  builder.addFieldInt32(4, spCost, 0);
}

static addBlackboard(builder:flatbuffers.Builder, blackboardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, blackboardOffset, 0);
}

static createBlackboardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlackboardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_LevelData_EnemyData_ESkillData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_LevelData_EnemyData_ESkillData(builder:flatbuffers.Builder, prefabKeyOffset:flatbuffers.Offset, priority:number, cooldown:number, initCooldown:number, spCost:number, blackboardOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_LevelData_EnemyData_ESkillData.startclz_Torappu_LevelData_EnemyData_ESkillData(builder);
  clz_Torappu_LevelData_EnemyData_ESkillData.addPrefabKey(builder, prefabKeyOffset);
  clz_Torappu_LevelData_EnemyData_ESkillData.addPriority(builder, priority);
  clz_Torappu_LevelData_EnemyData_ESkillData.addCooldown(builder, cooldown);
  clz_Torappu_LevelData_EnemyData_ESkillData.addInitCooldown(builder, initCooldown);
  clz_Torappu_LevelData_EnemyData_ESkillData.addSpCost(builder, spCost);
  clz_Torappu_LevelData_EnemyData_ESkillData.addBlackboard(builder, blackboardOffset);
  return clz_Torappu_LevelData_EnemyData_ESkillData.endclz_Torappu_LevelData_EnemyData_ESkillData(builder);
}

unpack(): clz_Torappu_LevelData_EnemyData_ESkillDataT {
  return new clz_Torappu_LevelData_EnemyData_ESkillDataT(
    this.prefabKey(),
    this.priority(),
    this.cooldown(),
    this.initCooldown(),
    this.spCost(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength())
  );
}


unpackTo(_o: clz_Torappu_LevelData_EnemyData_ESkillDataT): void {
  _o.prefabKey = this.prefabKey();
  _o.priority = this.priority();
  _o.cooldown = this.cooldown();
  _o.initCooldown = this.initCooldown();
  _o.spCost = this.spCost();
  _o.blackboard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength());
}
}

export class clz_Torappu_LevelData_EnemyData_ESkillDataT implements flatbuffers.IGeneratedObject {
constructor(
  public prefabKey: string|Uint8Array|null = null,
  public priority: number = 0,
  public cooldown: number = 0.0,
  public initCooldown: number = 0.0,
  public spCost: number = 0,
  public blackboard: (clz_Torappu_Blackboard_DataPairT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const prefabKey = (this.prefabKey !== null ? builder.createString(this.prefabKey!) : 0);
  const blackboard = clz_Torappu_LevelData_EnemyData_ESkillData.createBlackboardVector(builder, builder.createObjectOffsetList(this.blackboard));

  return clz_Torappu_LevelData_EnemyData_ESkillData.createclz_Torappu_LevelData_EnemyData_ESkillData(builder,
    prefabKey,
    this.priority,
    this.cooldown,
    this.initCooldown,
    this.spCost,
    blackboard
  );
}
}
