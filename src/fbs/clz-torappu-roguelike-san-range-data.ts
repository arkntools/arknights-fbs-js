// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_SanEffectRank } from './enum--torappu-san-effect-rank.js';


export class clz_Torappu_RoguelikeSanRangeData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeSanRangeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeSanRangeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeSanRangeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeSanRangeData):clz_Torappu_RoguelikeSanRangeData {
  return (obj || new clz_Torappu_RoguelikeSanRangeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeSanRangeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeSanRangeData):clz_Torappu_RoguelikeSanRangeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeSanRangeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sanMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

diceGroupId():string|null
diceGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diceGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sanDungeonEffect():enum__Torappu_SanEffectRank {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SanEffectRank.SAN_EFFECT_0;
}

sanEffectRank():enum__Torappu_SanEffectRank {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SanEffectRank.SAN_EFFECT_0;
}

sanEndingDesc():string|null
sanEndingDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sanEndingDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_RoguelikeSanRangeData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addSanMax(builder:flatbuffers.Builder, sanMax:number) {
  builder.addFieldInt32(0, sanMax, 0);
}

static addDiceGroupId(builder:flatbuffers.Builder, diceGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, diceGroupIdOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, descriptionOffset, 0);
}

static addSanDungeonEffect(builder:flatbuffers.Builder, sanDungeonEffect:enum__Torappu_SanEffectRank) {
  builder.addFieldInt32(3, sanDungeonEffect, enum__Torappu_SanEffectRank.SAN_EFFECT_0);
}

static addSanEffectRank(builder:flatbuffers.Builder, sanEffectRank:enum__Torappu_SanEffectRank) {
  builder.addFieldInt32(4, sanEffectRank, enum__Torappu_SanEffectRank.SAN_EFFECT_0);
}

static addSanEndingDesc(builder:flatbuffers.Builder, sanEndingDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, sanEndingDescOffset, 0);
}

static endclz_Torappu_RoguelikeSanRangeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeSanRangeData(builder:flatbuffers.Builder, sanMax:number, diceGroupIdOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, sanDungeonEffect:enum__Torappu_SanEffectRank, sanEffectRank:enum__Torappu_SanEffectRank, sanEndingDescOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeSanRangeData.startclz_Torappu_RoguelikeSanRangeData(builder);
  clz_Torappu_RoguelikeSanRangeData.addSanMax(builder, sanMax);
  clz_Torappu_RoguelikeSanRangeData.addDiceGroupId(builder, diceGroupIdOffset);
  clz_Torappu_RoguelikeSanRangeData.addDescription(builder, descriptionOffset);
  clz_Torappu_RoguelikeSanRangeData.addSanDungeonEffect(builder, sanDungeonEffect);
  clz_Torappu_RoguelikeSanRangeData.addSanEffectRank(builder, sanEffectRank);
  clz_Torappu_RoguelikeSanRangeData.addSanEndingDesc(builder, sanEndingDescOffset);
  return clz_Torappu_RoguelikeSanRangeData.endclz_Torappu_RoguelikeSanRangeData(builder);
}

unpack(): clz_Torappu_RoguelikeSanRangeDataT {
  return new clz_Torappu_RoguelikeSanRangeDataT(
    this.sanMax(),
    this.diceGroupId(),
    this.description(),
    this.sanDungeonEffect(),
    this.sanEffectRank(),
    this.sanEndingDesc()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeSanRangeDataT): void {
  _o.sanMax = this.sanMax();
  _o.diceGroupId = this.diceGroupId();
  _o.description = this.description();
  _o.sanDungeonEffect = this.sanDungeonEffect();
  _o.sanEffectRank = this.sanEffectRank();
  _o.sanEndingDesc = this.sanEndingDesc();
}
}

export class clz_Torappu_RoguelikeSanRangeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public sanMax: number = 0,
  public diceGroupId: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public sanDungeonEffect: enum__Torappu_SanEffectRank = enum__Torappu_SanEffectRank.SAN_EFFECT_0,
  public sanEffectRank: enum__Torappu_SanEffectRank = enum__Torappu_SanEffectRank.SAN_EFFECT_0,
  public sanEndingDesc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const diceGroupId = (this.diceGroupId !== null ? builder.createString(this.diceGroupId!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const sanEndingDesc = (this.sanEndingDesc !== null ? builder.createString(this.sanEndingDesc!) : 0);

  return clz_Torappu_RoguelikeSanRangeData.createclz_Torappu_RoguelikeSanRangeData(builder,
    this.sanMax,
    diceGroupId,
    description,
    this.sanDungeonEffect,
    this.sanEffectRank,
    sanEndingDesc
  );
}
}
