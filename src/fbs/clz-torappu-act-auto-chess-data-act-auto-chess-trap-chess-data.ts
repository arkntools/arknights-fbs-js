// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActAutoChessData_AutoChessTrapChessStatusData, clz_Torappu_ActAutoChessData_AutoChessTrapChessStatusDataT } from './clz-torappu-act-auto-chess-data-auto-chess-trap-chess-status-data.js';
import { enum__Torappu_AutoChessItemType } from './enum--torappu-auto-chess-item-type.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessTrapChessDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessTrapChessData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData):clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessTrapChessData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData):clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chessId():string|null
chessId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chessId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

identifier():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

charId():string|null
charId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isGolden():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

purchasePrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

status(obj?:clz_Torappu_ActAutoChessData_AutoChessTrapChessStatusData):clz_Torappu_ActAutoChessData_AutoChessTrapChessStatusData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_ActAutoChessData_AutoChessTrapChessStatusData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

upgradeChessId():string|null
upgradeChessId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
upgradeChessId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

upgradeNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

trapDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

effectId():string|null
effectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

giveBondId():string|null
giveBondId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
giveBondId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

givePowerId():string|null
givePowerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
givePowerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canGiveBond():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

itemType():enum__Torappu_AutoChessItemType {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_AutoChessItemType.CHAR;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessTrapChessData(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addChessId(builder:flatbuffers.Builder, chessIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chessIdOffset, 0);
}

static addIdentifier(builder:flatbuffers.Builder, identifier:number) {
  builder.addFieldInt32(1, identifier, 0);
}

static addCharId(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, charIdOffset, 0);
}

static addIsGolden(builder:flatbuffers.Builder, isGolden:boolean) {
  builder.addFieldInt8(3, +isGolden, +false);
}

static addPurchasePrice(builder:flatbuffers.Builder, purchasePrice:number) {
  builder.addFieldInt32(4, purchasePrice, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, statusOffset, 0);
}

static addUpgradeChessId(builder:flatbuffers.Builder, upgradeChessIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, upgradeChessIdOffset, 0);
}

static addUpgradeNum(builder:flatbuffers.Builder, upgradeNum:number) {
  builder.addFieldInt32(7, upgradeNum, 0);
}

static addTrapDuration(builder:flatbuffers.Builder, trapDuration:number) {
  builder.addFieldInt32(8, trapDuration, 0);
}

static addEffectId(builder:flatbuffers.Builder, effectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, effectIdOffset, 0);
}

static addGiveBondId(builder:flatbuffers.Builder, giveBondIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, giveBondIdOffset, 0);
}

static addGivePowerId(builder:flatbuffers.Builder, givePowerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, givePowerIdOffset, 0);
}

static addCanGiveBond(builder:flatbuffers.Builder, canGiveBond:boolean) {
  builder.addFieldInt8(12, +canGiveBond, +false);
}

static addItemType(builder:flatbuffers.Builder, itemType:enum__Torappu_AutoChessItemType) {
  builder.addFieldInt32(13, itemType, enum__Torappu_AutoChessItemType.CHAR);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessTrapChessData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActAutoChessData_ActAutoChessTrapChessDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessTrapChessDataT(
    this.chessId(),
    this.identifier(),
    this.charId(),
    this.isGolden(),
    this.purchasePrice(),
    (this.status() !== null ? this.status()!.unpack() : null),
    this.upgradeChessId(),
    this.upgradeNum(),
    this.trapDuration(),
    this.effectId(),
    this.giveBondId(),
    this.givePowerId(),
    this.canGiveBond(),
    this.itemType()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessTrapChessDataT): void {
  _o.chessId = this.chessId();
  _o.identifier = this.identifier();
  _o.charId = this.charId();
  _o.isGolden = this.isGolden();
  _o.purchasePrice = this.purchasePrice();
  _o.status = (this.status() !== null ? this.status()!.unpack() : null);
  _o.upgradeChessId = this.upgradeChessId();
  _o.upgradeNum = this.upgradeNum();
  _o.trapDuration = this.trapDuration();
  _o.effectId = this.effectId();
  _o.giveBondId = this.giveBondId();
  _o.givePowerId = this.givePowerId();
  _o.canGiveBond = this.canGiveBond();
  _o.itemType = this.itemType();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessTrapChessDataT implements flatbuffers.IGeneratedObject {
constructor(
  public chessId: string|Uint8Array|null = null,
  public identifier: number = 0,
  public charId: string|Uint8Array|null = null,
  public isGolden: boolean = false,
  public purchasePrice: number = 0,
  public status: clz_Torappu_ActAutoChessData_AutoChessTrapChessStatusDataT|null = null,
  public upgradeChessId: string|Uint8Array|null = null,
  public upgradeNum: number = 0,
  public trapDuration: number = 0,
  public effectId: string|Uint8Array|null = null,
  public giveBondId: string|Uint8Array|null = null,
  public givePowerId: string|Uint8Array|null = null,
  public canGiveBond: boolean = false,
  public itemType: enum__Torappu_AutoChessItemType = enum__Torappu_AutoChessItemType.CHAR
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const chessId = (this.chessId !== null ? builder.createString(this.chessId!) : 0);
  const charId = (this.charId !== null ? builder.createString(this.charId!) : 0);
  const status = (this.status !== null ? this.status!.pack(builder) : 0);
  const upgradeChessId = (this.upgradeChessId !== null ? builder.createString(this.upgradeChessId!) : 0);
  const effectId = (this.effectId !== null ? builder.createString(this.effectId!) : 0);
  const giveBondId = (this.giveBondId !== null ? builder.createString(this.giveBondId!) : 0);
  const givePowerId = (this.givePowerId !== null ? builder.createString(this.givePowerId!) : 0);

  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.startclz_Torappu_ActAutoChessData_ActAutoChessTrapChessData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addChessId(builder, chessId);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addIdentifier(builder, this.identifier);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addCharId(builder, charId);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addIsGolden(builder, this.isGolden);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addPurchasePrice(builder, this.purchasePrice);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addStatus(builder, status);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addUpgradeChessId(builder, upgradeChessId);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addUpgradeNum(builder, this.upgradeNum);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addTrapDuration(builder, this.trapDuration);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addEffectId(builder, effectId);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addGiveBondId(builder, giveBondId);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addGivePowerId(builder, givePowerId);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addCanGiveBond(builder, this.canGiveBond);
  clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.addItemType(builder, this.itemType);

  return clz_Torappu_ActAutoChessData_ActAutoChessTrapChessData.endclz_Torappu_ActAutoChessData_ActAutoChessTrapChessData(builder);
}
}
