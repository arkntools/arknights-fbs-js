// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RecordRewardInfo, clz_Torappu_RecordRewardInfoT } from './clz-torappu-record-reward-info.js';


export class clz_Torappu_ZoneRecordData implements flatbuffers.IUnpackableObject<clz_Torappu_ZoneRecordDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ZoneRecordData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ZoneRecordData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ZoneRecordData):clz_Torappu_ZoneRecordData {
  return (obj || new clz_Torappu_ZoneRecordData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ZoneRecordData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ZoneRecordData):clz_Torappu_ZoneRecordData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ZoneRecordData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

recordId():string|null
recordId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recordId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

zoneId():string|null
zoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

recordTitleName():string|null
recordTitleName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recordTitleName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

preRecordId():string|null
preRecordId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preRecordId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeTitle1():string|null
nodeTitle1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeTitle1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeTitle2():string|null
nodeTitle2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeTitle2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewards(index: number, obj?:clz_Torappu_RecordRewardInfo):clz_Torappu_RecordRewardInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_RecordRewardInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ZoneRecordData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addRecordId(builder:flatbuffers.Builder, recordIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, recordIdOffset, 0);
}

static addZoneId(builder:flatbuffers.Builder, zoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, zoneIdOffset, 0);
}

static addRecordTitleName(builder:flatbuffers.Builder, recordTitleNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, recordTitleNameOffset, 0);
}

static addPreRecordId(builder:flatbuffers.Builder, preRecordIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, preRecordIdOffset, 0);
}

static addNodeTitle1(builder:flatbuffers.Builder, nodeTitle1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nodeTitle1Offset, 0);
}

static addNodeTitle2(builder:flatbuffers.Builder, nodeTitle2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(5, nodeTitle2Offset, 0);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, rewardsOffset, 0);
}

static createRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ZoneRecordData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ZoneRecordData(builder:flatbuffers.Builder, recordIdOffset:flatbuffers.Offset, zoneIdOffset:flatbuffers.Offset, recordTitleNameOffset:flatbuffers.Offset, preRecordIdOffset:flatbuffers.Offset, nodeTitle1Offset:flatbuffers.Offset, nodeTitle2Offset:flatbuffers.Offset, rewardsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ZoneRecordData.startclz_Torappu_ZoneRecordData(builder);
  clz_Torappu_ZoneRecordData.addRecordId(builder, recordIdOffset);
  clz_Torappu_ZoneRecordData.addZoneId(builder, zoneIdOffset);
  clz_Torappu_ZoneRecordData.addRecordTitleName(builder, recordTitleNameOffset);
  clz_Torappu_ZoneRecordData.addPreRecordId(builder, preRecordIdOffset);
  clz_Torappu_ZoneRecordData.addNodeTitle1(builder, nodeTitle1Offset);
  clz_Torappu_ZoneRecordData.addNodeTitle2(builder, nodeTitle2Offset);
  clz_Torappu_ZoneRecordData.addRewards(builder, rewardsOffset);
  return clz_Torappu_ZoneRecordData.endclz_Torappu_ZoneRecordData(builder);
}

unpack(): clz_Torappu_ZoneRecordDataT {
  return new clz_Torappu_ZoneRecordDataT(
    this.recordId(),
    this.zoneId(),
    this.recordTitleName(),
    this.preRecordId(),
    this.nodeTitle1(),
    this.nodeTitle2(),
    this.bb!.createObjList<clz_Torappu_RecordRewardInfo, clz_Torappu_RecordRewardInfoT>(this.rewards.bind(this), this.rewardsLength())
  );
}


unpackTo(_o: clz_Torappu_ZoneRecordDataT): void {
  _o.recordId = this.recordId();
  _o.zoneId = this.zoneId();
  _o.recordTitleName = this.recordTitleName();
  _o.preRecordId = this.preRecordId();
  _o.nodeTitle1 = this.nodeTitle1();
  _o.nodeTitle2 = this.nodeTitle2();
  _o.rewards = this.bb!.createObjList<clz_Torappu_RecordRewardInfo, clz_Torappu_RecordRewardInfoT>(this.rewards.bind(this), this.rewardsLength());
}
}

export class clz_Torappu_ZoneRecordDataT implements flatbuffers.IGeneratedObject {
constructor(
  public recordId: string|Uint8Array|null = null,
  public zoneId: string|Uint8Array|null = null,
  public recordTitleName: string|Uint8Array|null = null,
  public preRecordId: string|Uint8Array|null = null,
  public nodeTitle1: string|Uint8Array|null = null,
  public nodeTitle2: string|Uint8Array|null = null,
  public rewards: (clz_Torappu_RecordRewardInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const recordId = (this.recordId !== null ? builder.createString(this.recordId!) : 0);
  const zoneId = (this.zoneId !== null ? builder.createString(this.zoneId!) : 0);
  const recordTitleName = (this.recordTitleName !== null ? builder.createString(this.recordTitleName!) : 0);
  const preRecordId = (this.preRecordId !== null ? builder.createString(this.preRecordId!) : 0);
  const nodeTitle1 = (this.nodeTitle1 !== null ? builder.createString(this.nodeTitle1!) : 0);
  const nodeTitle2 = (this.nodeTitle2 !== null ? builder.createString(this.nodeTitle2!) : 0);
  const rewards = clz_Torappu_ZoneRecordData.createRewardsVector(builder, builder.createObjectOffsetList(this.rewards));

  return clz_Torappu_ZoneRecordData.createclz_Torappu_ZoneRecordData(builder,
    recordId,
    zoneId,
    recordTitleName,
    preRecordId,
    nodeTitle1,
    nodeTitle2,
    rewards
  );
}
}
