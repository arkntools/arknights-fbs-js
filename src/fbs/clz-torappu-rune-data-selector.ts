// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_BuildableType } from './enum--torappu-buildable-type.js';
import { enum__Torappu_ProfessionCategory } from './enum--torappu-profession-category.js';


export class clz_Torappu_RuneData_Selector implements flatbuffers.IUnpackableObject<clz_Torappu_RuneData_SelectorT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RuneData_Selector {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RuneData_Selector(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RuneData_Selector):clz_Torappu_RuneData_Selector {
  return (obj || new clz_Torappu_RuneData_Selector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RuneData_Selector(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RuneData_Selector):clz_Torappu_RuneData_Selector {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RuneData_Selector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

professionMask():enum__Torappu_ProfessionCategory {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ProfessionCategory.NONE;
}

buildableMask():enum__Torappu_BuildableType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuildableType.NONE;
}

charIdFilter(index: number):string
charIdFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
charIdFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

charIdFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enemyIdFilter(index: number):string
enemyIdFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enemyIdFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enemyIdFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enemyIdExcludeFilter(index: number):string
enemyIdExcludeFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enemyIdExcludeFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enemyIdExcludeFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

skillIdFilter(index: number):string
skillIdFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
skillIdFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

skillIdFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tileKeyFilter(index: number):string
tileKeyFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tileKeyFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tileKeyFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

groupTagFilter(index: number):string
groupTagFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
groupTagFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

groupTagFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

filterTagFilter(index: number):string
filterTagFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
filterTagFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

filterTagFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

subProfessionExcludeFilter(index: number):string
subProfessionExcludeFilter(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
subProfessionExcludeFilter(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

subProfessionExcludeFilterLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RuneData_Selector(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addProfessionMask(builder:flatbuffers.Builder, professionMask:enum__Torappu_ProfessionCategory) {
  builder.addFieldInt32(0, professionMask, enum__Torappu_ProfessionCategory.NONE);
}

static addBuildableMask(builder:flatbuffers.Builder, buildableMask:enum__Torappu_BuildableType) {
  builder.addFieldInt32(1, buildableMask, enum__Torappu_BuildableType.NONE);
}

static addCharIdFilter(builder:flatbuffers.Builder, charIdFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, charIdFilterOffset, 0);
}

static createCharIdFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharIdFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyIdFilter(builder:flatbuffers.Builder, enemyIdFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, enemyIdFilterOffset, 0);
}

static createEnemyIdFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyIdFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyIdExcludeFilter(builder:flatbuffers.Builder, enemyIdExcludeFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, enemyIdExcludeFilterOffset, 0);
}

static createEnemyIdExcludeFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyIdExcludeFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkillIdFilter(builder:flatbuffers.Builder, skillIdFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, skillIdFilterOffset, 0);
}

static createSkillIdFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSkillIdFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTileKeyFilter(builder:flatbuffers.Builder, tileKeyFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tileKeyFilterOffset, 0);
}

static createTileKeyFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTileKeyFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGroupTagFilter(builder:flatbuffers.Builder, groupTagFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, groupTagFilterOffset, 0);
}

static createGroupTagFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupTagFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFilterTagFilter(builder:flatbuffers.Builder, filterTagFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, filterTagFilterOffset, 0);
}

static createFilterTagFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFilterTagFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSubProfessionExcludeFilter(builder:flatbuffers.Builder, subProfessionExcludeFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, subProfessionExcludeFilterOffset, 0);
}

static createSubProfessionExcludeFilterVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubProfessionExcludeFilterVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_RuneData_Selector(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RuneData_Selector(builder:flatbuffers.Builder, professionMask:enum__Torappu_ProfessionCategory, buildableMask:enum__Torappu_BuildableType, charIdFilterOffset:flatbuffers.Offset, enemyIdFilterOffset:flatbuffers.Offset, enemyIdExcludeFilterOffset:flatbuffers.Offset, skillIdFilterOffset:flatbuffers.Offset, tileKeyFilterOffset:flatbuffers.Offset, groupTagFilterOffset:flatbuffers.Offset, filterTagFilterOffset:flatbuffers.Offset, subProfessionExcludeFilterOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RuneData_Selector.startclz_Torappu_RuneData_Selector(builder);
  clz_Torappu_RuneData_Selector.addProfessionMask(builder, professionMask);
  clz_Torappu_RuneData_Selector.addBuildableMask(builder, buildableMask);
  clz_Torappu_RuneData_Selector.addCharIdFilter(builder, charIdFilterOffset);
  clz_Torappu_RuneData_Selector.addEnemyIdFilter(builder, enemyIdFilterOffset);
  clz_Torappu_RuneData_Selector.addEnemyIdExcludeFilter(builder, enemyIdExcludeFilterOffset);
  clz_Torappu_RuneData_Selector.addSkillIdFilter(builder, skillIdFilterOffset);
  clz_Torappu_RuneData_Selector.addTileKeyFilter(builder, tileKeyFilterOffset);
  clz_Torappu_RuneData_Selector.addGroupTagFilter(builder, groupTagFilterOffset);
  clz_Torappu_RuneData_Selector.addFilterTagFilter(builder, filterTagFilterOffset);
  clz_Torappu_RuneData_Selector.addSubProfessionExcludeFilter(builder, subProfessionExcludeFilterOffset);
  return clz_Torappu_RuneData_Selector.endclz_Torappu_RuneData_Selector(builder);
}

unpack(): clz_Torappu_RuneData_SelectorT {
  return new clz_Torappu_RuneData_SelectorT(
    this.professionMask(),
    this.buildableMask(),
    this.bb!.createScalarList<string>(this.charIdFilter.bind(this), this.charIdFilterLength()),
    this.bb!.createScalarList<string>(this.enemyIdFilter.bind(this), this.enemyIdFilterLength()),
    this.bb!.createScalarList<string>(this.enemyIdExcludeFilter.bind(this), this.enemyIdExcludeFilterLength()),
    this.bb!.createScalarList<string>(this.skillIdFilter.bind(this), this.skillIdFilterLength()),
    this.bb!.createScalarList<string>(this.tileKeyFilter.bind(this), this.tileKeyFilterLength()),
    this.bb!.createScalarList<string>(this.groupTagFilter.bind(this), this.groupTagFilterLength()),
    this.bb!.createScalarList<string>(this.filterTagFilter.bind(this), this.filterTagFilterLength()),
    this.bb!.createScalarList<string>(this.subProfessionExcludeFilter.bind(this), this.subProfessionExcludeFilterLength())
  );
}


unpackTo(_o: clz_Torappu_RuneData_SelectorT): void {
  _o.professionMask = this.professionMask();
  _o.buildableMask = this.buildableMask();
  _o.charIdFilter = this.bb!.createScalarList<string>(this.charIdFilter.bind(this), this.charIdFilterLength());
  _o.enemyIdFilter = this.bb!.createScalarList<string>(this.enemyIdFilter.bind(this), this.enemyIdFilterLength());
  _o.enemyIdExcludeFilter = this.bb!.createScalarList<string>(this.enemyIdExcludeFilter.bind(this), this.enemyIdExcludeFilterLength());
  _o.skillIdFilter = this.bb!.createScalarList<string>(this.skillIdFilter.bind(this), this.skillIdFilterLength());
  _o.tileKeyFilter = this.bb!.createScalarList<string>(this.tileKeyFilter.bind(this), this.tileKeyFilterLength());
  _o.groupTagFilter = this.bb!.createScalarList<string>(this.groupTagFilter.bind(this), this.groupTagFilterLength());
  _o.filterTagFilter = this.bb!.createScalarList<string>(this.filterTagFilter.bind(this), this.filterTagFilterLength());
  _o.subProfessionExcludeFilter = this.bb!.createScalarList<string>(this.subProfessionExcludeFilter.bind(this), this.subProfessionExcludeFilterLength());
}
}

export class clz_Torappu_RuneData_SelectorT implements flatbuffers.IGeneratedObject {
constructor(
  public professionMask: enum__Torappu_ProfessionCategory = enum__Torappu_ProfessionCategory.NONE,
  public buildableMask: enum__Torappu_BuildableType = enum__Torappu_BuildableType.NONE,
  public charIdFilter: (string)[] = [],
  public enemyIdFilter: (string)[] = [],
  public enemyIdExcludeFilter: (string)[] = [],
  public skillIdFilter: (string)[] = [],
  public tileKeyFilter: (string)[] = [],
  public groupTagFilter: (string)[] = [],
  public filterTagFilter: (string)[] = [],
  public subProfessionExcludeFilter: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const charIdFilter = clz_Torappu_RuneData_Selector.createCharIdFilterVector(builder, builder.createObjectOffsetList(this.charIdFilter));
  const enemyIdFilter = clz_Torappu_RuneData_Selector.createEnemyIdFilterVector(builder, builder.createObjectOffsetList(this.enemyIdFilter));
  const enemyIdExcludeFilter = clz_Torappu_RuneData_Selector.createEnemyIdExcludeFilterVector(builder, builder.createObjectOffsetList(this.enemyIdExcludeFilter));
  const skillIdFilter = clz_Torappu_RuneData_Selector.createSkillIdFilterVector(builder, builder.createObjectOffsetList(this.skillIdFilter));
  const tileKeyFilter = clz_Torappu_RuneData_Selector.createTileKeyFilterVector(builder, builder.createObjectOffsetList(this.tileKeyFilter));
  const groupTagFilter = clz_Torappu_RuneData_Selector.createGroupTagFilterVector(builder, builder.createObjectOffsetList(this.groupTagFilter));
  const filterTagFilter = clz_Torappu_RuneData_Selector.createFilterTagFilterVector(builder, builder.createObjectOffsetList(this.filterTagFilter));
  const subProfessionExcludeFilter = clz_Torappu_RuneData_Selector.createSubProfessionExcludeFilterVector(builder, builder.createObjectOffsetList(this.subProfessionExcludeFilter));

  return clz_Torappu_RuneData_Selector.createclz_Torappu_RuneData_Selector(builder,
    this.professionMask,
    this.buildableMask,
    charIdFilter,
    enemyIdFilter,
    enemyIdExcludeFilter,
    skillIdFilter,
    tileKeyFilter,
    groupTagFilter,
    filterTagFilter,
    subProfessionExcludeFilter
  );
}
}
