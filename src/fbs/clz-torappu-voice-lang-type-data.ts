// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_VoiceLangGroupType } from './enum--torappu-voice-lang-group-type.js';


export class clz_Torappu_VoiceLangTypeData implements flatbuffers.IUnpackableObject<clz_Torappu_VoiceLangTypeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_VoiceLangTypeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_VoiceLangTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangTypeData):clz_Torappu_VoiceLangTypeData {
  return (obj || new clz_Torappu_VoiceLangTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_VoiceLangTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangTypeData):clz_Torappu_VoiceLangTypeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_VoiceLangTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupType():enum__Torappu_VoiceLangGroupType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_VoiceLangGroupType.NONE;
}

static startclz_Torappu_VoiceLangTypeData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addGroupType(builder:flatbuffers.Builder, groupType:enum__Torappu_VoiceLangGroupType) {
  builder.addFieldInt32(1, groupType, enum__Torappu_VoiceLangGroupType.NONE);
}

static endclz_Torappu_VoiceLangTypeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_VoiceLangTypeData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, groupType:enum__Torappu_VoiceLangGroupType):flatbuffers.Offset {
  clz_Torappu_VoiceLangTypeData.startclz_Torappu_VoiceLangTypeData(builder);
  clz_Torappu_VoiceLangTypeData.addName(builder, nameOffset);
  clz_Torappu_VoiceLangTypeData.addGroupType(builder, groupType);
  return clz_Torappu_VoiceLangTypeData.endclz_Torappu_VoiceLangTypeData(builder);
}

unpack(): clz_Torappu_VoiceLangTypeDataT {
  return new clz_Torappu_VoiceLangTypeDataT(
    this.name(),
    this.groupType()
  );
}


unpackTo(_o: clz_Torappu_VoiceLangTypeDataT): void {
  _o.name = this.name();
  _o.groupType = this.groupType();
}
}

export class clz_Torappu_VoiceLangTypeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public groupType: enum__Torappu_VoiceLangGroupType = enum__Torappu_VoiceLangGroupType.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return clz_Torappu_VoiceLangTypeData.createclz_Torappu_VoiceLangTypeData(builder,
    name,
    this.groupType
  );
}
}
