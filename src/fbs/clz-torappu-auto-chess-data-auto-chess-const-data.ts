// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_PingCond, clz_Torappu_PingCondT } from './clz-torappu-ping-cond.js';


export class clz_Torappu_AutoChessData_AutoChessConstData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessConstData):clz_Torappu_AutoChessData_AutoChessConstData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessConstData):clz_Torappu_AutoChessData_AutoChessConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pingConds(index: number, obj?:clz_Torappu_PingCond):clz_Torappu_PingCond|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_PingCond()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pingCondsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

matchingTipRotateInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minReplacedEnemyCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxReplacedEnemyCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

templateEnemyNormal():string|null
templateEnemyNormal(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemyNormal(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemyElite():string|null
templateEnemyElite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemyElite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemySpecial():string|null
templateEnemySpecial(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemySpecial(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemyNormalFly():string|null
templateEnemyNormalFly(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemyNormalFly(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemyEliteFly():string|null
templateEnemyEliteFly(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemyEliteFly(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemySpecialFly():string|null
templateEnemySpecialFly(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemySpecialFly(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemyToken():string|null
templateEnemyToken(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemyToken(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

templateEnemyTokenFly():string|null
templateEnemyTokenFly(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateEnemyTokenFly(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxLevelCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

specialEnemyNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemyTypeIdentifierToFillRandom():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemyMaxHpFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

enemyAtkFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

enemyDefFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

enemyMagicResistanceFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

specialPhaseStayTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hintTimeSpecialPhase():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hintTimeNormalPhase():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hintTimeFightPhase():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hintTimeDotPhase():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

invitationSendCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

discountColor():string|null
discountColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
discountColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

premiumColor():string|null
premiumColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
premiumColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

normalColor():string|null
normalColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
normalColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

reportMaxNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

chatCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

chatTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

broadcastBeginDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

noMoneyTipsBand(index: number):string
noMoneyTipsBand(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
noMoneyTipsBand(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

noMoneyTipsBandLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bossTrailerStartRound():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

singleClosureStayTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

matchTimeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_AutoChessData_AutoChessConstData(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static addPingConds(builder:flatbuffers.Builder, pingCondsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pingCondsOffset, 0);
}

static createPingCondsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPingCondsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMatchingTipRotateInterval(builder:flatbuffers.Builder, matchingTipRotateInterval:number) {
  builder.addFieldFloat32(1, matchingTipRotateInterval, 0.0);
}

static addMinReplacedEnemyCount(builder:flatbuffers.Builder, minReplacedEnemyCount:number) {
  builder.addFieldInt32(2, minReplacedEnemyCount, 0);
}

static addMaxReplacedEnemyCount(builder:flatbuffers.Builder, maxReplacedEnemyCount:number) {
  builder.addFieldInt32(3, maxReplacedEnemyCount, 0);
}

static addTemplateEnemyNormal(builder:flatbuffers.Builder, templateEnemyNormalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, templateEnemyNormalOffset, 0);
}

static addTemplateEnemyElite(builder:flatbuffers.Builder, templateEnemyEliteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, templateEnemyEliteOffset, 0);
}

static addTemplateEnemySpecial(builder:flatbuffers.Builder, templateEnemySpecialOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, templateEnemySpecialOffset, 0);
}

static addTemplateEnemyNormalFly(builder:flatbuffers.Builder, templateEnemyNormalFlyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, templateEnemyNormalFlyOffset, 0);
}

static addTemplateEnemyEliteFly(builder:flatbuffers.Builder, templateEnemyEliteFlyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, templateEnemyEliteFlyOffset, 0);
}

static addTemplateEnemySpecialFly(builder:flatbuffers.Builder, templateEnemySpecialFlyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, templateEnemySpecialFlyOffset, 0);
}

static addTemplateEnemyToken(builder:flatbuffers.Builder, templateEnemyTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, templateEnemyTokenOffset, 0);
}

static addTemplateEnemyTokenFly(builder:flatbuffers.Builder, templateEnemyTokenFlyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, templateEnemyTokenFlyOffset, 0);
}

static addMaxLevelCnt(builder:flatbuffers.Builder, maxLevelCnt:number) {
  builder.addFieldInt32(12, maxLevelCnt, 0);
}

static addSpecialEnemyNum(builder:flatbuffers.Builder, specialEnemyNum:number) {
  builder.addFieldInt32(13, specialEnemyNum, 0);
}

static addEnemyTypeIdentifierToFillRandom(builder:flatbuffers.Builder, enemyTypeIdentifierToFillRandom:number) {
  builder.addFieldInt32(14, enemyTypeIdentifierToFillRandom, 0);
}

static addEnemyMaxHpFactor(builder:flatbuffers.Builder, enemyMaxHpFactor:number) {
  builder.addFieldFloat32(15, enemyMaxHpFactor, 0.0);
}

static addEnemyAtkFactor(builder:flatbuffers.Builder, enemyAtkFactor:number) {
  builder.addFieldFloat32(16, enemyAtkFactor, 0.0);
}

static addEnemyDefFactor(builder:flatbuffers.Builder, enemyDefFactor:number) {
  builder.addFieldFloat32(17, enemyDefFactor, 0.0);
}

static addEnemyMagicResistanceFactor(builder:flatbuffers.Builder, enemyMagicResistanceFactor:number) {
  builder.addFieldFloat32(18, enemyMagicResistanceFactor, 0.0);
}

static addSpecialPhaseStayTime(builder:flatbuffers.Builder, specialPhaseStayTime:number) {
  builder.addFieldInt32(19, specialPhaseStayTime, 0);
}

static addHintTimeSpecialPhase(builder:flatbuffers.Builder, hintTimeSpecialPhase:number) {
  builder.addFieldInt32(20, hintTimeSpecialPhase, 0);
}

static addHintTimeNormalPhase(builder:flatbuffers.Builder, hintTimeNormalPhase:number) {
  builder.addFieldInt32(21, hintTimeNormalPhase, 0);
}

static addHintTimeFightPhase(builder:flatbuffers.Builder, hintTimeFightPhase:number) {
  builder.addFieldInt32(22, hintTimeFightPhase, 0);
}

static addHintTimeDotPhase(builder:flatbuffers.Builder, hintTimeDotPhase:number) {
  builder.addFieldInt32(23, hintTimeDotPhase, 0);
}

static addInvitationSendCd(builder:flatbuffers.Builder, invitationSendCd:number) {
  builder.addFieldInt32(24, invitationSendCd, 0);
}

static addDiscountColor(builder:flatbuffers.Builder, discountColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, discountColorOffset, 0);
}

static addPremiumColor(builder:flatbuffers.Builder, premiumColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, premiumColorOffset, 0);
}

static addNormalColor(builder:flatbuffers.Builder, normalColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, normalColorOffset, 0);
}

static addReportMaxNum(builder:flatbuffers.Builder, reportMaxNum:number) {
  builder.addFieldInt32(28, reportMaxNum, 0);
}

static addChatCd(builder:flatbuffers.Builder, chatCd:number) {
  builder.addFieldFloat32(29, chatCd, 0.0);
}

static addChatTime(builder:flatbuffers.Builder, chatTime:number) {
  builder.addFieldFloat32(30, chatTime, 0.0);
}

static addBroadcastBeginDelay(builder:flatbuffers.Builder, broadcastBeginDelay:number) {
  builder.addFieldFloat32(31, broadcastBeginDelay, 0.0);
}

static addNoMoneyTipsBand(builder:flatbuffers.Builder, noMoneyTipsBandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, noMoneyTipsBandOffset, 0);
}

static createNoMoneyTipsBandVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNoMoneyTipsBandVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBossTrailerStartRound(builder:flatbuffers.Builder, bossTrailerStartRound:number) {
  builder.addFieldInt32(33, bossTrailerStartRound, 0);
}

static addSingleClosureStayTime(builder:flatbuffers.Builder, singleClosureStayTime:number) {
  builder.addFieldFloat32(34, singleClosureStayTime, 0.0);
}

static addMatchTimeMax(builder:flatbuffers.Builder, matchTimeMax:number) {
  builder.addFieldFloat32(35, matchTimeMax, 0.0);
}

static endclz_Torappu_AutoChessData_AutoChessConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessConstData(builder:flatbuffers.Builder, pingCondsOffset:flatbuffers.Offset, matchingTipRotateInterval:number, minReplacedEnemyCount:number, maxReplacedEnemyCount:number, templateEnemyNormalOffset:flatbuffers.Offset, templateEnemyEliteOffset:flatbuffers.Offset, templateEnemySpecialOffset:flatbuffers.Offset, templateEnemyNormalFlyOffset:flatbuffers.Offset, templateEnemyEliteFlyOffset:flatbuffers.Offset, templateEnemySpecialFlyOffset:flatbuffers.Offset, templateEnemyTokenOffset:flatbuffers.Offset, templateEnemyTokenFlyOffset:flatbuffers.Offset, maxLevelCnt:number, specialEnemyNum:number, enemyTypeIdentifierToFillRandom:number, enemyMaxHpFactor:number, enemyAtkFactor:number, enemyDefFactor:number, enemyMagicResistanceFactor:number, specialPhaseStayTime:number, hintTimeSpecialPhase:number, hintTimeNormalPhase:number, hintTimeFightPhase:number, hintTimeDotPhase:number, invitationSendCd:number, discountColorOffset:flatbuffers.Offset, premiumColorOffset:flatbuffers.Offset, normalColorOffset:flatbuffers.Offset, reportMaxNum:number, chatCd:number, chatTime:number, broadcastBeginDelay:number, noMoneyTipsBandOffset:flatbuffers.Offset, bossTrailerStartRound:number, singleClosureStayTime:number, matchTimeMax:number):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessConstData.startclz_Torappu_AutoChessData_AutoChessConstData(builder);
  clz_Torappu_AutoChessData_AutoChessConstData.addPingConds(builder, pingCondsOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addMatchingTipRotateInterval(builder, matchingTipRotateInterval);
  clz_Torappu_AutoChessData_AutoChessConstData.addMinReplacedEnemyCount(builder, minReplacedEnemyCount);
  clz_Torappu_AutoChessData_AutoChessConstData.addMaxReplacedEnemyCount(builder, maxReplacedEnemyCount);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemyNormal(builder, templateEnemyNormalOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemyElite(builder, templateEnemyEliteOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemySpecial(builder, templateEnemySpecialOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemyNormalFly(builder, templateEnemyNormalFlyOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemyEliteFly(builder, templateEnemyEliteFlyOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemySpecialFly(builder, templateEnemySpecialFlyOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemyToken(builder, templateEnemyTokenOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addTemplateEnemyTokenFly(builder, templateEnemyTokenFlyOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addMaxLevelCnt(builder, maxLevelCnt);
  clz_Torappu_AutoChessData_AutoChessConstData.addSpecialEnemyNum(builder, specialEnemyNum);
  clz_Torappu_AutoChessData_AutoChessConstData.addEnemyTypeIdentifierToFillRandom(builder, enemyTypeIdentifierToFillRandom);
  clz_Torappu_AutoChessData_AutoChessConstData.addEnemyMaxHpFactor(builder, enemyMaxHpFactor);
  clz_Torappu_AutoChessData_AutoChessConstData.addEnemyAtkFactor(builder, enemyAtkFactor);
  clz_Torappu_AutoChessData_AutoChessConstData.addEnemyDefFactor(builder, enemyDefFactor);
  clz_Torappu_AutoChessData_AutoChessConstData.addEnemyMagicResistanceFactor(builder, enemyMagicResistanceFactor);
  clz_Torappu_AutoChessData_AutoChessConstData.addSpecialPhaseStayTime(builder, specialPhaseStayTime);
  clz_Torappu_AutoChessData_AutoChessConstData.addHintTimeSpecialPhase(builder, hintTimeSpecialPhase);
  clz_Torappu_AutoChessData_AutoChessConstData.addHintTimeNormalPhase(builder, hintTimeNormalPhase);
  clz_Torappu_AutoChessData_AutoChessConstData.addHintTimeFightPhase(builder, hintTimeFightPhase);
  clz_Torappu_AutoChessData_AutoChessConstData.addHintTimeDotPhase(builder, hintTimeDotPhase);
  clz_Torappu_AutoChessData_AutoChessConstData.addInvitationSendCd(builder, invitationSendCd);
  clz_Torappu_AutoChessData_AutoChessConstData.addDiscountColor(builder, discountColorOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addPremiumColor(builder, premiumColorOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addNormalColor(builder, normalColorOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addReportMaxNum(builder, reportMaxNum);
  clz_Torappu_AutoChessData_AutoChessConstData.addChatCd(builder, chatCd);
  clz_Torappu_AutoChessData_AutoChessConstData.addChatTime(builder, chatTime);
  clz_Torappu_AutoChessData_AutoChessConstData.addBroadcastBeginDelay(builder, broadcastBeginDelay);
  clz_Torappu_AutoChessData_AutoChessConstData.addNoMoneyTipsBand(builder, noMoneyTipsBandOffset);
  clz_Torappu_AutoChessData_AutoChessConstData.addBossTrailerStartRound(builder, bossTrailerStartRound);
  clz_Torappu_AutoChessData_AutoChessConstData.addSingleClosureStayTime(builder, singleClosureStayTime);
  clz_Torappu_AutoChessData_AutoChessConstData.addMatchTimeMax(builder, matchTimeMax);
  return clz_Torappu_AutoChessData_AutoChessConstData.endclz_Torappu_AutoChessData_AutoChessConstData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessConstDataT {
  return new clz_Torappu_AutoChessData_AutoChessConstDataT(
    this.bb!.createObjList<clz_Torappu_PingCond, clz_Torappu_PingCondT>(this.pingConds.bind(this), this.pingCondsLength()),
    this.matchingTipRotateInterval(),
    this.minReplacedEnemyCount(),
    this.maxReplacedEnemyCount(),
    this.templateEnemyNormal(),
    this.templateEnemyElite(),
    this.templateEnemySpecial(),
    this.templateEnemyNormalFly(),
    this.templateEnemyEliteFly(),
    this.templateEnemySpecialFly(),
    this.templateEnemyToken(),
    this.templateEnemyTokenFly(),
    this.maxLevelCnt(),
    this.specialEnemyNum(),
    this.enemyTypeIdentifierToFillRandom(),
    this.enemyMaxHpFactor(),
    this.enemyAtkFactor(),
    this.enemyDefFactor(),
    this.enemyMagicResistanceFactor(),
    this.specialPhaseStayTime(),
    this.hintTimeSpecialPhase(),
    this.hintTimeNormalPhase(),
    this.hintTimeFightPhase(),
    this.hintTimeDotPhase(),
    this.invitationSendCd(),
    this.discountColor(),
    this.premiumColor(),
    this.normalColor(),
    this.reportMaxNum(),
    this.chatCd(),
    this.chatTime(),
    this.broadcastBeginDelay(),
    this.bb!.createScalarList<string>(this.noMoneyTipsBand.bind(this), this.noMoneyTipsBandLength()),
    this.bossTrailerStartRound(),
    this.singleClosureStayTime(),
    this.matchTimeMax()
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessConstDataT): void {
  _o.pingConds = this.bb!.createObjList<clz_Torappu_PingCond, clz_Torappu_PingCondT>(this.pingConds.bind(this), this.pingCondsLength());
  _o.matchingTipRotateInterval = this.matchingTipRotateInterval();
  _o.minReplacedEnemyCount = this.minReplacedEnemyCount();
  _o.maxReplacedEnemyCount = this.maxReplacedEnemyCount();
  _o.templateEnemyNormal = this.templateEnemyNormal();
  _o.templateEnemyElite = this.templateEnemyElite();
  _o.templateEnemySpecial = this.templateEnemySpecial();
  _o.templateEnemyNormalFly = this.templateEnemyNormalFly();
  _o.templateEnemyEliteFly = this.templateEnemyEliteFly();
  _o.templateEnemySpecialFly = this.templateEnemySpecialFly();
  _o.templateEnemyToken = this.templateEnemyToken();
  _o.templateEnemyTokenFly = this.templateEnemyTokenFly();
  _o.maxLevelCnt = this.maxLevelCnt();
  _o.specialEnemyNum = this.specialEnemyNum();
  _o.enemyTypeIdentifierToFillRandom = this.enemyTypeIdentifierToFillRandom();
  _o.enemyMaxHpFactor = this.enemyMaxHpFactor();
  _o.enemyAtkFactor = this.enemyAtkFactor();
  _o.enemyDefFactor = this.enemyDefFactor();
  _o.enemyMagicResistanceFactor = this.enemyMagicResistanceFactor();
  _o.specialPhaseStayTime = this.specialPhaseStayTime();
  _o.hintTimeSpecialPhase = this.hintTimeSpecialPhase();
  _o.hintTimeNormalPhase = this.hintTimeNormalPhase();
  _o.hintTimeFightPhase = this.hintTimeFightPhase();
  _o.hintTimeDotPhase = this.hintTimeDotPhase();
  _o.invitationSendCd = this.invitationSendCd();
  _o.discountColor = this.discountColor();
  _o.premiumColor = this.premiumColor();
  _o.normalColor = this.normalColor();
  _o.reportMaxNum = this.reportMaxNum();
  _o.chatCd = this.chatCd();
  _o.chatTime = this.chatTime();
  _o.broadcastBeginDelay = this.broadcastBeginDelay();
  _o.noMoneyTipsBand = this.bb!.createScalarList<string>(this.noMoneyTipsBand.bind(this), this.noMoneyTipsBandLength());
  _o.bossTrailerStartRound = this.bossTrailerStartRound();
  _o.singleClosureStayTime = this.singleClosureStayTime();
  _o.matchTimeMax = this.matchTimeMax();
}
}

export class clz_Torappu_AutoChessData_AutoChessConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public pingConds: (clz_Torappu_PingCondT)[] = [],
  public matchingTipRotateInterval: number = 0.0,
  public minReplacedEnemyCount: number = 0,
  public maxReplacedEnemyCount: number = 0,
  public templateEnemyNormal: string|Uint8Array|null = null,
  public templateEnemyElite: string|Uint8Array|null = null,
  public templateEnemySpecial: string|Uint8Array|null = null,
  public templateEnemyNormalFly: string|Uint8Array|null = null,
  public templateEnemyEliteFly: string|Uint8Array|null = null,
  public templateEnemySpecialFly: string|Uint8Array|null = null,
  public templateEnemyToken: string|Uint8Array|null = null,
  public templateEnemyTokenFly: string|Uint8Array|null = null,
  public maxLevelCnt: number = 0,
  public specialEnemyNum: number = 0,
  public enemyTypeIdentifierToFillRandom: number = 0,
  public enemyMaxHpFactor: number = 0.0,
  public enemyAtkFactor: number = 0.0,
  public enemyDefFactor: number = 0.0,
  public enemyMagicResistanceFactor: number = 0.0,
  public specialPhaseStayTime: number = 0,
  public hintTimeSpecialPhase: number = 0,
  public hintTimeNormalPhase: number = 0,
  public hintTimeFightPhase: number = 0,
  public hintTimeDotPhase: number = 0,
  public invitationSendCd: number = 0,
  public discountColor: string|Uint8Array|null = null,
  public premiumColor: string|Uint8Array|null = null,
  public normalColor: string|Uint8Array|null = null,
  public reportMaxNum: number = 0,
  public chatCd: number = 0.0,
  public chatTime: number = 0.0,
  public broadcastBeginDelay: number = 0.0,
  public noMoneyTipsBand: (string)[] = [],
  public bossTrailerStartRound: number = 0,
  public singleClosureStayTime: number = 0.0,
  public matchTimeMax: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pingConds = clz_Torappu_AutoChessData_AutoChessConstData.createPingCondsVector(builder, builder.createObjectOffsetList(this.pingConds));
  const templateEnemyNormal = (this.templateEnemyNormal !== null ? builder.createString(this.templateEnemyNormal!) : 0);
  const templateEnemyElite = (this.templateEnemyElite !== null ? builder.createString(this.templateEnemyElite!) : 0);
  const templateEnemySpecial = (this.templateEnemySpecial !== null ? builder.createString(this.templateEnemySpecial!) : 0);
  const templateEnemyNormalFly = (this.templateEnemyNormalFly !== null ? builder.createString(this.templateEnemyNormalFly!) : 0);
  const templateEnemyEliteFly = (this.templateEnemyEliteFly !== null ? builder.createString(this.templateEnemyEliteFly!) : 0);
  const templateEnemySpecialFly = (this.templateEnemySpecialFly !== null ? builder.createString(this.templateEnemySpecialFly!) : 0);
  const templateEnemyToken = (this.templateEnemyToken !== null ? builder.createString(this.templateEnemyToken!) : 0);
  const templateEnemyTokenFly = (this.templateEnemyTokenFly !== null ? builder.createString(this.templateEnemyTokenFly!) : 0);
  const discountColor = (this.discountColor !== null ? builder.createString(this.discountColor!) : 0);
  const premiumColor = (this.premiumColor !== null ? builder.createString(this.premiumColor!) : 0);
  const normalColor = (this.normalColor !== null ? builder.createString(this.normalColor!) : 0);
  const noMoneyTipsBand = clz_Torappu_AutoChessData_AutoChessConstData.createNoMoneyTipsBandVector(builder, builder.createObjectOffsetList(this.noMoneyTipsBand));

  return clz_Torappu_AutoChessData_AutoChessConstData.createclz_Torappu_AutoChessData_AutoChessConstData(builder,
    pingConds,
    this.matchingTipRotateInterval,
    this.minReplacedEnemyCount,
    this.maxReplacedEnemyCount,
    templateEnemyNormal,
    templateEnemyElite,
    templateEnemySpecial,
    templateEnemyNormalFly,
    templateEnemyEliteFly,
    templateEnemySpecialFly,
    templateEnemyToken,
    templateEnemyTokenFly,
    this.maxLevelCnt,
    this.specialEnemyNum,
    this.enemyTypeIdentifierToFillRandom,
    this.enemyMaxHpFactor,
    this.enemyAtkFactor,
    this.enemyDefFactor,
    this.enemyMagicResistanceFactor,
    this.specialPhaseStayTime,
    this.hintTimeSpecialPhase,
    this.hintTimeNormalPhase,
    this.hintTimeFightPhase,
    this.hintTimeDotPhase,
    this.invitationSendCd,
    discountColor,
    premiumColor,
    normalColor,
    this.reportMaxNum,
    this.chatCd,
    this.chatTime,
    this.broadcastBeginDelay,
    noMoneyTipsBand,
    this.bossTrailerStartRound,
    this.singleClosureStayTime,
    this.matchTimeMax
  );
}
}
