// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_MiniActTrialData_RuleData, clz_Torappu_MiniActTrialData_RuleDataT } from './clz-torappu-mini-act-trial-data-rule-data.js';
import { dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData, dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT } from './dict--string--clz-torappu-mini-act-trial-data-mini-act-trial-single-data.js';


export class clz_Torappu_MiniActTrialData implements flatbuffers.IUnpackableObject<clz_Torappu_MiniActTrialDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MiniActTrialData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MiniActTrialData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MiniActTrialData):clz_Torappu_MiniActTrialData {
  return (obj || new clz_Torappu_MiniActTrialData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MiniActTrialData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MiniActTrialData):clz_Torappu_MiniActTrialData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MiniActTrialData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

preShowDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ruleDataList(index: number, obj?:clz_Torappu_MiniActTrialData_RuleData):clz_Torappu_MiniActTrialData_RuleData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_MiniActTrialData_RuleData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ruleDataListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

miniActTrialDataMap(index: number, obj?:dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData):dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

miniActTrialDataMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_MiniActTrialData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPreShowDays(builder:flatbuffers.Builder, preShowDays:number) {
  builder.addFieldInt32(0, preShowDays, 0);
}

static addRuleDataList(builder:flatbuffers.Builder, ruleDataListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ruleDataListOffset, 0);
}

static createRuleDataListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRuleDataListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMiniActTrialDataMap(builder:flatbuffers.Builder, miniActTrialDataMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, miniActTrialDataMapOffset, 0);
}

static createMiniActTrialDataMapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMiniActTrialDataMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_MiniActTrialData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MiniActTrialData(builder:flatbuffers.Builder, preShowDays:number, ruleDataListOffset:flatbuffers.Offset, miniActTrialDataMapOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_MiniActTrialData.startclz_Torappu_MiniActTrialData(builder);
  clz_Torappu_MiniActTrialData.addPreShowDays(builder, preShowDays);
  clz_Torappu_MiniActTrialData.addRuleDataList(builder, ruleDataListOffset);
  clz_Torappu_MiniActTrialData.addMiniActTrialDataMap(builder, miniActTrialDataMapOffset);
  return clz_Torappu_MiniActTrialData.endclz_Torappu_MiniActTrialData(builder);
}

unpack(): clz_Torappu_MiniActTrialDataT {
  return new clz_Torappu_MiniActTrialDataT(
    this.preShowDays(),
    this.bb!.createObjList<clz_Torappu_MiniActTrialData_RuleData, clz_Torappu_MiniActTrialData_RuleDataT>(this.ruleDataList.bind(this), this.ruleDataListLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData, dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT>(this.miniActTrialDataMap.bind(this), this.miniActTrialDataMapLength())
  );
}


unpackTo(_o: clz_Torappu_MiniActTrialDataT): void {
  _o.preShowDays = this.preShowDays();
  _o.ruleDataList = this.bb!.createObjList<clz_Torappu_MiniActTrialData_RuleData, clz_Torappu_MiniActTrialData_RuleDataT>(this.ruleDataList.bind(this), this.ruleDataListLength());
  _o.miniActTrialDataMap = this.bb!.createObjList<dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData, dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT>(this.miniActTrialDataMap.bind(this), this.miniActTrialDataMapLength());
}
}

export class clz_Torappu_MiniActTrialDataT implements flatbuffers.IGeneratedObject {
constructor(
  public preShowDays: number = 0,
  public ruleDataList: (clz_Torappu_MiniActTrialData_RuleDataT)[] = [],
  public miniActTrialDataMap: (dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ruleDataList = clz_Torappu_MiniActTrialData.createRuleDataListVector(builder, builder.createObjectOffsetList(this.ruleDataList));
  const miniActTrialDataMap = clz_Torappu_MiniActTrialData.createMiniActTrialDataMapVector(builder, builder.createObjectOffsetList(this.miniActTrialDataMap));

  return clz_Torappu_MiniActTrialData.createclz_Torappu_MiniActTrialData(builder,
    this.preShowDays,
    ruleDataList,
    miniActTrialDataMap
  );
}
}
