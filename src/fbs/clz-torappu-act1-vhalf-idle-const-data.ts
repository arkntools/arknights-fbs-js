// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Act1VHalfIdleConstData_ProfessionDesc, clz_Torappu_Act1VHalfIdleConstData_ProfessionDescT } from './clz-torappu-act1-vhalf-idle-const-data-profession-desc.js';
import { clz_Torappu_Act1VHalfIdleEnemyPreloadMeta, clz_Torappu_Act1VHalfIdleEnemyPreloadMetaT } from './clz-torappu-act1-vhalf-idle-enemy-preload-meta.js';
import { clz_Torappu_RuneTable_PackedRuneData, clz_Torappu_RuneTable_PackedRuneDataT } from './clz-torappu-rune-table-packed-rune-data.js';
import { dict__string__int, dict__string__intT } from './dict--string--int.js';


export class clz_Torappu_Act1VHalfIdleConstData implements flatbuffers.IUnpackableObject<clz_Torappu_Act1VHalfIdleConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act1VHalfIdleConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act1VHalfIdleConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act1VHalfIdleConstData):clz_Torappu_Act1VHalfIdleConstData {
  return (obj || new clz_Torappu_Act1VHalfIdleConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act1VHalfIdleConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act1VHalfIdleConstData):clz_Torappu_Act1VHalfIdleConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act1VHalfIdleConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

incomeProductionItems(index: number):string
incomeProductionItems(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
incomeProductionItems(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

incomeProductionItemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

milestoneId():string|null
milestoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

discount(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

discountLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

discountArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

skillLevels(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

skillLevelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

skillLevelsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

levelExpItemId():string|null
levelExpItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
levelExpItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

skillExpItemId():string|null
skillExpItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skillExpItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

normalStageIds(index: number):string
normalStageIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
normalStageIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

normalStageIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hardStageIds(index: number):string
hardStageIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
hardStageIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

hardStageIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

techCostItemId():string|null
techCostItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techCostItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

assistBaseNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

preloadEnemy(index: number, obj?:clz_Torappu_Act1VHalfIdleEnemyPreloadMeta):clz_Torappu_Act1VHalfIdleEnemyPreloadMeta|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new clz_Torappu_Act1VHalfIdleEnemyPreloadMeta()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

preloadEnemyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

preloadTrap(index: number):string
preloadTrap(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
preloadTrap(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

preloadTrapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

defaultMaxDiscountSkillLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

npcMaxDiscountSkillLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

forbiddenAssistCharIds(index: number):string
forbiddenAssistCharIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
forbiddenAssistCharIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

forbiddenAssistCharIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

maxEvolvePhase():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxSafeEnemyDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

overloadLoseLifePoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

trapModifyBossTriggerTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

normalEnemyOverloadCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

eliteEnemyOverloadCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bossEnemyOverloadCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxEquipNumInBag():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bossBranchName():string|null
bossBranchName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossBranchName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bossPreviewBranchName():string|null
bossPreviewBranchName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossPreviewBranchName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyCapacityIdWhiteList(index: number):string
enemyCapacityIdWhiteList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enemyCapacityIdWhiteList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enemyCapacityIdWhiteListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unlockStageId():string|null
unlockStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

professionDesc(index: number, obj?:clz_Torappu_Act1VHalfIdleConstData_ProfessionDesc):clz_Torappu_Act1VHalfIdleConstData_ProfessionDesc|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? (obj || new clz_Torappu_Act1VHalfIdleConstData_ProfessionDesc()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

professionDescLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

productMaxEfficiencyDict(index: number, obj?:dict__string__int):dict__string__int|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new dict__string__int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

productMaxEfficiencyDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

efficiencyDurationMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

produceCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

harvestHintThresholdTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

constRuneDatas(index: number, obj?:clz_Torappu_RuneTable_PackedRuneData):clz_Torappu_RuneTable_PackedRuneData|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? (obj || new clz_Torappu_RuneTable_PackedRuneData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

constRuneDatasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

milestoneTrackId():string|null
milestoneTrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneTrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxDeckCardNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tutorialStageId():string|null
tutorialStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tutorialStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

predefinedPlotIds(index: number):string
predefinedPlotIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
predefinedPlotIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

predefinedPlotIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

predefinedCharIds(index: number):string
predefinedCharIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
predefinedCharIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

predefinedCharIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enemyOverloadWarningRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

battleFinishWarningTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

gachaNumMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

battleCustomTileHighlightColor():string|null
battleCustomTileHighlightColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleCustomTileHighlightColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleCustomTileEmissionColor():string|null
battleCustomTileEmissionColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleCustomTileEmissionColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleEquipLevelColors(index: number):string
battleEquipLevelColors(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
battleEquipLevelColors(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

battleEquipLevelColorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

battleFailHintStr(index: number):string
battleFailHintStr(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
battleFailHintStr(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

battleFailHintStrLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trapDropWeightStep():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlockSpecialPlot(index: number):string
unlockSpecialPlot(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
unlockSpecialPlot(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

unlockSpecialPlotLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bossEnterBgmKey():string|null
bossEnterBgmKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossEnterBgmKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_Act1VHalfIdleConstData(builder:flatbuffers.Builder) {
  builder.startObject(48);
}

static addIncomeProductionItems(builder:flatbuffers.Builder, incomeProductionItemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, incomeProductionItemsOffset, 0);
}

static createIncomeProductionItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIncomeProductionItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMilestoneId(builder:flatbuffers.Builder, milestoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, milestoneIdOffset, 0);
}

static addDiscount(builder:flatbuffers.Builder, discountOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, discountOffset, 0);
}

static createDiscountVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDiscountVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDiscountVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startDiscountVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkillLevels(builder:flatbuffers.Builder, skillLevelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, skillLevelsOffset, 0);
}

static createSkillLevelsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSkillLevelsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSkillLevelsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startSkillLevelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLevelExpItemId(builder:flatbuffers.Builder, levelExpItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, levelExpItemIdOffset, 0);
}

static addSkillExpItemId(builder:flatbuffers.Builder, skillExpItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, skillExpItemIdOffset, 0);
}

static addNormalStageIds(builder:flatbuffers.Builder, normalStageIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, normalStageIdsOffset, 0);
}

static createNormalStageIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNormalStageIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHardStageIds(builder:flatbuffers.Builder, hardStageIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, hardStageIdsOffset, 0);
}

static createHardStageIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHardStageIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTechCostItemId(builder:flatbuffers.Builder, techCostItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, techCostItemIdOffset, 0);
}

static addAssistBaseNum(builder:flatbuffers.Builder, assistBaseNum:number) {
  builder.addFieldInt32(9, assistBaseNum, 0);
}

static addPreloadEnemy(builder:flatbuffers.Builder, preloadEnemyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, preloadEnemyOffset, 0);
}

static createPreloadEnemyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPreloadEnemyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreloadTrap(builder:flatbuffers.Builder, preloadTrapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, preloadTrapOffset, 0);
}

static createPreloadTrapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPreloadTrapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDefaultMaxDiscountSkillLevel(builder:flatbuffers.Builder, defaultMaxDiscountSkillLevel:number) {
  builder.addFieldInt32(12, defaultMaxDiscountSkillLevel, 0);
}

static addNpcMaxDiscountSkillLevel(builder:flatbuffers.Builder, npcMaxDiscountSkillLevel:number) {
  builder.addFieldInt32(13, npcMaxDiscountSkillLevel, 0);
}

static addForbiddenAssistCharIds(builder:flatbuffers.Builder, forbiddenAssistCharIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, forbiddenAssistCharIdsOffset, 0);
}

static createForbiddenAssistCharIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForbiddenAssistCharIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMaxEvolvePhase(builder:flatbuffers.Builder, maxEvolvePhase:number) {
  builder.addFieldInt32(15, maxEvolvePhase, 0);
}

static addMaxSafeEnemyDuration(builder:flatbuffers.Builder, maxSafeEnemyDuration:number) {
  builder.addFieldInt32(16, maxSafeEnemyDuration, 0);
}

static addOverloadLoseLifePoint(builder:flatbuffers.Builder, overloadLoseLifePoint:number) {
  builder.addFieldInt32(17, overloadLoseLifePoint, 0);
}

static addTrapModifyBossTriggerTime(builder:flatbuffers.Builder, trapModifyBossTriggerTime:number) {
  builder.addFieldInt32(18, trapModifyBossTriggerTime, 0);
}

static addNormalEnemyOverloadCnt(builder:flatbuffers.Builder, normalEnemyOverloadCnt:number) {
  builder.addFieldInt32(19, normalEnemyOverloadCnt, 0);
}

static addEliteEnemyOverloadCnt(builder:flatbuffers.Builder, eliteEnemyOverloadCnt:number) {
  builder.addFieldInt32(20, eliteEnemyOverloadCnt, 0);
}

static addBossEnemyOverloadCnt(builder:flatbuffers.Builder, bossEnemyOverloadCnt:number) {
  builder.addFieldInt32(21, bossEnemyOverloadCnt, 0);
}

static addMaxEquipNumInBag(builder:flatbuffers.Builder, maxEquipNumInBag:number) {
  builder.addFieldInt32(22, maxEquipNumInBag, 0);
}

static addBossBranchName(builder:flatbuffers.Builder, bossBranchNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, bossBranchNameOffset, 0);
}

static addBossPreviewBranchName(builder:flatbuffers.Builder, bossPreviewBranchNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, bossPreviewBranchNameOffset, 0);
}

static addEnemyCapacityIdWhiteList(builder:flatbuffers.Builder, enemyCapacityIdWhiteListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, enemyCapacityIdWhiteListOffset, 0);
}

static createEnemyCapacityIdWhiteListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyCapacityIdWhiteListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnlockStageId(builder:flatbuffers.Builder, unlockStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, unlockStageIdOffset, 0);
}

static addProfessionDesc(builder:flatbuffers.Builder, professionDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, professionDescOffset, 0);
}

static createProfessionDescVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProfessionDescVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProductMaxEfficiencyDict(builder:flatbuffers.Builder, productMaxEfficiencyDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, productMaxEfficiencyDictOffset, 0);
}

static createProductMaxEfficiencyDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProductMaxEfficiencyDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEfficiencyDurationMax(builder:flatbuffers.Builder, efficiencyDurationMax:number) {
  builder.addFieldInt32(29, efficiencyDurationMax, 0);
}

static addProduceCd(builder:flatbuffers.Builder, produceCd:number) {
  builder.addFieldInt32(30, produceCd, 0);
}

static addHarvestHintThresholdTime(builder:flatbuffers.Builder, harvestHintThresholdTime:number) {
  builder.addFieldInt32(31, harvestHintThresholdTime, 0);
}

static addConstRuneDatas(builder:flatbuffers.Builder, constRuneDatasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, constRuneDatasOffset, 0);
}

static createConstRuneDatasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startConstRuneDatasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMilestoneTrackId(builder:flatbuffers.Builder, milestoneTrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, milestoneTrackIdOffset, 0);
}

static addMaxDeckCardNum(builder:flatbuffers.Builder, maxDeckCardNum:number) {
  builder.addFieldInt32(34, maxDeckCardNum, 0);
}

static addTutorialStageId(builder:flatbuffers.Builder, tutorialStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, tutorialStageIdOffset, 0);
}

static addPredefinedPlotIds(builder:flatbuffers.Builder, predefinedPlotIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, predefinedPlotIdsOffset, 0);
}

static createPredefinedPlotIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPredefinedPlotIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPredefinedCharIds(builder:flatbuffers.Builder, predefinedCharIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, predefinedCharIdsOffset, 0);
}

static createPredefinedCharIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPredefinedCharIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyOverloadWarningRatio(builder:flatbuffers.Builder, enemyOverloadWarningRatio:number) {
  builder.addFieldFloat32(38, enemyOverloadWarningRatio, 0.0);
}

static addBattleFinishWarningTime(builder:flatbuffers.Builder, battleFinishWarningTime:number) {
  builder.addFieldInt32(39, battleFinishWarningTime, 0);
}

static addGachaNumMax(builder:flatbuffers.Builder, gachaNumMax:number) {
  builder.addFieldInt32(40, gachaNumMax, 0);
}

static addBattleCustomTileHighlightColor(builder:flatbuffers.Builder, battleCustomTileHighlightColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, battleCustomTileHighlightColorOffset, 0);
}

static addBattleCustomTileEmissionColor(builder:flatbuffers.Builder, battleCustomTileEmissionColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, battleCustomTileEmissionColorOffset, 0);
}

static addBattleEquipLevelColors(builder:flatbuffers.Builder, battleEquipLevelColorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, battleEquipLevelColorsOffset, 0);
}

static createBattleEquipLevelColorsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBattleEquipLevelColorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBattleFailHintStr(builder:flatbuffers.Builder, battleFailHintStrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, battleFailHintStrOffset, 0);
}

static createBattleFailHintStrVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBattleFailHintStrVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrapDropWeightStep(builder:flatbuffers.Builder, trapDropWeightStep:number) {
  builder.addFieldInt32(45, trapDropWeightStep, 0);
}

static addUnlockSpecialPlot(builder:flatbuffers.Builder, unlockSpecialPlotOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, unlockSpecialPlotOffset, 0);
}

static createUnlockSpecialPlotVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUnlockSpecialPlotVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBossEnterBgmKey(builder:flatbuffers.Builder, bossEnterBgmKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, bossEnterBgmKeyOffset, 0);
}

static endclz_Torappu_Act1VHalfIdleConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act1VHalfIdleConstData(builder:flatbuffers.Builder, incomeProductionItemsOffset:flatbuffers.Offset, milestoneIdOffset:flatbuffers.Offset, discountOffset:flatbuffers.Offset, skillLevelsOffset:flatbuffers.Offset, levelExpItemIdOffset:flatbuffers.Offset, skillExpItemIdOffset:flatbuffers.Offset, normalStageIdsOffset:flatbuffers.Offset, hardStageIdsOffset:flatbuffers.Offset, techCostItemIdOffset:flatbuffers.Offset, assistBaseNum:number, preloadEnemyOffset:flatbuffers.Offset, preloadTrapOffset:flatbuffers.Offset, defaultMaxDiscountSkillLevel:number, npcMaxDiscountSkillLevel:number, forbiddenAssistCharIdsOffset:flatbuffers.Offset, maxEvolvePhase:number, maxSafeEnemyDuration:number, overloadLoseLifePoint:number, trapModifyBossTriggerTime:number, normalEnemyOverloadCnt:number, eliteEnemyOverloadCnt:number, bossEnemyOverloadCnt:number, maxEquipNumInBag:number, bossBranchNameOffset:flatbuffers.Offset, bossPreviewBranchNameOffset:flatbuffers.Offset, enemyCapacityIdWhiteListOffset:flatbuffers.Offset, unlockStageIdOffset:flatbuffers.Offset, professionDescOffset:flatbuffers.Offset, productMaxEfficiencyDictOffset:flatbuffers.Offset, efficiencyDurationMax:number, produceCd:number, harvestHintThresholdTime:number, constRuneDatasOffset:flatbuffers.Offset, milestoneTrackIdOffset:flatbuffers.Offset, maxDeckCardNum:number, tutorialStageIdOffset:flatbuffers.Offset, predefinedPlotIdsOffset:flatbuffers.Offset, predefinedCharIdsOffset:flatbuffers.Offset, enemyOverloadWarningRatio:number, battleFinishWarningTime:number, gachaNumMax:number, battleCustomTileHighlightColorOffset:flatbuffers.Offset, battleCustomTileEmissionColorOffset:flatbuffers.Offset, battleEquipLevelColorsOffset:flatbuffers.Offset, battleFailHintStrOffset:flatbuffers.Offset, trapDropWeightStep:number, unlockSpecialPlotOffset:flatbuffers.Offset, bossEnterBgmKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act1VHalfIdleConstData.startclz_Torappu_Act1VHalfIdleConstData(builder);
  clz_Torappu_Act1VHalfIdleConstData.addIncomeProductionItems(builder, incomeProductionItemsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addMilestoneId(builder, milestoneIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addDiscount(builder, discountOffset);
  clz_Torappu_Act1VHalfIdleConstData.addSkillLevels(builder, skillLevelsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addLevelExpItemId(builder, levelExpItemIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addSkillExpItemId(builder, skillExpItemIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addNormalStageIds(builder, normalStageIdsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addHardStageIds(builder, hardStageIdsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addTechCostItemId(builder, techCostItemIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addAssistBaseNum(builder, assistBaseNum);
  clz_Torappu_Act1VHalfIdleConstData.addPreloadEnemy(builder, preloadEnemyOffset);
  clz_Torappu_Act1VHalfIdleConstData.addPreloadTrap(builder, preloadTrapOffset);
  clz_Torappu_Act1VHalfIdleConstData.addDefaultMaxDiscountSkillLevel(builder, defaultMaxDiscountSkillLevel);
  clz_Torappu_Act1VHalfIdleConstData.addNpcMaxDiscountSkillLevel(builder, npcMaxDiscountSkillLevel);
  clz_Torappu_Act1VHalfIdleConstData.addForbiddenAssistCharIds(builder, forbiddenAssistCharIdsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addMaxEvolvePhase(builder, maxEvolvePhase);
  clz_Torappu_Act1VHalfIdleConstData.addMaxSafeEnemyDuration(builder, maxSafeEnemyDuration);
  clz_Torappu_Act1VHalfIdleConstData.addOverloadLoseLifePoint(builder, overloadLoseLifePoint);
  clz_Torappu_Act1VHalfIdleConstData.addTrapModifyBossTriggerTime(builder, trapModifyBossTriggerTime);
  clz_Torappu_Act1VHalfIdleConstData.addNormalEnemyOverloadCnt(builder, normalEnemyOverloadCnt);
  clz_Torappu_Act1VHalfIdleConstData.addEliteEnemyOverloadCnt(builder, eliteEnemyOverloadCnt);
  clz_Torappu_Act1VHalfIdleConstData.addBossEnemyOverloadCnt(builder, bossEnemyOverloadCnt);
  clz_Torappu_Act1VHalfIdleConstData.addMaxEquipNumInBag(builder, maxEquipNumInBag);
  clz_Torappu_Act1VHalfIdleConstData.addBossBranchName(builder, bossBranchNameOffset);
  clz_Torappu_Act1VHalfIdleConstData.addBossPreviewBranchName(builder, bossPreviewBranchNameOffset);
  clz_Torappu_Act1VHalfIdleConstData.addEnemyCapacityIdWhiteList(builder, enemyCapacityIdWhiteListOffset);
  clz_Torappu_Act1VHalfIdleConstData.addUnlockStageId(builder, unlockStageIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addProfessionDesc(builder, professionDescOffset);
  clz_Torappu_Act1VHalfIdleConstData.addProductMaxEfficiencyDict(builder, productMaxEfficiencyDictOffset);
  clz_Torappu_Act1VHalfIdleConstData.addEfficiencyDurationMax(builder, efficiencyDurationMax);
  clz_Torappu_Act1VHalfIdleConstData.addProduceCd(builder, produceCd);
  clz_Torappu_Act1VHalfIdleConstData.addHarvestHintThresholdTime(builder, harvestHintThresholdTime);
  clz_Torappu_Act1VHalfIdleConstData.addConstRuneDatas(builder, constRuneDatasOffset);
  clz_Torappu_Act1VHalfIdleConstData.addMilestoneTrackId(builder, milestoneTrackIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addMaxDeckCardNum(builder, maxDeckCardNum);
  clz_Torappu_Act1VHalfIdleConstData.addTutorialStageId(builder, tutorialStageIdOffset);
  clz_Torappu_Act1VHalfIdleConstData.addPredefinedPlotIds(builder, predefinedPlotIdsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addPredefinedCharIds(builder, predefinedCharIdsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addEnemyOverloadWarningRatio(builder, enemyOverloadWarningRatio);
  clz_Torappu_Act1VHalfIdleConstData.addBattleFinishWarningTime(builder, battleFinishWarningTime);
  clz_Torappu_Act1VHalfIdleConstData.addGachaNumMax(builder, gachaNumMax);
  clz_Torappu_Act1VHalfIdleConstData.addBattleCustomTileHighlightColor(builder, battleCustomTileHighlightColorOffset);
  clz_Torappu_Act1VHalfIdleConstData.addBattleCustomTileEmissionColor(builder, battleCustomTileEmissionColorOffset);
  clz_Torappu_Act1VHalfIdleConstData.addBattleEquipLevelColors(builder, battleEquipLevelColorsOffset);
  clz_Torappu_Act1VHalfIdleConstData.addBattleFailHintStr(builder, battleFailHintStrOffset);
  clz_Torappu_Act1VHalfIdleConstData.addTrapDropWeightStep(builder, trapDropWeightStep);
  clz_Torappu_Act1VHalfIdleConstData.addUnlockSpecialPlot(builder, unlockSpecialPlotOffset);
  clz_Torappu_Act1VHalfIdleConstData.addBossEnterBgmKey(builder, bossEnterBgmKeyOffset);
  return clz_Torappu_Act1VHalfIdleConstData.endclz_Torappu_Act1VHalfIdleConstData(builder);
}

unpack(): clz_Torappu_Act1VHalfIdleConstDataT {
  return new clz_Torappu_Act1VHalfIdleConstDataT(
    this.bb!.createScalarList<string>(this.incomeProductionItems.bind(this), this.incomeProductionItemsLength()),
    this.milestoneId(),
    this.bb!.createScalarList<number>(this.discount.bind(this), this.discountLength()),
    this.bb!.createScalarList<number>(this.skillLevels.bind(this), this.skillLevelsLength()),
    this.levelExpItemId(),
    this.skillExpItemId(),
    this.bb!.createScalarList<string>(this.normalStageIds.bind(this), this.normalStageIdsLength()),
    this.bb!.createScalarList<string>(this.hardStageIds.bind(this), this.hardStageIdsLength()),
    this.techCostItemId(),
    this.assistBaseNum(),
    this.bb!.createObjList<clz_Torappu_Act1VHalfIdleEnemyPreloadMeta, clz_Torappu_Act1VHalfIdleEnemyPreloadMetaT>(this.preloadEnemy.bind(this), this.preloadEnemyLength()),
    this.bb!.createScalarList<string>(this.preloadTrap.bind(this), this.preloadTrapLength()),
    this.defaultMaxDiscountSkillLevel(),
    this.npcMaxDiscountSkillLevel(),
    this.bb!.createScalarList<string>(this.forbiddenAssistCharIds.bind(this), this.forbiddenAssistCharIdsLength()),
    this.maxEvolvePhase(),
    this.maxSafeEnemyDuration(),
    this.overloadLoseLifePoint(),
    this.trapModifyBossTriggerTime(),
    this.normalEnemyOverloadCnt(),
    this.eliteEnemyOverloadCnt(),
    this.bossEnemyOverloadCnt(),
    this.maxEquipNumInBag(),
    this.bossBranchName(),
    this.bossPreviewBranchName(),
    this.bb!.createScalarList<string>(this.enemyCapacityIdWhiteList.bind(this), this.enemyCapacityIdWhiteListLength()),
    this.unlockStageId(),
    this.bb!.createObjList<clz_Torappu_Act1VHalfIdleConstData_ProfessionDesc, clz_Torappu_Act1VHalfIdleConstData_ProfessionDescT>(this.professionDesc.bind(this), this.professionDescLength()),
    this.bb!.createObjList<dict__string__int, dict__string__intT>(this.productMaxEfficiencyDict.bind(this), this.productMaxEfficiencyDictLength()),
    this.efficiencyDurationMax(),
    this.produceCd(),
    this.harvestHintThresholdTime(),
    this.bb!.createObjList<clz_Torappu_RuneTable_PackedRuneData, clz_Torappu_RuneTable_PackedRuneDataT>(this.constRuneDatas.bind(this), this.constRuneDatasLength()),
    this.milestoneTrackId(),
    this.maxDeckCardNum(),
    this.tutorialStageId(),
    this.bb!.createScalarList<string>(this.predefinedPlotIds.bind(this), this.predefinedPlotIdsLength()),
    this.bb!.createScalarList<string>(this.predefinedCharIds.bind(this), this.predefinedCharIdsLength()),
    this.enemyOverloadWarningRatio(),
    this.battleFinishWarningTime(),
    this.gachaNumMax(),
    this.battleCustomTileHighlightColor(),
    this.battleCustomTileEmissionColor(),
    this.bb!.createScalarList<string>(this.battleEquipLevelColors.bind(this), this.battleEquipLevelColorsLength()),
    this.bb!.createScalarList<string>(this.battleFailHintStr.bind(this), this.battleFailHintStrLength()),
    this.trapDropWeightStep(),
    this.bb!.createScalarList<string>(this.unlockSpecialPlot.bind(this), this.unlockSpecialPlotLength()),
    this.bossEnterBgmKey()
  );
}


unpackTo(_o: clz_Torappu_Act1VHalfIdleConstDataT): void {
  _o.incomeProductionItems = this.bb!.createScalarList<string>(this.incomeProductionItems.bind(this), this.incomeProductionItemsLength());
  _o.milestoneId = this.milestoneId();
  _o.discount = this.bb!.createScalarList<number>(this.discount.bind(this), this.discountLength());
  _o.skillLevels = this.bb!.createScalarList<number>(this.skillLevels.bind(this), this.skillLevelsLength());
  _o.levelExpItemId = this.levelExpItemId();
  _o.skillExpItemId = this.skillExpItemId();
  _o.normalStageIds = this.bb!.createScalarList<string>(this.normalStageIds.bind(this), this.normalStageIdsLength());
  _o.hardStageIds = this.bb!.createScalarList<string>(this.hardStageIds.bind(this), this.hardStageIdsLength());
  _o.techCostItemId = this.techCostItemId();
  _o.assistBaseNum = this.assistBaseNum();
  _o.preloadEnemy = this.bb!.createObjList<clz_Torappu_Act1VHalfIdleEnemyPreloadMeta, clz_Torappu_Act1VHalfIdleEnemyPreloadMetaT>(this.preloadEnemy.bind(this), this.preloadEnemyLength());
  _o.preloadTrap = this.bb!.createScalarList<string>(this.preloadTrap.bind(this), this.preloadTrapLength());
  _o.defaultMaxDiscountSkillLevel = this.defaultMaxDiscountSkillLevel();
  _o.npcMaxDiscountSkillLevel = this.npcMaxDiscountSkillLevel();
  _o.forbiddenAssistCharIds = this.bb!.createScalarList<string>(this.forbiddenAssistCharIds.bind(this), this.forbiddenAssistCharIdsLength());
  _o.maxEvolvePhase = this.maxEvolvePhase();
  _o.maxSafeEnemyDuration = this.maxSafeEnemyDuration();
  _o.overloadLoseLifePoint = this.overloadLoseLifePoint();
  _o.trapModifyBossTriggerTime = this.trapModifyBossTriggerTime();
  _o.normalEnemyOverloadCnt = this.normalEnemyOverloadCnt();
  _o.eliteEnemyOverloadCnt = this.eliteEnemyOverloadCnt();
  _o.bossEnemyOverloadCnt = this.bossEnemyOverloadCnt();
  _o.maxEquipNumInBag = this.maxEquipNumInBag();
  _o.bossBranchName = this.bossBranchName();
  _o.bossPreviewBranchName = this.bossPreviewBranchName();
  _o.enemyCapacityIdWhiteList = this.bb!.createScalarList<string>(this.enemyCapacityIdWhiteList.bind(this), this.enemyCapacityIdWhiteListLength());
  _o.unlockStageId = this.unlockStageId();
  _o.professionDesc = this.bb!.createObjList<clz_Torappu_Act1VHalfIdleConstData_ProfessionDesc, clz_Torappu_Act1VHalfIdleConstData_ProfessionDescT>(this.professionDesc.bind(this), this.professionDescLength());
  _o.productMaxEfficiencyDict = this.bb!.createObjList<dict__string__int, dict__string__intT>(this.productMaxEfficiencyDict.bind(this), this.productMaxEfficiencyDictLength());
  _o.efficiencyDurationMax = this.efficiencyDurationMax();
  _o.produceCd = this.produceCd();
  _o.harvestHintThresholdTime = this.harvestHintThresholdTime();
  _o.constRuneDatas = this.bb!.createObjList<clz_Torappu_RuneTable_PackedRuneData, clz_Torappu_RuneTable_PackedRuneDataT>(this.constRuneDatas.bind(this), this.constRuneDatasLength());
  _o.milestoneTrackId = this.milestoneTrackId();
  _o.maxDeckCardNum = this.maxDeckCardNum();
  _o.tutorialStageId = this.tutorialStageId();
  _o.predefinedPlotIds = this.bb!.createScalarList<string>(this.predefinedPlotIds.bind(this), this.predefinedPlotIdsLength());
  _o.predefinedCharIds = this.bb!.createScalarList<string>(this.predefinedCharIds.bind(this), this.predefinedCharIdsLength());
  _o.enemyOverloadWarningRatio = this.enemyOverloadWarningRatio();
  _o.battleFinishWarningTime = this.battleFinishWarningTime();
  _o.gachaNumMax = this.gachaNumMax();
  _o.battleCustomTileHighlightColor = this.battleCustomTileHighlightColor();
  _o.battleCustomTileEmissionColor = this.battleCustomTileEmissionColor();
  _o.battleEquipLevelColors = this.bb!.createScalarList<string>(this.battleEquipLevelColors.bind(this), this.battleEquipLevelColorsLength());
  _o.battleFailHintStr = this.bb!.createScalarList<string>(this.battleFailHintStr.bind(this), this.battleFailHintStrLength());
  _o.trapDropWeightStep = this.trapDropWeightStep();
  _o.unlockSpecialPlot = this.bb!.createScalarList<string>(this.unlockSpecialPlot.bind(this), this.unlockSpecialPlotLength());
  _o.bossEnterBgmKey = this.bossEnterBgmKey();
}
}

export class clz_Torappu_Act1VHalfIdleConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public incomeProductionItems: (string)[] = [],
  public milestoneId: string|Uint8Array|null = null,
  public discount: (number)[] = [],
  public skillLevels: (number)[] = [],
  public levelExpItemId: string|Uint8Array|null = null,
  public skillExpItemId: string|Uint8Array|null = null,
  public normalStageIds: (string)[] = [],
  public hardStageIds: (string)[] = [],
  public techCostItemId: string|Uint8Array|null = null,
  public assistBaseNum: number = 0,
  public preloadEnemy: (clz_Torappu_Act1VHalfIdleEnemyPreloadMetaT)[] = [],
  public preloadTrap: (string)[] = [],
  public defaultMaxDiscountSkillLevel: number = 0,
  public npcMaxDiscountSkillLevel: number = 0,
  public forbiddenAssistCharIds: (string)[] = [],
  public maxEvolvePhase: number = 0,
  public maxSafeEnemyDuration: number = 0,
  public overloadLoseLifePoint: number = 0,
  public trapModifyBossTriggerTime: number = 0,
  public normalEnemyOverloadCnt: number = 0,
  public eliteEnemyOverloadCnt: number = 0,
  public bossEnemyOverloadCnt: number = 0,
  public maxEquipNumInBag: number = 0,
  public bossBranchName: string|Uint8Array|null = null,
  public bossPreviewBranchName: string|Uint8Array|null = null,
  public enemyCapacityIdWhiteList: (string)[] = [],
  public unlockStageId: string|Uint8Array|null = null,
  public professionDesc: (clz_Torappu_Act1VHalfIdleConstData_ProfessionDescT)[] = [],
  public productMaxEfficiencyDict: (dict__string__intT)[] = [],
  public efficiencyDurationMax: number = 0,
  public produceCd: number = 0,
  public harvestHintThresholdTime: number = 0,
  public constRuneDatas: (clz_Torappu_RuneTable_PackedRuneDataT)[] = [],
  public milestoneTrackId: string|Uint8Array|null = null,
  public maxDeckCardNum: number = 0,
  public tutorialStageId: string|Uint8Array|null = null,
  public predefinedPlotIds: (string)[] = [],
  public predefinedCharIds: (string)[] = [],
  public enemyOverloadWarningRatio: number = 0.0,
  public battleFinishWarningTime: number = 0,
  public gachaNumMax: number = 0,
  public battleCustomTileHighlightColor: string|Uint8Array|null = null,
  public battleCustomTileEmissionColor: string|Uint8Array|null = null,
  public battleEquipLevelColors: (string)[] = [],
  public battleFailHintStr: (string)[] = [],
  public trapDropWeightStep: number = 0,
  public unlockSpecialPlot: (string)[] = [],
  public bossEnterBgmKey: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const incomeProductionItems = clz_Torappu_Act1VHalfIdleConstData.createIncomeProductionItemsVector(builder, builder.createObjectOffsetList(this.incomeProductionItems));
  const milestoneId = (this.milestoneId !== null ? builder.createString(this.milestoneId!) : 0);
  const discount = clz_Torappu_Act1VHalfIdleConstData.createDiscountVector(builder, this.discount);
  const skillLevels = clz_Torappu_Act1VHalfIdleConstData.createSkillLevelsVector(builder, this.skillLevels);
  const levelExpItemId = (this.levelExpItemId !== null ? builder.createString(this.levelExpItemId!) : 0);
  const skillExpItemId = (this.skillExpItemId !== null ? builder.createString(this.skillExpItemId!) : 0);
  const normalStageIds = clz_Torappu_Act1VHalfIdleConstData.createNormalStageIdsVector(builder, builder.createObjectOffsetList(this.normalStageIds));
  const hardStageIds = clz_Torappu_Act1VHalfIdleConstData.createHardStageIdsVector(builder, builder.createObjectOffsetList(this.hardStageIds));
  const techCostItemId = (this.techCostItemId !== null ? builder.createString(this.techCostItemId!) : 0);
  const preloadEnemy = clz_Torappu_Act1VHalfIdleConstData.createPreloadEnemyVector(builder, builder.createObjectOffsetList(this.preloadEnemy));
  const preloadTrap = clz_Torappu_Act1VHalfIdleConstData.createPreloadTrapVector(builder, builder.createObjectOffsetList(this.preloadTrap));
  const forbiddenAssistCharIds = clz_Torappu_Act1VHalfIdleConstData.createForbiddenAssistCharIdsVector(builder, builder.createObjectOffsetList(this.forbiddenAssistCharIds));
  const bossBranchName = (this.bossBranchName !== null ? builder.createString(this.bossBranchName!) : 0);
  const bossPreviewBranchName = (this.bossPreviewBranchName !== null ? builder.createString(this.bossPreviewBranchName!) : 0);
  const enemyCapacityIdWhiteList = clz_Torappu_Act1VHalfIdleConstData.createEnemyCapacityIdWhiteListVector(builder, builder.createObjectOffsetList(this.enemyCapacityIdWhiteList));
  const unlockStageId = (this.unlockStageId !== null ? builder.createString(this.unlockStageId!) : 0);
  const professionDesc = clz_Torappu_Act1VHalfIdleConstData.createProfessionDescVector(builder, builder.createObjectOffsetList(this.professionDesc));
  const productMaxEfficiencyDict = clz_Torappu_Act1VHalfIdleConstData.createProductMaxEfficiencyDictVector(builder, builder.createObjectOffsetList(this.productMaxEfficiencyDict));
  const constRuneDatas = clz_Torappu_Act1VHalfIdleConstData.createConstRuneDatasVector(builder, builder.createObjectOffsetList(this.constRuneDatas));
  const milestoneTrackId = (this.milestoneTrackId !== null ? builder.createString(this.milestoneTrackId!) : 0);
  const tutorialStageId = (this.tutorialStageId !== null ? builder.createString(this.tutorialStageId!) : 0);
  const predefinedPlotIds = clz_Torappu_Act1VHalfIdleConstData.createPredefinedPlotIdsVector(builder, builder.createObjectOffsetList(this.predefinedPlotIds));
  const predefinedCharIds = clz_Torappu_Act1VHalfIdleConstData.createPredefinedCharIdsVector(builder, builder.createObjectOffsetList(this.predefinedCharIds));
  const battleCustomTileHighlightColor = (this.battleCustomTileHighlightColor !== null ? builder.createString(this.battleCustomTileHighlightColor!) : 0);
  const battleCustomTileEmissionColor = (this.battleCustomTileEmissionColor !== null ? builder.createString(this.battleCustomTileEmissionColor!) : 0);
  const battleEquipLevelColors = clz_Torappu_Act1VHalfIdleConstData.createBattleEquipLevelColorsVector(builder, builder.createObjectOffsetList(this.battleEquipLevelColors));
  const battleFailHintStr = clz_Torappu_Act1VHalfIdleConstData.createBattleFailHintStrVector(builder, builder.createObjectOffsetList(this.battleFailHintStr));
  const unlockSpecialPlot = clz_Torappu_Act1VHalfIdleConstData.createUnlockSpecialPlotVector(builder, builder.createObjectOffsetList(this.unlockSpecialPlot));
  const bossEnterBgmKey = (this.bossEnterBgmKey !== null ? builder.createString(this.bossEnterBgmKey!) : 0);

  return clz_Torappu_Act1VHalfIdleConstData.createclz_Torappu_Act1VHalfIdleConstData(builder,
    incomeProductionItems,
    milestoneId,
    discount,
    skillLevels,
    levelExpItemId,
    skillExpItemId,
    normalStageIds,
    hardStageIds,
    techCostItemId,
    this.assistBaseNum,
    preloadEnemy,
    preloadTrap,
    this.defaultMaxDiscountSkillLevel,
    this.npcMaxDiscountSkillLevel,
    forbiddenAssistCharIds,
    this.maxEvolvePhase,
    this.maxSafeEnemyDuration,
    this.overloadLoseLifePoint,
    this.trapModifyBossTriggerTime,
    this.normalEnemyOverloadCnt,
    this.eliteEnemyOverloadCnt,
    this.bossEnemyOverloadCnt,
    this.maxEquipNumInBag,
    bossBranchName,
    bossPreviewBranchName,
    enemyCapacityIdWhiteList,
    unlockStageId,
    professionDesc,
    productMaxEfficiencyDict,
    this.efficiencyDurationMax,
    this.produceCd,
    this.harvestHintThresholdTime,
    constRuneDatas,
    milestoneTrackId,
    this.maxDeckCardNum,
    tutorialStageId,
    predefinedPlotIds,
    predefinedCharIds,
    this.enemyOverloadWarningRatio,
    this.battleFinishWarningTime,
    this.gachaNumMax,
    battleCustomTileHighlightColor,
    battleCustomTileEmissionColor,
    battleEquipLevelColors,
    battleFailHintStr,
    this.trapDropWeightStep,
    unlockSpecialPlot,
    bossEnterBgmKey
  );
}
}
