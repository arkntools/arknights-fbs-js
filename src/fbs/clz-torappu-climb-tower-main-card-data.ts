// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RuneTable_PackedRuneData, clz_Torappu_RuneTable_PackedRuneDataT } from './clz-torappu-rune-table-packed-rune-data.js';
import { enum__Torappu_ClimbTowerCardType } from './enum--torappu-climb-tower-card-type.js';


export class clz_Torappu_ClimbTowerMainCardData implements flatbuffers.IUnpackableObject<clz_Torappu_ClimbTowerMainCardDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ClimbTowerMainCardData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ClimbTowerMainCardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerMainCardData):clz_Torappu_ClimbTowerMainCardData {
  return (obj || new clz_Torappu_ClimbTowerMainCardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ClimbTowerMainCardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerMainCardData):clz_Torappu_ClimbTowerMainCardData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ClimbTowerMainCardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():enum__Torappu_ClimbTowerCardType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ClimbTowerCardType.SEASON;
}

linkedTowerId():string|null
linkedTowerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkedTowerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subCardIds(index: number):string
subCardIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
subCardIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

subCardIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

runeData(obj?:clz_Torappu_RuneTable_PackedRuneData):clz_Torappu_RuneTable_PackedRuneData|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new clz_Torappu_RuneTable_PackedRuneData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trapIds(index: number):string
trapIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trapIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trapIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ClimbTowerMainCardData(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:enum__Torappu_ClimbTowerCardType) {
  builder.addFieldInt32(1, type, enum__Torappu_ClimbTowerCardType.SEASON);
}

static addLinkedTowerId(builder:flatbuffers.Builder, linkedTowerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, linkedTowerIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(3, sortId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, descOffset, 0);
}

static addSubCardIds(builder:flatbuffers.Builder, subCardIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, subCardIdsOffset, 0);
}

static createSubCardIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubCardIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRuneData(builder:flatbuffers.Builder, runeDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, runeDataOffset, 0);
}

static addTrapIds(builder:flatbuffers.Builder, trapIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, trapIdsOffset, 0);
}

static createTrapIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrapIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ClimbTowerMainCardData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ClimbTowerMainCardDataT {
  return new clz_Torappu_ClimbTowerMainCardDataT(
    this.id(),
    this.type(),
    this.linkedTowerId(),
    this.sortId(),
    this.name(),
    this.desc(),
    this.bb!.createScalarList<string>(this.subCardIds.bind(this), this.subCardIdsLength()),
    (this.runeData() !== null ? this.runeData()!.unpack() : null),
    this.bb!.createScalarList<string>(this.trapIds.bind(this), this.trapIdsLength())
  );
}


unpackTo(_o: clz_Torappu_ClimbTowerMainCardDataT): void {
  _o.id = this.id();
  _o.type = this.type();
  _o.linkedTowerId = this.linkedTowerId();
  _o.sortId = this.sortId();
  _o.name = this.name();
  _o.desc = this.desc();
  _o.subCardIds = this.bb!.createScalarList<string>(this.subCardIds.bind(this), this.subCardIdsLength());
  _o.runeData = (this.runeData() !== null ? this.runeData()!.unpack() : null);
  _o.trapIds = this.bb!.createScalarList<string>(this.trapIds.bind(this), this.trapIdsLength());
}
}

export class clz_Torappu_ClimbTowerMainCardDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public type: enum__Torappu_ClimbTowerCardType = enum__Torappu_ClimbTowerCardType.SEASON,
  public linkedTowerId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public name: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public subCardIds: (string)[] = [],
  public runeData: clz_Torappu_RuneTable_PackedRuneDataT|null = null,
  public trapIds: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const linkedTowerId = (this.linkedTowerId !== null ? builder.createString(this.linkedTowerId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const subCardIds = clz_Torappu_ClimbTowerMainCardData.createSubCardIdsVector(builder, builder.createObjectOffsetList(this.subCardIds));
  const runeData = (this.runeData !== null ? this.runeData!.pack(builder) : 0);
  const trapIds = clz_Torappu_ClimbTowerMainCardData.createTrapIdsVector(builder, builder.createObjectOffsetList(this.trapIds));

  clz_Torappu_ClimbTowerMainCardData.startclz_Torappu_ClimbTowerMainCardData(builder);
  clz_Torappu_ClimbTowerMainCardData.addId(builder, id);
  clz_Torappu_ClimbTowerMainCardData.addType(builder, this.type);
  clz_Torappu_ClimbTowerMainCardData.addLinkedTowerId(builder, linkedTowerId);
  clz_Torappu_ClimbTowerMainCardData.addSortId(builder, this.sortId);
  clz_Torappu_ClimbTowerMainCardData.addName(builder, name);
  clz_Torappu_ClimbTowerMainCardData.addDesc(builder, desc);
  clz_Torappu_ClimbTowerMainCardData.addSubCardIds(builder, subCardIds);
  clz_Torappu_ClimbTowerMainCardData.addRuneData(builder, runeData);
  clz_Torappu_ClimbTowerMainCardData.addTrapIds(builder, trapIds);

  return clz_Torappu_ClimbTowerMainCardData.endclz_Torappu_ClimbTowerMainCardData(builder);
}
}
