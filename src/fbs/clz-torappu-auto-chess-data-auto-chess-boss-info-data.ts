// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_AutoChessData_AutoChessBossInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessBossInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessBossInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessBossInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessBossInfoData):clz_Torappu_AutoChessData_AutoChessBossInfoData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessBossInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessBossInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessBossInfoData):clz_Torappu_AutoChessData_AutoChessBossInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessBossInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bossId():string|null
bossId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyId():string|null
enemyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

handbookEnemyId():string|null
handbookEnemyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
handbookEnemyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_AutoChessData_AutoChessBossInfoData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBossId(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bossIdOffset, 0);
}

static addEnemyId(builder:flatbuffers.Builder, enemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, enemyIdOffset, 0);
}

static addHandbookEnemyId(builder:flatbuffers.Builder, handbookEnemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, handbookEnemyIdOffset, 0);
}

static endclz_Torappu_AutoChessData_AutoChessBossInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessBossInfoData(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset, enemyIdOffset:flatbuffers.Offset, handbookEnemyIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessBossInfoData.startclz_Torappu_AutoChessData_AutoChessBossInfoData(builder);
  clz_Torappu_AutoChessData_AutoChessBossInfoData.addBossId(builder, bossIdOffset);
  clz_Torappu_AutoChessData_AutoChessBossInfoData.addEnemyId(builder, enemyIdOffset);
  clz_Torappu_AutoChessData_AutoChessBossInfoData.addHandbookEnemyId(builder, handbookEnemyIdOffset);
  return clz_Torappu_AutoChessData_AutoChessBossInfoData.endclz_Torappu_AutoChessData_AutoChessBossInfoData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessBossInfoDataT {
  return new clz_Torappu_AutoChessData_AutoChessBossInfoDataT(
    this.bossId(),
    this.enemyId(),
    this.handbookEnemyId()
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessBossInfoDataT): void {
  _o.bossId = this.bossId();
  _o.enemyId = this.enemyId();
  _o.handbookEnemyId = this.handbookEnemyId();
}
}

export class clz_Torappu_AutoChessData_AutoChessBossInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bossId: string|Uint8Array|null = null,
  public enemyId: string|Uint8Array|null = null,
  public handbookEnemyId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bossId = (this.bossId !== null ? builder.createString(this.bossId!) : 0);
  const enemyId = (this.enemyId !== null ? builder.createString(this.enemyId!) : 0);
  const handbookEnemyId = (this.handbookEnemyId !== null ? builder.createString(this.handbookEnemyId!) : 0);

  return clz_Torappu_AutoChessData_AutoChessBossInfoData.createclz_Torappu_AutoChessData_AutoChessBossInfoData(builder,
    bossId,
    enemyId,
    handbookEnemyId
  );
}
}
