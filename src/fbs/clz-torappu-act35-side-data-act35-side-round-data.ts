// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__string__int, dict__string__intT } from './dict--string--int.js';


export class clz_Torappu_Act35SideData_Act35SideRoundData implements flatbuffers.IUnpackableObject<clz_Torappu_Act35SideData_Act35SideRoundDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act35SideData_Act35SideRoundData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act35SideData_Act35SideRoundData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act35SideData_Act35SideRoundData):clz_Torappu_Act35SideData_Act35SideRoundData {
  return (obj || new clz_Torappu_Act35SideData_Act35SideRoundData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act35SideData_Act35SideRoundData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act35SideData_Act35SideRoundData):clz_Torappu_Act35SideData_Act35SideRoundData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act35SideData_Act35SideRoundData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

roundId():string|null
roundId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roundId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

challengeId():string|null
challengeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

roundPassRating():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isMaterialRandom():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fixedMaterialList(index: number, obj?:dict__string__int):dict__string__int|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new dict__string__int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fixedMaterialListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

passRoundCoin():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act35SideData_Act35SideRoundData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addRoundId(builder:flatbuffers.Builder, roundIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, roundIdOffset, 0);
}

static addChallengeId(builder:flatbuffers.Builder, challengeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, challengeIdOffset, 0);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt32(2, round, 0);
}

static addRoundPassRating(builder:flatbuffers.Builder, roundPassRating:number) {
  builder.addFieldInt32(3, roundPassRating, 0);
}

static addIsMaterialRandom(builder:flatbuffers.Builder, isMaterialRandom:boolean) {
  builder.addFieldInt8(4, +isMaterialRandom, +false);
}

static addFixedMaterialList(builder:flatbuffers.Builder, fixedMaterialListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, fixedMaterialListOffset, 0);
}

static createFixedMaterialListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFixedMaterialListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPassRoundCoin(builder:flatbuffers.Builder, passRoundCoin:number) {
  builder.addFieldInt32(6, passRoundCoin, 0);
}

static endclz_Torappu_Act35SideData_Act35SideRoundData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act35SideData_Act35SideRoundData(builder:flatbuffers.Builder, roundIdOffset:flatbuffers.Offset, challengeIdOffset:flatbuffers.Offset, round:number, roundPassRating:number, isMaterialRandom:boolean, fixedMaterialListOffset:flatbuffers.Offset, passRoundCoin:number):flatbuffers.Offset {
  clz_Torappu_Act35SideData_Act35SideRoundData.startclz_Torappu_Act35SideData_Act35SideRoundData(builder);
  clz_Torappu_Act35SideData_Act35SideRoundData.addRoundId(builder, roundIdOffset);
  clz_Torappu_Act35SideData_Act35SideRoundData.addChallengeId(builder, challengeIdOffset);
  clz_Torappu_Act35SideData_Act35SideRoundData.addRound(builder, round);
  clz_Torappu_Act35SideData_Act35SideRoundData.addRoundPassRating(builder, roundPassRating);
  clz_Torappu_Act35SideData_Act35SideRoundData.addIsMaterialRandom(builder, isMaterialRandom);
  clz_Torappu_Act35SideData_Act35SideRoundData.addFixedMaterialList(builder, fixedMaterialListOffset);
  clz_Torappu_Act35SideData_Act35SideRoundData.addPassRoundCoin(builder, passRoundCoin);
  return clz_Torappu_Act35SideData_Act35SideRoundData.endclz_Torappu_Act35SideData_Act35SideRoundData(builder);
}

unpack(): clz_Torappu_Act35SideData_Act35SideRoundDataT {
  return new clz_Torappu_Act35SideData_Act35SideRoundDataT(
    this.roundId(),
    this.challengeId(),
    this.round(),
    this.roundPassRating(),
    this.isMaterialRandom(),
    this.bb!.createObjList<dict__string__int, dict__string__intT>(this.fixedMaterialList.bind(this), this.fixedMaterialListLength()),
    this.passRoundCoin()
  );
}


unpackTo(_o: clz_Torappu_Act35SideData_Act35SideRoundDataT): void {
  _o.roundId = this.roundId();
  _o.challengeId = this.challengeId();
  _o.round = this.round();
  _o.roundPassRating = this.roundPassRating();
  _o.isMaterialRandom = this.isMaterialRandom();
  _o.fixedMaterialList = this.bb!.createObjList<dict__string__int, dict__string__intT>(this.fixedMaterialList.bind(this), this.fixedMaterialListLength());
  _o.passRoundCoin = this.passRoundCoin();
}
}

export class clz_Torappu_Act35SideData_Act35SideRoundDataT implements flatbuffers.IGeneratedObject {
constructor(
  public roundId: string|Uint8Array|null = null,
  public challengeId: string|Uint8Array|null = null,
  public round: number = 0,
  public roundPassRating: number = 0,
  public isMaterialRandom: boolean = false,
  public fixedMaterialList: (dict__string__intT)[] = [],
  public passRoundCoin: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const roundId = (this.roundId !== null ? builder.createString(this.roundId!) : 0);
  const challengeId = (this.challengeId !== null ? builder.createString(this.challengeId!) : 0);
  const fixedMaterialList = clz_Torappu_Act35SideData_Act35SideRoundData.createFixedMaterialListVector(builder, builder.createObjectOffsetList(this.fixedMaterialList));

  return clz_Torappu_Act35SideData_Act35SideRoundData.createclz_Torappu_Act35SideData_Act35SideRoundData(builder,
    roundId,
    challengeId,
    this.round,
    this.roundPassRating,
    this.isMaterialRandom,
    fixedMaterialList,
    this.passRoundCoin
  );
}
}
