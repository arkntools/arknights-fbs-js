// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActMultiV3ConstData_PingCond, clz_Torappu_ActMultiV3ConstData_PingCondT } from './clz-torappu-act-multi-v3-const-data-ping-cond.js';
import { clz_Torappu_ActMultiV3InverseUnlockCond, clz_Torappu_ActMultiV3InverseUnlockCondT } from './clz-torappu-act-multi-v3-inverse-unlock-cond.js';
import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { enum__Torappu_PlayerAvatarGroupType } from './enum--torappu-player-avatar-group-type.js';


export class clz_Torappu_ActMultiV3ConstData implements flatbuffers.IUnpackableObject<clz_Torappu_ActMultiV3ConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActMultiV3ConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActMultiV3ConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActMultiV3ConstData):clz_Torappu_ActMultiV3ConstData {
  return (obj || new clz_Torappu_ActMultiV3ConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActMultiV3ConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActMultiV3ConstData):clz_Torappu_ActMultiV3ConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActMultiV3ConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

milestoneId():string|null
milestoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

roomNumCopyDesc():string|null
roomNumCopyDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roomNumCopyDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

noMapRoomNumCopyDesc():string|null
noMapRoomNumCopyDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
noMapRoomNumCopyDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

randomMapRoomNumCopyDesc():string|null
randomMapRoomNumCopyDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
randomMapRoomNumCopyDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

targetCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

squadMinNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

squadMaxNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

defenseTraMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

defenseOrdMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

defenseDifMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stageChooseAnimRandomStageIdList(index: number):string
stageChooseAnimRandomStageIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stageChooseAnimRandomStageIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stageChooseAnimRandomStageIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

requireStarsPerBuffKey():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxUnlockNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mapUnlockDesc1():string|null
mapUnlockDesc1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mapUnlockDesc2():string|null
mapUnlockDesc2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mapUnlockDesc3():string|null
mapUnlockDesc3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mapUnlockDesc4():string|null
mapUnlockDesc4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mapUnlockDesc5():string|null
mapUnlockDesc5(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc5(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mapUnlockDesc6():string|null
mapUnlockDesc6(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc6(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mapUnlockDesc7():string|null
mapUnlockDesc7(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapUnlockDesc7(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

difUnlockCond():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ordRewardStageId():string|null
ordRewardStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ordRewardStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

difRewardStageId():string|null
difRewardStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
difRewardStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxMatchTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tipsSwitchTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pingConds(index: number, obj?:clz_Torappu_ActMultiV3ConstData_PingCond):clz_Torappu_ActMultiV3ConstData_PingCond|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? (obj || new clz_Torappu_ActMultiV3ConstData_PingCond()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pingCondsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

chatCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

chatTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

markCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

markCond1():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

markCond2():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionName():string|null
dailyMissionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionDesc():string|null
dailyMissionDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionRule():string|null
dailyMissionRule(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionRule(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

missionDesc():string|null
missionDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionRewardItem(obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

normalGreatVoiceStar():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

footballGreatVoiceNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

defenceGreatVoiceWave():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

reportMaxNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

reportText():string|null
reportText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reportText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

reward1Id():string|null
reward1Id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reward1Id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

reward1Text():string|null
reward1Text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reward1Text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

reward2Id():string|null
reward2Id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reward2Id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

reward2Text():string|null
reward2Text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reward2Text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxRetryTimeInTeamRoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxRetryTimeInMatchRoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxRetryTimeInBattle():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxOperatorDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

maxPlaySpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

delayTimeNeedTip():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

settleRetryTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

playerDisplayTimeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

isMatchDefaultInverse():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

inverseUnlockCond(obj?:clz_Torappu_ActMultiV3InverseUnlockCond):clz_Torappu_ActMultiV3InverseUnlockCond|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? (obj || new clz_Torappu_ActMultiV3InverseUnlockCond()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

inverseModeHint():string|null
inverseModeHint(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
inverseModeHint(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamUnlockStageId():string|null
teamUnlockStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamUnlockStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamUnlockParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

trainPartnerCharId():string|null
trainPartnerCharId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainPartnerCharId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainPartnerCharSkinId():string|null
trainPartnerCharSkinId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainPartnerCharSkinId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainPartnerPlayerName():string|null
trainPartnerPlayerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainPartnerPlayerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainPartnerPlayerLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

trainPartnerBuffId():string|null
trainPartnerBuffId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainPartnerBuffId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainPartnerAvatarGroupType():enum__Torappu_PlayerAvatarGroupType {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_PlayerAvatarGroupType.NONE;
}

trainPartnerAvatarId():string|null
trainPartnerAvatarId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainPartnerAvatarId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainPartnerTitleList(index: number):string
trainPartnerTitleList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trainPartnerTitleList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trainPartnerTitleListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trainPartnerNameCardSkinId():string|null
trainPartnerNameCardSkinId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainPartnerNameCardSkinId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainPartnerNameCardSkinTmpl():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxPhotoPerType():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

checkFriendStateTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

photoCharacterDefaultAct():string|null
photoCharacterDefaultAct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
photoCharacterDefaultAct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainingStageConfirmDesc():string|null
trainingStageConfirmDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainingStageConfirmDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

joinRoomLongTimeThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

invitationSendCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatMapReachableSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatMapSizeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatExitMapOffset():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatEnterTranOffset():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatCollisionLossSpeedFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

boatAirFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

boatFrictionFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

boatForceInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

boatExchangeDamageMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatExchangeDamageMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatExchangeForceMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boatExchangeForceMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

waterSpeedFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_ActMultiV3ConstData(builder:flatbuffers.Builder) {
  builder.startObject(88);
}

static addMilestoneId(builder:flatbuffers.Builder, milestoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, milestoneIdOffset, 0);
}

static addRoomNumCopyDesc(builder:flatbuffers.Builder, roomNumCopyDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, roomNumCopyDescOffset, 0);
}

static addNoMapRoomNumCopyDesc(builder:flatbuffers.Builder, noMapRoomNumCopyDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, noMapRoomNumCopyDescOffset, 0);
}

static addRandomMapRoomNumCopyDesc(builder:flatbuffers.Builder, randomMapRoomNumCopyDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, randomMapRoomNumCopyDescOffset, 0);
}

static addTargetCd(builder:flatbuffers.Builder, targetCd:number) {
  builder.addFieldInt32(4, targetCd, 0);
}

static addSquadMinNum(builder:flatbuffers.Builder, squadMinNum:number) {
  builder.addFieldInt32(5, squadMinNum, 0);
}

static addSquadMaxNum(builder:flatbuffers.Builder, squadMaxNum:number) {
  builder.addFieldInt32(6, squadMaxNum, 0);
}

static addDefenseTraMax(builder:flatbuffers.Builder, defenseTraMax:number) {
  builder.addFieldInt32(7, defenseTraMax, 0);
}

static addDefenseOrdMax(builder:flatbuffers.Builder, defenseOrdMax:number) {
  builder.addFieldInt32(8, defenseOrdMax, 0);
}

static addDefenseDifMax(builder:flatbuffers.Builder, defenseDifMax:number) {
  builder.addFieldInt32(9, defenseDifMax, 0);
}

static addStageChooseAnimRandomStageIdList(builder:flatbuffers.Builder, stageChooseAnimRandomStageIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, stageChooseAnimRandomStageIdListOffset, 0);
}

static createStageChooseAnimRandomStageIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStageChooseAnimRandomStageIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRequireStarsPerBuffKey(builder:flatbuffers.Builder, requireStarsPerBuffKey:number) {
  builder.addFieldInt32(11, requireStarsPerBuffKey, 0);
}

static addMaxUnlockNum(builder:flatbuffers.Builder, maxUnlockNum:number) {
  builder.addFieldInt32(12, maxUnlockNum, 0);
}

static addMapUnlockDesc1(builder:flatbuffers.Builder, mapUnlockDesc1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(13, mapUnlockDesc1Offset, 0);
}

static addMapUnlockDesc2(builder:flatbuffers.Builder, mapUnlockDesc2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(14, mapUnlockDesc2Offset, 0);
}

static addMapUnlockDesc3(builder:flatbuffers.Builder, mapUnlockDesc3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(15, mapUnlockDesc3Offset, 0);
}

static addMapUnlockDesc4(builder:flatbuffers.Builder, mapUnlockDesc4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(16, mapUnlockDesc4Offset, 0);
}

static addMapUnlockDesc5(builder:flatbuffers.Builder, mapUnlockDesc5Offset:flatbuffers.Offset) {
  builder.addFieldOffset(17, mapUnlockDesc5Offset, 0);
}

static addMapUnlockDesc6(builder:flatbuffers.Builder, mapUnlockDesc6Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, mapUnlockDesc6Offset, 0);
}

static addMapUnlockDesc7(builder:flatbuffers.Builder, mapUnlockDesc7Offset:flatbuffers.Offset) {
  builder.addFieldOffset(19, mapUnlockDesc7Offset, 0);
}

static addDifUnlockCond(builder:flatbuffers.Builder, difUnlockCond:number) {
  builder.addFieldInt32(20, difUnlockCond, 0);
}

static addOrdRewardStageId(builder:flatbuffers.Builder, ordRewardStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, ordRewardStageIdOffset, 0);
}

static addDifRewardStageId(builder:flatbuffers.Builder, difRewardStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, difRewardStageIdOffset, 0);
}

static addMaxMatchTime(builder:flatbuffers.Builder, maxMatchTime:number) {
  builder.addFieldInt32(23, maxMatchTime, 0);
}

static addTipsSwitchTime(builder:flatbuffers.Builder, tipsSwitchTime:number) {
  builder.addFieldInt32(24, tipsSwitchTime, 0);
}

static addPingConds(builder:flatbuffers.Builder, pingCondsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, pingCondsOffset, 0);
}

static createPingCondsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPingCondsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChatCd(builder:flatbuffers.Builder, chatCd:number) {
  builder.addFieldInt32(26, chatCd, 0);
}

static addChatTime(builder:flatbuffers.Builder, chatTime:number) {
  builder.addFieldInt32(27, chatTime, 0);
}

static addMarkCd(builder:flatbuffers.Builder, markCd:number) {
  builder.addFieldInt32(28, markCd, 0);
}

static addMarkCond1(builder:flatbuffers.Builder, markCond1:number) {
  builder.addFieldInt32(29, markCond1, 0);
}

static addMarkCond2(builder:flatbuffers.Builder, markCond2:number) {
  builder.addFieldInt32(30, markCond2, 0);
}

static addDailyMissionParam(builder:flatbuffers.Builder, dailyMissionParam:number) {
  builder.addFieldInt32(31, dailyMissionParam, 0);
}

static addDailyMissionName(builder:flatbuffers.Builder, dailyMissionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, dailyMissionNameOffset, 0);
}

static addDailyMissionDesc(builder:flatbuffers.Builder, dailyMissionDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, dailyMissionDescOffset, 0);
}

static addDailyMissionRule(builder:flatbuffers.Builder, dailyMissionRuleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, dailyMissionRuleOffset, 0);
}

static addMissionDesc(builder:flatbuffers.Builder, missionDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, missionDescOffset, 0);
}

static addDailyMissionRewardItem(builder:flatbuffers.Builder, dailyMissionRewardItemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, dailyMissionRewardItemOffset, 0);
}

static addNormalGreatVoiceStar(builder:flatbuffers.Builder, normalGreatVoiceStar:number) {
  builder.addFieldInt32(37, normalGreatVoiceStar, 0);
}

static addFootballGreatVoiceNum(builder:flatbuffers.Builder, footballGreatVoiceNum:number) {
  builder.addFieldInt32(38, footballGreatVoiceNum, 0);
}

static addDefenceGreatVoiceWave(builder:flatbuffers.Builder, defenceGreatVoiceWave:number) {
  builder.addFieldInt32(39, defenceGreatVoiceWave, 0);
}

static addReportMaxNum(builder:flatbuffers.Builder, reportMaxNum:number) {
  builder.addFieldInt32(40, reportMaxNum, 0);
}

static addReportText(builder:flatbuffers.Builder, reportTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, reportTextOffset, 0);
}

static addReward1Id(builder:flatbuffers.Builder, reward1IdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, reward1IdOffset, 0);
}

static addReward1Text(builder:flatbuffers.Builder, reward1TextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, reward1TextOffset, 0);
}

static addReward2Id(builder:flatbuffers.Builder, reward2IdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, reward2IdOffset, 0);
}

static addReward2Text(builder:flatbuffers.Builder, reward2TextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, reward2TextOffset, 0);
}

static addMaxRetryTimeInTeamRoom(builder:flatbuffers.Builder, maxRetryTimeInTeamRoom:number) {
  builder.addFieldInt32(46, maxRetryTimeInTeamRoom, 0);
}

static addMaxRetryTimeInMatchRoom(builder:flatbuffers.Builder, maxRetryTimeInMatchRoom:number) {
  builder.addFieldInt32(47, maxRetryTimeInMatchRoom, 0);
}

static addMaxRetryTimeInBattle(builder:flatbuffers.Builder, maxRetryTimeInBattle:number) {
  builder.addFieldInt32(48, maxRetryTimeInBattle, 0);
}

static addMaxOperatorDelay(builder:flatbuffers.Builder, maxOperatorDelay:number) {
  builder.addFieldFloat64(49, maxOperatorDelay, 0.0);
}

static addMaxPlaySpeed(builder:flatbuffers.Builder, maxPlaySpeed:number) {
  builder.addFieldInt32(50, maxPlaySpeed, 0);
}

static addDelayTimeNeedTip(builder:flatbuffers.Builder, delayTimeNeedTip:number) {
  builder.addFieldInt32(51, delayTimeNeedTip, 0);
}

static addSettleRetryTime(builder:flatbuffers.Builder, settleRetryTime:number) {
  builder.addFieldInt32(52, settleRetryTime, 0);
}

static addPlayerDisplayTimeMax(builder:flatbuffers.Builder, playerDisplayTimeMax:number) {
  builder.addFieldFloat32(53, playerDisplayTimeMax, 0.0);
}

static addIsMatchDefaultInverse(builder:flatbuffers.Builder, isMatchDefaultInverse:boolean) {
  builder.addFieldInt8(54, +isMatchDefaultInverse, +false);
}

static addInverseUnlockCond(builder:flatbuffers.Builder, inverseUnlockCondOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, inverseUnlockCondOffset, 0);
}

static addInverseModeHint(builder:flatbuffers.Builder, inverseModeHintOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, inverseModeHintOffset, 0);
}

static addTeamUnlockStageId(builder:flatbuffers.Builder, teamUnlockStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, teamUnlockStageIdOffset, 0);
}

static addTeamUnlockParam(builder:flatbuffers.Builder, teamUnlockParam:number) {
  builder.addFieldInt32(58, teamUnlockParam, 0);
}

static addTrainPartnerCharId(builder:flatbuffers.Builder, trainPartnerCharIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, trainPartnerCharIdOffset, 0);
}

static addTrainPartnerCharSkinId(builder:flatbuffers.Builder, trainPartnerCharSkinIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, trainPartnerCharSkinIdOffset, 0);
}

static addTrainPartnerPlayerName(builder:flatbuffers.Builder, trainPartnerPlayerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, trainPartnerPlayerNameOffset, 0);
}

static addTrainPartnerPlayerLevel(builder:flatbuffers.Builder, trainPartnerPlayerLevel:number) {
  builder.addFieldInt32(62, trainPartnerPlayerLevel, 0);
}

static addTrainPartnerBuffId(builder:flatbuffers.Builder, trainPartnerBuffIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, trainPartnerBuffIdOffset, 0);
}

static addTrainPartnerAvatarGroupType(builder:flatbuffers.Builder, trainPartnerAvatarGroupType:enum__Torappu_PlayerAvatarGroupType) {
  builder.addFieldInt32(64, trainPartnerAvatarGroupType, enum__Torappu_PlayerAvatarGroupType.NONE);
}

static addTrainPartnerAvatarId(builder:flatbuffers.Builder, trainPartnerAvatarIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, trainPartnerAvatarIdOffset, 0);
}

static addTrainPartnerTitleList(builder:flatbuffers.Builder, trainPartnerTitleListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, trainPartnerTitleListOffset, 0);
}

static createTrainPartnerTitleListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrainPartnerTitleListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrainPartnerNameCardSkinId(builder:flatbuffers.Builder, trainPartnerNameCardSkinIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, trainPartnerNameCardSkinIdOffset, 0);
}

static addTrainPartnerNameCardSkinTmpl(builder:flatbuffers.Builder, trainPartnerNameCardSkinTmpl:number) {
  builder.addFieldInt32(68, trainPartnerNameCardSkinTmpl, 0);
}

static addMaxPhotoPerType(builder:flatbuffers.Builder, maxPhotoPerType:number) {
  builder.addFieldInt32(69, maxPhotoPerType, 0);
}

static addCheckFriendStateTime(builder:flatbuffers.Builder, checkFriendStateTime:number) {
  builder.addFieldInt32(70, checkFriendStateTime, 0);
}

static addPhotoCharacterDefaultAct(builder:flatbuffers.Builder, photoCharacterDefaultActOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, photoCharacterDefaultActOffset, 0);
}

static addTrainingStageConfirmDesc(builder:flatbuffers.Builder, trainingStageConfirmDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, trainingStageConfirmDescOffset, 0);
}

static addJoinRoomLongTimeThreshold(builder:flatbuffers.Builder, joinRoomLongTimeThreshold:number) {
  builder.addFieldFloat64(73, joinRoomLongTimeThreshold, 0.0);
}

static addInvitationSendCd(builder:flatbuffers.Builder, invitationSendCd:number) {
  builder.addFieldInt32(74, invitationSendCd, 0);
}

static addBoatMapReachableSize(builder:flatbuffers.Builder, boatMapReachableSize:number) {
  builder.addFieldInt32(75, boatMapReachableSize, 0);
}

static addBoatMapSizeMax(builder:flatbuffers.Builder, boatMapSizeMax:number) {
  builder.addFieldInt32(76, boatMapSizeMax, 0);
}

static addBoatExitMapOffset(builder:flatbuffers.Builder, boatExitMapOffset:number) {
  builder.addFieldInt32(77, boatExitMapOffset, 0);
}

static addBoatEnterTranOffset(builder:flatbuffers.Builder, boatEnterTranOffset:number) {
  builder.addFieldInt32(78, boatEnterTranOffset, 0);
}

static addBoatCollisionLossSpeedFactor(builder:flatbuffers.Builder, boatCollisionLossSpeedFactor:number) {
  builder.addFieldFloat32(79, boatCollisionLossSpeedFactor, 0.0);
}

static addBoatAirFactor(builder:flatbuffers.Builder, boatAirFactor:number) {
  builder.addFieldFloat32(80, boatAirFactor, 0.0);
}

static addBoatFrictionFactor(builder:flatbuffers.Builder, boatFrictionFactor:number) {
  builder.addFieldFloat32(81, boatFrictionFactor, 0.0);
}

static addBoatForceInterval(builder:flatbuffers.Builder, boatForceInterval:number) {
  builder.addFieldFloat32(82, boatForceInterval, 0.0);
}

static addBoatExchangeDamageMax(builder:flatbuffers.Builder, boatExchangeDamageMax:number) {
  builder.addFieldInt32(83, boatExchangeDamageMax, 0);
}

static addBoatExchangeDamageMin(builder:flatbuffers.Builder, boatExchangeDamageMin:number) {
  builder.addFieldInt32(84, boatExchangeDamageMin, 0);
}

static addBoatExchangeForceMax(builder:flatbuffers.Builder, boatExchangeForceMax:number) {
  builder.addFieldInt32(85, boatExchangeForceMax, 0);
}

static addBoatExchangeForceMin(builder:flatbuffers.Builder, boatExchangeForceMin:number) {
  builder.addFieldInt32(86, boatExchangeForceMin, 0);
}

static addWaterSpeedFactor(builder:flatbuffers.Builder, waterSpeedFactor:number) {
  builder.addFieldFloat32(87, waterSpeedFactor, 0.0);
}

static endclz_Torappu_ActMultiV3ConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActMultiV3ConstDataT {
  return new clz_Torappu_ActMultiV3ConstDataT(
    this.milestoneId(),
    this.roomNumCopyDesc(),
    this.noMapRoomNumCopyDesc(),
    this.randomMapRoomNumCopyDesc(),
    this.targetCd(),
    this.squadMinNum(),
    this.squadMaxNum(),
    this.defenseTraMax(),
    this.defenseOrdMax(),
    this.defenseDifMax(),
    this.bb!.createScalarList<string>(this.stageChooseAnimRandomStageIdList.bind(this), this.stageChooseAnimRandomStageIdListLength()),
    this.requireStarsPerBuffKey(),
    this.maxUnlockNum(),
    this.mapUnlockDesc1(),
    this.mapUnlockDesc2(),
    this.mapUnlockDesc3(),
    this.mapUnlockDesc4(),
    this.mapUnlockDesc5(),
    this.mapUnlockDesc6(),
    this.mapUnlockDesc7(),
    this.difUnlockCond(),
    this.ordRewardStageId(),
    this.difRewardStageId(),
    this.maxMatchTime(),
    this.tipsSwitchTime(),
    this.bb!.createObjList<clz_Torappu_ActMultiV3ConstData_PingCond, clz_Torappu_ActMultiV3ConstData_PingCondT>(this.pingConds.bind(this), this.pingCondsLength()),
    this.chatCd(),
    this.chatTime(),
    this.markCd(),
    this.markCond1(),
    this.markCond2(),
    this.dailyMissionParam(),
    this.dailyMissionName(),
    this.dailyMissionDesc(),
    this.dailyMissionRule(),
    this.missionDesc(),
    (this.dailyMissionRewardItem() !== null ? this.dailyMissionRewardItem()!.unpack() : null),
    this.normalGreatVoiceStar(),
    this.footballGreatVoiceNum(),
    this.defenceGreatVoiceWave(),
    this.reportMaxNum(),
    this.reportText(),
    this.reward1Id(),
    this.reward1Text(),
    this.reward2Id(),
    this.reward2Text(),
    this.maxRetryTimeInTeamRoom(),
    this.maxRetryTimeInMatchRoom(),
    this.maxRetryTimeInBattle(),
    this.maxOperatorDelay(),
    this.maxPlaySpeed(),
    this.delayTimeNeedTip(),
    this.settleRetryTime(),
    this.playerDisplayTimeMax(),
    this.isMatchDefaultInverse(),
    (this.inverseUnlockCond() !== null ? this.inverseUnlockCond()!.unpack() : null),
    this.inverseModeHint(),
    this.teamUnlockStageId(),
    this.teamUnlockParam(),
    this.trainPartnerCharId(),
    this.trainPartnerCharSkinId(),
    this.trainPartnerPlayerName(),
    this.trainPartnerPlayerLevel(),
    this.trainPartnerBuffId(),
    this.trainPartnerAvatarGroupType(),
    this.trainPartnerAvatarId(),
    this.bb!.createScalarList<string>(this.trainPartnerTitleList.bind(this), this.trainPartnerTitleListLength()),
    this.trainPartnerNameCardSkinId(),
    this.trainPartnerNameCardSkinTmpl(),
    this.maxPhotoPerType(),
    this.checkFriendStateTime(),
    this.photoCharacterDefaultAct(),
    this.trainingStageConfirmDesc(),
    this.joinRoomLongTimeThreshold(),
    this.invitationSendCd(),
    this.boatMapReachableSize(),
    this.boatMapSizeMax(),
    this.boatExitMapOffset(),
    this.boatEnterTranOffset(),
    this.boatCollisionLossSpeedFactor(),
    this.boatAirFactor(),
    this.boatFrictionFactor(),
    this.boatForceInterval(),
    this.boatExchangeDamageMax(),
    this.boatExchangeDamageMin(),
    this.boatExchangeForceMax(),
    this.boatExchangeForceMin(),
    this.waterSpeedFactor()
  );
}


unpackTo(_o: clz_Torappu_ActMultiV3ConstDataT): void {
  _o.milestoneId = this.milestoneId();
  _o.roomNumCopyDesc = this.roomNumCopyDesc();
  _o.noMapRoomNumCopyDesc = this.noMapRoomNumCopyDesc();
  _o.randomMapRoomNumCopyDesc = this.randomMapRoomNumCopyDesc();
  _o.targetCd = this.targetCd();
  _o.squadMinNum = this.squadMinNum();
  _o.squadMaxNum = this.squadMaxNum();
  _o.defenseTraMax = this.defenseTraMax();
  _o.defenseOrdMax = this.defenseOrdMax();
  _o.defenseDifMax = this.defenseDifMax();
  _o.stageChooseAnimRandomStageIdList = this.bb!.createScalarList<string>(this.stageChooseAnimRandomStageIdList.bind(this), this.stageChooseAnimRandomStageIdListLength());
  _o.requireStarsPerBuffKey = this.requireStarsPerBuffKey();
  _o.maxUnlockNum = this.maxUnlockNum();
  _o.mapUnlockDesc1 = this.mapUnlockDesc1();
  _o.mapUnlockDesc2 = this.mapUnlockDesc2();
  _o.mapUnlockDesc3 = this.mapUnlockDesc3();
  _o.mapUnlockDesc4 = this.mapUnlockDesc4();
  _o.mapUnlockDesc5 = this.mapUnlockDesc5();
  _o.mapUnlockDesc6 = this.mapUnlockDesc6();
  _o.mapUnlockDesc7 = this.mapUnlockDesc7();
  _o.difUnlockCond = this.difUnlockCond();
  _o.ordRewardStageId = this.ordRewardStageId();
  _o.difRewardStageId = this.difRewardStageId();
  _o.maxMatchTime = this.maxMatchTime();
  _o.tipsSwitchTime = this.tipsSwitchTime();
  _o.pingConds = this.bb!.createObjList<clz_Torappu_ActMultiV3ConstData_PingCond, clz_Torappu_ActMultiV3ConstData_PingCondT>(this.pingConds.bind(this), this.pingCondsLength());
  _o.chatCd = this.chatCd();
  _o.chatTime = this.chatTime();
  _o.markCd = this.markCd();
  _o.markCond1 = this.markCond1();
  _o.markCond2 = this.markCond2();
  _o.dailyMissionParam = this.dailyMissionParam();
  _o.dailyMissionName = this.dailyMissionName();
  _o.dailyMissionDesc = this.dailyMissionDesc();
  _o.dailyMissionRule = this.dailyMissionRule();
  _o.missionDesc = this.missionDesc();
  _o.dailyMissionRewardItem = (this.dailyMissionRewardItem() !== null ? this.dailyMissionRewardItem()!.unpack() : null);
  _o.normalGreatVoiceStar = this.normalGreatVoiceStar();
  _o.footballGreatVoiceNum = this.footballGreatVoiceNum();
  _o.defenceGreatVoiceWave = this.defenceGreatVoiceWave();
  _o.reportMaxNum = this.reportMaxNum();
  _o.reportText = this.reportText();
  _o.reward1Id = this.reward1Id();
  _o.reward1Text = this.reward1Text();
  _o.reward2Id = this.reward2Id();
  _o.reward2Text = this.reward2Text();
  _o.maxRetryTimeInTeamRoom = this.maxRetryTimeInTeamRoom();
  _o.maxRetryTimeInMatchRoom = this.maxRetryTimeInMatchRoom();
  _o.maxRetryTimeInBattle = this.maxRetryTimeInBattle();
  _o.maxOperatorDelay = this.maxOperatorDelay();
  _o.maxPlaySpeed = this.maxPlaySpeed();
  _o.delayTimeNeedTip = this.delayTimeNeedTip();
  _o.settleRetryTime = this.settleRetryTime();
  _o.playerDisplayTimeMax = this.playerDisplayTimeMax();
  _o.isMatchDefaultInverse = this.isMatchDefaultInverse();
  _o.inverseUnlockCond = (this.inverseUnlockCond() !== null ? this.inverseUnlockCond()!.unpack() : null);
  _o.inverseModeHint = this.inverseModeHint();
  _o.teamUnlockStageId = this.teamUnlockStageId();
  _o.teamUnlockParam = this.teamUnlockParam();
  _o.trainPartnerCharId = this.trainPartnerCharId();
  _o.trainPartnerCharSkinId = this.trainPartnerCharSkinId();
  _o.trainPartnerPlayerName = this.trainPartnerPlayerName();
  _o.trainPartnerPlayerLevel = this.trainPartnerPlayerLevel();
  _o.trainPartnerBuffId = this.trainPartnerBuffId();
  _o.trainPartnerAvatarGroupType = this.trainPartnerAvatarGroupType();
  _o.trainPartnerAvatarId = this.trainPartnerAvatarId();
  _o.trainPartnerTitleList = this.bb!.createScalarList<string>(this.trainPartnerTitleList.bind(this), this.trainPartnerTitleListLength());
  _o.trainPartnerNameCardSkinId = this.trainPartnerNameCardSkinId();
  _o.trainPartnerNameCardSkinTmpl = this.trainPartnerNameCardSkinTmpl();
  _o.maxPhotoPerType = this.maxPhotoPerType();
  _o.checkFriendStateTime = this.checkFriendStateTime();
  _o.photoCharacterDefaultAct = this.photoCharacterDefaultAct();
  _o.trainingStageConfirmDesc = this.trainingStageConfirmDesc();
  _o.joinRoomLongTimeThreshold = this.joinRoomLongTimeThreshold();
  _o.invitationSendCd = this.invitationSendCd();
  _o.boatMapReachableSize = this.boatMapReachableSize();
  _o.boatMapSizeMax = this.boatMapSizeMax();
  _o.boatExitMapOffset = this.boatExitMapOffset();
  _o.boatEnterTranOffset = this.boatEnterTranOffset();
  _o.boatCollisionLossSpeedFactor = this.boatCollisionLossSpeedFactor();
  _o.boatAirFactor = this.boatAirFactor();
  _o.boatFrictionFactor = this.boatFrictionFactor();
  _o.boatForceInterval = this.boatForceInterval();
  _o.boatExchangeDamageMax = this.boatExchangeDamageMax();
  _o.boatExchangeDamageMin = this.boatExchangeDamageMin();
  _o.boatExchangeForceMax = this.boatExchangeForceMax();
  _o.boatExchangeForceMin = this.boatExchangeForceMin();
  _o.waterSpeedFactor = this.waterSpeedFactor();
}
}

export class clz_Torappu_ActMultiV3ConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public milestoneId: string|Uint8Array|null = null,
  public roomNumCopyDesc: string|Uint8Array|null = null,
  public noMapRoomNumCopyDesc: string|Uint8Array|null = null,
  public randomMapRoomNumCopyDesc: string|Uint8Array|null = null,
  public targetCd: number = 0,
  public squadMinNum: number = 0,
  public squadMaxNum: number = 0,
  public defenseTraMax: number = 0,
  public defenseOrdMax: number = 0,
  public defenseDifMax: number = 0,
  public stageChooseAnimRandomStageIdList: (string)[] = [],
  public requireStarsPerBuffKey: number = 0,
  public maxUnlockNum: number = 0,
  public mapUnlockDesc1: string|Uint8Array|null = null,
  public mapUnlockDesc2: string|Uint8Array|null = null,
  public mapUnlockDesc3: string|Uint8Array|null = null,
  public mapUnlockDesc4: string|Uint8Array|null = null,
  public mapUnlockDesc5: string|Uint8Array|null = null,
  public mapUnlockDesc6: string|Uint8Array|null = null,
  public mapUnlockDesc7: string|Uint8Array|null = null,
  public difUnlockCond: number = 0,
  public ordRewardStageId: string|Uint8Array|null = null,
  public difRewardStageId: string|Uint8Array|null = null,
  public maxMatchTime: number = 0,
  public tipsSwitchTime: number = 0,
  public pingConds: (clz_Torappu_ActMultiV3ConstData_PingCondT)[] = [],
  public chatCd: number = 0,
  public chatTime: number = 0,
  public markCd: number = 0,
  public markCond1: number = 0,
  public markCond2: number = 0,
  public dailyMissionParam: number = 0,
  public dailyMissionName: string|Uint8Array|null = null,
  public dailyMissionDesc: string|Uint8Array|null = null,
  public dailyMissionRule: string|Uint8Array|null = null,
  public missionDesc: string|Uint8Array|null = null,
  public dailyMissionRewardItem: clz_Torappu_ItemBundleT|null = null,
  public normalGreatVoiceStar: number = 0,
  public footballGreatVoiceNum: number = 0,
  public defenceGreatVoiceWave: number = 0,
  public reportMaxNum: number = 0,
  public reportText: string|Uint8Array|null = null,
  public reward1Id: string|Uint8Array|null = null,
  public reward1Text: string|Uint8Array|null = null,
  public reward2Id: string|Uint8Array|null = null,
  public reward2Text: string|Uint8Array|null = null,
  public maxRetryTimeInTeamRoom: number = 0,
  public maxRetryTimeInMatchRoom: number = 0,
  public maxRetryTimeInBattle: number = 0,
  public maxOperatorDelay: number = 0.0,
  public maxPlaySpeed: number = 0,
  public delayTimeNeedTip: number = 0,
  public settleRetryTime: number = 0,
  public playerDisplayTimeMax: number = 0.0,
  public isMatchDefaultInverse: boolean = false,
  public inverseUnlockCond: clz_Torappu_ActMultiV3InverseUnlockCondT|null = null,
  public inverseModeHint: string|Uint8Array|null = null,
  public teamUnlockStageId: string|Uint8Array|null = null,
  public teamUnlockParam: number = 0,
  public trainPartnerCharId: string|Uint8Array|null = null,
  public trainPartnerCharSkinId: string|Uint8Array|null = null,
  public trainPartnerPlayerName: string|Uint8Array|null = null,
  public trainPartnerPlayerLevel: number = 0,
  public trainPartnerBuffId: string|Uint8Array|null = null,
  public trainPartnerAvatarGroupType: enum__Torappu_PlayerAvatarGroupType = enum__Torappu_PlayerAvatarGroupType.NONE,
  public trainPartnerAvatarId: string|Uint8Array|null = null,
  public trainPartnerTitleList: (string)[] = [],
  public trainPartnerNameCardSkinId: string|Uint8Array|null = null,
  public trainPartnerNameCardSkinTmpl: number = 0,
  public maxPhotoPerType: number = 0,
  public checkFriendStateTime: number = 0,
  public photoCharacterDefaultAct: string|Uint8Array|null = null,
  public trainingStageConfirmDesc: string|Uint8Array|null = null,
  public joinRoomLongTimeThreshold: number = 0.0,
  public invitationSendCd: number = 0,
  public boatMapReachableSize: number = 0,
  public boatMapSizeMax: number = 0,
  public boatExitMapOffset: number = 0,
  public boatEnterTranOffset: number = 0,
  public boatCollisionLossSpeedFactor: number = 0.0,
  public boatAirFactor: number = 0.0,
  public boatFrictionFactor: number = 0.0,
  public boatForceInterval: number = 0.0,
  public boatExchangeDamageMax: number = 0,
  public boatExchangeDamageMin: number = 0,
  public boatExchangeForceMax: number = 0,
  public boatExchangeForceMin: number = 0,
  public waterSpeedFactor: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const milestoneId = (this.milestoneId !== null ? builder.createString(this.milestoneId!) : 0);
  const roomNumCopyDesc = (this.roomNumCopyDesc !== null ? builder.createString(this.roomNumCopyDesc!) : 0);
  const noMapRoomNumCopyDesc = (this.noMapRoomNumCopyDesc !== null ? builder.createString(this.noMapRoomNumCopyDesc!) : 0);
  const randomMapRoomNumCopyDesc = (this.randomMapRoomNumCopyDesc !== null ? builder.createString(this.randomMapRoomNumCopyDesc!) : 0);
  const stageChooseAnimRandomStageIdList = clz_Torappu_ActMultiV3ConstData.createStageChooseAnimRandomStageIdListVector(builder, builder.createObjectOffsetList(this.stageChooseAnimRandomStageIdList));
  const mapUnlockDesc1 = (this.mapUnlockDesc1 !== null ? builder.createString(this.mapUnlockDesc1!) : 0);
  const mapUnlockDesc2 = (this.mapUnlockDesc2 !== null ? builder.createString(this.mapUnlockDesc2!) : 0);
  const mapUnlockDesc3 = (this.mapUnlockDesc3 !== null ? builder.createString(this.mapUnlockDesc3!) : 0);
  const mapUnlockDesc4 = (this.mapUnlockDesc4 !== null ? builder.createString(this.mapUnlockDesc4!) : 0);
  const mapUnlockDesc5 = (this.mapUnlockDesc5 !== null ? builder.createString(this.mapUnlockDesc5!) : 0);
  const mapUnlockDesc6 = (this.mapUnlockDesc6 !== null ? builder.createString(this.mapUnlockDesc6!) : 0);
  const mapUnlockDesc7 = (this.mapUnlockDesc7 !== null ? builder.createString(this.mapUnlockDesc7!) : 0);
  const ordRewardStageId = (this.ordRewardStageId !== null ? builder.createString(this.ordRewardStageId!) : 0);
  const difRewardStageId = (this.difRewardStageId !== null ? builder.createString(this.difRewardStageId!) : 0);
  const pingConds = clz_Torappu_ActMultiV3ConstData.createPingCondsVector(builder, builder.createObjectOffsetList(this.pingConds));
  const dailyMissionName = (this.dailyMissionName !== null ? builder.createString(this.dailyMissionName!) : 0);
  const dailyMissionDesc = (this.dailyMissionDesc !== null ? builder.createString(this.dailyMissionDesc!) : 0);
  const dailyMissionRule = (this.dailyMissionRule !== null ? builder.createString(this.dailyMissionRule!) : 0);
  const missionDesc = (this.missionDesc !== null ? builder.createString(this.missionDesc!) : 0);
  const dailyMissionRewardItem = (this.dailyMissionRewardItem !== null ? this.dailyMissionRewardItem!.pack(builder) : 0);
  const reportText = (this.reportText !== null ? builder.createString(this.reportText!) : 0);
  const reward1Id = (this.reward1Id !== null ? builder.createString(this.reward1Id!) : 0);
  const reward1Text = (this.reward1Text !== null ? builder.createString(this.reward1Text!) : 0);
  const reward2Id = (this.reward2Id !== null ? builder.createString(this.reward2Id!) : 0);
  const reward2Text = (this.reward2Text !== null ? builder.createString(this.reward2Text!) : 0);
  const inverseUnlockCond = (this.inverseUnlockCond !== null ? this.inverseUnlockCond!.pack(builder) : 0);
  const inverseModeHint = (this.inverseModeHint !== null ? builder.createString(this.inverseModeHint!) : 0);
  const teamUnlockStageId = (this.teamUnlockStageId !== null ? builder.createString(this.teamUnlockStageId!) : 0);
  const trainPartnerCharId = (this.trainPartnerCharId !== null ? builder.createString(this.trainPartnerCharId!) : 0);
  const trainPartnerCharSkinId = (this.trainPartnerCharSkinId !== null ? builder.createString(this.trainPartnerCharSkinId!) : 0);
  const trainPartnerPlayerName = (this.trainPartnerPlayerName !== null ? builder.createString(this.trainPartnerPlayerName!) : 0);
  const trainPartnerBuffId = (this.trainPartnerBuffId !== null ? builder.createString(this.trainPartnerBuffId!) : 0);
  const trainPartnerAvatarId = (this.trainPartnerAvatarId !== null ? builder.createString(this.trainPartnerAvatarId!) : 0);
  const trainPartnerTitleList = clz_Torappu_ActMultiV3ConstData.createTrainPartnerTitleListVector(builder, builder.createObjectOffsetList(this.trainPartnerTitleList));
  const trainPartnerNameCardSkinId = (this.trainPartnerNameCardSkinId !== null ? builder.createString(this.trainPartnerNameCardSkinId!) : 0);
  const photoCharacterDefaultAct = (this.photoCharacterDefaultAct !== null ? builder.createString(this.photoCharacterDefaultAct!) : 0);
  const trainingStageConfirmDesc = (this.trainingStageConfirmDesc !== null ? builder.createString(this.trainingStageConfirmDesc!) : 0);

  clz_Torappu_ActMultiV3ConstData.startclz_Torappu_ActMultiV3ConstData(builder);
  clz_Torappu_ActMultiV3ConstData.addMilestoneId(builder, milestoneId);
  clz_Torappu_ActMultiV3ConstData.addRoomNumCopyDesc(builder, roomNumCopyDesc);
  clz_Torappu_ActMultiV3ConstData.addNoMapRoomNumCopyDesc(builder, noMapRoomNumCopyDesc);
  clz_Torappu_ActMultiV3ConstData.addRandomMapRoomNumCopyDesc(builder, randomMapRoomNumCopyDesc);
  clz_Torappu_ActMultiV3ConstData.addTargetCd(builder, this.targetCd);
  clz_Torappu_ActMultiV3ConstData.addSquadMinNum(builder, this.squadMinNum);
  clz_Torappu_ActMultiV3ConstData.addSquadMaxNum(builder, this.squadMaxNum);
  clz_Torappu_ActMultiV3ConstData.addDefenseTraMax(builder, this.defenseTraMax);
  clz_Torappu_ActMultiV3ConstData.addDefenseOrdMax(builder, this.defenseOrdMax);
  clz_Torappu_ActMultiV3ConstData.addDefenseDifMax(builder, this.defenseDifMax);
  clz_Torappu_ActMultiV3ConstData.addStageChooseAnimRandomStageIdList(builder, stageChooseAnimRandomStageIdList);
  clz_Torappu_ActMultiV3ConstData.addRequireStarsPerBuffKey(builder, this.requireStarsPerBuffKey);
  clz_Torappu_ActMultiV3ConstData.addMaxUnlockNum(builder, this.maxUnlockNum);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc1(builder, mapUnlockDesc1);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc2(builder, mapUnlockDesc2);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc3(builder, mapUnlockDesc3);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc4(builder, mapUnlockDesc4);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc5(builder, mapUnlockDesc5);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc6(builder, mapUnlockDesc6);
  clz_Torappu_ActMultiV3ConstData.addMapUnlockDesc7(builder, mapUnlockDesc7);
  clz_Torappu_ActMultiV3ConstData.addDifUnlockCond(builder, this.difUnlockCond);
  clz_Torappu_ActMultiV3ConstData.addOrdRewardStageId(builder, ordRewardStageId);
  clz_Torappu_ActMultiV3ConstData.addDifRewardStageId(builder, difRewardStageId);
  clz_Torappu_ActMultiV3ConstData.addMaxMatchTime(builder, this.maxMatchTime);
  clz_Torappu_ActMultiV3ConstData.addTipsSwitchTime(builder, this.tipsSwitchTime);
  clz_Torappu_ActMultiV3ConstData.addPingConds(builder, pingConds);
  clz_Torappu_ActMultiV3ConstData.addChatCd(builder, this.chatCd);
  clz_Torappu_ActMultiV3ConstData.addChatTime(builder, this.chatTime);
  clz_Torappu_ActMultiV3ConstData.addMarkCd(builder, this.markCd);
  clz_Torappu_ActMultiV3ConstData.addMarkCond1(builder, this.markCond1);
  clz_Torappu_ActMultiV3ConstData.addMarkCond2(builder, this.markCond2);
  clz_Torappu_ActMultiV3ConstData.addDailyMissionParam(builder, this.dailyMissionParam);
  clz_Torappu_ActMultiV3ConstData.addDailyMissionName(builder, dailyMissionName);
  clz_Torappu_ActMultiV3ConstData.addDailyMissionDesc(builder, dailyMissionDesc);
  clz_Torappu_ActMultiV3ConstData.addDailyMissionRule(builder, dailyMissionRule);
  clz_Torappu_ActMultiV3ConstData.addMissionDesc(builder, missionDesc);
  clz_Torappu_ActMultiV3ConstData.addDailyMissionRewardItem(builder, dailyMissionRewardItem);
  clz_Torappu_ActMultiV3ConstData.addNormalGreatVoiceStar(builder, this.normalGreatVoiceStar);
  clz_Torappu_ActMultiV3ConstData.addFootballGreatVoiceNum(builder, this.footballGreatVoiceNum);
  clz_Torappu_ActMultiV3ConstData.addDefenceGreatVoiceWave(builder, this.defenceGreatVoiceWave);
  clz_Torappu_ActMultiV3ConstData.addReportMaxNum(builder, this.reportMaxNum);
  clz_Torappu_ActMultiV3ConstData.addReportText(builder, reportText);
  clz_Torappu_ActMultiV3ConstData.addReward1Id(builder, reward1Id);
  clz_Torappu_ActMultiV3ConstData.addReward1Text(builder, reward1Text);
  clz_Torappu_ActMultiV3ConstData.addReward2Id(builder, reward2Id);
  clz_Torappu_ActMultiV3ConstData.addReward2Text(builder, reward2Text);
  clz_Torappu_ActMultiV3ConstData.addMaxRetryTimeInTeamRoom(builder, this.maxRetryTimeInTeamRoom);
  clz_Torappu_ActMultiV3ConstData.addMaxRetryTimeInMatchRoom(builder, this.maxRetryTimeInMatchRoom);
  clz_Torappu_ActMultiV3ConstData.addMaxRetryTimeInBattle(builder, this.maxRetryTimeInBattle);
  clz_Torappu_ActMultiV3ConstData.addMaxOperatorDelay(builder, this.maxOperatorDelay);
  clz_Torappu_ActMultiV3ConstData.addMaxPlaySpeed(builder, this.maxPlaySpeed);
  clz_Torappu_ActMultiV3ConstData.addDelayTimeNeedTip(builder, this.delayTimeNeedTip);
  clz_Torappu_ActMultiV3ConstData.addSettleRetryTime(builder, this.settleRetryTime);
  clz_Torappu_ActMultiV3ConstData.addPlayerDisplayTimeMax(builder, this.playerDisplayTimeMax);
  clz_Torappu_ActMultiV3ConstData.addIsMatchDefaultInverse(builder, this.isMatchDefaultInverse);
  clz_Torappu_ActMultiV3ConstData.addInverseUnlockCond(builder, inverseUnlockCond);
  clz_Torappu_ActMultiV3ConstData.addInverseModeHint(builder, inverseModeHint);
  clz_Torappu_ActMultiV3ConstData.addTeamUnlockStageId(builder, teamUnlockStageId);
  clz_Torappu_ActMultiV3ConstData.addTeamUnlockParam(builder, this.teamUnlockParam);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerCharId(builder, trainPartnerCharId);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerCharSkinId(builder, trainPartnerCharSkinId);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerPlayerName(builder, trainPartnerPlayerName);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerPlayerLevel(builder, this.trainPartnerPlayerLevel);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerBuffId(builder, trainPartnerBuffId);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerAvatarGroupType(builder, this.trainPartnerAvatarGroupType);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerAvatarId(builder, trainPartnerAvatarId);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerTitleList(builder, trainPartnerTitleList);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerNameCardSkinId(builder, trainPartnerNameCardSkinId);
  clz_Torappu_ActMultiV3ConstData.addTrainPartnerNameCardSkinTmpl(builder, this.trainPartnerNameCardSkinTmpl);
  clz_Torappu_ActMultiV3ConstData.addMaxPhotoPerType(builder, this.maxPhotoPerType);
  clz_Torappu_ActMultiV3ConstData.addCheckFriendStateTime(builder, this.checkFriendStateTime);
  clz_Torappu_ActMultiV3ConstData.addPhotoCharacterDefaultAct(builder, photoCharacterDefaultAct);
  clz_Torappu_ActMultiV3ConstData.addTrainingStageConfirmDesc(builder, trainingStageConfirmDesc);
  clz_Torappu_ActMultiV3ConstData.addJoinRoomLongTimeThreshold(builder, this.joinRoomLongTimeThreshold);
  clz_Torappu_ActMultiV3ConstData.addInvitationSendCd(builder, this.invitationSendCd);
  clz_Torappu_ActMultiV3ConstData.addBoatMapReachableSize(builder, this.boatMapReachableSize);
  clz_Torappu_ActMultiV3ConstData.addBoatMapSizeMax(builder, this.boatMapSizeMax);
  clz_Torappu_ActMultiV3ConstData.addBoatExitMapOffset(builder, this.boatExitMapOffset);
  clz_Torappu_ActMultiV3ConstData.addBoatEnterTranOffset(builder, this.boatEnterTranOffset);
  clz_Torappu_ActMultiV3ConstData.addBoatCollisionLossSpeedFactor(builder, this.boatCollisionLossSpeedFactor);
  clz_Torappu_ActMultiV3ConstData.addBoatAirFactor(builder, this.boatAirFactor);
  clz_Torappu_ActMultiV3ConstData.addBoatFrictionFactor(builder, this.boatFrictionFactor);
  clz_Torappu_ActMultiV3ConstData.addBoatForceInterval(builder, this.boatForceInterval);
  clz_Torappu_ActMultiV3ConstData.addBoatExchangeDamageMax(builder, this.boatExchangeDamageMax);
  clz_Torappu_ActMultiV3ConstData.addBoatExchangeDamageMin(builder, this.boatExchangeDamageMin);
  clz_Torappu_ActMultiV3ConstData.addBoatExchangeForceMax(builder, this.boatExchangeForceMax);
  clz_Torappu_ActMultiV3ConstData.addBoatExchangeForceMin(builder, this.boatExchangeForceMin);
  clz_Torappu_ActMultiV3ConstData.addWaterSpeedFactor(builder, this.waterSpeedFactor);

  return clz_Torappu_ActMultiV3ConstData.endclz_Torappu_ActMultiV3ConstData(builder);
}
}
