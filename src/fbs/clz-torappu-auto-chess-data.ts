// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_AutoChessData_AutoChessBroadcastData, clz_Torappu_AutoChessData_AutoChessBroadcastDataT } from './clz-torappu-auto-chess-data-auto-chess-broadcast-data.js';
import { clz_Torappu_AutoChessData_AutoChessConstData, clz_Torappu_AutoChessData_AutoChessConstDataT } from './clz-torappu-auto-chess-data-auto-chess-const-data.js';
import { clz_Torappu_AutoChessData_AutoChessCultivateRelationData, clz_Torappu_AutoChessData_AutoChessCultivateRelationDataT } from './clz-torappu-auto-chess-data-auto-chess-cultivate-relation-data.js';
import { clz_Torappu_AutoChessData_AutoChessEnterStepData, clz_Torappu_AutoChessData_AutoChessEnterStepDataT } from './clz-torappu-auto-chess-data-auto-chess-enter-step-data.js';
import { clz_Torappu_AutoChessData_AutoChessGameTipData, clz_Torappu_AutoChessData_AutoChessGameTipDataT } from './clz-torappu-auto-chess-data-auto-chess-game-tip-data.js';
import { clz_Torappu_AutoChessData_AutoChessMedalData, clz_Torappu_AutoChessData_AutoChessMedalDataT } from './clz-torappu-auto-chess-data-auto-chess-medal-data.js';
import { clz_Torappu_AutoChessData_AutoChessRoundScoreData, clz_Torappu_AutoChessData_AutoChessRoundScoreDataT } from './clz-torappu-auto-chess-data-auto-chess-round-score-data.js';
import { clz_Torappu_AutoChessData_AutoChessSkillTriggerData, clz_Torappu_AutoChessData_AutoChessSkillTriggerDataT } from './clz-torappu-auto-chess-data-auto-chess-skill-trigger-data.js';
import { clz_Torappu_CommonReportPlayerData, clz_Torappu_CommonReportPlayerDataT } from './clz-torappu-common-report-player-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessBandData, dict__string__clz_Torappu_AutoChessData_AutoChessBandDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-band-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-bond-info-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-boss-info-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeData, dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-effect-type-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeData, dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-enemy-type-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateData, dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-prepare-state-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData, dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-random-enemy-attribute-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenData, dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-shop-state-token-data.js';
import { dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoDataT } from './dict--string--clz-torappu-auto-chess-data-auto-chess-version-info-data.js';
import { dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoData, dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoDataT } from './dict--string--list-dict--int--clz-torappu-auto-chess-data-auto-chess-turn-info-data.js';
import { dict__string__string, dict__string__stringT } from './dict--string--string.js';


export class clz_Torappu_AutoChessData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData):clz_Torappu_AutoChessData {
  return (obj || new clz_Torappu_AutoChessData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData):clz_Torappu_AutoChessData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

versionInfoDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoData):dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

versionInfoDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bandDataDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessBandData):dict__string__clz_Torappu_AutoChessData_AutoChessBandData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessBandData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bandDataDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cultivateEffectList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessCultivateRelationData):clz_Torappu_AutoChessData_AutoChessCultivateRelationData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessCultivateRelationData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cultivateEffectListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

effectTypeDataDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeData):dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

effectTypeDataDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bondInfoDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoData):dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bondInfoDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bossInfoDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoData):dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bossInfoDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enemyTypeDatas(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeData):dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

enemyTypeDatasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enterStepList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessEnterStepData):clz_Torappu_AutoChessData_AutoChessEnterStepData|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessEnterStepData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

enterStepListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shopStateTokenDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenData):dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenData|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

shopStateTokenDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

skillTriggerDataList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessSkillTriggerData):clz_Torappu_AutoChessData_AutoChessSkillTriggerData|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessSkillTriggerData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

skillTriggerDataListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

skillRangeDict(index: number, obj?:dict__string__string):dict__string__string|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new dict__string__string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

skillRangeDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

prepareStateDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateData):dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateData|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

prepareStateDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

randomEnemyAttributeDict(index: number, obj?:dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData):dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

randomEnemyAttributeDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enabledEmoticonThemeIdList(index: number):string
enabledEmoticonThemeIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enabledEmoticonThemeIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enabledEmoticonThemeIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

gameTipsList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessGameTipData):clz_Torappu_AutoChessData_AutoChessGameTipData|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessGameTipData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

gameTipsListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

medalDataList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessMedalData):clz_Torappu_AutoChessData_AutoChessMedalData|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessMedalData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

medalDataListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

turnInfoDataDict(index: number, obj?:dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoData):dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

turnInfoDataDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

roundScoreDataList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessRoundScoreData):clz_Torappu_AutoChessData_AutoChessRoundScoreData|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessRoundScoreData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

roundScoreDataListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

reportPlayerDataList(index: number, obj?:clz_Torappu_CommonReportPlayerData):clz_Torappu_CommonReportPlayerData|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new clz_Torappu_CommonReportPlayerData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

reportPlayerDataListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

broadcastList(index: number, obj?:clz_Torappu_AutoChessData_AutoChessBroadcastData):clz_Torappu_AutoChessData_AutoChessBroadcastData|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessBroadcastData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

broadcastListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

constData(obj?:clz_Torappu_AutoChessData_AutoChessConstData):clz_Torappu_AutoChessData_AutoChessConstData|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? (obj || new clz_Torappu_AutoChessData_AutoChessConstData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_AutoChessData(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addVersionInfoDict(builder:flatbuffers.Builder, versionInfoDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionInfoDictOffset, 0);
}

static createVersionInfoDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVersionInfoDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBandDataDict(builder:flatbuffers.Builder, bandDataDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bandDataDictOffset, 0);
}

static createBandDataDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBandDataDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCultivateEffectList(builder:flatbuffers.Builder, cultivateEffectListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, cultivateEffectListOffset, 0);
}

static createCultivateEffectListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCultivateEffectListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEffectTypeDataDict(builder:flatbuffers.Builder, effectTypeDataDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, effectTypeDataDictOffset, 0);
}

static createEffectTypeDataDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectTypeDataDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBondInfoDict(builder:flatbuffers.Builder, bondInfoDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bondInfoDictOffset, 0);
}

static createBondInfoDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBondInfoDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBossInfoDict(builder:flatbuffers.Builder, bossInfoDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, bossInfoDictOffset, 0);
}

static createBossInfoDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBossInfoDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyTypeDatas(builder:flatbuffers.Builder, enemyTypeDatasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, enemyTypeDatasOffset, 0);
}

static createEnemyTypeDatasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyTypeDatasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnterStepList(builder:flatbuffers.Builder, enterStepListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, enterStepListOffset, 0);
}

static createEnterStepListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnterStepListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShopStateTokenDict(builder:flatbuffers.Builder, shopStateTokenDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, shopStateTokenDictOffset, 0);
}

static createShopStateTokenDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShopStateTokenDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkillTriggerDataList(builder:flatbuffers.Builder, skillTriggerDataListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, skillTriggerDataListOffset, 0);
}

static createSkillTriggerDataListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSkillTriggerDataListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkillRangeDict(builder:flatbuffers.Builder, skillRangeDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, skillRangeDictOffset, 0);
}

static createSkillRangeDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSkillRangeDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPrepareStateDict(builder:flatbuffers.Builder, prepareStateDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, prepareStateDictOffset, 0);
}

static createPrepareStateDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPrepareStateDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRandomEnemyAttributeDict(builder:flatbuffers.Builder, randomEnemyAttributeDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, randomEnemyAttributeDictOffset, 0);
}

static createRandomEnemyAttributeDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRandomEnemyAttributeDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnabledEmoticonThemeIdList(builder:flatbuffers.Builder, enabledEmoticonThemeIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, enabledEmoticonThemeIdListOffset, 0);
}

static createEnabledEmoticonThemeIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnabledEmoticonThemeIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGameTipsList(builder:flatbuffers.Builder, gameTipsListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, gameTipsListOffset, 0);
}

static createGameTipsListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGameTipsListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMedalDataList(builder:flatbuffers.Builder, medalDataListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, medalDataListOffset, 0);
}

static createMedalDataListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMedalDataListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTurnInfoDataDict(builder:flatbuffers.Builder, turnInfoDataDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, turnInfoDataDictOffset, 0);
}

static createTurnInfoDataDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTurnInfoDataDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRoundScoreDataList(builder:flatbuffers.Builder, roundScoreDataListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, roundScoreDataListOffset, 0);
}

static createRoundScoreDataListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoundScoreDataListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReportPlayerDataList(builder:flatbuffers.Builder, reportPlayerDataListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, reportPlayerDataListOffset, 0);
}

static createReportPlayerDataListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReportPlayerDataListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBroadcastList(builder:flatbuffers.Builder, broadcastListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, broadcastListOffset, 0);
}

static createBroadcastListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBroadcastListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConstData(builder:flatbuffers.Builder, constDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, constDataOffset, 0);
}

static endclz_Torappu_AutoChessData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_AutoChessDataT {
  return new clz_Torappu_AutoChessDataT(
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoDataT>(this.versionInfoDict.bind(this), this.versionInfoDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessBandData, dict__string__clz_Torappu_AutoChessData_AutoChessBandDataT>(this.bandDataDict.bind(this), this.bandDataDictLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessCultivateRelationData, clz_Torappu_AutoChessData_AutoChessCultivateRelationDataT>(this.cultivateEffectList.bind(this), this.cultivateEffectListLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeData, dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeDataT>(this.effectTypeDataDict.bind(this), this.effectTypeDataDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoDataT>(this.bondInfoDict.bind(this), this.bondInfoDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoDataT>(this.bossInfoDict.bind(this), this.bossInfoDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeData, dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT>(this.enemyTypeDatas.bind(this), this.enemyTypeDatasLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessEnterStepData, clz_Torappu_AutoChessData_AutoChessEnterStepDataT>(this.enterStepList.bind(this), this.enterStepListLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenData, dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenDataT>(this.shopStateTokenDict.bind(this), this.shopStateTokenDictLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessSkillTriggerData, clz_Torappu_AutoChessData_AutoChessSkillTriggerDataT>(this.skillTriggerDataList.bind(this), this.skillTriggerDataListLength()),
    this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.skillRangeDict.bind(this), this.skillRangeDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateData, dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateDataT>(this.prepareStateDict.bind(this), this.prepareStateDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData, dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT>(this.randomEnemyAttributeDict.bind(this), this.randomEnemyAttributeDictLength()),
    this.bb!.createScalarList<string>(this.enabledEmoticonThemeIdList.bind(this), this.enabledEmoticonThemeIdListLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessGameTipData, clz_Torappu_AutoChessData_AutoChessGameTipDataT>(this.gameTipsList.bind(this), this.gameTipsListLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessMedalData, clz_Torappu_AutoChessData_AutoChessMedalDataT>(this.medalDataList.bind(this), this.medalDataListLength()),
    this.bb!.createObjList<dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoData, dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoDataT>(this.turnInfoDataDict.bind(this), this.turnInfoDataDictLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessRoundScoreData, clz_Torappu_AutoChessData_AutoChessRoundScoreDataT>(this.roundScoreDataList.bind(this), this.roundScoreDataListLength()),
    this.bb!.createObjList<clz_Torappu_CommonReportPlayerData, clz_Torappu_CommonReportPlayerDataT>(this.reportPlayerDataList.bind(this), this.reportPlayerDataListLength()),
    this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessBroadcastData, clz_Torappu_AutoChessData_AutoChessBroadcastDataT>(this.broadcastList.bind(this), this.broadcastListLength()),
    (this.constData() !== null ? this.constData()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_AutoChessDataT): void {
  _o.versionInfoDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoDataT>(this.versionInfoDict.bind(this), this.versionInfoDictLength());
  _o.bandDataDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessBandData, dict__string__clz_Torappu_AutoChessData_AutoChessBandDataT>(this.bandDataDict.bind(this), this.bandDataDictLength());
  _o.cultivateEffectList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessCultivateRelationData, clz_Torappu_AutoChessData_AutoChessCultivateRelationDataT>(this.cultivateEffectList.bind(this), this.cultivateEffectListLength());
  _o.effectTypeDataDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeData, dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeDataT>(this.effectTypeDataDict.bind(this), this.effectTypeDataDictLength());
  _o.bondInfoDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoDataT>(this.bondInfoDict.bind(this), this.bondInfoDictLength());
  _o.bossInfoDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoData, dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoDataT>(this.bossInfoDict.bind(this), this.bossInfoDictLength());
  _o.enemyTypeDatas = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeData, dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT>(this.enemyTypeDatas.bind(this), this.enemyTypeDatasLength());
  _o.enterStepList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessEnterStepData, clz_Torappu_AutoChessData_AutoChessEnterStepDataT>(this.enterStepList.bind(this), this.enterStepListLength());
  _o.shopStateTokenDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenData, dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenDataT>(this.shopStateTokenDict.bind(this), this.shopStateTokenDictLength());
  _o.skillTriggerDataList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessSkillTriggerData, clz_Torappu_AutoChessData_AutoChessSkillTriggerDataT>(this.skillTriggerDataList.bind(this), this.skillTriggerDataListLength());
  _o.skillRangeDict = this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.skillRangeDict.bind(this), this.skillRangeDictLength());
  _o.prepareStateDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateData, dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateDataT>(this.prepareStateDict.bind(this), this.prepareStateDictLength());
  _o.randomEnemyAttributeDict = this.bb!.createObjList<dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData, dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT>(this.randomEnemyAttributeDict.bind(this), this.randomEnemyAttributeDictLength());
  _o.enabledEmoticonThemeIdList = this.bb!.createScalarList<string>(this.enabledEmoticonThemeIdList.bind(this), this.enabledEmoticonThemeIdListLength());
  _o.gameTipsList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessGameTipData, clz_Torappu_AutoChessData_AutoChessGameTipDataT>(this.gameTipsList.bind(this), this.gameTipsListLength());
  _o.medalDataList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessMedalData, clz_Torappu_AutoChessData_AutoChessMedalDataT>(this.medalDataList.bind(this), this.medalDataListLength());
  _o.turnInfoDataDict = this.bb!.createObjList<dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoData, dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoDataT>(this.turnInfoDataDict.bind(this), this.turnInfoDataDictLength());
  _o.roundScoreDataList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessRoundScoreData, clz_Torappu_AutoChessData_AutoChessRoundScoreDataT>(this.roundScoreDataList.bind(this), this.roundScoreDataListLength());
  _o.reportPlayerDataList = this.bb!.createObjList<clz_Torappu_CommonReportPlayerData, clz_Torappu_CommonReportPlayerDataT>(this.reportPlayerDataList.bind(this), this.reportPlayerDataListLength());
  _o.broadcastList = this.bb!.createObjList<clz_Torappu_AutoChessData_AutoChessBroadcastData, clz_Torappu_AutoChessData_AutoChessBroadcastDataT>(this.broadcastList.bind(this), this.broadcastListLength());
  _o.constData = (this.constData() !== null ? this.constData()!.unpack() : null);
}
}

export class clz_Torappu_AutoChessDataT implements flatbuffers.IGeneratedObject {
constructor(
  public versionInfoDict: (dict__string__clz_Torappu_AutoChessData_AutoChessVersionInfoDataT)[] = [],
  public bandDataDict: (dict__string__clz_Torappu_AutoChessData_AutoChessBandDataT)[] = [],
  public cultivateEffectList: (clz_Torappu_AutoChessData_AutoChessCultivateRelationDataT)[] = [],
  public effectTypeDataDict: (dict__string__clz_Torappu_AutoChessData_AutoChessEffectTypeDataT)[] = [],
  public bondInfoDict: (dict__string__clz_Torappu_AutoChessData_AutoChessBondInfoDataT)[] = [],
  public bossInfoDict: (dict__string__clz_Torappu_AutoChessData_AutoChessBossInfoDataT)[] = [],
  public enemyTypeDatas: (dict__string__clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT)[] = [],
  public enterStepList: (clz_Torappu_AutoChessData_AutoChessEnterStepDataT)[] = [],
  public shopStateTokenDict: (dict__string__clz_Torappu_AutoChessData_AutoChessShopStateTokenDataT)[] = [],
  public skillTriggerDataList: (clz_Torappu_AutoChessData_AutoChessSkillTriggerDataT)[] = [],
  public skillRangeDict: (dict__string__stringT)[] = [],
  public prepareStateDict: (dict__string__clz_Torappu_AutoChessData_AutoChessPrepareStateDataT)[] = [],
  public randomEnemyAttributeDict: (dict__string__clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT)[] = [],
  public enabledEmoticonThemeIdList: (string)[] = [],
  public gameTipsList: (clz_Torappu_AutoChessData_AutoChessGameTipDataT)[] = [],
  public medalDataList: (clz_Torappu_AutoChessData_AutoChessMedalDataT)[] = [],
  public turnInfoDataDict: (dict__string__list_dict__int__clz_Torappu_AutoChessData_AutoChessTurnInfoDataT)[] = [],
  public roundScoreDataList: (clz_Torappu_AutoChessData_AutoChessRoundScoreDataT)[] = [],
  public reportPlayerDataList: (clz_Torappu_CommonReportPlayerDataT)[] = [],
  public broadcastList: (clz_Torappu_AutoChessData_AutoChessBroadcastDataT)[] = [],
  public constData: clz_Torappu_AutoChessData_AutoChessConstDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const versionInfoDict = clz_Torappu_AutoChessData.createVersionInfoDictVector(builder, builder.createObjectOffsetList(this.versionInfoDict));
  const bandDataDict = clz_Torappu_AutoChessData.createBandDataDictVector(builder, builder.createObjectOffsetList(this.bandDataDict));
  const cultivateEffectList = clz_Torappu_AutoChessData.createCultivateEffectListVector(builder, builder.createObjectOffsetList(this.cultivateEffectList));
  const effectTypeDataDict = clz_Torappu_AutoChessData.createEffectTypeDataDictVector(builder, builder.createObjectOffsetList(this.effectTypeDataDict));
  const bondInfoDict = clz_Torappu_AutoChessData.createBondInfoDictVector(builder, builder.createObjectOffsetList(this.bondInfoDict));
  const bossInfoDict = clz_Torappu_AutoChessData.createBossInfoDictVector(builder, builder.createObjectOffsetList(this.bossInfoDict));
  const enemyTypeDatas = clz_Torappu_AutoChessData.createEnemyTypeDatasVector(builder, builder.createObjectOffsetList(this.enemyTypeDatas));
  const enterStepList = clz_Torappu_AutoChessData.createEnterStepListVector(builder, builder.createObjectOffsetList(this.enterStepList));
  const shopStateTokenDict = clz_Torappu_AutoChessData.createShopStateTokenDictVector(builder, builder.createObjectOffsetList(this.shopStateTokenDict));
  const skillTriggerDataList = clz_Torappu_AutoChessData.createSkillTriggerDataListVector(builder, builder.createObjectOffsetList(this.skillTriggerDataList));
  const skillRangeDict = clz_Torappu_AutoChessData.createSkillRangeDictVector(builder, builder.createObjectOffsetList(this.skillRangeDict));
  const prepareStateDict = clz_Torappu_AutoChessData.createPrepareStateDictVector(builder, builder.createObjectOffsetList(this.prepareStateDict));
  const randomEnemyAttributeDict = clz_Torappu_AutoChessData.createRandomEnemyAttributeDictVector(builder, builder.createObjectOffsetList(this.randomEnemyAttributeDict));
  const enabledEmoticonThemeIdList = clz_Torappu_AutoChessData.createEnabledEmoticonThemeIdListVector(builder, builder.createObjectOffsetList(this.enabledEmoticonThemeIdList));
  const gameTipsList = clz_Torappu_AutoChessData.createGameTipsListVector(builder, builder.createObjectOffsetList(this.gameTipsList));
  const medalDataList = clz_Torappu_AutoChessData.createMedalDataListVector(builder, builder.createObjectOffsetList(this.medalDataList));
  const turnInfoDataDict = clz_Torappu_AutoChessData.createTurnInfoDataDictVector(builder, builder.createObjectOffsetList(this.turnInfoDataDict));
  const roundScoreDataList = clz_Torappu_AutoChessData.createRoundScoreDataListVector(builder, builder.createObjectOffsetList(this.roundScoreDataList));
  const reportPlayerDataList = clz_Torappu_AutoChessData.createReportPlayerDataListVector(builder, builder.createObjectOffsetList(this.reportPlayerDataList));
  const broadcastList = clz_Torappu_AutoChessData.createBroadcastListVector(builder, builder.createObjectOffsetList(this.broadcastList));
  const constData = (this.constData !== null ? this.constData!.pack(builder) : 0);

  clz_Torappu_AutoChessData.startclz_Torappu_AutoChessData(builder);
  clz_Torappu_AutoChessData.addVersionInfoDict(builder, versionInfoDict);
  clz_Torappu_AutoChessData.addBandDataDict(builder, bandDataDict);
  clz_Torappu_AutoChessData.addCultivateEffectList(builder, cultivateEffectList);
  clz_Torappu_AutoChessData.addEffectTypeDataDict(builder, effectTypeDataDict);
  clz_Torappu_AutoChessData.addBondInfoDict(builder, bondInfoDict);
  clz_Torappu_AutoChessData.addBossInfoDict(builder, bossInfoDict);
  clz_Torappu_AutoChessData.addEnemyTypeDatas(builder, enemyTypeDatas);
  clz_Torappu_AutoChessData.addEnterStepList(builder, enterStepList);
  clz_Torappu_AutoChessData.addShopStateTokenDict(builder, shopStateTokenDict);
  clz_Torappu_AutoChessData.addSkillTriggerDataList(builder, skillTriggerDataList);
  clz_Torappu_AutoChessData.addSkillRangeDict(builder, skillRangeDict);
  clz_Torappu_AutoChessData.addPrepareStateDict(builder, prepareStateDict);
  clz_Torappu_AutoChessData.addRandomEnemyAttributeDict(builder, randomEnemyAttributeDict);
  clz_Torappu_AutoChessData.addEnabledEmoticonThemeIdList(builder, enabledEmoticonThemeIdList);
  clz_Torappu_AutoChessData.addGameTipsList(builder, gameTipsList);
  clz_Torappu_AutoChessData.addMedalDataList(builder, medalDataList);
  clz_Torappu_AutoChessData.addTurnInfoDataDict(builder, turnInfoDataDict);
  clz_Torappu_AutoChessData.addRoundScoreDataList(builder, roundScoreDataList);
  clz_Torappu_AutoChessData.addReportPlayerDataList(builder, reportPlayerDataList);
  clz_Torappu_AutoChessData.addBroadcastList(builder, broadcastList);
  clz_Torappu_AutoChessData.addConstData(builder, constData);

  return clz_Torappu_AutoChessData.endclz_Torappu_AutoChessData(builder);
}
}
