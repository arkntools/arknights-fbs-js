// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_DiceResultClass } from './enum--torappu-dice-result-class.js';
import { enum__Torappu_DiceResultShowType } from './enum--torappu-dice-result-show-type.js';


export class clz_Torappu_RoguelikeDiceRuleData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeDiceRuleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeDiceRuleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeDiceRuleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeDiceRuleData):clz_Torappu_RoguelikeDiceRuleData {
  return (obj || new clz_Torappu_RoguelikeDiceRuleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeDiceRuleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeDiceRuleData):clz_Torappu_RoguelikeDiceRuleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeDiceRuleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dicePointMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

diceResultClass():enum__Torappu_DiceResultClass {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_DiceResultClass.VERYBAD;
}

diceGroupId():string|null
diceGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diceGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

diceEventId():string|null
diceEventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diceEventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

resultDesc():string|null
resultDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resultDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

showType():enum__Torappu_DiceResultShowType {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_DiceResultShowType.RAW_TEXT;
}

canReroll():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

diceEndingScene():string|null
diceEndingScene(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diceEndingScene(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

diceEndingDesc():string|null
diceEndingDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diceEndingDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sound():string|null
sound(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sound(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_RoguelikeDiceRuleData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addDicePointMax(builder:flatbuffers.Builder, dicePointMax:number) {
  builder.addFieldInt32(0, dicePointMax, 0);
}

static addDiceResultClass(builder:flatbuffers.Builder, diceResultClass:enum__Torappu_DiceResultClass) {
  builder.addFieldInt32(1, diceResultClass, enum__Torappu_DiceResultClass.VERYBAD);
}

static addDiceGroupId(builder:flatbuffers.Builder, diceGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, diceGroupIdOffset, 0);
}

static addDiceEventId(builder:flatbuffers.Builder, diceEventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, diceEventIdOffset, 0);
}

static addResultDesc(builder:flatbuffers.Builder, resultDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, resultDescOffset, 0);
}

static addShowType(builder:flatbuffers.Builder, showType:enum__Torappu_DiceResultShowType) {
  builder.addFieldInt32(5, showType, enum__Torappu_DiceResultShowType.RAW_TEXT);
}

static addCanReroll(builder:flatbuffers.Builder, canReroll:boolean) {
  builder.addFieldInt8(6, +canReroll, +false);
}

static addDiceEndingScene(builder:flatbuffers.Builder, diceEndingSceneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, diceEndingSceneOffset, 0);
}

static addDiceEndingDesc(builder:flatbuffers.Builder, diceEndingDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, diceEndingDescOffset, 0);
}

static addSound(builder:flatbuffers.Builder, soundOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, soundOffset, 0);
}

static endclz_Torappu_RoguelikeDiceRuleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeDiceRuleData(builder:flatbuffers.Builder, dicePointMax:number, diceResultClass:enum__Torappu_DiceResultClass, diceGroupIdOffset:flatbuffers.Offset, diceEventIdOffset:flatbuffers.Offset, resultDescOffset:flatbuffers.Offset, showType:enum__Torappu_DiceResultShowType, canReroll:boolean, diceEndingSceneOffset:flatbuffers.Offset, diceEndingDescOffset:flatbuffers.Offset, soundOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeDiceRuleData.startclz_Torappu_RoguelikeDiceRuleData(builder);
  clz_Torappu_RoguelikeDiceRuleData.addDicePointMax(builder, dicePointMax);
  clz_Torappu_RoguelikeDiceRuleData.addDiceResultClass(builder, diceResultClass);
  clz_Torappu_RoguelikeDiceRuleData.addDiceGroupId(builder, diceGroupIdOffset);
  clz_Torappu_RoguelikeDiceRuleData.addDiceEventId(builder, diceEventIdOffset);
  clz_Torappu_RoguelikeDiceRuleData.addResultDesc(builder, resultDescOffset);
  clz_Torappu_RoguelikeDiceRuleData.addShowType(builder, showType);
  clz_Torappu_RoguelikeDiceRuleData.addCanReroll(builder, canReroll);
  clz_Torappu_RoguelikeDiceRuleData.addDiceEndingScene(builder, diceEndingSceneOffset);
  clz_Torappu_RoguelikeDiceRuleData.addDiceEndingDesc(builder, diceEndingDescOffset);
  clz_Torappu_RoguelikeDiceRuleData.addSound(builder, soundOffset);
  return clz_Torappu_RoguelikeDiceRuleData.endclz_Torappu_RoguelikeDiceRuleData(builder);
}

unpack(): clz_Torappu_RoguelikeDiceRuleDataT {
  return new clz_Torappu_RoguelikeDiceRuleDataT(
    this.dicePointMax(),
    this.diceResultClass(),
    this.diceGroupId(),
    this.diceEventId(),
    this.resultDesc(),
    this.showType(),
    this.canReroll(),
    this.diceEndingScene(),
    this.diceEndingDesc(),
    this.sound()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeDiceRuleDataT): void {
  _o.dicePointMax = this.dicePointMax();
  _o.diceResultClass = this.diceResultClass();
  _o.diceGroupId = this.diceGroupId();
  _o.diceEventId = this.diceEventId();
  _o.resultDesc = this.resultDesc();
  _o.showType = this.showType();
  _o.canReroll = this.canReroll();
  _o.diceEndingScene = this.diceEndingScene();
  _o.diceEndingDesc = this.diceEndingDesc();
  _o.sound = this.sound();
}
}

export class clz_Torappu_RoguelikeDiceRuleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public dicePointMax: number = 0,
  public diceResultClass: enum__Torappu_DiceResultClass = enum__Torappu_DiceResultClass.VERYBAD,
  public diceGroupId: string|Uint8Array|null = null,
  public diceEventId: string|Uint8Array|null = null,
  public resultDesc: string|Uint8Array|null = null,
  public showType: enum__Torappu_DiceResultShowType = enum__Torappu_DiceResultShowType.RAW_TEXT,
  public canReroll: boolean = false,
  public diceEndingScene: string|Uint8Array|null = null,
  public diceEndingDesc: string|Uint8Array|null = null,
  public sound: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const diceGroupId = (this.diceGroupId !== null ? builder.createString(this.diceGroupId!) : 0);
  const diceEventId = (this.diceEventId !== null ? builder.createString(this.diceEventId!) : 0);
  const resultDesc = (this.resultDesc !== null ? builder.createString(this.resultDesc!) : 0);
  const diceEndingScene = (this.diceEndingScene !== null ? builder.createString(this.diceEndingScene!) : 0);
  const diceEndingDesc = (this.diceEndingDesc !== null ? builder.createString(this.diceEndingDesc!) : 0);
  const sound = (this.sound !== null ? builder.createString(this.sound!) : 0);

  return clz_Torappu_RoguelikeDiceRuleData.createclz_Torappu_RoguelikeDiceRuleData(builder,
    this.dicePointMax,
    this.diceResultClass,
    diceGroupId,
    diceEventId,
    resultDesc,
    this.showType,
    this.canReroll,
    diceEndingScene,
    diceEndingDesc,
    sound
  );
}
}
