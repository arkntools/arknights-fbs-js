// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_RoguelikeCopperBuffType } from './enum--torappu-roguelike-copper-buff-type.js';
import { enum__Torappu_RoguelikeCopperLuckyLevel } from './enum--torappu-roguelike-copper-lucky-level.js';


export class clz_Torappu_RoguelikeCopperData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeCopperDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeCopperData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeCopperData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeCopperData):clz_Torappu_RoguelikeCopperData {
  return (obj || new clz_Torappu_RoguelikeCopperData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeCopperData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeCopperData):clz_Torappu_RoguelikeCopperData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeCopperData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupId():string|null
groupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gildTypeId():string|null
gildTypeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gildTypeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

luckyLevel():enum__Torappu_RoguelikeCopperLuckyLevel {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeCopperLuckyLevel.NONE;
}

buffType():enum__Torappu_RoguelikeCopperBuffType {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeCopperBuffType.NONE;
}

layerCntDesc():string|null
layerCntDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
layerCntDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

poemList(index: number):string
poemList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
poemList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

poemListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

alwaysShowCountDown():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

buffItemIdList(index: number):string
buffItemIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
buffItemIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

buffItemIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RoguelikeCopperData(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, groupIdOffset, 0);
}

static addGildTypeId(builder:flatbuffers.Builder, gildTypeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, gildTypeIdOffset, 0);
}

static addLuckyLevel(builder:flatbuffers.Builder, luckyLevel:enum__Torappu_RoguelikeCopperLuckyLevel) {
  builder.addFieldInt32(3, luckyLevel, enum__Torappu_RoguelikeCopperLuckyLevel.NONE);
}

static addBuffType(builder:flatbuffers.Builder, buffType:enum__Torappu_RoguelikeCopperBuffType) {
  builder.addFieldInt32(4, buffType, enum__Torappu_RoguelikeCopperBuffType.NONE);
}

static addLayerCntDesc(builder:flatbuffers.Builder, layerCntDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, layerCntDescOffset, 0);
}

static addPoemList(builder:flatbuffers.Builder, poemListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, poemListOffset, 0);
}

static createPoemListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPoemListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAlwaysShowCountDown(builder:flatbuffers.Builder, alwaysShowCountDown:boolean) {
  builder.addFieldInt8(7, +alwaysShowCountDown, +false);
}

static addBuffItemIdList(builder:flatbuffers.Builder, buffItemIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, buffItemIdListOffset, 0);
}

static createBuffItemIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBuffItemIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_RoguelikeCopperData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeCopperData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, groupIdOffset:flatbuffers.Offset, gildTypeIdOffset:flatbuffers.Offset, luckyLevel:enum__Torappu_RoguelikeCopperLuckyLevel, buffType:enum__Torappu_RoguelikeCopperBuffType, layerCntDescOffset:flatbuffers.Offset, poemListOffset:flatbuffers.Offset, alwaysShowCountDown:boolean, buffItemIdListOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeCopperData.startclz_Torappu_RoguelikeCopperData(builder);
  clz_Torappu_RoguelikeCopperData.addId(builder, idOffset);
  clz_Torappu_RoguelikeCopperData.addGroupId(builder, groupIdOffset);
  clz_Torappu_RoguelikeCopperData.addGildTypeId(builder, gildTypeIdOffset);
  clz_Torappu_RoguelikeCopperData.addLuckyLevel(builder, luckyLevel);
  clz_Torappu_RoguelikeCopperData.addBuffType(builder, buffType);
  clz_Torappu_RoguelikeCopperData.addLayerCntDesc(builder, layerCntDescOffset);
  clz_Torappu_RoguelikeCopperData.addPoemList(builder, poemListOffset);
  clz_Torappu_RoguelikeCopperData.addAlwaysShowCountDown(builder, alwaysShowCountDown);
  clz_Torappu_RoguelikeCopperData.addBuffItemIdList(builder, buffItemIdListOffset);
  return clz_Torappu_RoguelikeCopperData.endclz_Torappu_RoguelikeCopperData(builder);
}

unpack(): clz_Torappu_RoguelikeCopperDataT {
  return new clz_Torappu_RoguelikeCopperDataT(
    this.id(),
    this.groupId(),
    this.gildTypeId(),
    this.luckyLevel(),
    this.buffType(),
    this.layerCntDesc(),
    this.bb!.createScalarList<string>(this.poemList.bind(this), this.poemListLength()),
    this.alwaysShowCountDown(),
    this.bb!.createScalarList<string>(this.buffItemIdList.bind(this), this.buffItemIdListLength())
  );
}


unpackTo(_o: clz_Torappu_RoguelikeCopperDataT): void {
  _o.id = this.id();
  _o.groupId = this.groupId();
  _o.gildTypeId = this.gildTypeId();
  _o.luckyLevel = this.luckyLevel();
  _o.buffType = this.buffType();
  _o.layerCntDesc = this.layerCntDesc();
  _o.poemList = this.bb!.createScalarList<string>(this.poemList.bind(this), this.poemListLength());
  _o.alwaysShowCountDown = this.alwaysShowCountDown();
  _o.buffItemIdList = this.bb!.createScalarList<string>(this.buffItemIdList.bind(this), this.buffItemIdListLength());
}
}

export class clz_Torappu_RoguelikeCopperDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public groupId: string|Uint8Array|null = null,
  public gildTypeId: string|Uint8Array|null = null,
  public luckyLevel: enum__Torappu_RoguelikeCopperLuckyLevel = enum__Torappu_RoguelikeCopperLuckyLevel.NONE,
  public buffType: enum__Torappu_RoguelikeCopperBuffType = enum__Torappu_RoguelikeCopperBuffType.NONE,
  public layerCntDesc: string|Uint8Array|null = null,
  public poemList: (string)[] = [],
  public alwaysShowCountDown: boolean = false,
  public buffItemIdList: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const groupId = (this.groupId !== null ? builder.createString(this.groupId!) : 0);
  const gildTypeId = (this.gildTypeId !== null ? builder.createString(this.gildTypeId!) : 0);
  const layerCntDesc = (this.layerCntDesc !== null ? builder.createString(this.layerCntDesc!) : 0);
  const poemList = clz_Torappu_RoguelikeCopperData.createPoemListVector(builder, builder.createObjectOffsetList(this.poemList));
  const buffItemIdList = clz_Torappu_RoguelikeCopperData.createBuffItemIdListVector(builder, builder.createObjectOffsetList(this.buffItemIdList));

  return clz_Torappu_RoguelikeCopperData.createclz_Torappu_RoguelikeCopperData(builder,
    id,
    groupId,
    gildTypeId,
    this.luckyLevel,
    this.buffType,
    layerCntDesc,
    poemList,
    this.alwaysShowCountDown,
    buffItemIdList
  );
}
}
