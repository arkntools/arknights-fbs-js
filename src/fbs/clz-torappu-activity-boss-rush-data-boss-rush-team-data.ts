// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RuneTable_PackedRuneData, clz_Torappu_RuneTable_PackedRuneDataT } from './clz-torappu-rune-table-packed-rune-data.js';


export class clz_Torappu_ActivityBossRushData_BossRushTeamData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityBossRushData_BossRushTeamDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityBossRushData_BossRushTeamData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityBossRushData_BossRushTeamData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityBossRushData_BossRushTeamData):clz_Torappu_ActivityBossRushData_BossRushTeamData {
  return (obj || new clz_Torappu_ActivityBossRushData_BossRushTeamData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityBossRushData_BossRushTeamData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityBossRushData_BossRushTeamData):clz_Torappu_ActivityBossRushData_BossRushTeamData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityBossRushData_BossRushTeamData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamId():string|null
teamId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamName():string|null
teamName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charIdList(index: number):string
charIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
charIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

charIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

teamBuffName():string|null
teamBuffName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamBuffName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamBuffDes():string|null
teamBuffDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamBuffDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamBuffId():string|null
teamBuffId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamBuffId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxCharNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

runeData(obj?:clz_Torappu_RuneTable_PackedRuneData):clz_Torappu_RuneTable_PackedRuneData|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new clz_Torappu_RuneTable_PackedRuneData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_ActivityBossRushData_BossRushTeamData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addTeamId(builder:flatbuffers.Builder, teamIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, teamIdOffset, 0);
}

static addTeamName(builder:flatbuffers.Builder, teamNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, teamNameOffset, 0);
}

static addCharIdList(builder:flatbuffers.Builder, charIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, charIdListOffset, 0);
}

static createCharIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTeamBuffName(builder:flatbuffers.Builder, teamBuffNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, teamBuffNameOffset, 0);
}

static addTeamBuffDes(builder:flatbuffers.Builder, teamBuffDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, teamBuffDesOffset, 0);
}

static addTeamBuffId(builder:flatbuffers.Builder, teamBuffIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, teamBuffIdOffset, 0);
}

static addMaxCharNum(builder:flatbuffers.Builder, maxCharNum:number) {
  builder.addFieldInt32(6, maxCharNum, 0);
}

static addRuneData(builder:flatbuffers.Builder, runeDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, runeDataOffset, 0);
}

static endclz_Torappu_ActivityBossRushData_BossRushTeamData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActivityBossRushData_BossRushTeamDataT {
  return new clz_Torappu_ActivityBossRushData_BossRushTeamDataT(
    this.teamId(),
    this.teamName(),
    this.bb!.createScalarList<string>(this.charIdList.bind(this), this.charIdListLength()),
    this.teamBuffName(),
    this.teamBuffDes(),
    this.teamBuffId(),
    this.maxCharNum(),
    (this.runeData() !== null ? this.runeData()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_ActivityBossRushData_BossRushTeamDataT): void {
  _o.teamId = this.teamId();
  _o.teamName = this.teamName();
  _o.charIdList = this.bb!.createScalarList<string>(this.charIdList.bind(this), this.charIdListLength());
  _o.teamBuffName = this.teamBuffName();
  _o.teamBuffDes = this.teamBuffDes();
  _o.teamBuffId = this.teamBuffId();
  _o.maxCharNum = this.maxCharNum();
  _o.runeData = (this.runeData() !== null ? this.runeData()!.unpack() : null);
}
}

export class clz_Torappu_ActivityBossRushData_BossRushTeamDataT implements flatbuffers.IGeneratedObject {
constructor(
  public teamId: string|Uint8Array|null = null,
  public teamName: string|Uint8Array|null = null,
  public charIdList: (string)[] = [],
  public teamBuffName: string|Uint8Array|null = null,
  public teamBuffDes: string|Uint8Array|null = null,
  public teamBuffId: string|Uint8Array|null = null,
  public maxCharNum: number = 0,
  public runeData: clz_Torappu_RuneTable_PackedRuneDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const teamId = (this.teamId !== null ? builder.createString(this.teamId!) : 0);
  const teamName = (this.teamName !== null ? builder.createString(this.teamName!) : 0);
  const charIdList = clz_Torappu_ActivityBossRushData_BossRushTeamData.createCharIdListVector(builder, builder.createObjectOffsetList(this.charIdList));
  const teamBuffName = (this.teamBuffName !== null ? builder.createString(this.teamBuffName!) : 0);
  const teamBuffDes = (this.teamBuffDes !== null ? builder.createString(this.teamBuffDes!) : 0);
  const teamBuffId = (this.teamBuffId !== null ? builder.createString(this.teamBuffId!) : 0);
  const runeData = (this.runeData !== null ? this.runeData!.pack(builder) : 0);

  clz_Torappu_ActivityBossRushData_BossRushTeamData.startclz_Torappu_ActivityBossRushData_BossRushTeamData(builder);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addTeamId(builder, teamId);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addTeamName(builder, teamName);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addCharIdList(builder, charIdList);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addTeamBuffName(builder, teamBuffName);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addTeamBuffDes(builder, teamBuffDes);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addTeamBuffId(builder, teamBuffId);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addMaxCharNum(builder, this.maxCharNum);
  clz_Torappu_ActivityBossRushData_BossRushTeamData.addRuneData(builder, runeData);

  return clz_Torappu_ActivityBossRushData_BossRushTeamData.endclz_Torappu_ActivityBossRushData_BossRushTeamData(builder);
}
}
