// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_GachaData_FreeLimitGachaData implements flatbuffers.IUnpackableObject<clz_Torappu_GachaData_FreeLimitGachaDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_GachaData_FreeLimitGachaData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_GachaData_FreeLimitGachaData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_GachaData_FreeLimitGachaData):clz_Torappu_GachaData_FreeLimitGachaData {
  return (obj || new clz_Torappu_GachaData_FreeLimitGachaData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_GachaData_FreeLimitGachaData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_GachaData_FreeLimitGachaData):clz_Torappu_GachaData_FreeLimitGachaData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_GachaData_FreeLimitGachaData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

poolId():string|null
poolId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
poolId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

openTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

freeCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_GachaData_FreeLimitGachaData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPoolId(builder:flatbuffers.Builder, poolIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, poolIdOffset, 0);
}

static addOpenTime(builder:flatbuffers.Builder, openTime:bigint) {
  builder.addFieldInt64(1, openTime, BigInt('0'));
}

static addEndTime(builder:flatbuffers.Builder, endTime:bigint) {
  builder.addFieldInt64(2, endTime, BigInt('0'));
}

static addFreeCount(builder:flatbuffers.Builder, freeCount:number) {
  builder.addFieldInt32(3, freeCount, 0);
}

static endclz_Torappu_GachaData_FreeLimitGachaData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_GachaData_FreeLimitGachaData(builder:flatbuffers.Builder, poolIdOffset:flatbuffers.Offset, openTime:bigint, endTime:bigint, freeCount:number):flatbuffers.Offset {
  clz_Torappu_GachaData_FreeLimitGachaData.startclz_Torappu_GachaData_FreeLimitGachaData(builder);
  clz_Torappu_GachaData_FreeLimitGachaData.addPoolId(builder, poolIdOffset);
  clz_Torappu_GachaData_FreeLimitGachaData.addOpenTime(builder, openTime);
  clz_Torappu_GachaData_FreeLimitGachaData.addEndTime(builder, endTime);
  clz_Torappu_GachaData_FreeLimitGachaData.addFreeCount(builder, freeCount);
  return clz_Torappu_GachaData_FreeLimitGachaData.endclz_Torappu_GachaData_FreeLimitGachaData(builder);
}

unpack(): clz_Torappu_GachaData_FreeLimitGachaDataT {
  return new clz_Torappu_GachaData_FreeLimitGachaDataT(
    this.poolId(),
    this.openTime(),
    this.endTime(),
    this.freeCount()
  );
}


unpackTo(_o: clz_Torappu_GachaData_FreeLimitGachaDataT): void {
  _o.poolId = this.poolId();
  _o.openTime = this.openTime();
  _o.endTime = this.endTime();
  _o.freeCount = this.freeCount();
}
}

export class clz_Torappu_GachaData_FreeLimitGachaDataT implements flatbuffers.IGeneratedObject {
constructor(
  public poolId: string|Uint8Array|null = null,
  public openTime: bigint = BigInt('0'),
  public endTime: bigint = BigInt('0'),
  public freeCount: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const poolId = (this.poolId !== null ? builder.createString(this.poolId!) : 0);

  return clz_Torappu_GachaData_FreeLimitGachaData.createclz_Torappu_GachaData_FreeLimitGachaData(builder,
    poolId,
    this.openTime,
    this.endTime,
    this.freeCount
  );
}
}
