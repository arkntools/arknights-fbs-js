// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_EnemyHandBookData_Abilty, clz_Torappu_EnemyHandBookData_AbiltyT } from './clz-torappu-enemy-hand-book-data-abilty.js';
import { dict__string__int, dict__string__intT } from './dict--string--int.js';
import { enum__Torappu_EnemyHandBookDamageType } from './enum--torappu-enemy-hand-book-damage-type.js';
import { enum__Torappu_EnemyLevelType } from './enum--torappu-enemy-level-type.js';


export class clz_Torappu_EnemyHandBookData implements flatbuffers.IUnpackableObject<clz_Torappu_EnemyHandBookDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_EnemyHandBookData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_EnemyHandBookData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_EnemyHandBookData):clz_Torappu_EnemyHandBookData {
  return (obj || new clz_Torappu_EnemyHandBookData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_EnemyHandBookData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_EnemyHandBookData):clz_Torappu_EnemyHandBookData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_EnemyHandBookData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enemyId():string|null
enemyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyIndex():string|null
enemyIndex(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyIndex(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyTags(index: number):string
enemyTags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enemyTags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enemyTagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyLevel():enum__Torappu_EnemyLevelType {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_EnemyLevelType.NORMAL;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

attackType():string|null
attackType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
attackType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ability():string|null
ability(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ability(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isInvalidKilled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

overrideKillCntInfos(index: number, obj?:dict__string__int):dict__string__int|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new dict__string__int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

overrideKillCntInfosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hideInHandbook():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hideInStage():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

abilityList(index: number, obj?:clz_Torappu_EnemyHandBookData_Abilty):clz_Torappu_EnemyHandBookData_Abilty|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new clz_Torappu_EnemyHandBookData_Abilty()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

abilityListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

linkEnemies(index: number):string
linkEnemies(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
linkEnemies(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

linkEnemiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

damageType(index: number):enum__Torappu_EnemyHandBookDamageType|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

damageTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

damageTypeArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

invisibleDetail():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_EnemyHandBookData(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addEnemyId(builder:flatbuffers.Builder, enemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, enemyIdOffset, 0);
}

static addEnemyIndex(builder:flatbuffers.Builder, enemyIndexOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, enemyIndexOffset, 0);
}

static addEnemyTags(builder:flatbuffers.Builder, enemyTagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, enemyTagsOffset, 0);
}

static createEnemyTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(3, sortId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nameOffset, 0);
}

static addEnemyLevel(builder:flatbuffers.Builder, enemyLevel:enum__Torappu_EnemyLevelType) {
  builder.addFieldInt32(5, enemyLevel, enum__Torappu_EnemyLevelType.NORMAL);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, descriptionOffset, 0);
}

static addAttackType(builder:flatbuffers.Builder, attackTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, attackTypeOffset, 0);
}

static addAbility(builder:flatbuffers.Builder, abilityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, abilityOffset, 0);
}

static addIsInvalidKilled(builder:flatbuffers.Builder, isInvalidKilled:boolean) {
  builder.addFieldInt8(9, +isInvalidKilled, +false);
}

static addOverrideKillCntInfos(builder:flatbuffers.Builder, overrideKillCntInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, overrideKillCntInfosOffset, 0);
}

static createOverrideKillCntInfosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOverrideKillCntInfosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHideInHandbook(builder:flatbuffers.Builder, hideInHandbook:boolean) {
  builder.addFieldInt8(11, +hideInHandbook, +false);
}

static addHideInStage(builder:flatbuffers.Builder, hideInStage:boolean) {
  builder.addFieldInt8(12, +hideInStage, +false);
}

static addAbilityList(builder:flatbuffers.Builder, abilityListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, abilityListOffset, 0);
}

static createAbilityListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAbilityListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLinkEnemies(builder:flatbuffers.Builder, linkEnemiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, linkEnemiesOffset, 0);
}

static createLinkEnemiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinkEnemiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDamageType(builder:flatbuffers.Builder, damageTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, damageTypeOffset, 0);
}

static createDamageTypeVector(builder:flatbuffers.Builder, data:enum__Torappu_EnemyHandBookDamageType[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startDamageTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInvisibleDetail(builder:flatbuffers.Builder, invisibleDetail:boolean) {
  builder.addFieldInt8(16, +invisibleDetail, +false);
}

static endclz_Torappu_EnemyHandBookData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_EnemyHandBookData(builder:flatbuffers.Builder, enemyIdOffset:flatbuffers.Offset, enemyIndexOffset:flatbuffers.Offset, enemyTagsOffset:flatbuffers.Offset, sortId:number, nameOffset:flatbuffers.Offset, enemyLevel:enum__Torappu_EnemyLevelType, descriptionOffset:flatbuffers.Offset, attackTypeOffset:flatbuffers.Offset, abilityOffset:flatbuffers.Offset, isInvalidKilled:boolean, overrideKillCntInfosOffset:flatbuffers.Offset, hideInHandbook:boolean, hideInStage:boolean, abilityListOffset:flatbuffers.Offset, linkEnemiesOffset:flatbuffers.Offset, damageTypeOffset:flatbuffers.Offset, invisibleDetail:boolean):flatbuffers.Offset {
  clz_Torappu_EnemyHandBookData.startclz_Torappu_EnemyHandBookData(builder);
  clz_Torappu_EnemyHandBookData.addEnemyId(builder, enemyIdOffset);
  clz_Torappu_EnemyHandBookData.addEnemyIndex(builder, enemyIndexOffset);
  clz_Torappu_EnemyHandBookData.addEnemyTags(builder, enemyTagsOffset);
  clz_Torappu_EnemyHandBookData.addSortId(builder, sortId);
  clz_Torappu_EnemyHandBookData.addName(builder, nameOffset);
  clz_Torappu_EnemyHandBookData.addEnemyLevel(builder, enemyLevel);
  clz_Torappu_EnemyHandBookData.addDescription(builder, descriptionOffset);
  clz_Torappu_EnemyHandBookData.addAttackType(builder, attackTypeOffset);
  clz_Torappu_EnemyHandBookData.addAbility(builder, abilityOffset);
  clz_Torappu_EnemyHandBookData.addIsInvalidKilled(builder, isInvalidKilled);
  clz_Torappu_EnemyHandBookData.addOverrideKillCntInfos(builder, overrideKillCntInfosOffset);
  clz_Torappu_EnemyHandBookData.addHideInHandbook(builder, hideInHandbook);
  clz_Torappu_EnemyHandBookData.addHideInStage(builder, hideInStage);
  clz_Torappu_EnemyHandBookData.addAbilityList(builder, abilityListOffset);
  clz_Torappu_EnemyHandBookData.addLinkEnemies(builder, linkEnemiesOffset);
  clz_Torappu_EnemyHandBookData.addDamageType(builder, damageTypeOffset);
  clz_Torappu_EnemyHandBookData.addInvisibleDetail(builder, invisibleDetail);
  return clz_Torappu_EnemyHandBookData.endclz_Torappu_EnemyHandBookData(builder);
}

unpack(): clz_Torappu_EnemyHandBookDataT {
  return new clz_Torappu_EnemyHandBookDataT(
    this.enemyId(),
    this.enemyIndex(),
    this.bb!.createScalarList<string>(this.enemyTags.bind(this), this.enemyTagsLength()),
    this.sortId(),
    this.name(),
    this.enemyLevel(),
    this.description(),
    this.attackType(),
    this.ability(),
    this.isInvalidKilled(),
    this.bb!.createObjList<dict__string__int, dict__string__intT>(this.overrideKillCntInfos.bind(this), this.overrideKillCntInfosLength()),
    this.hideInHandbook(),
    this.hideInStage(),
    this.bb!.createObjList<clz_Torappu_EnemyHandBookData_Abilty, clz_Torappu_EnemyHandBookData_AbiltyT>(this.abilityList.bind(this), this.abilityListLength()),
    this.bb!.createScalarList<string>(this.linkEnemies.bind(this), this.linkEnemiesLength()),
    this.bb!.createScalarList<enum__Torappu_EnemyHandBookDamageType>(this.damageType.bind(this), this.damageTypeLength()),
    this.invisibleDetail()
  );
}


unpackTo(_o: clz_Torappu_EnemyHandBookDataT): void {
  _o.enemyId = this.enemyId();
  _o.enemyIndex = this.enemyIndex();
  _o.enemyTags = this.bb!.createScalarList<string>(this.enemyTags.bind(this), this.enemyTagsLength());
  _o.sortId = this.sortId();
  _o.name = this.name();
  _o.enemyLevel = this.enemyLevel();
  _o.description = this.description();
  _o.attackType = this.attackType();
  _o.ability = this.ability();
  _o.isInvalidKilled = this.isInvalidKilled();
  _o.overrideKillCntInfos = this.bb!.createObjList<dict__string__int, dict__string__intT>(this.overrideKillCntInfos.bind(this), this.overrideKillCntInfosLength());
  _o.hideInHandbook = this.hideInHandbook();
  _o.hideInStage = this.hideInStage();
  _o.abilityList = this.bb!.createObjList<clz_Torappu_EnemyHandBookData_Abilty, clz_Torappu_EnemyHandBookData_AbiltyT>(this.abilityList.bind(this), this.abilityListLength());
  _o.linkEnemies = this.bb!.createScalarList<string>(this.linkEnemies.bind(this), this.linkEnemiesLength());
  _o.damageType = this.bb!.createScalarList<enum__Torappu_EnemyHandBookDamageType>(this.damageType.bind(this), this.damageTypeLength());
  _o.invisibleDetail = this.invisibleDetail();
}
}

export class clz_Torappu_EnemyHandBookDataT implements flatbuffers.IGeneratedObject {
constructor(
  public enemyId: string|Uint8Array|null = null,
  public enemyIndex: string|Uint8Array|null = null,
  public enemyTags: (string)[] = [],
  public sortId: number = 0,
  public name: string|Uint8Array|null = null,
  public enemyLevel: enum__Torappu_EnemyLevelType = enum__Torappu_EnemyLevelType.NORMAL,
  public description: string|Uint8Array|null = null,
  public attackType: string|Uint8Array|null = null,
  public ability: string|Uint8Array|null = null,
  public isInvalidKilled: boolean = false,
  public overrideKillCntInfos: (dict__string__intT)[] = [],
  public hideInHandbook: boolean = false,
  public hideInStage: boolean = false,
  public abilityList: (clz_Torappu_EnemyHandBookData_AbiltyT)[] = [],
  public linkEnemies: (string)[] = [],
  public damageType: (enum__Torappu_EnemyHandBookDamageType)[] = [],
  public invisibleDetail: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const enemyId = (this.enemyId !== null ? builder.createString(this.enemyId!) : 0);
  const enemyIndex = (this.enemyIndex !== null ? builder.createString(this.enemyIndex!) : 0);
  const enemyTags = clz_Torappu_EnemyHandBookData.createEnemyTagsVector(builder, builder.createObjectOffsetList(this.enemyTags));
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const attackType = (this.attackType !== null ? builder.createString(this.attackType!) : 0);
  const ability = (this.ability !== null ? builder.createString(this.ability!) : 0);
  const overrideKillCntInfos = clz_Torappu_EnemyHandBookData.createOverrideKillCntInfosVector(builder, builder.createObjectOffsetList(this.overrideKillCntInfos));
  const abilityList = clz_Torappu_EnemyHandBookData.createAbilityListVector(builder, builder.createObjectOffsetList(this.abilityList));
  const linkEnemies = clz_Torappu_EnemyHandBookData.createLinkEnemiesVector(builder, builder.createObjectOffsetList(this.linkEnemies));
  const damageType = clz_Torappu_EnemyHandBookData.createDamageTypeVector(builder, this.damageType);

  return clz_Torappu_EnemyHandBookData.createclz_Torappu_EnemyHandBookData(builder,
    enemyId,
    enemyIndex,
    enemyTags,
    this.sortId,
    name,
    this.enemyLevel,
    description,
    attackType,
    ability,
    this.isInvalidKilled,
    overrideKillCntInfos,
    this.hideInHandbook,
    this.hideInStage,
    abilityList,
    linkEnemies,
    damageType,
    this.invisibleDetail
  );
}
}
