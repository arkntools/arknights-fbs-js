// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_MapThemeData implements flatbuffers.IUnpackableObject<clz_Torappu_MapThemeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MapThemeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MapThemeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MapThemeData):clz_Torappu_MapThemeData {
  return (obj || new clz_Torappu_MapThemeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MapThemeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MapThemeData):clz_Torappu_MapThemeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MapThemeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

themeId():string|null
themeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
themeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unitColor():string|null
unitColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unitColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

buildableColor():string|null
buildableColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
buildableColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

themeType():string|null
themeType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
themeType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trapTintColor():string|null
trapTintColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trapTintColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

emissionColor():string|null
emissionColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
emissionColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_MapThemeData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addThemeId(builder:flatbuffers.Builder, themeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, themeIdOffset, 0);
}

static addUnitColor(builder:flatbuffers.Builder, unitColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, unitColorOffset, 0);
}

static addBuildableColor(builder:flatbuffers.Builder, buildableColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, buildableColorOffset, 0);
}

static addThemeType(builder:flatbuffers.Builder, themeTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, themeTypeOffset, 0);
}

static addTrapTintColor(builder:flatbuffers.Builder, trapTintColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, trapTintColorOffset, 0);
}

static addEmissionColor(builder:flatbuffers.Builder, emissionColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, emissionColorOffset, 0);
}

static endclz_Torappu_MapThemeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MapThemeData(builder:flatbuffers.Builder, themeIdOffset:flatbuffers.Offset, unitColorOffset:flatbuffers.Offset, buildableColorOffset:flatbuffers.Offset, themeTypeOffset:flatbuffers.Offset, trapTintColorOffset:flatbuffers.Offset, emissionColorOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_MapThemeData.startclz_Torappu_MapThemeData(builder);
  clz_Torappu_MapThemeData.addThemeId(builder, themeIdOffset);
  clz_Torappu_MapThemeData.addUnitColor(builder, unitColorOffset);
  clz_Torappu_MapThemeData.addBuildableColor(builder, buildableColorOffset);
  clz_Torappu_MapThemeData.addThemeType(builder, themeTypeOffset);
  clz_Torappu_MapThemeData.addTrapTintColor(builder, trapTintColorOffset);
  clz_Torappu_MapThemeData.addEmissionColor(builder, emissionColorOffset);
  return clz_Torappu_MapThemeData.endclz_Torappu_MapThemeData(builder);
}

unpack(): clz_Torappu_MapThemeDataT {
  return new clz_Torappu_MapThemeDataT(
    this.themeId(),
    this.unitColor(),
    this.buildableColor(),
    this.themeType(),
    this.trapTintColor(),
    this.emissionColor()
  );
}


unpackTo(_o: clz_Torappu_MapThemeDataT): void {
  _o.themeId = this.themeId();
  _o.unitColor = this.unitColor();
  _o.buildableColor = this.buildableColor();
  _o.themeType = this.themeType();
  _o.trapTintColor = this.trapTintColor();
  _o.emissionColor = this.emissionColor();
}
}

export class clz_Torappu_MapThemeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public themeId: string|Uint8Array|null = null,
  public unitColor: string|Uint8Array|null = null,
  public buildableColor: string|Uint8Array|null = null,
  public themeType: string|Uint8Array|null = null,
  public trapTintColor: string|Uint8Array|null = null,
  public emissionColor: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const themeId = (this.themeId !== null ? builder.createString(this.themeId!) : 0);
  const unitColor = (this.unitColor !== null ? builder.createString(this.unitColor!) : 0);
  const buildableColor = (this.buildableColor !== null ? builder.createString(this.buildableColor!) : 0);
  const themeType = (this.themeType !== null ? builder.createString(this.themeType!) : 0);
  const trapTintColor = (this.trapTintColor !== null ? builder.createString(this.trapTintColor!) : 0);
  const emissionColor = (this.emissionColor !== null ? builder.createString(this.emissionColor!) : 0);

  return clz_Torappu_MapThemeData.createclz_Torappu_MapThemeData(builder,
    themeId,
    unitColor,
    buildableColor,
    themeType,
    trapTintColor,
    emissionColor
  );
}
}
