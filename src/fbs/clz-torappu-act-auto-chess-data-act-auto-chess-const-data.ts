// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActAutoChessData_ActAutoChessConstData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessConstData):clz_Torappu_ActAutoChessData_ActAutoChessConstData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessConstData):clz_Torappu_ActAutoChessData_ActAutoChessConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shopRefreshPrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxDeckChessCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxBattleChessCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fallbackBondId():string|null
fallbackBondId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fallbackBondId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

storeCntMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

costPlayerHpLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

milestoneId():string|null
milestoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

borrowCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionName():string|null
dailyMissionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionRule():string|null
dailyMissionRule(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionRule(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trstageBandId():string|null
trstageBandId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trstageBandId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trstageBossId():string|null
trstageBossId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trstageBossId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trStageId():string|null
trStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trainingModeId():string|null
trainingModeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainingModeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trSpecialEnemyTypes(index: number):string
trSpecialEnemyTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trSpecialEnemyTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trSpecialEnemyTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trBondIds(index: number):string
trBondIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trBondIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trBondIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trBannedBondIds(index: number):string
trBannedBondIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trBannedBondIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trBannedBondIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

milestoneTrackId():string|null
milestoneTrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneTrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bandNextUpdateTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

escapedBattleTemplateMapSinglePlayer():string|null
escapedBattleTemplateMapSinglePlayer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
escapedBattleTemplateMapSinglePlayer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

escapedBattleTemplateMapMultiPlayer():string|null
escapedBattleTemplateMapMultiPlayer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
escapedBattleTemplateMapMultiPlayer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

webBusType():string|null
webBusType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
webBusType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessConstData(builder:flatbuffers.Builder) {
  builder.startObject(23);
}

static addShopRefreshPrice(builder:flatbuffers.Builder, shopRefreshPrice:number) {
  builder.addFieldInt32(0, shopRefreshPrice, 0);
}

static addMaxDeckChessCnt(builder:flatbuffers.Builder, maxDeckChessCnt:number) {
  builder.addFieldInt32(1, maxDeckChessCnt, 0);
}

static addMaxBattleChessCnt(builder:flatbuffers.Builder, maxBattleChessCnt:number) {
  builder.addFieldInt32(2, maxBattleChessCnt, 0);
}

static addFallbackBondId(builder:flatbuffers.Builder, fallbackBondIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fallbackBondIdOffset, 0);
}

static addStoreCntMax(builder:flatbuffers.Builder, storeCntMax:number) {
  builder.addFieldInt32(4, storeCntMax, 0);
}

static addCostPlayerHpLimit(builder:flatbuffers.Builder, costPlayerHpLimit:number) {
  builder.addFieldInt32(5, costPlayerHpLimit, 0);
}

static addMilestoneId(builder:flatbuffers.Builder, milestoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, milestoneIdOffset, 0);
}

static addBorrowCount(builder:flatbuffers.Builder, borrowCount:number) {
  builder.addFieldInt32(7, borrowCount, 0);
}

static addDailyMissionParam(builder:flatbuffers.Builder, dailyMissionParam:number) {
  builder.addFieldInt32(8, dailyMissionParam, 0);
}

static addDailyMissionName(builder:flatbuffers.Builder, dailyMissionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, dailyMissionNameOffset, 0);
}

static addDailyMissionRule(builder:flatbuffers.Builder, dailyMissionRuleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, dailyMissionRuleOffset, 0);
}

static addTrstageBandId(builder:flatbuffers.Builder, trstageBandIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, trstageBandIdOffset, 0);
}

static addTrstageBossId(builder:flatbuffers.Builder, trstageBossIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, trstageBossIdOffset, 0);
}

static addTrStageId(builder:flatbuffers.Builder, trStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, trStageIdOffset, 0);
}

static addTrainingModeId(builder:flatbuffers.Builder, trainingModeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, trainingModeIdOffset, 0);
}

static addTrSpecialEnemyTypes(builder:flatbuffers.Builder, trSpecialEnemyTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, trSpecialEnemyTypesOffset, 0);
}

static createTrSpecialEnemyTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrSpecialEnemyTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrBondIds(builder:flatbuffers.Builder, trBondIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, trBondIdsOffset, 0);
}

static createTrBondIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrBondIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrBannedBondIds(builder:flatbuffers.Builder, trBannedBondIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, trBannedBondIdsOffset, 0);
}

static createTrBannedBondIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrBannedBondIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMilestoneTrackId(builder:flatbuffers.Builder, milestoneTrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, milestoneTrackIdOffset, 0);
}

static addBandNextUpdateTs(builder:flatbuffers.Builder, bandNextUpdateTs:bigint) {
  builder.addFieldInt64(19, bandNextUpdateTs, BigInt('0'));
}

static addEscapedBattleTemplateMapSinglePlayer(builder:flatbuffers.Builder, escapedBattleTemplateMapSinglePlayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, escapedBattleTemplateMapSinglePlayerOffset, 0);
}

static addEscapedBattleTemplateMapMultiPlayer(builder:flatbuffers.Builder, escapedBattleTemplateMapMultiPlayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, escapedBattleTemplateMapMultiPlayerOffset, 0);
}

static addWebBusType(builder:flatbuffers.Builder, webBusTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, webBusTypeOffset, 0);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessConstData(builder:flatbuffers.Builder, shopRefreshPrice:number, maxDeckChessCnt:number, maxBattleChessCnt:number, fallbackBondIdOffset:flatbuffers.Offset, storeCntMax:number, costPlayerHpLimit:number, milestoneIdOffset:flatbuffers.Offset, borrowCount:number, dailyMissionParam:number, dailyMissionNameOffset:flatbuffers.Offset, dailyMissionRuleOffset:flatbuffers.Offset, trstageBandIdOffset:flatbuffers.Offset, trstageBossIdOffset:flatbuffers.Offset, trStageIdOffset:flatbuffers.Offset, trainingModeIdOffset:flatbuffers.Offset, trSpecialEnemyTypesOffset:flatbuffers.Offset, trBondIdsOffset:flatbuffers.Offset, trBannedBondIdsOffset:flatbuffers.Offset, milestoneTrackIdOffset:flatbuffers.Offset, bandNextUpdateTs:bigint, escapedBattleTemplateMapSinglePlayerOffset:flatbuffers.Offset, escapedBattleTemplateMapMultiPlayerOffset:flatbuffers.Offset, webBusTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.startclz_Torappu_ActAutoChessData_ActAutoChessConstData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addShopRefreshPrice(builder, shopRefreshPrice);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addMaxDeckChessCnt(builder, maxDeckChessCnt);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addMaxBattleChessCnt(builder, maxBattleChessCnt);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addFallbackBondId(builder, fallbackBondIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addStoreCntMax(builder, storeCntMax);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addCostPlayerHpLimit(builder, costPlayerHpLimit);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addMilestoneId(builder, milestoneIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addBorrowCount(builder, borrowCount);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addDailyMissionParam(builder, dailyMissionParam);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addDailyMissionName(builder, dailyMissionNameOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addDailyMissionRule(builder, dailyMissionRuleOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrstageBandId(builder, trstageBandIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrstageBossId(builder, trstageBossIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrStageId(builder, trStageIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrainingModeId(builder, trainingModeIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrSpecialEnemyTypes(builder, trSpecialEnemyTypesOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrBondIds(builder, trBondIdsOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addTrBannedBondIds(builder, trBannedBondIdsOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addMilestoneTrackId(builder, milestoneTrackIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addBandNextUpdateTs(builder, bandNextUpdateTs);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addEscapedBattleTemplateMapSinglePlayer(builder, escapedBattleTemplateMapSinglePlayerOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addEscapedBattleTemplateMapMultiPlayer(builder, escapedBattleTemplateMapMultiPlayerOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessConstData.addWebBusType(builder, webBusTypeOffset);
  return clz_Torappu_ActAutoChessData_ActAutoChessConstData.endclz_Torappu_ActAutoChessData_ActAutoChessConstData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessConstDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessConstDataT(
    this.shopRefreshPrice(),
    this.maxDeckChessCnt(),
    this.maxBattleChessCnt(),
    this.fallbackBondId(),
    this.storeCntMax(),
    this.costPlayerHpLimit(),
    this.milestoneId(),
    this.borrowCount(),
    this.dailyMissionParam(),
    this.dailyMissionName(),
    this.dailyMissionRule(),
    this.trstageBandId(),
    this.trstageBossId(),
    this.trStageId(),
    this.trainingModeId(),
    this.bb!.createScalarList<string>(this.trSpecialEnemyTypes.bind(this), this.trSpecialEnemyTypesLength()),
    this.bb!.createScalarList<string>(this.trBondIds.bind(this), this.trBondIdsLength()),
    this.bb!.createScalarList<string>(this.trBannedBondIds.bind(this), this.trBannedBondIdsLength()),
    this.milestoneTrackId(),
    this.bandNextUpdateTs(),
    this.escapedBattleTemplateMapSinglePlayer(),
    this.escapedBattleTemplateMapMultiPlayer(),
    this.webBusType()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessConstDataT): void {
  _o.shopRefreshPrice = this.shopRefreshPrice();
  _o.maxDeckChessCnt = this.maxDeckChessCnt();
  _o.maxBattleChessCnt = this.maxBattleChessCnt();
  _o.fallbackBondId = this.fallbackBondId();
  _o.storeCntMax = this.storeCntMax();
  _o.costPlayerHpLimit = this.costPlayerHpLimit();
  _o.milestoneId = this.milestoneId();
  _o.borrowCount = this.borrowCount();
  _o.dailyMissionParam = this.dailyMissionParam();
  _o.dailyMissionName = this.dailyMissionName();
  _o.dailyMissionRule = this.dailyMissionRule();
  _o.trstageBandId = this.trstageBandId();
  _o.trstageBossId = this.trstageBossId();
  _o.trStageId = this.trStageId();
  _o.trainingModeId = this.trainingModeId();
  _o.trSpecialEnemyTypes = this.bb!.createScalarList<string>(this.trSpecialEnemyTypes.bind(this), this.trSpecialEnemyTypesLength());
  _o.trBondIds = this.bb!.createScalarList<string>(this.trBondIds.bind(this), this.trBondIdsLength());
  _o.trBannedBondIds = this.bb!.createScalarList<string>(this.trBannedBondIds.bind(this), this.trBannedBondIdsLength());
  _o.milestoneTrackId = this.milestoneTrackId();
  _o.bandNextUpdateTs = this.bandNextUpdateTs();
  _o.escapedBattleTemplateMapSinglePlayer = this.escapedBattleTemplateMapSinglePlayer();
  _o.escapedBattleTemplateMapMultiPlayer = this.escapedBattleTemplateMapMultiPlayer();
  _o.webBusType = this.webBusType();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public shopRefreshPrice: number = 0,
  public maxDeckChessCnt: number = 0,
  public maxBattleChessCnt: number = 0,
  public fallbackBondId: string|Uint8Array|null = null,
  public storeCntMax: number = 0,
  public costPlayerHpLimit: number = 0,
  public milestoneId: string|Uint8Array|null = null,
  public borrowCount: number = 0,
  public dailyMissionParam: number = 0,
  public dailyMissionName: string|Uint8Array|null = null,
  public dailyMissionRule: string|Uint8Array|null = null,
  public trstageBandId: string|Uint8Array|null = null,
  public trstageBossId: string|Uint8Array|null = null,
  public trStageId: string|Uint8Array|null = null,
  public trainingModeId: string|Uint8Array|null = null,
  public trSpecialEnemyTypes: (string)[] = [],
  public trBondIds: (string)[] = [],
  public trBannedBondIds: (string)[] = [],
  public milestoneTrackId: string|Uint8Array|null = null,
  public bandNextUpdateTs: bigint = BigInt('0'),
  public escapedBattleTemplateMapSinglePlayer: string|Uint8Array|null = null,
  public escapedBattleTemplateMapMultiPlayer: string|Uint8Array|null = null,
  public webBusType: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fallbackBondId = (this.fallbackBondId !== null ? builder.createString(this.fallbackBondId!) : 0);
  const milestoneId = (this.milestoneId !== null ? builder.createString(this.milestoneId!) : 0);
  const dailyMissionName = (this.dailyMissionName !== null ? builder.createString(this.dailyMissionName!) : 0);
  const dailyMissionRule = (this.dailyMissionRule !== null ? builder.createString(this.dailyMissionRule!) : 0);
  const trstageBandId = (this.trstageBandId !== null ? builder.createString(this.trstageBandId!) : 0);
  const trstageBossId = (this.trstageBossId !== null ? builder.createString(this.trstageBossId!) : 0);
  const trStageId = (this.trStageId !== null ? builder.createString(this.trStageId!) : 0);
  const trainingModeId = (this.trainingModeId !== null ? builder.createString(this.trainingModeId!) : 0);
  const trSpecialEnemyTypes = clz_Torappu_ActAutoChessData_ActAutoChessConstData.createTrSpecialEnemyTypesVector(builder, builder.createObjectOffsetList(this.trSpecialEnemyTypes));
  const trBondIds = clz_Torappu_ActAutoChessData_ActAutoChessConstData.createTrBondIdsVector(builder, builder.createObjectOffsetList(this.trBondIds));
  const trBannedBondIds = clz_Torappu_ActAutoChessData_ActAutoChessConstData.createTrBannedBondIdsVector(builder, builder.createObjectOffsetList(this.trBannedBondIds));
  const milestoneTrackId = (this.milestoneTrackId !== null ? builder.createString(this.milestoneTrackId!) : 0);
  const escapedBattleTemplateMapSinglePlayer = (this.escapedBattleTemplateMapSinglePlayer !== null ? builder.createString(this.escapedBattleTemplateMapSinglePlayer!) : 0);
  const escapedBattleTemplateMapMultiPlayer = (this.escapedBattleTemplateMapMultiPlayer !== null ? builder.createString(this.escapedBattleTemplateMapMultiPlayer!) : 0);
  const webBusType = (this.webBusType !== null ? builder.createString(this.webBusType!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutoChessConstData.createclz_Torappu_ActAutoChessData_ActAutoChessConstData(builder,
    this.shopRefreshPrice,
    this.maxDeckChessCnt,
    this.maxBattleChessCnt,
    fallbackBondId,
    this.storeCntMax,
    this.costPlayerHpLimit,
    milestoneId,
    this.borrowCount,
    this.dailyMissionParam,
    dailyMissionName,
    dailyMissionRule,
    trstageBandId,
    trstageBossId,
    trStageId,
    trainingModeId,
    trSpecialEnemyTypes,
    trBondIds,
    trBannedBondIds,
    milestoneTrackId,
    this.bandNextUpdateTs,
    escapedBattleTemplateMapSinglePlayer,
    escapedBattleTemplateMapMultiPlayer,
    webBusType
  );
}
}
