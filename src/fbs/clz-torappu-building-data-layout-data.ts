// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot, dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotT } from './dict--string--clz-torappu-building-data-layout-data-room-slot.js';
import { dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost, dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostT } from './dict--string--clz-torappu-building-data-layout-data-slot-clean-cost.js';
import { dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData, dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataT } from './dict--string--clz-torappu-building-data-layout-data-storey-data.js';


export class clz_Torappu_BuildingData_LayoutData implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_LayoutDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_LayoutData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_LayoutData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_LayoutData):clz_Torappu_BuildingData_LayoutData {
  return (obj || new clz_Torappu_BuildingData_LayoutData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_LayoutData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_LayoutData):clz_Torappu_BuildingData_LayoutData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_LayoutData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

slots(index: number, obj?:dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot):dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

slotsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cleanCosts(index: number, obj?:dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost):dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cleanCostsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

storeys(index: number, obj?:dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData):dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

storeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_LayoutData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addSlots(builder:flatbuffers.Builder, slotsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, slotsOffset, 0);
}

static createSlotsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSlotsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCleanCosts(builder:flatbuffers.Builder, cleanCostsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, cleanCostsOffset, 0);
}

static createCleanCostsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCleanCostsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStoreys(builder:flatbuffers.Builder, storeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, storeysOffset, 0);
}

static createStoreysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStoreysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_LayoutData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_LayoutData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, slotsOffset:flatbuffers.Offset, cleanCostsOffset:flatbuffers.Offset, storeysOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuildingData_LayoutData.startclz_Torappu_BuildingData_LayoutData(builder);
  clz_Torappu_BuildingData_LayoutData.addId(builder, idOffset);
  clz_Torappu_BuildingData_LayoutData.addSlots(builder, slotsOffset);
  clz_Torappu_BuildingData_LayoutData.addCleanCosts(builder, cleanCostsOffset);
  clz_Torappu_BuildingData_LayoutData.addStoreys(builder, storeysOffset);
  return clz_Torappu_BuildingData_LayoutData.endclz_Torappu_BuildingData_LayoutData(builder);
}

unpack(): clz_Torappu_BuildingData_LayoutDataT {
  return new clz_Torappu_BuildingData_LayoutDataT(
    this.id(),
    this.bb!.createObjList<dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot, dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotT>(this.slots.bind(this), this.slotsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost, dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostT>(this.cleanCosts.bind(this), this.cleanCostsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData, dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataT>(this.storeys.bind(this), this.storeysLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_LayoutDataT): void {
  _o.id = this.id();
  _o.slots = this.bb!.createObjList<dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot, dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotT>(this.slots.bind(this), this.slotsLength());
  _o.cleanCosts = this.bb!.createObjList<dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost, dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostT>(this.cleanCosts.bind(this), this.cleanCostsLength());
  _o.storeys = this.bb!.createObjList<dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData, dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataT>(this.storeys.bind(this), this.storeysLength());
}
}

export class clz_Torappu_BuildingData_LayoutDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public slots: (dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotT)[] = [],
  public cleanCosts: (dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostT)[] = [],
  public storeys: (dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const slots = clz_Torappu_BuildingData_LayoutData.createSlotsVector(builder, builder.createObjectOffsetList(this.slots));
  const cleanCosts = clz_Torappu_BuildingData_LayoutData.createCleanCostsVector(builder, builder.createObjectOffsetList(this.cleanCosts));
  const storeys = clz_Torappu_BuildingData_LayoutData.createStoreysVector(builder, builder.createObjectOffsetList(this.storeys));

  return clz_Torappu_BuildingData_LayoutData.createclz_Torappu_BuildingData_LayoutData(builder,
    id,
    slots,
    cleanCosts,
    storeys
  );
}
}
