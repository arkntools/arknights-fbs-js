// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__string__clz_Torappu_EmoticonData_EmojiData, dict__string__clz_Torappu_EmoticonData_EmojiDataT } from './dict--string--clz-torappu-emoticon-data-emoji-data.js';
import { dict__string__list_string, dict__string__list_stringT } from './dict--string--list-string.js';


export class clz_Torappu_EmoticonData implements flatbuffers.IUnpackableObject<clz_Torappu_EmoticonDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_EmoticonData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_EmoticonData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_EmoticonData):clz_Torappu_EmoticonData {
  return (obj || new clz_Torappu_EmoticonData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_EmoticonData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_EmoticonData):clz_Torappu_EmoticonData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_EmoticonData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

emojiDataDict(index: number, obj?:dict__string__clz_Torappu_EmoticonData_EmojiData):dict__string__clz_Torappu_EmoticonData_EmojiData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_EmoticonData_EmojiData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

emojiDataDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

emoticonThemeDataDict(index: number, obj?:dict__string__list_string):dict__string__list_string|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__list_string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

emoticonThemeDataDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_EmoticonData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEmojiDataDict(builder:flatbuffers.Builder, emojiDataDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, emojiDataDictOffset, 0);
}

static createEmojiDataDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEmojiDataDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEmoticonThemeDataDict(builder:flatbuffers.Builder, emoticonThemeDataDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, emoticonThemeDataDictOffset, 0);
}

static createEmoticonThemeDataDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEmoticonThemeDataDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_EmoticonData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_EmoticonData(builder:flatbuffers.Builder, emojiDataDictOffset:flatbuffers.Offset, emoticonThemeDataDictOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_EmoticonData.startclz_Torappu_EmoticonData(builder);
  clz_Torappu_EmoticonData.addEmojiDataDict(builder, emojiDataDictOffset);
  clz_Torappu_EmoticonData.addEmoticonThemeDataDict(builder, emoticonThemeDataDictOffset);
  return clz_Torappu_EmoticonData.endclz_Torappu_EmoticonData(builder);
}

unpack(): clz_Torappu_EmoticonDataT {
  return new clz_Torappu_EmoticonDataT(
    this.bb!.createObjList<dict__string__clz_Torappu_EmoticonData_EmojiData, dict__string__clz_Torappu_EmoticonData_EmojiDataT>(this.emojiDataDict.bind(this), this.emojiDataDictLength()),
    this.bb!.createObjList<dict__string__list_string, dict__string__list_stringT>(this.emoticonThemeDataDict.bind(this), this.emoticonThemeDataDictLength())
  );
}


unpackTo(_o: clz_Torappu_EmoticonDataT): void {
  _o.emojiDataDict = this.bb!.createObjList<dict__string__clz_Torappu_EmoticonData_EmojiData, dict__string__clz_Torappu_EmoticonData_EmojiDataT>(this.emojiDataDict.bind(this), this.emojiDataDictLength());
  _o.emoticonThemeDataDict = this.bb!.createObjList<dict__string__list_string, dict__string__list_stringT>(this.emoticonThemeDataDict.bind(this), this.emoticonThemeDataDictLength());
}
}

export class clz_Torappu_EmoticonDataT implements flatbuffers.IGeneratedObject {
constructor(
  public emojiDataDict: (dict__string__clz_Torappu_EmoticonData_EmojiDataT)[] = [],
  public emoticonThemeDataDict: (dict__string__list_stringT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const emojiDataDict = clz_Torappu_EmoticonData.createEmojiDataDictVector(builder, builder.createObjectOffsetList(this.emojiDataDict));
  const emoticonThemeDataDict = clz_Torappu_EmoticonData.createEmoticonThemeDataDictVector(builder, builder.createObjectOffsetList(this.emoticonThemeDataDict));

  return clz_Torappu_EmoticonData.createclz_Torappu_EmoticonData(builder,
    emojiDataDict,
    emoticonThemeDataDict
  );
}
}
