// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_ActAutoChessModeDifficultyType } from './enum--torappu-act-auto-chess-mode-difficulty-type.js';
import { enum__Torappu_ActAutoChessModeType } from './enum--torappu-act-auto-chess-mode-type.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessModeData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessModeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessModeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessModeData):clz_Torappu_ActAutoChessData_ActAutoChessModeData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessModeData):clz_Torappu_ActAutoChessData_ActAutoChessModeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

modeId():string|null
modeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

backgroundId():string|null
backgroundId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
backgroundId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

effectDescList(index: number):string
effectDescList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
effectDescList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

effectDescListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

preposedMode():string|null
preposedMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preposedMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockText():string|null
unlockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

loadingPicId():string|null
loadingPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
loadingPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeType():enum__Torappu_ActAutoChessModeType {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActAutoChessModeType.LOCAL;
}

modeDifficulty():enum__Torappu_ActAutoChessModeDifficultyType {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActAutoChessModeDifficultyType.TRAINING;
}

modeIconId():string|null
modeIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeColor():string|null
modeColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

specialPhaseTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

activeBondIdList(index: number):string
activeBondIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
activeBondIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

activeBondIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inactiveBondIdList(index: number):string
inactiveBondIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inactiveBondIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inactiveBondIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inactiveEnemyKey(index: number):string
inactiveEnemyKey(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inactiveEnemyKey(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inactiveEnemyKeyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessModeData(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addModeId(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, modeIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, codeOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(3, sortId, 0);
}

static addBackgroundId(builder:flatbuffers.Builder, backgroundIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, backgroundIdOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, descOffset, 0);
}

static addEffectDescList(builder:flatbuffers.Builder, effectDescListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, effectDescListOffset, 0);
}

static createEffectDescListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectDescListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreposedMode(builder:flatbuffers.Builder, preposedModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, preposedModeOffset, 0);
}

static addUnlockText(builder:flatbuffers.Builder, unlockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, unlockTextOffset, 0);
}

static addLoadingPicId(builder:flatbuffers.Builder, loadingPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, loadingPicIdOffset, 0);
}

static addModeType(builder:flatbuffers.Builder, modeType:enum__Torappu_ActAutoChessModeType) {
  builder.addFieldInt32(10, modeType, enum__Torappu_ActAutoChessModeType.LOCAL);
}

static addModeDifficulty(builder:flatbuffers.Builder, modeDifficulty:enum__Torappu_ActAutoChessModeDifficultyType) {
  builder.addFieldInt32(11, modeDifficulty, enum__Torappu_ActAutoChessModeDifficultyType.TRAINING);
}

static addModeIconId(builder:flatbuffers.Builder, modeIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, modeIconIdOffset, 0);
}

static addModeColor(builder:flatbuffers.Builder, modeColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, modeColorOffset, 0);
}

static addSpecialPhaseTime(builder:flatbuffers.Builder, specialPhaseTime:number) {
  builder.addFieldInt32(14, specialPhaseTime, 0);
}

static addActiveBondIdList(builder:flatbuffers.Builder, activeBondIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, activeBondIdListOffset, 0);
}

static createActiveBondIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActiveBondIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInactiveBondIdList(builder:flatbuffers.Builder, inactiveBondIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, inactiveBondIdListOffset, 0);
}

static createInactiveBondIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInactiveBondIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInactiveEnemyKey(builder:flatbuffers.Builder, inactiveEnemyKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, inactiveEnemyKeyOffset, 0);
}

static createInactiveEnemyKeyVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInactiveEnemyKeyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessModeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessModeData(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset, sortId:number, backgroundIdOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, effectDescListOffset:flatbuffers.Offset, preposedModeOffset:flatbuffers.Offset, unlockTextOffset:flatbuffers.Offset, loadingPicIdOffset:flatbuffers.Offset, modeType:enum__Torappu_ActAutoChessModeType, modeDifficulty:enum__Torappu_ActAutoChessModeDifficultyType, modeIconIdOffset:flatbuffers.Offset, modeColorOffset:flatbuffers.Offset, specialPhaseTime:number, activeBondIdListOffset:flatbuffers.Offset, inactiveBondIdListOffset:flatbuffers.Offset, inactiveEnemyKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.startclz_Torappu_ActAutoChessData_ActAutoChessModeData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addModeId(builder, modeIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addName(builder, nameOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addCode(builder, codeOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addSortId(builder, sortId);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addBackgroundId(builder, backgroundIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addDesc(builder, descOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addEffectDescList(builder, effectDescListOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addPreposedMode(builder, preposedModeOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addUnlockText(builder, unlockTextOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addLoadingPicId(builder, loadingPicIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addModeType(builder, modeType);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addModeDifficulty(builder, modeDifficulty);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addModeIconId(builder, modeIconIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addModeColor(builder, modeColorOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addSpecialPhaseTime(builder, specialPhaseTime);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addActiveBondIdList(builder, activeBondIdListOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addInactiveBondIdList(builder, inactiveBondIdListOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessModeData.addInactiveEnemyKey(builder, inactiveEnemyKeyOffset);
  return clz_Torappu_ActAutoChessData_ActAutoChessModeData.endclz_Torappu_ActAutoChessData_ActAutoChessModeData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessModeDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessModeDataT(
    this.modeId(),
    this.name(),
    this.code(),
    this.sortId(),
    this.backgroundId(),
    this.desc(),
    this.bb!.createScalarList<string>(this.effectDescList.bind(this), this.effectDescListLength()),
    this.preposedMode(),
    this.unlockText(),
    this.loadingPicId(),
    this.modeType(),
    this.modeDifficulty(),
    this.modeIconId(),
    this.modeColor(),
    this.specialPhaseTime(),
    this.bb!.createScalarList<string>(this.activeBondIdList.bind(this), this.activeBondIdListLength()),
    this.bb!.createScalarList<string>(this.inactiveBondIdList.bind(this), this.inactiveBondIdListLength()),
    this.bb!.createScalarList<string>(this.inactiveEnemyKey.bind(this), this.inactiveEnemyKeyLength())
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessModeDataT): void {
  _o.modeId = this.modeId();
  _o.name = this.name();
  _o.code = this.code();
  _o.sortId = this.sortId();
  _o.backgroundId = this.backgroundId();
  _o.desc = this.desc();
  _o.effectDescList = this.bb!.createScalarList<string>(this.effectDescList.bind(this), this.effectDescListLength());
  _o.preposedMode = this.preposedMode();
  _o.unlockText = this.unlockText();
  _o.loadingPicId = this.loadingPicId();
  _o.modeType = this.modeType();
  _o.modeDifficulty = this.modeDifficulty();
  _o.modeIconId = this.modeIconId();
  _o.modeColor = this.modeColor();
  _o.specialPhaseTime = this.specialPhaseTime();
  _o.activeBondIdList = this.bb!.createScalarList<string>(this.activeBondIdList.bind(this), this.activeBondIdListLength());
  _o.inactiveBondIdList = this.bb!.createScalarList<string>(this.inactiveBondIdList.bind(this), this.inactiveBondIdListLength());
  _o.inactiveEnemyKey = this.bb!.createScalarList<string>(this.inactiveEnemyKey.bind(this), this.inactiveEnemyKeyLength());
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessModeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public modeId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public code: string|Uint8Array|null = null,
  public sortId: number = 0,
  public backgroundId: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public effectDescList: (string)[] = [],
  public preposedMode: string|Uint8Array|null = null,
  public unlockText: string|Uint8Array|null = null,
  public loadingPicId: string|Uint8Array|null = null,
  public modeType: enum__Torappu_ActAutoChessModeType = enum__Torappu_ActAutoChessModeType.LOCAL,
  public modeDifficulty: enum__Torappu_ActAutoChessModeDifficultyType = enum__Torappu_ActAutoChessModeDifficultyType.TRAINING,
  public modeIconId: string|Uint8Array|null = null,
  public modeColor: string|Uint8Array|null = null,
  public specialPhaseTime: number = 0,
  public activeBondIdList: (string)[] = [],
  public inactiveBondIdList: (string)[] = [],
  public inactiveEnemyKey: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const modeId = (this.modeId !== null ? builder.createString(this.modeId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const backgroundId = (this.backgroundId !== null ? builder.createString(this.backgroundId!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const effectDescList = clz_Torappu_ActAutoChessData_ActAutoChessModeData.createEffectDescListVector(builder, builder.createObjectOffsetList(this.effectDescList));
  const preposedMode = (this.preposedMode !== null ? builder.createString(this.preposedMode!) : 0);
  const unlockText = (this.unlockText !== null ? builder.createString(this.unlockText!) : 0);
  const loadingPicId = (this.loadingPicId !== null ? builder.createString(this.loadingPicId!) : 0);
  const modeIconId = (this.modeIconId !== null ? builder.createString(this.modeIconId!) : 0);
  const modeColor = (this.modeColor !== null ? builder.createString(this.modeColor!) : 0);
  const activeBondIdList = clz_Torappu_ActAutoChessData_ActAutoChessModeData.createActiveBondIdListVector(builder, builder.createObjectOffsetList(this.activeBondIdList));
  const inactiveBondIdList = clz_Torappu_ActAutoChessData_ActAutoChessModeData.createInactiveBondIdListVector(builder, builder.createObjectOffsetList(this.inactiveBondIdList));
  const inactiveEnemyKey = clz_Torappu_ActAutoChessData_ActAutoChessModeData.createInactiveEnemyKeyVector(builder, builder.createObjectOffsetList(this.inactiveEnemyKey));

  return clz_Torappu_ActAutoChessData_ActAutoChessModeData.createclz_Torappu_ActAutoChessData_ActAutoChessModeData(builder,
    modeId,
    name,
    code,
    this.sortId,
    backgroundId,
    desc,
    effectDescList,
    preposedMode,
    unlockText,
    loadingPicId,
    this.modeType,
    this.modeDifficulty,
    modeIconId,
    modeColor,
    this.specialPhaseTime,
    activeBondIdList,
    inactiveBondIdList,
    inactiveEnemyKey
  );
}
}
