// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_SandboxV2RacingConstData, clz_Torappu_SandboxV2RacingConstDataT } from './clz-torappu-sandbox-v2-racing-const-data.js';
import { dict__string__clz_Torappu_SandboxV2RacerBasicInfo, dict__string__clz_Torappu_SandboxV2RacerBasicInfoT } from './dict--string--clz-torappu-sandbox-v2-racer-basic-info.js';
import { dict__string__clz_Torappu_SandboxV2RacerMedalInfo, dict__string__clz_Torappu_SandboxV2RacerMedalInfoT } from './dict--string--clz-torappu-sandbox-v2-racer-medal-info.js';
import { dict__string__clz_Torappu_SandboxV2RacerNameInfo, dict__string__clz_Torappu_SandboxV2RacerNameInfoT } from './dict--string--clz-torappu-sandbox-v2-racer-name-info.js';
import { dict__string__clz_Torappu_SandboxV2RacerTalentInfo, dict__string__clz_Torappu_SandboxV2RacerTalentInfoT } from './dict--string--clz-torappu-sandbox-v2-racer-talent-info.js';
import { dict__string__clz_Torappu_SandboxV2RacingItemInfo, dict__string__clz_Torappu_SandboxV2RacingItemInfoT } from './dict--string--clz-torappu-sandbox-v2-racing-item-info.js';
import { dict__string__string, dict__string__stringT } from './dict--string--string.js';


export class clz_Torappu_SandboxV2RacingData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2RacingDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2RacingData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2RacingData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2RacingData):clz_Torappu_SandboxV2RacingData {
  return (obj || new clz_Torappu_SandboxV2RacingData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2RacingData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2RacingData):clz_Torappu_SandboxV2RacingData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2RacingData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

racerBasicInfo(index: number, obj?:dict__string__clz_Torappu_SandboxV2RacerBasicInfo):dict__string__clz_Torappu_SandboxV2RacerBasicInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2RacerBasicInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

racerBasicInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

racerTalentInfo(index: number, obj?:dict__string__clz_Torappu_SandboxV2RacerTalentInfo):dict__string__clz_Torappu_SandboxV2RacerTalentInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2RacerTalentInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

racerTalentInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

racerNameInfo(index: number, obj?:dict__string__clz_Torappu_SandboxV2RacerNameInfo):dict__string__clz_Torappu_SandboxV2RacerNameInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2RacerNameInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

racerNameInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

racerMedalInfo(index: number, obj?:dict__string__clz_Torappu_SandboxV2RacerMedalInfo):dict__string__clz_Torappu_SandboxV2RacerMedalInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2RacerMedalInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

racerMedalInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enemyItemMap(index: number, obj?:dict__string__string):dict__string__string|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new dict__string__string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

enemyItemMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

racingItemInfo(index: number, obj?:dict__string__clz_Torappu_SandboxV2RacingItemInfo):dict__string__clz_Torappu_SandboxV2RacingItemInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2RacingItemInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

racingItemInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

constData(obj?:clz_Torappu_SandboxV2RacingConstData):clz_Torappu_SandboxV2RacingConstData|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_SandboxV2RacingConstData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_SandboxV2RacingData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addRacerBasicInfo(builder:flatbuffers.Builder, racerBasicInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, racerBasicInfoOffset, 0);
}

static createRacerBasicInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRacerBasicInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRacerTalentInfo(builder:flatbuffers.Builder, racerTalentInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, racerTalentInfoOffset, 0);
}

static createRacerTalentInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRacerTalentInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRacerNameInfo(builder:flatbuffers.Builder, racerNameInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, racerNameInfoOffset, 0);
}

static createRacerNameInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRacerNameInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRacerMedalInfo(builder:flatbuffers.Builder, racerMedalInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, racerMedalInfoOffset, 0);
}

static createRacerMedalInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRacerMedalInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyItemMap(builder:flatbuffers.Builder, enemyItemMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, enemyItemMapOffset, 0);
}

static createEnemyItemMapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyItemMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRacingItemInfo(builder:flatbuffers.Builder, racingItemInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, racingItemInfoOffset, 0);
}

static createRacingItemInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRacingItemInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConstData(builder:flatbuffers.Builder, constDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, constDataOffset, 0);
}

static endclz_Torappu_SandboxV2RacingData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_SandboxV2RacingDataT {
  return new clz_Torappu_SandboxV2RacingDataT(
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerBasicInfo, dict__string__clz_Torappu_SandboxV2RacerBasicInfoT>(this.racerBasicInfo.bind(this), this.racerBasicInfoLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerTalentInfo, dict__string__clz_Torappu_SandboxV2RacerTalentInfoT>(this.racerTalentInfo.bind(this), this.racerTalentInfoLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerNameInfo, dict__string__clz_Torappu_SandboxV2RacerNameInfoT>(this.racerNameInfo.bind(this), this.racerNameInfoLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerMedalInfo, dict__string__clz_Torappu_SandboxV2RacerMedalInfoT>(this.racerMedalInfo.bind(this), this.racerMedalInfoLength()),
    this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.enemyItemMap.bind(this), this.enemyItemMapLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacingItemInfo, dict__string__clz_Torappu_SandboxV2RacingItemInfoT>(this.racingItemInfo.bind(this), this.racingItemInfoLength()),
    (this.constData() !== null ? this.constData()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_SandboxV2RacingDataT): void {
  _o.racerBasicInfo = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerBasicInfo, dict__string__clz_Torappu_SandboxV2RacerBasicInfoT>(this.racerBasicInfo.bind(this), this.racerBasicInfoLength());
  _o.racerTalentInfo = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerTalentInfo, dict__string__clz_Torappu_SandboxV2RacerTalentInfoT>(this.racerTalentInfo.bind(this), this.racerTalentInfoLength());
  _o.racerNameInfo = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerNameInfo, dict__string__clz_Torappu_SandboxV2RacerNameInfoT>(this.racerNameInfo.bind(this), this.racerNameInfoLength());
  _o.racerMedalInfo = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacerMedalInfo, dict__string__clz_Torappu_SandboxV2RacerMedalInfoT>(this.racerMedalInfo.bind(this), this.racerMedalInfoLength());
  _o.enemyItemMap = this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.enemyItemMap.bind(this), this.enemyItemMapLength());
  _o.racingItemInfo = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2RacingItemInfo, dict__string__clz_Torappu_SandboxV2RacingItemInfoT>(this.racingItemInfo.bind(this), this.racingItemInfoLength());
  _o.constData = (this.constData() !== null ? this.constData()!.unpack() : null);
}
}

export class clz_Torappu_SandboxV2RacingDataT implements flatbuffers.IGeneratedObject {
constructor(
  public racerBasicInfo: (dict__string__clz_Torappu_SandboxV2RacerBasicInfoT)[] = [],
  public racerTalentInfo: (dict__string__clz_Torappu_SandboxV2RacerTalentInfoT)[] = [],
  public racerNameInfo: (dict__string__clz_Torappu_SandboxV2RacerNameInfoT)[] = [],
  public racerMedalInfo: (dict__string__clz_Torappu_SandboxV2RacerMedalInfoT)[] = [],
  public enemyItemMap: (dict__string__stringT)[] = [],
  public racingItemInfo: (dict__string__clz_Torappu_SandboxV2RacingItemInfoT)[] = [],
  public constData: clz_Torappu_SandboxV2RacingConstDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const racerBasicInfo = clz_Torappu_SandboxV2RacingData.createRacerBasicInfoVector(builder, builder.createObjectOffsetList(this.racerBasicInfo));
  const racerTalentInfo = clz_Torappu_SandboxV2RacingData.createRacerTalentInfoVector(builder, builder.createObjectOffsetList(this.racerTalentInfo));
  const racerNameInfo = clz_Torappu_SandboxV2RacingData.createRacerNameInfoVector(builder, builder.createObjectOffsetList(this.racerNameInfo));
  const racerMedalInfo = clz_Torappu_SandboxV2RacingData.createRacerMedalInfoVector(builder, builder.createObjectOffsetList(this.racerMedalInfo));
  const enemyItemMap = clz_Torappu_SandboxV2RacingData.createEnemyItemMapVector(builder, builder.createObjectOffsetList(this.enemyItemMap));
  const racingItemInfo = clz_Torappu_SandboxV2RacingData.createRacingItemInfoVector(builder, builder.createObjectOffsetList(this.racingItemInfo));
  const constData = (this.constData !== null ? this.constData!.pack(builder) : 0);

  clz_Torappu_SandboxV2RacingData.startclz_Torappu_SandboxV2RacingData(builder);
  clz_Torappu_SandboxV2RacingData.addRacerBasicInfo(builder, racerBasicInfo);
  clz_Torappu_SandboxV2RacingData.addRacerTalentInfo(builder, racerTalentInfo);
  clz_Torappu_SandboxV2RacingData.addRacerNameInfo(builder, racerNameInfo);
  clz_Torappu_SandboxV2RacingData.addRacerMedalInfo(builder, racerMedalInfo);
  clz_Torappu_SandboxV2RacingData.addEnemyItemMap(builder, enemyItemMap);
  clz_Torappu_SandboxV2RacingData.addRacingItemInfo(builder, racingItemInfo);
  clz_Torappu_SandboxV2RacingData.addConstData(builder, constData);

  return clz_Torappu_SandboxV2RacingData.endclz_Torappu_SandboxV2RacingData(builder);
}
}
