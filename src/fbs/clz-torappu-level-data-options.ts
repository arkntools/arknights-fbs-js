// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';
import { enum__Torappu_BattleFunctionDisableMask } from './enum--torappu-battle-function-disable-mask.js';


export class clz_Torappu_LevelData_Options implements flatbuffers.IUnpackableObject<clz_Torappu_LevelData_OptionsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_LevelData_Options {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_LevelData_Options(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_Options):clz_Torappu_LevelData_Options {
  return (obj || new clz_Torappu_LevelData_Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_LevelData_Options(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_Options):clz_Torappu_LevelData_Options {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_LevelData_Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

characterLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxLifePoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initialCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

costIncreaseTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

moveMultiplier():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

steeringEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isTrainingLevel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isHardTrainingLevel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isPredefinedCardsSelectable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayRestTime():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maxPlayTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

functionDisableMask():enum__Torappu_BattleFunctionDisableMask {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BattleFunctionDisableMask.NONE;
}

configBlackBoard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

configBlackBoardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_LevelData_Options(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addCharacterLimit(builder:flatbuffers.Builder, characterLimit:number) {
  builder.addFieldInt32(0, characterLimit, 0);
}

static addMaxLifePoint(builder:flatbuffers.Builder, maxLifePoint:number) {
  builder.addFieldInt32(1, maxLifePoint, 0);
}

static addInitialCost(builder:flatbuffers.Builder, initialCost:number) {
  builder.addFieldInt32(2, initialCost, 0);
}

static addMaxCost(builder:flatbuffers.Builder, maxCost:number) {
  builder.addFieldInt32(3, maxCost, 0);
}

static addCostIncreaseTime(builder:flatbuffers.Builder, costIncreaseTime:number) {
  builder.addFieldFloat32(4, costIncreaseTime, 0.0);
}

static addMoveMultiplier(builder:flatbuffers.Builder, moveMultiplier:number) {
  builder.addFieldFloat32(5, moveMultiplier, 0.0);
}

static addSteeringEnabled(builder:flatbuffers.Builder, steeringEnabled:boolean) {
  builder.addFieldInt8(6, +steeringEnabled, +false);
}

static addIsTrainingLevel(builder:flatbuffers.Builder, isTrainingLevel:boolean) {
  builder.addFieldInt8(7, +isTrainingLevel, +false);
}

static addIsHardTrainingLevel(builder:flatbuffers.Builder, isHardTrainingLevel:boolean) {
  builder.addFieldInt8(8, +isHardTrainingLevel, +false);
}

static addIsPredefinedCardsSelectable(builder:flatbuffers.Builder, isPredefinedCardsSelectable:boolean) {
  builder.addFieldInt8(9, +isPredefinedCardsSelectable, +false);
}

static addDisplayRestTime(builder:flatbuffers.Builder, displayRestTime:boolean) {
  builder.addFieldInt8(10, +displayRestTime, +false);
}

static addMaxPlayTime(builder:flatbuffers.Builder, maxPlayTime:number) {
  builder.addFieldFloat32(11, maxPlayTime, 0.0);
}

static addFunctionDisableMask(builder:flatbuffers.Builder, functionDisableMask:enum__Torappu_BattleFunctionDisableMask) {
  builder.addFieldInt32(12, functionDisableMask, enum__Torappu_BattleFunctionDisableMask.NONE);
}

static addConfigBlackBoard(builder:flatbuffers.Builder, configBlackBoardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, configBlackBoardOffset, 0);
}

static createConfigBlackBoardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startConfigBlackBoardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_LevelData_Options(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_LevelData_Options(builder:flatbuffers.Builder, characterLimit:number, maxLifePoint:number, initialCost:number, maxCost:number, costIncreaseTime:number, moveMultiplier:number, steeringEnabled:boolean, isTrainingLevel:boolean, isHardTrainingLevel:boolean, isPredefinedCardsSelectable:boolean, displayRestTime:boolean, maxPlayTime:number, functionDisableMask:enum__Torappu_BattleFunctionDisableMask, configBlackBoardOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_LevelData_Options.startclz_Torappu_LevelData_Options(builder);
  clz_Torappu_LevelData_Options.addCharacterLimit(builder, characterLimit);
  clz_Torappu_LevelData_Options.addMaxLifePoint(builder, maxLifePoint);
  clz_Torappu_LevelData_Options.addInitialCost(builder, initialCost);
  clz_Torappu_LevelData_Options.addMaxCost(builder, maxCost);
  clz_Torappu_LevelData_Options.addCostIncreaseTime(builder, costIncreaseTime);
  clz_Torappu_LevelData_Options.addMoveMultiplier(builder, moveMultiplier);
  clz_Torappu_LevelData_Options.addSteeringEnabled(builder, steeringEnabled);
  clz_Torappu_LevelData_Options.addIsTrainingLevel(builder, isTrainingLevel);
  clz_Torappu_LevelData_Options.addIsHardTrainingLevel(builder, isHardTrainingLevel);
  clz_Torappu_LevelData_Options.addIsPredefinedCardsSelectable(builder, isPredefinedCardsSelectable);
  clz_Torappu_LevelData_Options.addDisplayRestTime(builder, displayRestTime);
  clz_Torappu_LevelData_Options.addMaxPlayTime(builder, maxPlayTime);
  clz_Torappu_LevelData_Options.addFunctionDisableMask(builder, functionDisableMask);
  clz_Torappu_LevelData_Options.addConfigBlackBoard(builder, configBlackBoardOffset);
  return clz_Torappu_LevelData_Options.endclz_Torappu_LevelData_Options(builder);
}

unpack(): clz_Torappu_LevelData_OptionsT {
  return new clz_Torappu_LevelData_OptionsT(
    this.characterLimit(),
    this.maxLifePoint(),
    this.initialCost(),
    this.maxCost(),
    this.costIncreaseTime(),
    this.moveMultiplier(),
    this.steeringEnabled(),
    this.isTrainingLevel(),
    this.isHardTrainingLevel(),
    this.isPredefinedCardsSelectable(),
    this.displayRestTime(),
    this.maxPlayTime(),
    this.functionDisableMask(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.configBlackBoard.bind(this), this.configBlackBoardLength())
  );
}


unpackTo(_o: clz_Torappu_LevelData_OptionsT): void {
  _o.characterLimit = this.characterLimit();
  _o.maxLifePoint = this.maxLifePoint();
  _o.initialCost = this.initialCost();
  _o.maxCost = this.maxCost();
  _o.costIncreaseTime = this.costIncreaseTime();
  _o.moveMultiplier = this.moveMultiplier();
  _o.steeringEnabled = this.steeringEnabled();
  _o.isTrainingLevel = this.isTrainingLevel();
  _o.isHardTrainingLevel = this.isHardTrainingLevel();
  _o.isPredefinedCardsSelectable = this.isPredefinedCardsSelectable();
  _o.displayRestTime = this.displayRestTime();
  _o.maxPlayTime = this.maxPlayTime();
  _o.functionDisableMask = this.functionDisableMask();
  _o.configBlackBoard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.configBlackBoard.bind(this), this.configBlackBoardLength());
}
}

export class clz_Torappu_LevelData_OptionsT implements flatbuffers.IGeneratedObject {
constructor(
  public characterLimit: number = 0,
  public maxLifePoint: number = 0,
  public initialCost: number = 0,
  public maxCost: number = 0,
  public costIncreaseTime: number = 0.0,
  public moveMultiplier: number = 0.0,
  public steeringEnabled: boolean = false,
  public isTrainingLevel: boolean = false,
  public isHardTrainingLevel: boolean = false,
  public isPredefinedCardsSelectable: boolean = false,
  public displayRestTime: boolean = false,
  public maxPlayTime: number = 0.0,
  public functionDisableMask: enum__Torappu_BattleFunctionDisableMask = enum__Torappu_BattleFunctionDisableMask.NONE,
  public configBlackBoard: (clz_Torappu_Blackboard_DataPairT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const configBlackBoard = clz_Torappu_LevelData_Options.createConfigBlackBoardVector(builder, builder.createObjectOffsetList(this.configBlackBoard));

  return clz_Torappu_LevelData_Options.createclz_Torappu_LevelData_Options(builder,
    this.characterLimit,
    this.maxLifePoint,
    this.initialCost,
    this.maxCost,
    this.costIncreaseTime,
    this.moveMultiplier,
    this.steeringEnabled,
    this.isTrainingLevel,
    this.isHardTrainingLevel,
    this.isPredefinedCardsSelectable,
    this.displayRestTime,
    this.maxPlayTime,
    this.functionDisableMask,
    configBlackBoard
  );
}
}
