// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class hg__internal__MapData implements flatbuffers.IUnpackableObject<hg__internal__MapDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):hg__internal__MapData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAshg__internal__MapData(bb:flatbuffers.ByteBuffer, obj?:hg__internal__MapData):hg__internal__MapData {
  return (obj || new hg__internal__MapData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAshg__internal__MapData(bb:flatbuffers.ByteBuffer, obj?:hg__internal__MapData):hg__internal__MapData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new hg__internal__MapData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rowSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

columnSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

matrixData(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

matrixDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

matrixDataArray():Int16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static starthg__internal__MapData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRowSize(builder:flatbuffers.Builder, rowSize:number) {
  builder.addFieldInt32(0, rowSize, 0);
}

static addColumnSize(builder:flatbuffers.Builder, columnSize:number) {
  builder.addFieldInt32(1, columnSize, 0);
}

static addMatrixData(builder:flatbuffers.Builder, matrixDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, matrixDataOffset, 0);
}

static createMatrixDataVector(builder:flatbuffers.Builder, data:number[]|Int16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createMatrixDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createMatrixDataVector(builder:flatbuffers.Builder, data:number[]|Int16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startMatrixDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static endhg__internal__MapData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createhg__internal__MapData(builder:flatbuffers.Builder, rowSize:number, columnSize:number, matrixDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  hg__internal__MapData.starthg__internal__MapData(builder);
  hg__internal__MapData.addRowSize(builder, rowSize);
  hg__internal__MapData.addColumnSize(builder, columnSize);
  hg__internal__MapData.addMatrixData(builder, matrixDataOffset);
  return hg__internal__MapData.endhg__internal__MapData(builder);
}

unpack(): hg__internal__MapDataT {
  return new hg__internal__MapDataT(
    this.rowSize(),
    this.columnSize(),
    this.bb!.createScalarList<number>(this.matrixData.bind(this), this.matrixDataLength())
  );
}


unpackTo(_o: hg__internal__MapDataT): void {
  _o.rowSize = this.rowSize();
  _o.columnSize = this.columnSize();
  _o.matrixData = this.bb!.createScalarList<number>(this.matrixData.bind(this), this.matrixDataLength());
}
}

export class hg__internal__MapDataT implements flatbuffers.IGeneratedObject {
constructor(
  public rowSize: number = 0,
  public columnSize: number = 0,
  public matrixData: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const matrixData = hg__internal__MapData.createMatrixDataVector(builder, this.matrixData);

  return hg__internal__MapData.createhg__internal__MapData(builder,
    this.rowSize,
    this.columnSize,
    matrixData
  );
}
}
