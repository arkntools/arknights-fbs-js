// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class list_int implements flatbuffers.IUnpackableObject<list_intT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):list_int {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAslist_int(bb:flatbuffers.ByteBuffer, obj?:list_int):list_int {
  return (obj || new list_int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAslist_int(bb:flatbuffers.ByteBuffer, obj?:list_int):list_int {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new list_int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

values(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valuesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startlist_int(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createValuesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endlist_int(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createlist_int(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  list_int.startlist_int(builder);
  list_int.addValues(builder, valuesOffset);
  return list_int.endlist_int(builder);
}

unpack(): list_intT {
  return new list_intT(
    this.bb!.createScalarList<number>(this.values.bind(this), this.valuesLength())
  );
}


unpackTo(_o: list_intT): void {
  _o.values = this.bb!.createScalarList<number>(this.values.bind(this), this.valuesLength());
}
}

export class list_intT implements flatbuffers.IGeneratedObject {
constructor(
  public values: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const values = list_int.createValuesVector(builder, this.values);

  return list_int.createlist_int(builder,
    values
  );
}
}
