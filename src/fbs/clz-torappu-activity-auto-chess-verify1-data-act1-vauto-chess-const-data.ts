// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessFactionData, clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessFactionDataT } from './clz-torappu-activity-auto-chess-verify1-data-act1-vauto-chess-faction-data.js';


export class clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData {
  return (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chessSoldPrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

shopRefreshPrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bonusRound():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxDeckCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxChessCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

deltaShopUpgradePrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

shieldToDmgScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

spellCntLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

costPlayerHpLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rewardEnemyGroupKey():string|null
rewardEnemyGroupKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewardEnemyGroupKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewardEnemyEffectId():string|null
rewardEnemyEffectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewardEnemyEffectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selfDefenseDamageTip():string|null
selfDefenseDamageTip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
selfDefenseDamageTip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selfCharDamageTip():string|null
selfCharDamageTip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
selfCharDamageTip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selfDamageTip():string|null
selfDamageTip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
selfDamageTip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selfSpecialDamageTip():string|null
selfSpecialDamageTip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
selfSpecialDamageTip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

additionalAwardCount1():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

additionalAwardCount2():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

normalAwardTxt():string|null
normalAwardTxt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
normalAwardTxt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

additionalAwardTxt():string|null
additionalAwardTxt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
additionalAwardTxt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

milestoneId():string|null
milestoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

boxChangeTxt():string|null
boxChangeTxt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
boxChangeTxt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

startCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

borrowCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxBorrowListCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionRewardId():string|null
dailyMissionRewardId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionRewardId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionRewardType():string|null
dailyMissionRewardType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionRewardType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionRewardCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionName():string|null
dailyMissionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionDesc():string|null
dailyMissionDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionRule():string|null
dailyMissionRule(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionRule(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultFaction(obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessFactionData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessFactionData|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessFactionData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

utilTrapIds(index: number):string
utilTrapIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
utilTrapIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

utilTrapIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

specialRescuitIds(index: number):string
specialRescuitIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
specialRescuitIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

specialRescuitIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rewardSkinId():string|null
rewardSkinId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewardSkinId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewardSkinText():string|null
rewardSkinText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewardSkinText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewardAvatarId():string|null
rewardAvatarId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewardAvatarId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewardAvatarText():string|null
rewardAvatarText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewardAvatarText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

forceFocusEnemyTurns(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

forceFocusEnemyTurnsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

forceFocusEnemyTurnsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tutorialPhase1Round():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tutorialPhase2Round():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tutorialPhase3Round():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tutorialPhase1ShopLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tutorialPhase2ShopLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData(builder:flatbuffers.Builder) {
  builder.startObject(44);
}

static addChessSoldPrice(builder:flatbuffers.Builder, chessSoldPrice:number) {
  builder.addFieldInt32(0, chessSoldPrice, 0);
}

static addShopRefreshPrice(builder:flatbuffers.Builder, shopRefreshPrice:number) {
  builder.addFieldInt32(1, shopRefreshPrice, 0);
}

static addBonusRound(builder:flatbuffers.Builder, bonusRound:number) {
  builder.addFieldInt32(2, bonusRound, 0);
}

static addMaxDeckCnt(builder:flatbuffers.Builder, maxDeckCnt:number) {
  builder.addFieldInt32(3, maxDeckCnt, 0);
}

static addMaxChessCnt(builder:flatbuffers.Builder, maxChessCnt:number) {
  builder.addFieldInt32(4, maxChessCnt, 0);
}

static addDeltaShopUpgradePrice(builder:flatbuffers.Builder, deltaShopUpgradePrice:number) {
  builder.addFieldInt32(5, deltaShopUpgradePrice, 0);
}

static addShieldToDmgScale(builder:flatbuffers.Builder, shieldToDmgScale:number) {
  builder.addFieldInt32(6, shieldToDmgScale, 0);
}

static addSpellCntLimit(builder:flatbuffers.Builder, spellCntLimit:number) {
  builder.addFieldInt32(7, spellCntLimit, 0);
}

static addCostPlayerHpLimit(builder:flatbuffers.Builder, costPlayerHpLimit:number) {
  builder.addFieldInt32(8, costPlayerHpLimit, 0);
}

static addRewardEnemyGroupKey(builder:flatbuffers.Builder, rewardEnemyGroupKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, rewardEnemyGroupKeyOffset, 0);
}

static addRewardEnemyEffectId(builder:flatbuffers.Builder, rewardEnemyEffectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, rewardEnemyEffectIdOffset, 0);
}

static addSelfDefenseDamageTip(builder:flatbuffers.Builder, selfDefenseDamageTipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, selfDefenseDamageTipOffset, 0);
}

static addSelfCharDamageTip(builder:flatbuffers.Builder, selfCharDamageTipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, selfCharDamageTipOffset, 0);
}

static addSelfDamageTip(builder:flatbuffers.Builder, selfDamageTipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, selfDamageTipOffset, 0);
}

static addSelfSpecialDamageTip(builder:flatbuffers.Builder, selfSpecialDamageTipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, selfSpecialDamageTipOffset, 0);
}

static addAdditionalAwardCount1(builder:flatbuffers.Builder, additionalAwardCount1:number) {
  builder.addFieldInt32(15, additionalAwardCount1, 0);
}

static addAdditionalAwardCount2(builder:flatbuffers.Builder, additionalAwardCount2:number) {
  builder.addFieldInt32(16, additionalAwardCount2, 0);
}

static addNormalAwardTxt(builder:flatbuffers.Builder, normalAwardTxtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, normalAwardTxtOffset, 0);
}

static addAdditionalAwardTxt(builder:flatbuffers.Builder, additionalAwardTxtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, additionalAwardTxtOffset, 0);
}

static addMilestoneId(builder:flatbuffers.Builder, milestoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, milestoneIdOffset, 0);
}

static addBoxChangeTxt(builder:flatbuffers.Builder, boxChangeTxtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, boxChangeTxtOffset, 0);
}

static addStartCd(builder:flatbuffers.Builder, startCd:number) {
  builder.addFieldInt32(21, startCd, 0);
}

static addBorrowCount(builder:flatbuffers.Builder, borrowCount:number) {
  builder.addFieldInt32(22, borrowCount, 0);
}

static addMaxBorrowListCnt(builder:flatbuffers.Builder, maxBorrowListCnt:number) {
  builder.addFieldInt32(23, maxBorrowListCnt, 0);
}

static addDailyMissionParam(builder:flatbuffers.Builder, dailyMissionParam:number) {
  builder.addFieldInt32(24, dailyMissionParam, 0);
}

static addDailyMissionRewardId(builder:flatbuffers.Builder, dailyMissionRewardIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, dailyMissionRewardIdOffset, 0);
}

static addDailyMissionRewardType(builder:flatbuffers.Builder, dailyMissionRewardTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, dailyMissionRewardTypeOffset, 0);
}

static addDailyMissionRewardCount(builder:flatbuffers.Builder, dailyMissionRewardCount:number) {
  builder.addFieldInt32(27, dailyMissionRewardCount, 0);
}

static addDailyMissionName(builder:flatbuffers.Builder, dailyMissionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, dailyMissionNameOffset, 0);
}

static addDailyMissionDesc(builder:flatbuffers.Builder, dailyMissionDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, dailyMissionDescOffset, 0);
}

static addDailyMissionRule(builder:flatbuffers.Builder, dailyMissionRuleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, dailyMissionRuleOffset, 0);
}

static addDefaultFaction(builder:flatbuffers.Builder, defaultFactionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, defaultFactionOffset, 0);
}

static addUtilTrapIds(builder:flatbuffers.Builder, utilTrapIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, utilTrapIdsOffset, 0);
}

static createUtilTrapIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUtilTrapIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSpecialRescuitIds(builder:flatbuffers.Builder, specialRescuitIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, specialRescuitIdsOffset, 0);
}

static createSpecialRescuitIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpecialRescuitIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRewardSkinId(builder:flatbuffers.Builder, rewardSkinIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, rewardSkinIdOffset, 0);
}

static addRewardSkinText(builder:flatbuffers.Builder, rewardSkinTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, rewardSkinTextOffset, 0);
}

static addRewardAvatarId(builder:flatbuffers.Builder, rewardAvatarIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, rewardAvatarIdOffset, 0);
}

static addRewardAvatarText(builder:flatbuffers.Builder, rewardAvatarTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, rewardAvatarTextOffset, 0);
}

static addForceFocusEnemyTurns(builder:flatbuffers.Builder, forceFocusEnemyTurnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, forceFocusEnemyTurnsOffset, 0);
}

static createForceFocusEnemyTurnsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createForceFocusEnemyTurnsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createForceFocusEnemyTurnsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startForceFocusEnemyTurnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTutorialPhase1Round(builder:flatbuffers.Builder, tutorialPhase1Round:number) {
  builder.addFieldInt32(39, tutorialPhase1Round, 0);
}

static addTutorialPhase2Round(builder:flatbuffers.Builder, tutorialPhase2Round:number) {
  builder.addFieldInt32(40, tutorialPhase2Round, 0);
}

static addTutorialPhase3Round(builder:flatbuffers.Builder, tutorialPhase3Round:number) {
  builder.addFieldInt32(41, tutorialPhase3Round, 0);
}

static addTutorialPhase1ShopLevel(builder:flatbuffers.Builder, tutorialPhase1ShopLevel:number) {
  builder.addFieldInt32(42, tutorialPhase1ShopLevel, 0);
}

static addTutorialPhase2ShopLevel(builder:flatbuffers.Builder, tutorialPhase2ShopLevel:number) {
  builder.addFieldInt32(43, tutorialPhase2ShopLevel, 0);
}

static endclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstDataT {
  return new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstDataT(
    this.chessSoldPrice(),
    this.shopRefreshPrice(),
    this.bonusRound(),
    this.maxDeckCnt(),
    this.maxChessCnt(),
    this.deltaShopUpgradePrice(),
    this.shieldToDmgScale(),
    this.spellCntLimit(),
    this.costPlayerHpLimit(),
    this.rewardEnemyGroupKey(),
    this.rewardEnemyEffectId(),
    this.selfDefenseDamageTip(),
    this.selfCharDamageTip(),
    this.selfDamageTip(),
    this.selfSpecialDamageTip(),
    this.additionalAwardCount1(),
    this.additionalAwardCount2(),
    this.normalAwardTxt(),
    this.additionalAwardTxt(),
    this.milestoneId(),
    this.boxChangeTxt(),
    this.startCd(),
    this.borrowCount(),
    this.maxBorrowListCnt(),
    this.dailyMissionParam(),
    this.dailyMissionRewardId(),
    this.dailyMissionRewardType(),
    this.dailyMissionRewardCount(),
    this.dailyMissionName(),
    this.dailyMissionDesc(),
    this.dailyMissionRule(),
    (this.defaultFaction() !== null ? this.defaultFaction()!.unpack() : null),
    this.bb!.createScalarList<string>(this.utilTrapIds.bind(this), this.utilTrapIdsLength()),
    this.bb!.createScalarList<string>(this.specialRescuitIds.bind(this), this.specialRescuitIdsLength()),
    this.rewardSkinId(),
    this.rewardSkinText(),
    this.rewardAvatarId(),
    this.rewardAvatarText(),
    this.bb!.createScalarList<number>(this.forceFocusEnemyTurns.bind(this), this.forceFocusEnemyTurnsLength()),
    this.tutorialPhase1Round(),
    this.tutorialPhase2Round(),
    this.tutorialPhase3Round(),
    this.tutorialPhase1ShopLevel(),
    this.tutorialPhase2ShopLevel()
  );
}


unpackTo(_o: clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstDataT): void {
  _o.chessSoldPrice = this.chessSoldPrice();
  _o.shopRefreshPrice = this.shopRefreshPrice();
  _o.bonusRound = this.bonusRound();
  _o.maxDeckCnt = this.maxDeckCnt();
  _o.maxChessCnt = this.maxChessCnt();
  _o.deltaShopUpgradePrice = this.deltaShopUpgradePrice();
  _o.shieldToDmgScale = this.shieldToDmgScale();
  _o.spellCntLimit = this.spellCntLimit();
  _o.costPlayerHpLimit = this.costPlayerHpLimit();
  _o.rewardEnemyGroupKey = this.rewardEnemyGroupKey();
  _o.rewardEnemyEffectId = this.rewardEnemyEffectId();
  _o.selfDefenseDamageTip = this.selfDefenseDamageTip();
  _o.selfCharDamageTip = this.selfCharDamageTip();
  _o.selfDamageTip = this.selfDamageTip();
  _o.selfSpecialDamageTip = this.selfSpecialDamageTip();
  _o.additionalAwardCount1 = this.additionalAwardCount1();
  _o.additionalAwardCount2 = this.additionalAwardCount2();
  _o.normalAwardTxt = this.normalAwardTxt();
  _o.additionalAwardTxt = this.additionalAwardTxt();
  _o.milestoneId = this.milestoneId();
  _o.boxChangeTxt = this.boxChangeTxt();
  _o.startCd = this.startCd();
  _o.borrowCount = this.borrowCount();
  _o.maxBorrowListCnt = this.maxBorrowListCnt();
  _o.dailyMissionParam = this.dailyMissionParam();
  _o.dailyMissionRewardId = this.dailyMissionRewardId();
  _o.dailyMissionRewardType = this.dailyMissionRewardType();
  _o.dailyMissionRewardCount = this.dailyMissionRewardCount();
  _o.dailyMissionName = this.dailyMissionName();
  _o.dailyMissionDesc = this.dailyMissionDesc();
  _o.dailyMissionRule = this.dailyMissionRule();
  _o.defaultFaction = (this.defaultFaction() !== null ? this.defaultFaction()!.unpack() : null);
  _o.utilTrapIds = this.bb!.createScalarList<string>(this.utilTrapIds.bind(this), this.utilTrapIdsLength());
  _o.specialRescuitIds = this.bb!.createScalarList<string>(this.specialRescuitIds.bind(this), this.specialRescuitIdsLength());
  _o.rewardSkinId = this.rewardSkinId();
  _o.rewardSkinText = this.rewardSkinText();
  _o.rewardAvatarId = this.rewardAvatarId();
  _o.rewardAvatarText = this.rewardAvatarText();
  _o.forceFocusEnemyTurns = this.bb!.createScalarList<number>(this.forceFocusEnemyTurns.bind(this), this.forceFocusEnemyTurnsLength());
  _o.tutorialPhase1Round = this.tutorialPhase1Round();
  _o.tutorialPhase2Round = this.tutorialPhase2Round();
  _o.tutorialPhase3Round = this.tutorialPhase3Round();
  _o.tutorialPhase1ShopLevel = this.tutorialPhase1ShopLevel();
  _o.tutorialPhase2ShopLevel = this.tutorialPhase2ShopLevel();
}
}

export class clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public chessSoldPrice: number = 0,
  public shopRefreshPrice: number = 0,
  public bonusRound: number = 0,
  public maxDeckCnt: number = 0,
  public maxChessCnt: number = 0,
  public deltaShopUpgradePrice: number = 0,
  public shieldToDmgScale: number = 0,
  public spellCntLimit: number = 0,
  public costPlayerHpLimit: number = 0,
  public rewardEnemyGroupKey: string|Uint8Array|null = null,
  public rewardEnemyEffectId: string|Uint8Array|null = null,
  public selfDefenseDamageTip: string|Uint8Array|null = null,
  public selfCharDamageTip: string|Uint8Array|null = null,
  public selfDamageTip: string|Uint8Array|null = null,
  public selfSpecialDamageTip: string|Uint8Array|null = null,
  public additionalAwardCount1: number = 0,
  public additionalAwardCount2: number = 0,
  public normalAwardTxt: string|Uint8Array|null = null,
  public additionalAwardTxt: string|Uint8Array|null = null,
  public milestoneId: string|Uint8Array|null = null,
  public boxChangeTxt: string|Uint8Array|null = null,
  public startCd: number = 0,
  public borrowCount: number = 0,
  public maxBorrowListCnt: number = 0,
  public dailyMissionParam: number = 0,
  public dailyMissionRewardId: string|Uint8Array|null = null,
  public dailyMissionRewardType: string|Uint8Array|null = null,
  public dailyMissionRewardCount: number = 0,
  public dailyMissionName: string|Uint8Array|null = null,
  public dailyMissionDesc: string|Uint8Array|null = null,
  public dailyMissionRule: string|Uint8Array|null = null,
  public defaultFaction: clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessFactionDataT|null = null,
  public utilTrapIds: (string)[] = [],
  public specialRescuitIds: (string)[] = [],
  public rewardSkinId: string|Uint8Array|null = null,
  public rewardSkinText: string|Uint8Array|null = null,
  public rewardAvatarId: string|Uint8Array|null = null,
  public rewardAvatarText: string|Uint8Array|null = null,
  public forceFocusEnemyTurns: (number)[] = [],
  public tutorialPhase1Round: number = 0,
  public tutorialPhase2Round: number = 0,
  public tutorialPhase3Round: number = 0,
  public tutorialPhase1ShopLevel: number = 0,
  public tutorialPhase2ShopLevel: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rewardEnemyGroupKey = (this.rewardEnemyGroupKey !== null ? builder.createString(this.rewardEnemyGroupKey!) : 0);
  const rewardEnemyEffectId = (this.rewardEnemyEffectId !== null ? builder.createString(this.rewardEnemyEffectId!) : 0);
  const selfDefenseDamageTip = (this.selfDefenseDamageTip !== null ? builder.createString(this.selfDefenseDamageTip!) : 0);
  const selfCharDamageTip = (this.selfCharDamageTip !== null ? builder.createString(this.selfCharDamageTip!) : 0);
  const selfDamageTip = (this.selfDamageTip !== null ? builder.createString(this.selfDamageTip!) : 0);
  const selfSpecialDamageTip = (this.selfSpecialDamageTip !== null ? builder.createString(this.selfSpecialDamageTip!) : 0);
  const normalAwardTxt = (this.normalAwardTxt !== null ? builder.createString(this.normalAwardTxt!) : 0);
  const additionalAwardTxt = (this.additionalAwardTxt !== null ? builder.createString(this.additionalAwardTxt!) : 0);
  const milestoneId = (this.milestoneId !== null ? builder.createString(this.milestoneId!) : 0);
  const boxChangeTxt = (this.boxChangeTxt !== null ? builder.createString(this.boxChangeTxt!) : 0);
  const dailyMissionRewardId = (this.dailyMissionRewardId !== null ? builder.createString(this.dailyMissionRewardId!) : 0);
  const dailyMissionRewardType = (this.dailyMissionRewardType !== null ? builder.createString(this.dailyMissionRewardType!) : 0);
  const dailyMissionName = (this.dailyMissionName !== null ? builder.createString(this.dailyMissionName!) : 0);
  const dailyMissionDesc = (this.dailyMissionDesc !== null ? builder.createString(this.dailyMissionDesc!) : 0);
  const dailyMissionRule = (this.dailyMissionRule !== null ? builder.createString(this.dailyMissionRule!) : 0);
  const defaultFaction = (this.defaultFaction !== null ? this.defaultFaction!.pack(builder) : 0);
  const utilTrapIds = clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.createUtilTrapIdsVector(builder, builder.createObjectOffsetList(this.utilTrapIds));
  const specialRescuitIds = clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.createSpecialRescuitIdsVector(builder, builder.createObjectOffsetList(this.specialRescuitIds));
  const rewardSkinId = (this.rewardSkinId !== null ? builder.createString(this.rewardSkinId!) : 0);
  const rewardSkinText = (this.rewardSkinText !== null ? builder.createString(this.rewardSkinText!) : 0);
  const rewardAvatarId = (this.rewardAvatarId !== null ? builder.createString(this.rewardAvatarId!) : 0);
  const rewardAvatarText = (this.rewardAvatarText !== null ? builder.createString(this.rewardAvatarText!) : 0);
  const forceFocusEnemyTurns = clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.createForceFocusEnemyTurnsVector(builder, this.forceFocusEnemyTurns);

  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.startclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData(builder);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addChessSoldPrice(builder, this.chessSoldPrice);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addShopRefreshPrice(builder, this.shopRefreshPrice);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addBonusRound(builder, this.bonusRound);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addMaxDeckCnt(builder, this.maxDeckCnt);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addMaxChessCnt(builder, this.maxChessCnt);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDeltaShopUpgradePrice(builder, this.deltaShopUpgradePrice);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addShieldToDmgScale(builder, this.shieldToDmgScale);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addSpellCntLimit(builder, this.spellCntLimit);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addCostPlayerHpLimit(builder, this.costPlayerHpLimit);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addRewardEnemyGroupKey(builder, rewardEnemyGroupKey);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addRewardEnemyEffectId(builder, rewardEnemyEffectId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addSelfDefenseDamageTip(builder, selfDefenseDamageTip);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addSelfCharDamageTip(builder, selfCharDamageTip);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addSelfDamageTip(builder, selfDamageTip);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addSelfSpecialDamageTip(builder, selfSpecialDamageTip);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addAdditionalAwardCount1(builder, this.additionalAwardCount1);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addAdditionalAwardCount2(builder, this.additionalAwardCount2);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addNormalAwardTxt(builder, normalAwardTxt);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addAdditionalAwardTxt(builder, additionalAwardTxt);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addMilestoneId(builder, milestoneId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addBoxChangeTxt(builder, boxChangeTxt);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addStartCd(builder, this.startCd);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addBorrowCount(builder, this.borrowCount);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addMaxBorrowListCnt(builder, this.maxBorrowListCnt);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionParam(builder, this.dailyMissionParam);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionRewardId(builder, dailyMissionRewardId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionRewardType(builder, dailyMissionRewardType);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionRewardCount(builder, this.dailyMissionRewardCount);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionName(builder, dailyMissionName);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionDesc(builder, dailyMissionDesc);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDailyMissionRule(builder, dailyMissionRule);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addDefaultFaction(builder, defaultFaction);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addUtilTrapIds(builder, utilTrapIds);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addSpecialRescuitIds(builder, specialRescuitIds);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addRewardSkinId(builder, rewardSkinId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addRewardSkinText(builder, rewardSkinText);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addRewardAvatarId(builder, rewardAvatarId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addRewardAvatarText(builder, rewardAvatarText);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addForceFocusEnemyTurns(builder, forceFocusEnemyTurns);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addTutorialPhase1Round(builder, this.tutorialPhase1Round);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addTutorialPhase2Round(builder, this.tutorialPhase2Round);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addTutorialPhase3Round(builder, this.tutorialPhase3Round);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addTutorialPhase1ShopLevel(builder, this.tutorialPhase1ShopLevel);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.addTutorialPhase2ShopLevel(builder, this.tutorialPhase2ShopLevel);

  return clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData.endclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessConstData(builder);
}
}
