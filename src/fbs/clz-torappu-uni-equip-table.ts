// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_UniEquipTimeInfo, clz_Torappu_UniEquipTimeInfoT } from './clz-torappu-uni-equip-time-info.js';
import { clz_Torappu_UniEquipTypeInfo, clz_Torappu_UniEquipTypeInfoT } from './clz-torappu-uni-equip-type-info.js';
import { dict__string__clz_Torappu_SubProfessionData, dict__string__clz_Torappu_SubProfessionDataT } from './dict--string--clz-torappu-sub-profession-data.js';
import { dict__string__clz_Torappu_UniEquipData, dict__string__clz_Torappu_UniEquipDataT } from './dict--string--clz-torappu-uni-equip-data.js';
import { dict__string__clz_Torappu_UniEquipMissionData, dict__string__clz_Torappu_UniEquipMissionDataT } from './dict--string--clz-torappu-uni-equip-mission-data.js';
import { dict__string__int, dict__string__intT } from './dict--string--int.js';
import { dict__string__list_string, dict__string__list_stringT } from './dict--string--list-string.js';


export class clz_Torappu_UniEquipTable implements flatbuffers.IUnpackableObject<clz_Torappu_UniEquipTableT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_UniEquipTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_UniEquipTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_UniEquipTable):clz_Torappu_UniEquipTable {
  return (obj || new clz_Torappu_UniEquipTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_UniEquipTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_UniEquipTable):clz_Torappu_UniEquipTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_UniEquipTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

equipDict(index: number, obj?:dict__string__clz_Torappu_UniEquipData):dict__string__clz_Torappu_UniEquipData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_UniEquipData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

equipDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

missionList(index: number, obj?:dict__string__clz_Torappu_UniEquipMissionData):dict__string__clz_Torappu_UniEquipMissionData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_UniEquipMissionData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

missionListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

subProfDict(index: number, obj?:dict__string__clz_Torappu_SubProfessionData):dict__string__clz_Torappu_SubProfessionData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_SubProfessionData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subProfDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

subProfToProfDict(index: number, obj?:dict__string__int):dict__string__int|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new dict__string__int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subProfToProfDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

charEquip(index: number, obj?:dict__string__list_string):dict__string__list_string|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new dict__string__list_string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

charEquipLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

equipTypeInfos(index: number, obj?:clz_Torappu_UniEquipTypeInfo):clz_Torappu_UniEquipTypeInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_UniEquipTypeInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

equipTypeInfosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

equipTrackDict(index: number, obj?:clz_Torappu_UniEquipTimeInfo):clz_Torappu_UniEquipTimeInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_UniEquipTimeInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

equipTrackDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_UniEquipTable(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addEquipDict(builder:flatbuffers.Builder, equipDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, equipDictOffset, 0);
}

static createEquipDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEquipDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissionList(builder:flatbuffers.Builder, missionListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, missionListOffset, 0);
}

static createMissionListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSubProfDict(builder:flatbuffers.Builder, subProfDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, subProfDictOffset, 0);
}

static createSubProfDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubProfDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSubProfToProfDict(builder:flatbuffers.Builder, subProfToProfDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, subProfToProfDictOffset, 0);
}

static createSubProfToProfDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubProfToProfDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharEquip(builder:flatbuffers.Builder, charEquipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, charEquipOffset, 0);
}

static createCharEquipVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharEquipVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEquipTypeInfos(builder:flatbuffers.Builder, equipTypeInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, equipTypeInfosOffset, 0);
}

static createEquipTypeInfosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEquipTypeInfosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEquipTrackDict(builder:flatbuffers.Builder, equipTrackDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, equipTrackDictOffset, 0);
}

static createEquipTrackDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEquipTrackDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_UniEquipTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishclz_Torappu_UniEquipTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedclz_Torappu_UniEquipTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createclz_Torappu_UniEquipTable(builder:flatbuffers.Builder, equipDictOffset:flatbuffers.Offset, missionListOffset:flatbuffers.Offset, subProfDictOffset:flatbuffers.Offset, subProfToProfDictOffset:flatbuffers.Offset, charEquipOffset:flatbuffers.Offset, equipTypeInfosOffset:flatbuffers.Offset, equipTrackDictOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_UniEquipTable.startclz_Torappu_UniEquipTable(builder);
  clz_Torappu_UniEquipTable.addEquipDict(builder, equipDictOffset);
  clz_Torappu_UniEquipTable.addMissionList(builder, missionListOffset);
  clz_Torappu_UniEquipTable.addSubProfDict(builder, subProfDictOffset);
  clz_Torappu_UniEquipTable.addSubProfToProfDict(builder, subProfToProfDictOffset);
  clz_Torappu_UniEquipTable.addCharEquip(builder, charEquipOffset);
  clz_Torappu_UniEquipTable.addEquipTypeInfos(builder, equipTypeInfosOffset);
  clz_Torappu_UniEquipTable.addEquipTrackDict(builder, equipTrackDictOffset);
  return clz_Torappu_UniEquipTable.endclz_Torappu_UniEquipTable(builder);
}

unpack(): clz_Torappu_UniEquipTableT {
  return new clz_Torappu_UniEquipTableT(
    this.bb!.createObjList<dict__string__clz_Torappu_UniEquipData, dict__string__clz_Torappu_UniEquipDataT>(this.equipDict.bind(this), this.equipDictLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_UniEquipMissionData, dict__string__clz_Torappu_UniEquipMissionDataT>(this.missionList.bind(this), this.missionListLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_SubProfessionData, dict__string__clz_Torappu_SubProfessionDataT>(this.subProfDict.bind(this), this.subProfDictLength()),
    this.bb!.createObjList<dict__string__int, dict__string__intT>(this.subProfToProfDict.bind(this), this.subProfToProfDictLength()),
    this.bb!.createObjList<dict__string__list_string, dict__string__list_stringT>(this.charEquip.bind(this), this.charEquipLength()),
    this.bb!.createObjList<clz_Torappu_UniEquipTypeInfo, clz_Torappu_UniEquipTypeInfoT>(this.equipTypeInfos.bind(this), this.equipTypeInfosLength()),
    this.bb!.createObjList<clz_Torappu_UniEquipTimeInfo, clz_Torappu_UniEquipTimeInfoT>(this.equipTrackDict.bind(this), this.equipTrackDictLength())
  );
}


unpackTo(_o: clz_Torappu_UniEquipTableT): void {
  _o.equipDict = this.bb!.createObjList<dict__string__clz_Torappu_UniEquipData, dict__string__clz_Torappu_UniEquipDataT>(this.equipDict.bind(this), this.equipDictLength());
  _o.missionList = this.bb!.createObjList<dict__string__clz_Torappu_UniEquipMissionData, dict__string__clz_Torappu_UniEquipMissionDataT>(this.missionList.bind(this), this.missionListLength());
  _o.subProfDict = this.bb!.createObjList<dict__string__clz_Torappu_SubProfessionData, dict__string__clz_Torappu_SubProfessionDataT>(this.subProfDict.bind(this), this.subProfDictLength());
  _o.subProfToProfDict = this.bb!.createObjList<dict__string__int, dict__string__intT>(this.subProfToProfDict.bind(this), this.subProfToProfDictLength());
  _o.charEquip = this.bb!.createObjList<dict__string__list_string, dict__string__list_stringT>(this.charEquip.bind(this), this.charEquipLength());
  _o.equipTypeInfos = this.bb!.createObjList<clz_Torappu_UniEquipTypeInfo, clz_Torappu_UniEquipTypeInfoT>(this.equipTypeInfos.bind(this), this.equipTypeInfosLength());
  _o.equipTrackDict = this.bb!.createObjList<clz_Torappu_UniEquipTimeInfo, clz_Torappu_UniEquipTimeInfoT>(this.equipTrackDict.bind(this), this.equipTrackDictLength());
}
}

export class clz_Torappu_UniEquipTableT implements flatbuffers.IGeneratedObject {
constructor(
  public equipDict: (dict__string__clz_Torappu_UniEquipDataT)[] = [],
  public missionList: (dict__string__clz_Torappu_UniEquipMissionDataT)[] = [],
  public subProfDict: (dict__string__clz_Torappu_SubProfessionDataT)[] = [],
  public subProfToProfDict: (dict__string__intT)[] = [],
  public charEquip: (dict__string__list_stringT)[] = [],
  public equipTypeInfos: (clz_Torappu_UniEquipTypeInfoT)[] = [],
  public equipTrackDict: (clz_Torappu_UniEquipTimeInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const equipDict = clz_Torappu_UniEquipTable.createEquipDictVector(builder, builder.createObjectOffsetList(this.equipDict));
  const missionList = clz_Torappu_UniEquipTable.createMissionListVector(builder, builder.createObjectOffsetList(this.missionList));
  const subProfDict = clz_Torappu_UniEquipTable.createSubProfDictVector(builder, builder.createObjectOffsetList(this.subProfDict));
  const subProfToProfDict = clz_Torappu_UniEquipTable.createSubProfToProfDictVector(builder, builder.createObjectOffsetList(this.subProfToProfDict));
  const charEquip = clz_Torappu_UniEquipTable.createCharEquipVector(builder, builder.createObjectOffsetList(this.charEquip));
  const equipTypeInfos = clz_Torappu_UniEquipTable.createEquipTypeInfosVector(builder, builder.createObjectOffsetList(this.equipTypeInfos));
  const equipTrackDict = clz_Torappu_UniEquipTable.createEquipTrackDictVector(builder, builder.createObjectOffsetList(this.equipTrackDict));

  return clz_Torappu_UniEquipTable.createclz_Torappu_UniEquipTable(builder,
    equipDict,
    missionList,
    subProfDict,
    subProfToProfDict,
    charEquip,
    equipTypeInfos,
    equipTrackDict
  );
}
}
