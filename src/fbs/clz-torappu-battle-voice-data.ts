// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_BattleVoiceOption, clz_Torappu_BattleVoiceOptionT } from './clz-torappu-battle-voice-option.js';


export class clz_Torappu_BattleVoiceData implements flatbuffers.IUnpackableObject<clz_Torappu_BattleVoiceDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BattleVoiceData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BattleVoiceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BattleVoiceData):clz_Torappu_BattleVoiceData {
  return (obj || new clz_Torappu_BattleVoiceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BattleVoiceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BattleVoiceData):clz_Torappu_BattleVoiceData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BattleVoiceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

crossfade():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minTimeDeltaForEnemyEncounter():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minSpCostForImportantPassiveSkill():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

voiceTypeOptions(index: number, obj?:clz_Torappu_BattleVoiceOption):clz_Torappu_BattleVoiceOption|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_BattleVoiceOption()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

voiceTypeOptionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BattleVoiceData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCrossfade(builder:flatbuffers.Builder, crossfade:number) {
  builder.addFieldFloat32(0, crossfade, 0.0);
}

static addMinTimeDeltaForEnemyEncounter(builder:flatbuffers.Builder, minTimeDeltaForEnemyEncounter:number) {
  builder.addFieldFloat32(1, minTimeDeltaForEnemyEncounter, 0.0);
}

static addMinSpCostForImportantPassiveSkill(builder:flatbuffers.Builder, minSpCostForImportantPassiveSkill:number) {
  builder.addFieldInt32(2, minSpCostForImportantPassiveSkill, 0);
}

static addVoiceTypeOptions(builder:flatbuffers.Builder, voiceTypeOptionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, voiceTypeOptionsOffset, 0);
}

static createVoiceTypeOptionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVoiceTypeOptionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BattleVoiceData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BattleVoiceData(builder:flatbuffers.Builder, crossfade:number, minTimeDeltaForEnemyEncounter:number, minSpCostForImportantPassiveSkill:number, voiceTypeOptionsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BattleVoiceData.startclz_Torappu_BattleVoiceData(builder);
  clz_Torappu_BattleVoiceData.addCrossfade(builder, crossfade);
  clz_Torappu_BattleVoiceData.addMinTimeDeltaForEnemyEncounter(builder, minTimeDeltaForEnemyEncounter);
  clz_Torappu_BattleVoiceData.addMinSpCostForImportantPassiveSkill(builder, minSpCostForImportantPassiveSkill);
  clz_Torappu_BattleVoiceData.addVoiceTypeOptions(builder, voiceTypeOptionsOffset);
  return clz_Torappu_BattleVoiceData.endclz_Torappu_BattleVoiceData(builder);
}

unpack(): clz_Torappu_BattleVoiceDataT {
  return new clz_Torappu_BattleVoiceDataT(
    this.crossfade(),
    this.minTimeDeltaForEnemyEncounter(),
    this.minSpCostForImportantPassiveSkill(),
    this.bb!.createObjList<clz_Torappu_BattleVoiceOption, clz_Torappu_BattleVoiceOptionT>(this.voiceTypeOptions.bind(this), this.voiceTypeOptionsLength())
  );
}


unpackTo(_o: clz_Torappu_BattleVoiceDataT): void {
  _o.crossfade = this.crossfade();
  _o.minTimeDeltaForEnemyEncounter = this.minTimeDeltaForEnemyEncounter();
  _o.minSpCostForImportantPassiveSkill = this.minSpCostForImportantPassiveSkill();
  _o.voiceTypeOptions = this.bb!.createObjList<clz_Torappu_BattleVoiceOption, clz_Torappu_BattleVoiceOptionT>(this.voiceTypeOptions.bind(this), this.voiceTypeOptionsLength());
}
}

export class clz_Torappu_BattleVoiceDataT implements flatbuffers.IGeneratedObject {
constructor(
  public crossfade: number = 0.0,
  public minTimeDeltaForEnemyEncounter: number = 0.0,
  public minSpCostForImportantPassiveSkill: number = 0,
  public voiceTypeOptions: (clz_Torappu_BattleVoiceOptionT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const voiceTypeOptions = clz_Torappu_BattleVoiceData.createVoiceTypeOptionsVector(builder, builder.createObjectOffsetList(this.voiceTypeOptions));

  return clz_Torappu_BattleVoiceData.createclz_Torappu_BattleVoiceData(builder,
    this.crossfade,
    this.minTimeDeltaForEnemyEncounter,
    this.minSpCostForImportantPassiveSkill,
    voiceTypeOptions
  );
}
}
