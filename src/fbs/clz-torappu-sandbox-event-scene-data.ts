// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_SandboxEventType } from './enum--torappu-sandbox-event-type.js';


export class clz_Torappu_SandboxEventSceneData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxEventSceneDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxEventSceneData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxEventSceneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxEventSceneData):clz_Torappu_SandboxEventSceneData {
  return (obj || new clz_Torappu_SandboxEventSceneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxEventSceneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxEventSceneData):clz_Torappu_SandboxEventSceneData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxEventSceneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

choiceSceneId():string|null
choiceSceneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
choiceSceneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():enum__Torappu_SandboxEventType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SandboxEventType.RESOURCE;
}

title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

choices(index: number):string
choices(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
choices(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

choicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SandboxEventSceneData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addChoiceSceneId(builder:flatbuffers.Builder, choiceSceneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, choiceSceneIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:enum__Torappu_SandboxEventType) {
  builder.addFieldInt32(1, type, enum__Torappu_SandboxEventType.RESOURCE);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, titleOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, descriptionOffset, 0);
}

static addChoices(builder:flatbuffers.Builder, choicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, choicesOffset, 0);
}

static createChoicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChoicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SandboxEventSceneData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxEventSceneData(builder:flatbuffers.Builder, choiceSceneIdOffset:flatbuffers.Offset, type:enum__Torappu_SandboxEventType, titleOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, choicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SandboxEventSceneData.startclz_Torappu_SandboxEventSceneData(builder);
  clz_Torappu_SandboxEventSceneData.addChoiceSceneId(builder, choiceSceneIdOffset);
  clz_Torappu_SandboxEventSceneData.addType(builder, type);
  clz_Torappu_SandboxEventSceneData.addTitle(builder, titleOffset);
  clz_Torappu_SandboxEventSceneData.addDescription(builder, descriptionOffset);
  clz_Torappu_SandboxEventSceneData.addChoices(builder, choicesOffset);
  return clz_Torappu_SandboxEventSceneData.endclz_Torappu_SandboxEventSceneData(builder);
}

unpack(): clz_Torappu_SandboxEventSceneDataT {
  return new clz_Torappu_SandboxEventSceneDataT(
    this.choiceSceneId(),
    this.type(),
    this.title(),
    this.description(),
    this.bb!.createScalarList<string>(this.choices.bind(this), this.choicesLength())
  );
}


unpackTo(_o: clz_Torappu_SandboxEventSceneDataT): void {
  _o.choiceSceneId = this.choiceSceneId();
  _o.type = this.type();
  _o.title = this.title();
  _o.description = this.description();
  _o.choices = this.bb!.createScalarList<string>(this.choices.bind(this), this.choicesLength());
}
}

export class clz_Torappu_SandboxEventSceneDataT implements flatbuffers.IGeneratedObject {
constructor(
  public choiceSceneId: string|Uint8Array|null = null,
  public type: enum__Torappu_SandboxEventType = enum__Torappu_SandboxEventType.RESOURCE,
  public title: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public choices: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const choiceSceneId = (this.choiceSceneId !== null ? builder.createString(this.choiceSceneId!) : 0);
  const title = (this.title !== null ? builder.createString(this.title!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const choices = clz_Torappu_SandboxEventSceneData.createChoicesVector(builder, builder.createObjectOffsetList(this.choices));

  return clz_Torappu_SandboxEventSceneData.createclz_Torappu_SandboxEventSceneData(builder,
    choiceSceneId,
    this.type,
    title,
    description,
    choices
  );
}
}
