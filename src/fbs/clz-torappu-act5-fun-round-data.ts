// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_Act5FunRoundData implements flatbuffers.IUnpackableObject<clz_Torappu_Act5FunRoundDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act5FunRoundData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act5FunRoundData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act5FunRoundData):clz_Torappu_Act5FunRoundData {
  return (obj || new clz_Torappu_Act5FunRoundData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act5FunRoundData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act5FunRoundData):clz_Torappu_Act5FunRoundData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act5FunRoundData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

roundId():string|null
roundId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roundId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stageId():string|null
stageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyPredefined():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemyPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

enemyScoreRandom():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minType():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxType():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

choiceCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

choiceId1():string|null
choiceId1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
choiceId1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

choiceId2():string|null
choiceId2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
choiceId2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

choiceId3():string|null
choiceId3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
choiceId3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

choiceId4():string|null
choiceId4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
choiceId4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enableSideTarget():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_Act5FunRoundData(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addRoundId(builder:flatbuffers.Builder, roundIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, roundIdOffset, 0);
}

static addStageId(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stageIdOffset, 0);
}

static addEnemyPredefined(builder:flatbuffers.Builder, enemyPredefined:boolean) {
  builder.addFieldInt8(2, +enemyPredefined, +false);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt32(3, round, 0);
}

static addEnemyPoint(builder:flatbuffers.Builder, enemyPoint:number) {
  builder.addFieldFloat32(4, enemyPoint, 0.0);
}

static addEnemyScoreRandom(builder:flatbuffers.Builder, enemyScoreRandom:number) {
  builder.addFieldFloat32(5, enemyScoreRandom, 0.0);
}

static addMinType(builder:flatbuffers.Builder, minType:number) {
  builder.addFieldInt32(6, minType, 0);
}

static addMaxType(builder:flatbuffers.Builder, maxType:number) {
  builder.addFieldInt32(7, maxType, 0);
}

static addChoiceCount(builder:flatbuffers.Builder, choiceCount:number) {
  builder.addFieldInt32(8, choiceCount, 0);
}

static addChoiceId1(builder:flatbuffers.Builder, choiceId1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(9, choiceId1Offset, 0);
}

static addChoiceId2(builder:flatbuffers.Builder, choiceId2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(10, choiceId2Offset, 0);
}

static addChoiceId3(builder:flatbuffers.Builder, choiceId3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(11, choiceId3Offset, 0);
}

static addChoiceId4(builder:flatbuffers.Builder, choiceId4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(12, choiceId4Offset, 0);
}

static addEnableSideTarget(builder:flatbuffers.Builder, enableSideTarget:boolean) {
  builder.addFieldInt8(13, +enableSideTarget, +false);
}

static endclz_Torappu_Act5FunRoundData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act5FunRoundData(builder:flatbuffers.Builder, roundIdOffset:flatbuffers.Offset, stageIdOffset:flatbuffers.Offset, enemyPredefined:boolean, round:number, enemyPoint:number, enemyScoreRandom:number, minType:number, maxType:number, choiceCount:number, choiceId1Offset:flatbuffers.Offset, choiceId2Offset:flatbuffers.Offset, choiceId3Offset:flatbuffers.Offset, choiceId4Offset:flatbuffers.Offset, enableSideTarget:boolean):flatbuffers.Offset {
  clz_Torappu_Act5FunRoundData.startclz_Torappu_Act5FunRoundData(builder);
  clz_Torappu_Act5FunRoundData.addRoundId(builder, roundIdOffset);
  clz_Torappu_Act5FunRoundData.addStageId(builder, stageIdOffset);
  clz_Torappu_Act5FunRoundData.addEnemyPredefined(builder, enemyPredefined);
  clz_Torappu_Act5FunRoundData.addRound(builder, round);
  clz_Torappu_Act5FunRoundData.addEnemyPoint(builder, enemyPoint);
  clz_Torappu_Act5FunRoundData.addEnemyScoreRandom(builder, enemyScoreRandom);
  clz_Torappu_Act5FunRoundData.addMinType(builder, minType);
  clz_Torappu_Act5FunRoundData.addMaxType(builder, maxType);
  clz_Torappu_Act5FunRoundData.addChoiceCount(builder, choiceCount);
  clz_Torappu_Act5FunRoundData.addChoiceId1(builder, choiceId1Offset);
  clz_Torappu_Act5FunRoundData.addChoiceId2(builder, choiceId2Offset);
  clz_Torappu_Act5FunRoundData.addChoiceId3(builder, choiceId3Offset);
  clz_Torappu_Act5FunRoundData.addChoiceId4(builder, choiceId4Offset);
  clz_Torappu_Act5FunRoundData.addEnableSideTarget(builder, enableSideTarget);
  return clz_Torappu_Act5FunRoundData.endclz_Torappu_Act5FunRoundData(builder);
}

unpack(): clz_Torappu_Act5FunRoundDataT {
  return new clz_Torappu_Act5FunRoundDataT(
    this.roundId(),
    this.stageId(),
    this.enemyPredefined(),
    this.round(),
    this.enemyPoint(),
    this.enemyScoreRandom(),
    this.minType(),
    this.maxType(),
    this.choiceCount(),
    this.choiceId1(),
    this.choiceId2(),
    this.choiceId3(),
    this.choiceId4(),
    this.enableSideTarget()
  );
}


unpackTo(_o: clz_Torappu_Act5FunRoundDataT): void {
  _o.roundId = this.roundId();
  _o.stageId = this.stageId();
  _o.enemyPredefined = this.enemyPredefined();
  _o.round = this.round();
  _o.enemyPoint = this.enemyPoint();
  _o.enemyScoreRandom = this.enemyScoreRandom();
  _o.minType = this.minType();
  _o.maxType = this.maxType();
  _o.choiceCount = this.choiceCount();
  _o.choiceId1 = this.choiceId1();
  _o.choiceId2 = this.choiceId2();
  _o.choiceId3 = this.choiceId3();
  _o.choiceId4 = this.choiceId4();
  _o.enableSideTarget = this.enableSideTarget();
}
}

export class clz_Torappu_Act5FunRoundDataT implements flatbuffers.IGeneratedObject {
constructor(
  public roundId: string|Uint8Array|null = null,
  public stageId: string|Uint8Array|null = null,
  public enemyPredefined: boolean = false,
  public round: number = 0,
  public enemyPoint: number = 0.0,
  public enemyScoreRandom: number = 0.0,
  public minType: number = 0,
  public maxType: number = 0,
  public choiceCount: number = 0,
  public choiceId1: string|Uint8Array|null = null,
  public choiceId2: string|Uint8Array|null = null,
  public choiceId3: string|Uint8Array|null = null,
  public choiceId4: string|Uint8Array|null = null,
  public enableSideTarget: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const roundId = (this.roundId !== null ? builder.createString(this.roundId!) : 0);
  const stageId = (this.stageId !== null ? builder.createString(this.stageId!) : 0);
  const choiceId1 = (this.choiceId1 !== null ? builder.createString(this.choiceId1!) : 0);
  const choiceId2 = (this.choiceId2 !== null ? builder.createString(this.choiceId2!) : 0);
  const choiceId3 = (this.choiceId3 !== null ? builder.createString(this.choiceId3!) : 0);
  const choiceId4 = (this.choiceId4 !== null ? builder.createString(this.choiceId4!) : 0);

  return clz_Torappu_Act5FunRoundData.createclz_Torappu_Act5FunRoundData(builder,
    roundId,
    stageId,
    this.enemyPredefined,
    this.round,
    this.enemyPoint,
    this.enemyScoreRandom,
    this.minType,
    this.maxType,
    this.choiceCount,
    choiceId1,
    choiceId2,
    choiceId3,
    choiceId4,
    this.enableSideTarget
  );
}
}
