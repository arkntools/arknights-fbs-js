// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { clz_Torappu_StageData_ConditionDesc, clz_Torappu_StageData_ConditionDescT } from './clz-torappu-stage-data-condition-desc.js';
import { clz_Torappu_StageData_ExtraConditionDesc, clz_Torappu_StageData_ExtraConditionDescT } from './clz-torappu-stage-data-extra-condition-desc.js';
import { clz_Torappu_StageData_SpecialStoryInfo, clz_Torappu_StageData_SpecialStoryInfoT } from './clz-torappu-stage-data-special-story-info.js';
import { clz_Torappu_StageData_StageDropInfo, clz_Torappu_StageData_StageDropInfoT } from './clz-torappu-stage-data-stage-drop-info.js';
import { enum__Torappu_AppearanceStyle } from './enum--torappu-appearance-style.js';
import { enum__Torappu_LevelData_Difficulty } from './enum--torappu-level-data-difficulty.js';
import { enum__Torappu_StageData_PerformanceStageFlag } from './enum--torappu-stage-data-performance-stage-flag.js';
import { enum__Torappu_StageDiffGroup } from './enum--torappu-stage-diff-group.js';
import { enum__Torappu_StageType } from './enum--torappu-stage-type.js';


export class clz_Torappu_StageData implements flatbuffers.IUnpackableObject<clz_Torappu_StageDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_StageData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_StageData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StageData):clz_Torappu_StageData {
  return (obj || new clz_Torappu_StageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_StageData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StageData):clz_Torappu_StageData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_StageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stageType():enum__Torappu_StageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_StageType.MAIN;
}

difficulty():enum__Torappu_LevelData_Difficulty {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_LevelData_Difficulty.NONE;
}

performanceStageFlag():enum__Torappu_StageData_PerformanceStageFlag {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_StageData_PerformanceStageFlag.NORMAL_STAGE;
}

diffGroup():enum__Torappu_StageDiffGroup {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_StageDiffGroup.NONE;
}

unlockCondition(index: number, obj?:clz_Torappu_StageData_ConditionDesc):clz_Torappu_StageData_ConditionDesc|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_StageData_ConditionDesc()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

unlockConditionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stageId():string|null
stageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

levelId():string|null
levelId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
levelId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

zoneId():string|null
zoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hardStagedId():string|null
hardStagedId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hardStagedId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sixStarStageId():string|null
sixStarStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sixStarStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dangerLevel():string|null
dangerLevel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dangerLevel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dangerPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

loadingPicId():string|null
loadingPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
loadingPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canPractice():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canBattleReplay():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

apCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

apFailReturn():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxSlot():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

etItemId():string|null
etItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

etCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

etFailReturn():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

etButtonStyle():string|null
etButtonStyle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
etButtonStyle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

apProtectTimes():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

diamondOnceDrop():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

practiceTicketCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyStageDifficulty():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

expGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

goldGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

loseExpGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

loseGoldGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

passFavor():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

completeFavor():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

slProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

displayMainItem():string|null
displayMainItem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayMainItem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hilightMark():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bossMark():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isPredefined():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isHardPredefined():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSkillSelectablePredefined():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isStoryOnly():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

appearanceStyle():enum__Torappu_AppearanceStyle {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_AppearanceStyle.MAIN_NORMAL;
}

stageDropInfo(obj?:clz_Torappu_StageData_StageDropInfo):clz_Torappu_StageData_StageDropInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? (obj || new clz_Torappu_StageData_StageDropInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

canUseCharm():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canUseTech():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canUseTrapTool():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canUseBattlePerformance():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canUseFirework():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canMultipleBattle():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

startButtonOverrideId():string|null
startButtonOverrideId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startButtonOverrideId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isStagePatch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mainStageId():string|null
mainStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

extraCondition(index: number, obj?:clz_Torappu_StageData_ExtraConditionDesc):clz_Torappu_StageData_ExtraConditionDesc|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? (obj || new clz_Torappu_StageData_ExtraConditionDesc()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

extraConditionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

extraInfo(index: number, obj?:clz_Torappu_StageData_SpecialStoryInfo):clz_Torappu_StageData_SpecialStoryInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? (obj || new clz_Torappu_StageData_SpecialStoryInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

extraInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sixStarBaseDesc():string|null
sixStarBaseDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sixStarBaseDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sixStarDisplayRewardList(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

sixStarDisplayRewardListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

advancedRuneIdList1(index: number):string
advancedRuneIdList1(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
advancedRuneIdList1(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

advancedRuneIdList1Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

advancedRuneIdList2(index: number):string
advancedRuneIdList2(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
advancedRuneIdList2(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

advancedRuneIdList2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_StageData(builder:flatbuffers.Builder) {
  builder.startObject(60);
}

static addStageType(builder:flatbuffers.Builder, stageType:enum__Torappu_StageType) {
  builder.addFieldInt32(0, stageType, enum__Torappu_StageType.MAIN);
}

static addDifficulty(builder:flatbuffers.Builder, difficulty:enum__Torappu_LevelData_Difficulty) {
  builder.addFieldInt32(1, difficulty, enum__Torappu_LevelData_Difficulty.NONE);
}

static addPerformanceStageFlag(builder:flatbuffers.Builder, performanceStageFlag:enum__Torappu_StageData_PerformanceStageFlag) {
  builder.addFieldInt32(2, performanceStageFlag, enum__Torappu_StageData_PerformanceStageFlag.NORMAL_STAGE);
}

static addDiffGroup(builder:flatbuffers.Builder, diffGroup:enum__Torappu_StageDiffGroup) {
  builder.addFieldInt32(3, diffGroup, enum__Torappu_StageDiffGroup.NONE);
}

static addUnlockCondition(builder:flatbuffers.Builder, unlockConditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, unlockConditionOffset, 0);
}

static createUnlockConditionVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUnlockConditionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStageId(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, stageIdOffset, 0);
}

static addLevelId(builder:flatbuffers.Builder, levelIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, levelIdOffset, 0);
}

static addZoneId(builder:flatbuffers.Builder, zoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, zoneIdOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, codeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, descriptionOffset, 0);
}

static addHardStagedId(builder:flatbuffers.Builder, hardStagedIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, hardStagedIdOffset, 0);
}

static addSixStarStageId(builder:flatbuffers.Builder, sixStarStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, sixStarStageIdOffset, 0);
}

static addDangerLevel(builder:flatbuffers.Builder, dangerLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, dangerLevelOffset, 0);
}

static addDangerPoint(builder:flatbuffers.Builder, dangerPoint:number) {
  builder.addFieldFloat32(14, dangerPoint, 0.0);
}

static addLoadingPicId(builder:flatbuffers.Builder, loadingPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, loadingPicIdOffset, 0);
}

static addCanPractice(builder:flatbuffers.Builder, canPractice:boolean) {
  builder.addFieldInt8(16, +canPractice, +false);
}

static addCanBattleReplay(builder:flatbuffers.Builder, canBattleReplay:boolean) {
  builder.addFieldInt8(17, +canBattleReplay, +false);
}

static addApCost(builder:flatbuffers.Builder, apCost:number) {
  builder.addFieldInt32(18, apCost, 0);
}

static addApFailReturn(builder:flatbuffers.Builder, apFailReturn:number) {
  builder.addFieldInt32(19, apFailReturn, 0);
}

static addMaxSlot(builder:flatbuffers.Builder, maxSlot:number) {
  builder.addFieldInt32(20, maxSlot, 0);
}

static addEtItemId(builder:flatbuffers.Builder, etItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, etItemIdOffset, 0);
}

static addEtCost(builder:flatbuffers.Builder, etCost:number) {
  builder.addFieldInt32(22, etCost, 0);
}

static addEtFailReturn(builder:flatbuffers.Builder, etFailReturn:number) {
  builder.addFieldInt32(23, etFailReturn, 0);
}

static addEtButtonStyle(builder:flatbuffers.Builder, etButtonStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, etButtonStyleOffset, 0);
}

static addApProtectTimes(builder:flatbuffers.Builder, apProtectTimes:number) {
  builder.addFieldInt32(25, apProtectTimes, 0);
}

static addDiamondOnceDrop(builder:flatbuffers.Builder, diamondOnceDrop:number) {
  builder.addFieldInt32(26, diamondOnceDrop, 0);
}

static addPracticeTicketCost(builder:flatbuffers.Builder, practiceTicketCost:number) {
  builder.addFieldInt32(27, practiceTicketCost, 0);
}

static addDailyStageDifficulty(builder:flatbuffers.Builder, dailyStageDifficulty:number) {
  builder.addFieldInt32(28, dailyStageDifficulty, 0);
}

static addExpGain(builder:flatbuffers.Builder, expGain:number) {
  builder.addFieldInt32(29, expGain, 0);
}

static addGoldGain(builder:flatbuffers.Builder, goldGain:number) {
  builder.addFieldInt32(30, goldGain, 0);
}

static addLoseExpGain(builder:flatbuffers.Builder, loseExpGain:number) {
  builder.addFieldInt32(31, loseExpGain, 0);
}

static addLoseGoldGain(builder:flatbuffers.Builder, loseGoldGain:number) {
  builder.addFieldInt32(32, loseGoldGain, 0);
}

static addPassFavor(builder:flatbuffers.Builder, passFavor:number) {
  builder.addFieldInt32(33, passFavor, 0);
}

static addCompleteFavor(builder:flatbuffers.Builder, completeFavor:number) {
  builder.addFieldInt32(34, completeFavor, 0);
}

static addSlProgress(builder:flatbuffers.Builder, slProgress:number) {
  builder.addFieldInt32(35, slProgress, 0);
}

static addDisplayMainItem(builder:flatbuffers.Builder, displayMainItemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, displayMainItemOffset, 0);
}

static addHilightMark(builder:flatbuffers.Builder, hilightMark:boolean) {
  builder.addFieldInt8(37, +hilightMark, +false);
}

static addBossMark(builder:flatbuffers.Builder, bossMark:boolean) {
  builder.addFieldInt8(38, +bossMark, +false);
}

static addIsPredefined(builder:flatbuffers.Builder, isPredefined:boolean) {
  builder.addFieldInt8(39, +isPredefined, +false);
}

static addIsHardPredefined(builder:flatbuffers.Builder, isHardPredefined:boolean) {
  builder.addFieldInt8(40, +isHardPredefined, +false);
}

static addIsSkillSelectablePredefined(builder:flatbuffers.Builder, isSkillSelectablePredefined:boolean) {
  builder.addFieldInt8(41, +isSkillSelectablePredefined, +false);
}

static addIsStoryOnly(builder:flatbuffers.Builder, isStoryOnly:boolean) {
  builder.addFieldInt8(42, +isStoryOnly, +false);
}

static addAppearanceStyle(builder:flatbuffers.Builder, appearanceStyle:enum__Torappu_AppearanceStyle) {
  builder.addFieldInt32(43, appearanceStyle, enum__Torappu_AppearanceStyle.MAIN_NORMAL);
}

static addStageDropInfo(builder:flatbuffers.Builder, stageDropInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, stageDropInfoOffset, 0);
}

static addCanUseCharm(builder:flatbuffers.Builder, canUseCharm:boolean) {
  builder.addFieldInt8(45, +canUseCharm, +false);
}

static addCanUseTech(builder:flatbuffers.Builder, canUseTech:boolean) {
  builder.addFieldInt8(46, +canUseTech, +false);
}

static addCanUseTrapTool(builder:flatbuffers.Builder, canUseTrapTool:boolean) {
  builder.addFieldInt8(47, +canUseTrapTool, +false);
}

static addCanUseBattlePerformance(builder:flatbuffers.Builder, canUseBattlePerformance:boolean) {
  builder.addFieldInt8(48, +canUseBattlePerformance, +false);
}

static addCanUseFirework(builder:flatbuffers.Builder, canUseFirework:boolean) {
  builder.addFieldInt8(49, +canUseFirework, +false);
}

static addCanMultipleBattle(builder:flatbuffers.Builder, canMultipleBattle:boolean) {
  builder.addFieldInt8(50, +canMultipleBattle, +false);
}

static addStartButtonOverrideId(builder:flatbuffers.Builder, startButtonOverrideIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, startButtonOverrideIdOffset, 0);
}

static addIsStagePatch(builder:flatbuffers.Builder, isStagePatch:boolean) {
  builder.addFieldInt8(52, +isStagePatch, +false);
}

static addMainStageId(builder:flatbuffers.Builder, mainStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, mainStageIdOffset, 0);
}

static addExtraCondition(builder:flatbuffers.Builder, extraConditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, extraConditionOffset, 0);
}

static createExtraConditionVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtraConditionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExtraInfo(builder:flatbuffers.Builder, extraInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, extraInfoOffset, 0);
}

static createExtraInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtraInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSixStarBaseDesc(builder:flatbuffers.Builder, sixStarBaseDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, sixStarBaseDescOffset, 0);
}

static addSixStarDisplayRewardList(builder:flatbuffers.Builder, sixStarDisplayRewardListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, sixStarDisplayRewardListOffset, 0);
}

static createSixStarDisplayRewardListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSixStarDisplayRewardListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAdvancedRuneIdList1(builder:flatbuffers.Builder, advancedRuneIdList1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(58, advancedRuneIdList1Offset, 0);
}

static createAdvancedRuneIdList1Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAdvancedRuneIdList1Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAdvancedRuneIdList2(builder:flatbuffers.Builder, advancedRuneIdList2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(59, advancedRuneIdList2Offset, 0);
}

static createAdvancedRuneIdList2Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAdvancedRuneIdList2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_StageData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_StageDataT {
  return new clz_Torappu_StageDataT(
    this.stageType(),
    this.difficulty(),
    this.performanceStageFlag(),
    this.diffGroup(),
    this.bb!.createObjList<clz_Torappu_StageData_ConditionDesc, clz_Torappu_StageData_ConditionDescT>(this.unlockCondition.bind(this), this.unlockConditionLength()),
    this.stageId(),
    this.levelId(),
    this.zoneId(),
    this.code(),
    this.name(),
    this.description(),
    this.hardStagedId(),
    this.sixStarStageId(),
    this.dangerLevel(),
    this.dangerPoint(),
    this.loadingPicId(),
    this.canPractice(),
    this.canBattleReplay(),
    this.apCost(),
    this.apFailReturn(),
    this.maxSlot(),
    this.etItemId(),
    this.etCost(),
    this.etFailReturn(),
    this.etButtonStyle(),
    this.apProtectTimes(),
    this.diamondOnceDrop(),
    this.practiceTicketCost(),
    this.dailyStageDifficulty(),
    this.expGain(),
    this.goldGain(),
    this.loseExpGain(),
    this.loseGoldGain(),
    this.passFavor(),
    this.completeFavor(),
    this.slProgress(),
    this.displayMainItem(),
    this.hilightMark(),
    this.bossMark(),
    this.isPredefined(),
    this.isHardPredefined(),
    this.isSkillSelectablePredefined(),
    this.isStoryOnly(),
    this.appearanceStyle(),
    (this.stageDropInfo() !== null ? this.stageDropInfo()!.unpack() : null),
    this.canUseCharm(),
    this.canUseTech(),
    this.canUseTrapTool(),
    this.canUseBattlePerformance(),
    this.canUseFirework(),
    this.canMultipleBattle(),
    this.startButtonOverrideId(),
    this.isStagePatch(),
    this.mainStageId(),
    this.bb!.createObjList<clz_Torappu_StageData_ExtraConditionDesc, clz_Torappu_StageData_ExtraConditionDescT>(this.extraCondition.bind(this), this.extraConditionLength()),
    this.bb!.createObjList<clz_Torappu_StageData_SpecialStoryInfo, clz_Torappu_StageData_SpecialStoryInfoT>(this.extraInfo.bind(this), this.extraInfoLength()),
    this.sixStarBaseDesc(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.sixStarDisplayRewardList.bind(this), this.sixStarDisplayRewardListLength()),
    this.bb!.createScalarList<string>(this.advancedRuneIdList1.bind(this), this.advancedRuneIdList1Length()),
    this.bb!.createScalarList<string>(this.advancedRuneIdList2.bind(this), this.advancedRuneIdList2Length())
  );
}


unpackTo(_o: clz_Torappu_StageDataT): void {
  _o.stageType = this.stageType();
  _o.difficulty = this.difficulty();
  _o.performanceStageFlag = this.performanceStageFlag();
  _o.diffGroup = this.diffGroup();
  _o.unlockCondition = this.bb!.createObjList<clz_Torappu_StageData_ConditionDesc, clz_Torappu_StageData_ConditionDescT>(this.unlockCondition.bind(this), this.unlockConditionLength());
  _o.stageId = this.stageId();
  _o.levelId = this.levelId();
  _o.zoneId = this.zoneId();
  _o.code = this.code();
  _o.name = this.name();
  _o.description = this.description();
  _o.hardStagedId = this.hardStagedId();
  _o.sixStarStageId = this.sixStarStageId();
  _o.dangerLevel = this.dangerLevel();
  _o.dangerPoint = this.dangerPoint();
  _o.loadingPicId = this.loadingPicId();
  _o.canPractice = this.canPractice();
  _o.canBattleReplay = this.canBattleReplay();
  _o.apCost = this.apCost();
  _o.apFailReturn = this.apFailReturn();
  _o.maxSlot = this.maxSlot();
  _o.etItemId = this.etItemId();
  _o.etCost = this.etCost();
  _o.etFailReturn = this.etFailReturn();
  _o.etButtonStyle = this.etButtonStyle();
  _o.apProtectTimes = this.apProtectTimes();
  _o.diamondOnceDrop = this.diamondOnceDrop();
  _o.practiceTicketCost = this.practiceTicketCost();
  _o.dailyStageDifficulty = this.dailyStageDifficulty();
  _o.expGain = this.expGain();
  _o.goldGain = this.goldGain();
  _o.loseExpGain = this.loseExpGain();
  _o.loseGoldGain = this.loseGoldGain();
  _o.passFavor = this.passFavor();
  _o.completeFavor = this.completeFavor();
  _o.slProgress = this.slProgress();
  _o.displayMainItem = this.displayMainItem();
  _o.hilightMark = this.hilightMark();
  _o.bossMark = this.bossMark();
  _o.isPredefined = this.isPredefined();
  _o.isHardPredefined = this.isHardPredefined();
  _o.isSkillSelectablePredefined = this.isSkillSelectablePredefined();
  _o.isStoryOnly = this.isStoryOnly();
  _o.appearanceStyle = this.appearanceStyle();
  _o.stageDropInfo = (this.stageDropInfo() !== null ? this.stageDropInfo()!.unpack() : null);
  _o.canUseCharm = this.canUseCharm();
  _o.canUseTech = this.canUseTech();
  _o.canUseTrapTool = this.canUseTrapTool();
  _o.canUseBattlePerformance = this.canUseBattlePerformance();
  _o.canUseFirework = this.canUseFirework();
  _o.canMultipleBattle = this.canMultipleBattle();
  _o.startButtonOverrideId = this.startButtonOverrideId();
  _o.isStagePatch = this.isStagePatch();
  _o.mainStageId = this.mainStageId();
  _o.extraCondition = this.bb!.createObjList<clz_Torappu_StageData_ExtraConditionDesc, clz_Torappu_StageData_ExtraConditionDescT>(this.extraCondition.bind(this), this.extraConditionLength());
  _o.extraInfo = this.bb!.createObjList<clz_Torappu_StageData_SpecialStoryInfo, clz_Torappu_StageData_SpecialStoryInfoT>(this.extraInfo.bind(this), this.extraInfoLength());
  _o.sixStarBaseDesc = this.sixStarBaseDesc();
  _o.sixStarDisplayRewardList = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.sixStarDisplayRewardList.bind(this), this.sixStarDisplayRewardListLength());
  _o.advancedRuneIdList1 = this.bb!.createScalarList<string>(this.advancedRuneIdList1.bind(this), this.advancedRuneIdList1Length());
  _o.advancedRuneIdList2 = this.bb!.createScalarList<string>(this.advancedRuneIdList2.bind(this), this.advancedRuneIdList2Length());
}
}

export class clz_Torappu_StageDataT implements flatbuffers.IGeneratedObject {
constructor(
  public stageType: enum__Torappu_StageType = enum__Torappu_StageType.MAIN,
  public difficulty: enum__Torappu_LevelData_Difficulty = enum__Torappu_LevelData_Difficulty.NONE,
  public performanceStageFlag: enum__Torappu_StageData_PerformanceStageFlag = enum__Torappu_StageData_PerformanceStageFlag.NORMAL_STAGE,
  public diffGroup: enum__Torappu_StageDiffGroup = enum__Torappu_StageDiffGroup.NONE,
  public unlockCondition: (clz_Torappu_StageData_ConditionDescT)[] = [],
  public stageId: string|Uint8Array|null = null,
  public levelId: string|Uint8Array|null = null,
  public zoneId: string|Uint8Array|null = null,
  public code: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public hardStagedId: string|Uint8Array|null = null,
  public sixStarStageId: string|Uint8Array|null = null,
  public dangerLevel: string|Uint8Array|null = null,
  public dangerPoint: number = 0.0,
  public loadingPicId: string|Uint8Array|null = null,
  public canPractice: boolean = false,
  public canBattleReplay: boolean = false,
  public apCost: number = 0,
  public apFailReturn: number = 0,
  public maxSlot: number = 0,
  public etItemId: string|Uint8Array|null = null,
  public etCost: number = 0,
  public etFailReturn: number = 0,
  public etButtonStyle: string|Uint8Array|null = null,
  public apProtectTimes: number = 0,
  public diamondOnceDrop: number = 0,
  public practiceTicketCost: number = 0,
  public dailyStageDifficulty: number = 0,
  public expGain: number = 0,
  public goldGain: number = 0,
  public loseExpGain: number = 0,
  public loseGoldGain: number = 0,
  public passFavor: number = 0,
  public completeFavor: number = 0,
  public slProgress: number = 0,
  public displayMainItem: string|Uint8Array|null = null,
  public hilightMark: boolean = false,
  public bossMark: boolean = false,
  public isPredefined: boolean = false,
  public isHardPredefined: boolean = false,
  public isSkillSelectablePredefined: boolean = false,
  public isStoryOnly: boolean = false,
  public appearanceStyle: enum__Torappu_AppearanceStyle = enum__Torappu_AppearanceStyle.MAIN_NORMAL,
  public stageDropInfo: clz_Torappu_StageData_StageDropInfoT|null = null,
  public canUseCharm: boolean = false,
  public canUseTech: boolean = false,
  public canUseTrapTool: boolean = false,
  public canUseBattlePerformance: boolean = false,
  public canUseFirework: boolean = false,
  public canMultipleBattle: boolean = false,
  public startButtonOverrideId: string|Uint8Array|null = null,
  public isStagePatch: boolean = false,
  public mainStageId: string|Uint8Array|null = null,
  public extraCondition: (clz_Torappu_StageData_ExtraConditionDescT)[] = [],
  public extraInfo: (clz_Torappu_StageData_SpecialStoryInfoT)[] = [],
  public sixStarBaseDesc: string|Uint8Array|null = null,
  public sixStarDisplayRewardList: (clz_Torappu_ItemBundleT)[] = [],
  public advancedRuneIdList1: (string)[] = [],
  public advancedRuneIdList2: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const unlockCondition = clz_Torappu_StageData.createUnlockConditionVector(builder, builder.createObjectOffsetList(this.unlockCondition));
  const stageId = (this.stageId !== null ? builder.createString(this.stageId!) : 0);
  const levelId = (this.levelId !== null ? builder.createString(this.levelId!) : 0);
  const zoneId = (this.zoneId !== null ? builder.createString(this.zoneId!) : 0);
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const hardStagedId = (this.hardStagedId !== null ? builder.createString(this.hardStagedId!) : 0);
  const sixStarStageId = (this.sixStarStageId !== null ? builder.createString(this.sixStarStageId!) : 0);
  const dangerLevel = (this.dangerLevel !== null ? builder.createString(this.dangerLevel!) : 0);
  const loadingPicId = (this.loadingPicId !== null ? builder.createString(this.loadingPicId!) : 0);
  const etItemId = (this.etItemId !== null ? builder.createString(this.etItemId!) : 0);
  const etButtonStyle = (this.etButtonStyle !== null ? builder.createString(this.etButtonStyle!) : 0);
  const displayMainItem = (this.displayMainItem !== null ? builder.createString(this.displayMainItem!) : 0);
  const stageDropInfo = (this.stageDropInfo !== null ? this.stageDropInfo!.pack(builder) : 0);
  const startButtonOverrideId = (this.startButtonOverrideId !== null ? builder.createString(this.startButtonOverrideId!) : 0);
  const mainStageId = (this.mainStageId !== null ? builder.createString(this.mainStageId!) : 0);
  const extraCondition = clz_Torappu_StageData.createExtraConditionVector(builder, builder.createObjectOffsetList(this.extraCondition));
  const extraInfo = clz_Torappu_StageData.createExtraInfoVector(builder, builder.createObjectOffsetList(this.extraInfo));
  const sixStarBaseDesc = (this.sixStarBaseDesc !== null ? builder.createString(this.sixStarBaseDesc!) : 0);
  const sixStarDisplayRewardList = clz_Torappu_StageData.createSixStarDisplayRewardListVector(builder, builder.createObjectOffsetList(this.sixStarDisplayRewardList));
  const advancedRuneIdList1 = clz_Torappu_StageData.createAdvancedRuneIdList1Vector(builder, builder.createObjectOffsetList(this.advancedRuneIdList1));
  const advancedRuneIdList2 = clz_Torappu_StageData.createAdvancedRuneIdList2Vector(builder, builder.createObjectOffsetList(this.advancedRuneIdList2));

  clz_Torappu_StageData.startclz_Torappu_StageData(builder);
  clz_Torappu_StageData.addStageType(builder, this.stageType);
  clz_Torappu_StageData.addDifficulty(builder, this.difficulty);
  clz_Torappu_StageData.addPerformanceStageFlag(builder, this.performanceStageFlag);
  clz_Torappu_StageData.addDiffGroup(builder, this.diffGroup);
  clz_Torappu_StageData.addUnlockCondition(builder, unlockCondition);
  clz_Torappu_StageData.addStageId(builder, stageId);
  clz_Torappu_StageData.addLevelId(builder, levelId);
  clz_Torappu_StageData.addZoneId(builder, zoneId);
  clz_Torappu_StageData.addCode(builder, code);
  clz_Torappu_StageData.addName(builder, name);
  clz_Torappu_StageData.addDescription(builder, description);
  clz_Torappu_StageData.addHardStagedId(builder, hardStagedId);
  clz_Torappu_StageData.addSixStarStageId(builder, sixStarStageId);
  clz_Torappu_StageData.addDangerLevel(builder, dangerLevel);
  clz_Torappu_StageData.addDangerPoint(builder, this.dangerPoint);
  clz_Torappu_StageData.addLoadingPicId(builder, loadingPicId);
  clz_Torappu_StageData.addCanPractice(builder, this.canPractice);
  clz_Torappu_StageData.addCanBattleReplay(builder, this.canBattleReplay);
  clz_Torappu_StageData.addApCost(builder, this.apCost);
  clz_Torappu_StageData.addApFailReturn(builder, this.apFailReturn);
  clz_Torappu_StageData.addMaxSlot(builder, this.maxSlot);
  clz_Torappu_StageData.addEtItemId(builder, etItemId);
  clz_Torappu_StageData.addEtCost(builder, this.etCost);
  clz_Torappu_StageData.addEtFailReturn(builder, this.etFailReturn);
  clz_Torappu_StageData.addEtButtonStyle(builder, etButtonStyle);
  clz_Torappu_StageData.addApProtectTimes(builder, this.apProtectTimes);
  clz_Torappu_StageData.addDiamondOnceDrop(builder, this.diamondOnceDrop);
  clz_Torappu_StageData.addPracticeTicketCost(builder, this.practiceTicketCost);
  clz_Torappu_StageData.addDailyStageDifficulty(builder, this.dailyStageDifficulty);
  clz_Torappu_StageData.addExpGain(builder, this.expGain);
  clz_Torappu_StageData.addGoldGain(builder, this.goldGain);
  clz_Torappu_StageData.addLoseExpGain(builder, this.loseExpGain);
  clz_Torappu_StageData.addLoseGoldGain(builder, this.loseGoldGain);
  clz_Torappu_StageData.addPassFavor(builder, this.passFavor);
  clz_Torappu_StageData.addCompleteFavor(builder, this.completeFavor);
  clz_Torappu_StageData.addSlProgress(builder, this.slProgress);
  clz_Torappu_StageData.addDisplayMainItem(builder, displayMainItem);
  clz_Torappu_StageData.addHilightMark(builder, this.hilightMark);
  clz_Torappu_StageData.addBossMark(builder, this.bossMark);
  clz_Torappu_StageData.addIsPredefined(builder, this.isPredefined);
  clz_Torappu_StageData.addIsHardPredefined(builder, this.isHardPredefined);
  clz_Torappu_StageData.addIsSkillSelectablePredefined(builder, this.isSkillSelectablePredefined);
  clz_Torappu_StageData.addIsStoryOnly(builder, this.isStoryOnly);
  clz_Torappu_StageData.addAppearanceStyle(builder, this.appearanceStyle);
  clz_Torappu_StageData.addStageDropInfo(builder, stageDropInfo);
  clz_Torappu_StageData.addCanUseCharm(builder, this.canUseCharm);
  clz_Torappu_StageData.addCanUseTech(builder, this.canUseTech);
  clz_Torappu_StageData.addCanUseTrapTool(builder, this.canUseTrapTool);
  clz_Torappu_StageData.addCanUseBattlePerformance(builder, this.canUseBattlePerformance);
  clz_Torappu_StageData.addCanUseFirework(builder, this.canUseFirework);
  clz_Torappu_StageData.addCanMultipleBattle(builder, this.canMultipleBattle);
  clz_Torappu_StageData.addStartButtonOverrideId(builder, startButtonOverrideId);
  clz_Torappu_StageData.addIsStagePatch(builder, this.isStagePatch);
  clz_Torappu_StageData.addMainStageId(builder, mainStageId);
  clz_Torappu_StageData.addExtraCondition(builder, extraCondition);
  clz_Torappu_StageData.addExtraInfo(builder, extraInfo);
  clz_Torappu_StageData.addSixStarBaseDesc(builder, sixStarBaseDesc);
  clz_Torappu_StageData.addSixStarDisplayRewardList(builder, sixStarDisplayRewardList);
  clz_Torappu_StageData.addAdvancedRuneIdList1(builder, advancedRuneIdList1);
  clz_Torappu_StageData.addAdvancedRuneIdList2(builder, advancedRuneIdList2);

  return clz_Torappu_StageData.endclz_Torappu_StageData(builder);
}
}
