// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_UnityEngine_Vector2, clz_UnityEngine_Vector2T } from './clz-unity-engine-vector2.js';


export class clz_Torappu_SandboxV2MapConfig implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2MapConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2MapConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2MapConfig(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2MapConfig):clz_Torappu_SandboxV2MapConfig {
  return (obj || new clz_Torappu_SandboxV2MapConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2MapConfig(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2MapConfig):clz_Torappu_SandboxV2MapConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2MapConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

isRift():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isGuide():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

cameraBoundMin(obj?:clz_UnityEngine_Vector2):clz_UnityEngine_Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_UnityEngine_Vector2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

cameraBoundMax(obj?:clz_UnityEngine_Vector2):clz_UnityEngine_Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_UnityEngine_Vector2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

cameraMaxNormalizedZoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

backgroundId():string|null
backgroundId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
backgroundId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_SandboxV2MapConfig(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addIsRift(builder:flatbuffers.Builder, isRift:boolean) {
  builder.addFieldInt8(0, +isRift, +false);
}

static addIsGuide(builder:flatbuffers.Builder, isGuide:boolean) {
  builder.addFieldInt8(1, +isGuide, +false);
}

static addCameraBoundMin(builder:flatbuffers.Builder, cameraBoundMinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, cameraBoundMinOffset, 0);
}

static addCameraBoundMax(builder:flatbuffers.Builder, cameraBoundMaxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cameraBoundMaxOffset, 0);
}

static addCameraMaxNormalizedZoom(builder:flatbuffers.Builder, cameraMaxNormalizedZoom:number) {
  builder.addFieldFloat32(4, cameraMaxNormalizedZoom, 0.0);
}

static addBackgroundId(builder:flatbuffers.Builder, backgroundIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, backgroundIdOffset, 0);
}

static endclz_Torappu_SandboxV2MapConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_SandboxV2MapConfigT {
  return new clz_Torappu_SandboxV2MapConfigT(
    this.isRift(),
    this.isGuide(),
    (this.cameraBoundMin() !== null ? this.cameraBoundMin()!.unpack() : null),
    (this.cameraBoundMax() !== null ? this.cameraBoundMax()!.unpack() : null),
    this.cameraMaxNormalizedZoom(),
    this.backgroundId()
  );
}


unpackTo(_o: clz_Torappu_SandboxV2MapConfigT): void {
  _o.isRift = this.isRift();
  _o.isGuide = this.isGuide();
  _o.cameraBoundMin = (this.cameraBoundMin() !== null ? this.cameraBoundMin()!.unpack() : null);
  _o.cameraBoundMax = (this.cameraBoundMax() !== null ? this.cameraBoundMax()!.unpack() : null);
  _o.cameraMaxNormalizedZoom = this.cameraMaxNormalizedZoom();
  _o.backgroundId = this.backgroundId();
}
}

export class clz_Torappu_SandboxV2MapConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public isRift: boolean = false,
  public isGuide: boolean = false,
  public cameraBoundMin: clz_UnityEngine_Vector2T|null = null,
  public cameraBoundMax: clz_UnityEngine_Vector2T|null = null,
  public cameraMaxNormalizedZoom: number = 0.0,
  public backgroundId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cameraBoundMin = (this.cameraBoundMin !== null ? this.cameraBoundMin!.pack(builder) : 0);
  const cameraBoundMax = (this.cameraBoundMax !== null ? this.cameraBoundMax!.pack(builder) : 0);
  const backgroundId = (this.backgroundId !== null ? builder.createString(this.backgroundId!) : 0);

  clz_Torappu_SandboxV2MapConfig.startclz_Torappu_SandboxV2MapConfig(builder);
  clz_Torappu_SandboxV2MapConfig.addIsRift(builder, this.isRift);
  clz_Torappu_SandboxV2MapConfig.addIsGuide(builder, this.isGuide);
  clz_Torappu_SandboxV2MapConfig.addCameraBoundMin(builder, cameraBoundMin);
  clz_Torappu_SandboxV2MapConfig.addCameraBoundMax(builder, cameraBoundMax);
  clz_Torappu_SandboxV2MapConfig.addCameraMaxNormalizedZoom(builder, this.cameraMaxNormalizedZoom);
  clz_Torappu_SandboxV2MapConfig.addBackgroundId(builder, backgroundId);

  return clz_Torappu_SandboxV2MapConfig.endclz_Torappu_SandboxV2MapConfig(builder);
}
}
