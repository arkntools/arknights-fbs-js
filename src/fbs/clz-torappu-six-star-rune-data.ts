// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_SixStarRuneData implements flatbuffers.IUnpackableObject<clz_Torappu_SixStarRuneDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SixStarRuneData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SixStarRuneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SixStarRuneData):clz_Torappu_SixStarRuneData {
  return (obj || new clz_Torappu_SixStarRuneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SixStarRuneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SixStarRuneData):clz_Torappu_SixStarRuneData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SixStarRuneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

runeId():string|null
runeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
runeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

runeDesc():string|null
runeDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
runeDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

runeKey():string|null
runeKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
runeKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_SixStarRuneData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRuneId(builder:flatbuffers.Builder, runeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, runeIdOffset, 0);
}

static addRuneDesc(builder:flatbuffers.Builder, runeDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, runeDescOffset, 0);
}

static addRuneKey(builder:flatbuffers.Builder, runeKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, runeKeyOffset, 0);
}

static endclz_Torappu_SixStarRuneData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SixStarRuneData(builder:flatbuffers.Builder, runeIdOffset:flatbuffers.Offset, runeDescOffset:flatbuffers.Offset, runeKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SixStarRuneData.startclz_Torappu_SixStarRuneData(builder);
  clz_Torappu_SixStarRuneData.addRuneId(builder, runeIdOffset);
  clz_Torappu_SixStarRuneData.addRuneDesc(builder, runeDescOffset);
  clz_Torappu_SixStarRuneData.addRuneKey(builder, runeKeyOffset);
  return clz_Torappu_SixStarRuneData.endclz_Torappu_SixStarRuneData(builder);
}

unpack(): clz_Torappu_SixStarRuneDataT {
  return new clz_Torappu_SixStarRuneDataT(
    this.runeId(),
    this.runeDesc(),
    this.runeKey()
  );
}


unpackTo(_o: clz_Torappu_SixStarRuneDataT): void {
  _o.runeId = this.runeId();
  _o.runeDesc = this.runeDesc();
  _o.runeKey = this.runeKey();
}
}

export class clz_Torappu_SixStarRuneDataT implements flatbuffers.IGeneratedObject {
constructor(
  public runeId: string|Uint8Array|null = null,
  public runeDesc: string|Uint8Array|null = null,
  public runeKey: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const runeId = (this.runeId !== null ? builder.createString(this.runeId!) : 0);
  const runeDesc = (this.runeDesc !== null ? builder.createString(this.runeDesc!) : 0);
  const runeKey = (this.runeKey !== null ? builder.createString(this.runeKey!) : 0);

  return clz_Torappu_SixStarRuneData.createclz_Torappu_SixStarRuneData(builder,
    runeId,
    runeDesc,
    runeKey
  );
}
}
