// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_LevelData_Difficulty } from './enum--torappu-level-data-difficulty.js';


export class clz_Torappu_RoguelikeGameStageData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeGameStageDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeGameStageData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeGameStageData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeGameStageData):clz_Torappu_RoguelikeGameStageData {
  return (obj || new clz_Torappu_RoguelikeGameStageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeGameStageData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeGameStageData):clz_Torappu_RoguelikeGameStageData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeGameStageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

linkedStageId():string|null
linkedStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkedStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

levelId():string|null
levelId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
levelId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

levelReplaceIds(index: number):string
levelReplaceIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
levelReplaceIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

levelReplaceIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

loadingPicId():string|null
loadingPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
loadingPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

eliteDesc():string|null
eliteDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eliteDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isBoss():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isElite():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

difficulty():enum__Torappu_LevelData_Difficulty {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_LevelData_Difficulty.NONE;
}

capsulePool():string|null
capsulePool(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
capsulePool(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

capsuleProb():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

vutresProb(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

vutresProbLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

vutresProbArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

boxProb(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

boxProbLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

boxProbArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

specialNodeId():string|null
specialNodeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialNodeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

redCapsulePool():string|null
redCapsulePool(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
redCapsulePool(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

redCapsuleProb():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_RoguelikeGameStageData(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addLinkedStageId(builder:flatbuffers.Builder, linkedStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, linkedStageIdOffset, 0);
}

static addLevelId(builder:flatbuffers.Builder, levelIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, levelIdOffset, 0);
}

static addLevelReplaceIds(builder:flatbuffers.Builder, levelReplaceIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, levelReplaceIdsOffset, 0);
}

static createLevelReplaceIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelReplaceIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, codeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, nameOffset, 0);
}

static addLoadingPicId(builder:flatbuffers.Builder, loadingPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, loadingPicIdOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, descriptionOffset, 0);
}

static addEliteDesc(builder:flatbuffers.Builder, eliteDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, eliteDescOffset, 0);
}

static addIsBoss(builder:flatbuffers.Builder, isBoss:number) {
  builder.addFieldInt32(9, isBoss, 0);
}

static addIsElite(builder:flatbuffers.Builder, isElite:number) {
  builder.addFieldInt32(10, isElite, 0);
}

static addDifficulty(builder:flatbuffers.Builder, difficulty:enum__Torappu_LevelData_Difficulty) {
  builder.addFieldInt32(11, difficulty, enum__Torappu_LevelData_Difficulty.NONE);
}

static addCapsulePool(builder:flatbuffers.Builder, capsulePoolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, capsulePoolOffset, 0);
}

static addCapsuleProb(builder:flatbuffers.Builder, capsuleProb:number) {
  builder.addFieldFloat32(13, capsuleProb, 0.0);
}

static addVutresProb(builder:flatbuffers.Builder, vutresProbOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, vutresProbOffset, 0);
}

static createVutresProbVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createVutresProbVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createVutresProbVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startVutresProbVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addBoxProb(builder:flatbuffers.Builder, boxProbOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, boxProbOffset, 0);
}

static createBoxProbVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createBoxProbVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createBoxProbVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startBoxProbVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addSpecialNodeId(builder:flatbuffers.Builder, specialNodeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, specialNodeIdOffset, 0);
}

static addRedCapsulePool(builder:flatbuffers.Builder, redCapsulePoolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, redCapsulePoolOffset, 0);
}

static addRedCapsuleProb(builder:flatbuffers.Builder, redCapsuleProb:number) {
  builder.addFieldFloat32(18, redCapsuleProb, 0.0);
}

static endclz_Torappu_RoguelikeGameStageData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeGameStageData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, linkedStageIdOffset:flatbuffers.Offset, levelIdOffset:flatbuffers.Offset, levelReplaceIdsOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, loadingPicIdOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, eliteDescOffset:flatbuffers.Offset, isBoss:number, isElite:number, difficulty:enum__Torappu_LevelData_Difficulty, capsulePoolOffset:flatbuffers.Offset, capsuleProb:number, vutresProbOffset:flatbuffers.Offset, boxProbOffset:flatbuffers.Offset, specialNodeIdOffset:flatbuffers.Offset, redCapsulePoolOffset:flatbuffers.Offset, redCapsuleProb:number):flatbuffers.Offset {
  clz_Torappu_RoguelikeGameStageData.startclz_Torappu_RoguelikeGameStageData(builder);
  clz_Torappu_RoguelikeGameStageData.addId(builder, idOffset);
  clz_Torappu_RoguelikeGameStageData.addLinkedStageId(builder, linkedStageIdOffset);
  clz_Torappu_RoguelikeGameStageData.addLevelId(builder, levelIdOffset);
  clz_Torappu_RoguelikeGameStageData.addLevelReplaceIds(builder, levelReplaceIdsOffset);
  clz_Torappu_RoguelikeGameStageData.addCode(builder, codeOffset);
  clz_Torappu_RoguelikeGameStageData.addName(builder, nameOffset);
  clz_Torappu_RoguelikeGameStageData.addLoadingPicId(builder, loadingPicIdOffset);
  clz_Torappu_RoguelikeGameStageData.addDescription(builder, descriptionOffset);
  clz_Torappu_RoguelikeGameStageData.addEliteDesc(builder, eliteDescOffset);
  clz_Torappu_RoguelikeGameStageData.addIsBoss(builder, isBoss);
  clz_Torappu_RoguelikeGameStageData.addIsElite(builder, isElite);
  clz_Torappu_RoguelikeGameStageData.addDifficulty(builder, difficulty);
  clz_Torappu_RoguelikeGameStageData.addCapsulePool(builder, capsulePoolOffset);
  clz_Torappu_RoguelikeGameStageData.addCapsuleProb(builder, capsuleProb);
  clz_Torappu_RoguelikeGameStageData.addVutresProb(builder, vutresProbOffset);
  clz_Torappu_RoguelikeGameStageData.addBoxProb(builder, boxProbOffset);
  clz_Torappu_RoguelikeGameStageData.addSpecialNodeId(builder, specialNodeIdOffset);
  clz_Torappu_RoguelikeGameStageData.addRedCapsulePool(builder, redCapsulePoolOffset);
  clz_Torappu_RoguelikeGameStageData.addRedCapsuleProb(builder, redCapsuleProb);
  return clz_Torappu_RoguelikeGameStageData.endclz_Torappu_RoguelikeGameStageData(builder);
}

unpack(): clz_Torappu_RoguelikeGameStageDataT {
  return new clz_Torappu_RoguelikeGameStageDataT(
    this.id(),
    this.linkedStageId(),
    this.levelId(),
    this.bb!.createScalarList<string>(this.levelReplaceIds.bind(this), this.levelReplaceIdsLength()),
    this.code(),
    this.name(),
    this.loadingPicId(),
    this.description(),
    this.eliteDesc(),
    this.isBoss(),
    this.isElite(),
    this.difficulty(),
    this.capsulePool(),
    this.capsuleProb(),
    this.bb!.createScalarList<number>(this.vutresProb.bind(this), this.vutresProbLength()),
    this.bb!.createScalarList<number>(this.boxProb.bind(this), this.boxProbLength()),
    this.specialNodeId(),
    this.redCapsulePool(),
    this.redCapsuleProb()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeGameStageDataT): void {
  _o.id = this.id();
  _o.linkedStageId = this.linkedStageId();
  _o.levelId = this.levelId();
  _o.levelReplaceIds = this.bb!.createScalarList<string>(this.levelReplaceIds.bind(this), this.levelReplaceIdsLength());
  _o.code = this.code();
  _o.name = this.name();
  _o.loadingPicId = this.loadingPicId();
  _o.description = this.description();
  _o.eliteDesc = this.eliteDesc();
  _o.isBoss = this.isBoss();
  _o.isElite = this.isElite();
  _o.difficulty = this.difficulty();
  _o.capsulePool = this.capsulePool();
  _o.capsuleProb = this.capsuleProb();
  _o.vutresProb = this.bb!.createScalarList<number>(this.vutresProb.bind(this), this.vutresProbLength());
  _o.boxProb = this.bb!.createScalarList<number>(this.boxProb.bind(this), this.boxProbLength());
  _o.specialNodeId = this.specialNodeId();
  _o.redCapsulePool = this.redCapsulePool();
  _o.redCapsuleProb = this.redCapsuleProb();
}
}

export class clz_Torappu_RoguelikeGameStageDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public linkedStageId: string|Uint8Array|null = null,
  public levelId: string|Uint8Array|null = null,
  public levelReplaceIds: (string)[] = [],
  public code: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public loadingPicId: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public eliteDesc: string|Uint8Array|null = null,
  public isBoss: number = 0,
  public isElite: number = 0,
  public difficulty: enum__Torappu_LevelData_Difficulty = enum__Torappu_LevelData_Difficulty.NONE,
  public capsulePool: string|Uint8Array|null = null,
  public capsuleProb: number = 0.0,
  public vutresProb: (number)[] = [],
  public boxProb: (number)[] = [],
  public specialNodeId: string|Uint8Array|null = null,
  public redCapsulePool: string|Uint8Array|null = null,
  public redCapsuleProb: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const linkedStageId = (this.linkedStageId !== null ? builder.createString(this.linkedStageId!) : 0);
  const levelId = (this.levelId !== null ? builder.createString(this.levelId!) : 0);
  const levelReplaceIds = clz_Torappu_RoguelikeGameStageData.createLevelReplaceIdsVector(builder, builder.createObjectOffsetList(this.levelReplaceIds));
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const loadingPicId = (this.loadingPicId !== null ? builder.createString(this.loadingPicId!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const eliteDesc = (this.eliteDesc !== null ? builder.createString(this.eliteDesc!) : 0);
  const capsulePool = (this.capsulePool !== null ? builder.createString(this.capsulePool!) : 0);
  const vutresProb = clz_Torappu_RoguelikeGameStageData.createVutresProbVector(builder, this.vutresProb);
  const boxProb = clz_Torappu_RoguelikeGameStageData.createBoxProbVector(builder, this.boxProb);
  const specialNodeId = (this.specialNodeId !== null ? builder.createString(this.specialNodeId!) : 0);
  const redCapsulePool = (this.redCapsulePool !== null ? builder.createString(this.redCapsulePool!) : 0);

  return clz_Torappu_RoguelikeGameStageData.createclz_Torappu_RoguelikeGameStageData(builder,
    id,
    linkedStageId,
    levelId,
    levelReplaceIds,
    code,
    name,
    loadingPicId,
    description,
    eliteDesc,
    this.isBoss,
    this.isElite,
    this.difficulty,
    capsulePool,
    this.capsuleProb,
    vutresProb,
    boxProb,
    specialNodeId,
    redCapsulePool,
    this.redCapsuleProb
  );
}
}
