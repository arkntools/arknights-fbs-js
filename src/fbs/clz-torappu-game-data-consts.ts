// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_GameDataConsts_CharAssistRefreshTimeState, clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateT } from './clz-torappu-game-data-consts-char-assist-refresh-time-state.js';
import { clz_Torappu_GameDataConsts_FeverGameData, clz_Torappu_GameDataConsts_FeverGameDataT } from './clz-torappu-game-data-consts-fever-game-data.js';
import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { dict__int__int, dict__int__intT } from './dict--int--int.js';
import { dict__string__clz_Torappu_TermDescriptionData, dict__string__clz_Torappu_TermDescriptionDataT } from './dict--string--clz-torappu-term-description-data.js';
import { dict__string__enum__Torappu_SubProfessionAttackType, dict__string__enum__Torappu_SubProfessionAttackTypeT } from './dict--string--enum--torappu-sub-profession-attack-type.js';
import { dict__string__string, dict__string__stringT } from './dict--string--string.js';
import { list_int, list_intT } from './list-int.js';


export class clz_Torappu_GameDataConsts implements flatbuffers.IUnpackableObject<clz_Torappu_GameDataConstsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_GameDataConsts {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_GameDataConsts(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_GameDataConsts):clz_Torappu_GameDataConsts {
  return (obj || new clz_Torappu_GameDataConsts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_GameDataConsts(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_GameDataConsts):clz_Torappu_GameDataConsts {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_GameDataConsts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxPlayerLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

playerExpMap(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

playerExpMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

playerExpMapArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

playerApMap(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

playerApMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

playerApMapArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

maxLevel(index: number, obj?:list_int):list_int|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new list_int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

maxLevelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

characterExpMap(index: number, obj?:list_int):list_int|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new list_int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

characterExpMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

characterUpgradeCostMap(index: number, obj?:list_int):list_int|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new list_int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

characterUpgradeCostMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

evolveGoldCost(index: number, obj?:list_int):list_int|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new list_int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

evolveGoldCostLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

completeGainBonus():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

playerApRegenSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxPracticeTicket():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

advancedGachaCrystalCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

completeCrystalBonus():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initPlayerGold():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initPlayerDiamondShard():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initCampaignTotalFee():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initRecruitTagList(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

initRecruitTagListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

initRecruitTagListArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

initCharIdList(index: number):string
initCharIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
initCharIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

initCharIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

attackMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

defMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

hpMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

reMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

diamondToShdRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

requestSameFriendCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

baseMaxFriendNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxStarFriendNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxSquadAssistDisplayNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

friendStarEditTrackTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

hardDiamondDrop():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

instFinDmdShdCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

easyCrystalBonus():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

diamondMaterialToShardExchangeRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

diamondHandbookStageGain():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

apBuyCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

apBuyThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

creditLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

monthlySubRemainTimeLimitDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

friendAssistRarityLimit(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

friendAssistRarityLimitLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

friendAssistRarityLimitArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

mainlineCompatibleDesc():string|null
mainlineCompatibleDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainlineCompatibleDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainlineToughDesc():string|null
mainlineToughDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainlineToughDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainlineEasyDesc():string|null
mainlineEasyDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainlineEasyDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainlineNormalDesc():string|null
mainlineNormalDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainlineNormalDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rejectSpCharMission():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

addedRewardDisplayZone():string|null
addedRewardDisplayZone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
addedRewardDisplayZone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

oneDiamondAp():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

charRotationPresetMaxCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

charRotationSkinListMaxCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

defaultCrpresetCharId():string|null
defaultCrpresetCharId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultCrpresetCharId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultCrpresetCharSkinId():string|null
defaultCrpresetCharSkinId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultCrpresetCharSkinId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultCrpresetBgid():string|null
defaultCrpresetBgid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultCrpresetBgid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultCrpresetThemeId():string|null
defaultCrpresetThemeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultCrpresetThemeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultCrpresetName():string|null
defaultCrpresetName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultCrpresetName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charRotationPresetTrackTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

uniequipArchiveSysTrackTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

manufactPromptTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mainGuideActivedStageId():string|null
mainGuideActivedStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainGuideActivedStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

richTextStyles(index: number, obj?:dict__string__string):dict__string__string|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? (obj || new dict__string__string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

richTextStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

charAssistRefreshTime(index: number, obj?:clz_Torappu_GameDataConsts_CharAssistRefreshTimeState):clz_Torappu_GameDataConsts_CharAssistRefreshTimeState|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? (obj || new clz_Torappu_GameDataConsts_CharAssistRefreshTimeState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

charAssistRefreshTimeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

normalRecruitLockedString(index: number):string
normalRecruitLockedString(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
normalRecruitLockedString(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

normalRecruitLockedStringLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

commonPotentialLvlUpCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

weeklyOverrideDesc():string|null
weeklyOverrideDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weeklyOverrideDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

voucherDiv():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

recruitPoolVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

v006RecruitTimeStep1Refresh():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

v006RecruitTimeStep2Check():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

v006RecruitTimeStep2Flush():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

buyApTimeNoLimitFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isLmgtsenabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

legacyTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

legacyItemList(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

legacyItemListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

useAssistSocialPt():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

useAssistSocialPtMaxCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

assistBeUsedSocialPt(index: number, obj?:dict__int__int):dict__int__int|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? (obj || new dict__int__int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

assistBeUsedSocialPtLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pushForces(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

pushForcesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pushForcesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

pushForceZeroIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

normalGachaUnlockPrice(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

normalGachaUnlockPriceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

normalGachaUnlockPriceArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

pullForces(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

pullForcesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pullForcesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

pullForceZeroIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

multiInComeByRank(index: number):string
multiInComeByRank(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
multiInComeByRank(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

multiInComeByRankLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lmtgstoEpgsratio():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

newBeeGiftEpgs():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lMtgsdescConstOne():string|null
lMtgsdescConstOne(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lMtgsdescConstOne(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lMtgsdescConstTwo():string|null
lMtgsdescConstTwo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lMtgsdescConstTwo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defCdprimColor():string|null
defCdprimColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defCdprimColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defCdsecColor():string|null
defCdsecColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defCdsecColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mailBannerType(index: number):string
mailBannerType(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mailBannerType(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mailBannerTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

monthlySubWarningTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

unlimitSkinOutOfTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

replicateShopStartTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

tso():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

isDynIllustEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 182);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isDynIllustStartEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 184);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isClassicQcshopEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 186);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRoguelikeTopicFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 188);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSandboxPermFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 190);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRoguelikeAvgAchieveFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 192);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isClassicPotentialItemFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 194);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isClassicGachaPoolFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 196);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSpecialGachaPoolFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 198);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isVoucherClassicItemDistinguishable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 200);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRecalRuneFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 202);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

voucherSkinRedeem():number {
  const offset = this.bb!.__offset(this.bb_pos, 204);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

voucherSkinDesc():string|null
voucherSkinDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
voucherSkinDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 206);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charmEquipCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 208);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

termDescriptionDict(index: number, obj?:dict__string__clz_Torappu_TermDescriptionData):dict__string__clz_Torappu_TermDescriptionData|null {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? (obj || new dict__string__clz_Torappu_TermDescriptionData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

termDescriptionDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 210);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

storyReviewUnlockItemLackTip():string|null
storyReviewUnlockItemLackTip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
storyReviewUnlockItemLackTip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 212);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dataVersion():string|null
dataVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 214);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

resPrefVersion():string|null
resPrefVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
resPrefVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 216);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

announceWebBusType():string|null
announceWebBusType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
announceWebBusType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 218);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

videoPlayerWebBusType():string|null
videoPlayerWebBusType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
videoPlayerWebBusType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 220);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gachaLogBusType():string|null
gachaLogBusType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaLogBusType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 222);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultMinMultipleBattleTimes():number {
  const offset = this.bb!.__offset(this.bb_pos, 224);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

defaultMaxMultipleBattleTimes():number {
  const offset = this.bb!.__offset(this.bb_pos, 226);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

multipleActionOpen():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 228);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

subProfessionDamageTypePairs(index: number, obj?:dict__string__enum__Torappu_SubProfessionAttackType):dict__string__enum__Torappu_SubProfessionAttackType|null {
  const offset = this.bb!.__offset(this.bb_pos, 230);
  return offset ? (obj || new dict__string__enum__Torappu_SubProfessionAttackType()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subProfessionDamageTypePairsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 230);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

classicProtectChar(index: number):string
classicProtectChar(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
classicProtectChar(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 232);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

classicProtectCharLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 232);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

feverGameData(obj?:clz_Torappu_GameDataConsts_FeverGameData):clz_Torappu_GameDataConsts_FeverGameData|null {
  const offset = this.bb!.__offset(this.bb_pos, 234);
  return offset ? (obj || new clz_Torappu_GameDataConsts_FeverGameData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

birthdaySettingDesc():string|null
birthdaySettingDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
birthdaySettingDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 236);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

birthdaySettingConfirmDesc():string|null
birthdaySettingConfirmDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
birthdaySettingConfirmDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 238);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

birthdaySettingLeapConfirmDesc():string|null
birthdaySettingLeapConfirmDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
birthdaySettingLeapConfirmDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 240);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

leapBirthdayRewardMonth():number {
  const offset = this.bb!.__offset(this.bb_pos, 242);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

leapBirthdayRewardDay():number {
  const offset = this.bb!.__offset(this.bb_pos, 244);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

birthdaySettingShowStageId():string|null
birthdaySettingShowStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
birthdaySettingShowStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 246);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isBirthdayFuncEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 248);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSoCharEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 250);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_GameDataConsts(builder:flatbuffers.Builder) {
  builder.startObject(124);
}

static addMaxPlayerLevel(builder:flatbuffers.Builder, maxPlayerLevel:number) {
  builder.addFieldInt32(0, maxPlayerLevel, 0);
}

static addPlayerExpMap(builder:flatbuffers.Builder, playerExpMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playerExpMapOffset, 0);
}

static createPlayerExpMapVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPlayerExpMapVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPlayerExpMapVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startPlayerExpMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlayerApMap(builder:flatbuffers.Builder, playerApMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playerApMapOffset, 0);
}

static createPlayerApMapVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPlayerApMapVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPlayerApMapVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startPlayerApMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMaxLevel(builder:flatbuffers.Builder, maxLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, maxLevelOffset, 0);
}

static createMaxLevelVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMaxLevelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharacterExpMap(builder:flatbuffers.Builder, characterExpMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, characterExpMapOffset, 0);
}

static createCharacterExpMapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharacterExpMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharacterUpgradeCostMap(builder:flatbuffers.Builder, characterUpgradeCostMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, characterUpgradeCostMapOffset, 0);
}

static createCharacterUpgradeCostMapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharacterUpgradeCostMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEvolveGoldCost(builder:flatbuffers.Builder, evolveGoldCostOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, evolveGoldCostOffset, 0);
}

static createEvolveGoldCostVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEvolveGoldCostVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCompleteGainBonus(builder:flatbuffers.Builder, completeGainBonus:number) {
  builder.addFieldFloat32(7, completeGainBonus, 0.0);
}

static addPlayerApRegenSpeed(builder:flatbuffers.Builder, playerApRegenSpeed:number) {
  builder.addFieldInt32(8, playerApRegenSpeed, 0);
}

static addMaxPracticeTicket(builder:flatbuffers.Builder, maxPracticeTicket:number) {
  builder.addFieldInt32(9, maxPracticeTicket, 0);
}

static addAdvancedGachaCrystalCost(builder:flatbuffers.Builder, advancedGachaCrystalCost:number) {
  builder.addFieldInt32(10, advancedGachaCrystalCost, 0);
}

static addCompleteCrystalBonus(builder:flatbuffers.Builder, completeCrystalBonus:number) {
  builder.addFieldInt32(11, completeCrystalBonus, 0);
}

static addInitPlayerGold(builder:flatbuffers.Builder, initPlayerGold:number) {
  builder.addFieldInt32(12, initPlayerGold, 0);
}

static addInitPlayerDiamondShard(builder:flatbuffers.Builder, initPlayerDiamondShard:number) {
  builder.addFieldInt32(13, initPlayerDiamondShard, 0);
}

static addInitCampaignTotalFee(builder:flatbuffers.Builder, initCampaignTotalFee:number) {
  builder.addFieldInt32(14, initCampaignTotalFee, 0);
}

static addInitRecruitTagList(builder:flatbuffers.Builder, initRecruitTagListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, initRecruitTagListOffset, 0);
}

static createInitRecruitTagListVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createInitRecruitTagListVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createInitRecruitTagListVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startInitRecruitTagListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInitCharIdList(builder:flatbuffers.Builder, initCharIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, initCharIdListOffset, 0);
}

static createInitCharIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInitCharIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAttackMax(builder:flatbuffers.Builder, attackMax:number) {
  builder.addFieldFloat32(17, attackMax, 0.0);
}

static addDefMax(builder:flatbuffers.Builder, defMax:number) {
  builder.addFieldFloat32(18, defMax, 0.0);
}

static addHpMax(builder:flatbuffers.Builder, hpMax:number) {
  builder.addFieldFloat32(19, hpMax, 0.0);
}

static addReMax(builder:flatbuffers.Builder, reMax:number) {
  builder.addFieldFloat32(20, reMax, 0.0);
}

static addDiamondToShdRate(builder:flatbuffers.Builder, diamondToShdRate:number) {
  builder.addFieldInt32(21, diamondToShdRate, 0);
}

static addRequestSameFriendCd(builder:flatbuffers.Builder, requestSameFriendCd:number) {
  builder.addFieldInt32(22, requestSameFriendCd, 0);
}

static addBaseMaxFriendNum(builder:flatbuffers.Builder, baseMaxFriendNum:number) {
  builder.addFieldInt32(23, baseMaxFriendNum, 0);
}

static addMaxStarFriendNum(builder:flatbuffers.Builder, maxStarFriendNum:number) {
  builder.addFieldInt32(24, maxStarFriendNum, 0);
}

static addMaxSquadAssistDisplayNum(builder:flatbuffers.Builder, maxSquadAssistDisplayNum:number) {
  builder.addFieldInt32(25, maxSquadAssistDisplayNum, 0);
}

static addFriendStarEditTrackTs(builder:flatbuffers.Builder, friendStarEditTrackTs:bigint) {
  builder.addFieldInt64(26, friendStarEditTrackTs, BigInt('0'));
}

static addHardDiamondDrop(builder:flatbuffers.Builder, hardDiamondDrop:number) {
  builder.addFieldInt32(27, hardDiamondDrop, 0);
}

static addInstFinDmdShdCost(builder:flatbuffers.Builder, instFinDmdShdCost:number) {
  builder.addFieldInt32(28, instFinDmdShdCost, 0);
}

static addEasyCrystalBonus(builder:flatbuffers.Builder, easyCrystalBonus:number) {
  builder.addFieldInt32(29, easyCrystalBonus, 0);
}

static addDiamondMaterialToShardExchangeRatio(builder:flatbuffers.Builder, diamondMaterialToShardExchangeRatio:number) {
  builder.addFieldInt32(30, diamondMaterialToShardExchangeRatio, 0);
}

static addDiamondHandbookStageGain(builder:flatbuffers.Builder, diamondHandbookStageGain:number) {
  builder.addFieldInt32(31, diamondHandbookStageGain, 0);
}

static addApBuyCost(builder:flatbuffers.Builder, apBuyCost:number) {
  builder.addFieldInt32(32, apBuyCost, 0);
}

static addApBuyThreshold(builder:flatbuffers.Builder, apBuyThreshold:number) {
  builder.addFieldInt32(33, apBuyThreshold, 0);
}

static addCreditLimit(builder:flatbuffers.Builder, creditLimit:number) {
  builder.addFieldInt32(34, creditLimit, 0);
}

static addMonthlySubRemainTimeLimitDays(builder:flatbuffers.Builder, monthlySubRemainTimeLimitDays:number) {
  builder.addFieldInt32(35, monthlySubRemainTimeLimitDays, 0);
}

static addFriendAssistRarityLimit(builder:flatbuffers.Builder, friendAssistRarityLimitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, friendAssistRarityLimitOffset, 0);
}

static createFriendAssistRarityLimitVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createFriendAssistRarityLimitVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createFriendAssistRarityLimitVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startFriendAssistRarityLimitVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMainlineCompatibleDesc(builder:flatbuffers.Builder, mainlineCompatibleDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, mainlineCompatibleDescOffset, 0);
}

static addMainlineToughDesc(builder:flatbuffers.Builder, mainlineToughDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, mainlineToughDescOffset, 0);
}

static addMainlineEasyDesc(builder:flatbuffers.Builder, mainlineEasyDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, mainlineEasyDescOffset, 0);
}

static addMainlineNormalDesc(builder:flatbuffers.Builder, mainlineNormalDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, mainlineNormalDescOffset, 0);
}

static addRejectSpCharMission(builder:flatbuffers.Builder, rejectSpCharMission:bigint) {
  builder.addFieldInt64(41, rejectSpCharMission, BigInt('0'));
}

static addAddedRewardDisplayZone(builder:flatbuffers.Builder, addedRewardDisplayZoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, addedRewardDisplayZoneOffset, 0);
}

static addOneDiamondAp(builder:flatbuffers.Builder, oneDiamondAp:number) {
  builder.addFieldInt32(43, oneDiamondAp, 0);
}

static addCharRotationPresetMaxCnt(builder:flatbuffers.Builder, charRotationPresetMaxCnt:number) {
  builder.addFieldInt32(44, charRotationPresetMaxCnt, 0);
}

static addCharRotationSkinListMaxCnt(builder:flatbuffers.Builder, charRotationSkinListMaxCnt:number) {
  builder.addFieldInt32(45, charRotationSkinListMaxCnt, 0);
}

static addDefaultCrpresetCharId(builder:flatbuffers.Builder, defaultCrpresetCharIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, defaultCrpresetCharIdOffset, 0);
}

static addDefaultCrpresetCharSkinId(builder:flatbuffers.Builder, defaultCrpresetCharSkinIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, defaultCrpresetCharSkinIdOffset, 0);
}

static addDefaultCrpresetBgid(builder:flatbuffers.Builder, defaultCrpresetBgidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, defaultCrpresetBgidOffset, 0);
}

static addDefaultCrpresetThemeId(builder:flatbuffers.Builder, defaultCrpresetThemeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, defaultCrpresetThemeIdOffset, 0);
}

static addDefaultCrpresetName(builder:flatbuffers.Builder, defaultCrpresetNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, defaultCrpresetNameOffset, 0);
}

static addCharRotationPresetTrackTs(builder:flatbuffers.Builder, charRotationPresetTrackTs:bigint) {
  builder.addFieldInt64(51, charRotationPresetTrackTs, BigInt('0'));
}

static addUniequipArchiveSysTrackTs(builder:flatbuffers.Builder, uniequipArchiveSysTrackTs:bigint) {
  builder.addFieldInt64(52, uniequipArchiveSysTrackTs, BigInt('0'));
}

static addManufactPromptTime(builder:flatbuffers.Builder, manufactPromptTime:number) {
  builder.addFieldInt32(53, manufactPromptTime, 0);
}

static addMainGuideActivedStageId(builder:flatbuffers.Builder, mainGuideActivedStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, mainGuideActivedStageIdOffset, 0);
}

static addRichTextStyles(builder:flatbuffers.Builder, richTextStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, richTextStylesOffset, 0);
}

static createRichTextStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRichTextStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharAssistRefreshTime(builder:flatbuffers.Builder, charAssistRefreshTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, charAssistRefreshTimeOffset, 0);
}

static createCharAssistRefreshTimeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharAssistRefreshTimeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNormalRecruitLockedString(builder:flatbuffers.Builder, normalRecruitLockedStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, normalRecruitLockedStringOffset, 0);
}

static createNormalRecruitLockedStringVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNormalRecruitLockedStringVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCommonPotentialLvlUpCount(builder:flatbuffers.Builder, commonPotentialLvlUpCount:number) {
  builder.addFieldInt32(58, commonPotentialLvlUpCount, 0);
}

static addWeeklyOverrideDesc(builder:flatbuffers.Builder, weeklyOverrideDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, weeklyOverrideDescOffset, 0);
}

static addVoucherDiv(builder:flatbuffers.Builder, voucherDiv:number) {
  builder.addFieldInt32(60, voucherDiv, 0);
}

static addRecruitPoolVersion(builder:flatbuffers.Builder, recruitPoolVersion:number) {
  builder.addFieldInt32(61, recruitPoolVersion, 0);
}

static addV006RecruitTimeStep1Refresh(builder:flatbuffers.Builder, v006RecruitTimeStep1Refresh:bigint) {
  builder.addFieldInt64(62, v006RecruitTimeStep1Refresh, BigInt('0'));
}

static addV006RecruitTimeStep2Check(builder:flatbuffers.Builder, v006RecruitTimeStep2Check:bigint) {
  builder.addFieldInt64(63, v006RecruitTimeStep2Check, BigInt('0'));
}

static addV006RecruitTimeStep2Flush(builder:flatbuffers.Builder, v006RecruitTimeStep2Flush:bigint) {
  builder.addFieldInt64(64, v006RecruitTimeStep2Flush, BigInt('0'));
}

static addBuyApTimeNoLimitFlag(builder:flatbuffers.Builder, buyApTimeNoLimitFlag:boolean) {
  builder.addFieldInt8(65, +buyApTimeNoLimitFlag, +false);
}

static addIsLmgtsenabled(builder:flatbuffers.Builder, isLmgtsenabled:boolean) {
  builder.addFieldInt8(66, +isLmgtsenabled, +false);
}

static addLegacyTime(builder:flatbuffers.Builder, legacyTime:bigint) {
  builder.addFieldInt64(67, legacyTime, BigInt('0'));
}

static addLegacyItemList(builder:flatbuffers.Builder, legacyItemListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, legacyItemListOffset, 0);
}

static createLegacyItemListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLegacyItemListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUseAssistSocialPt(builder:flatbuffers.Builder, useAssistSocialPt:number) {
  builder.addFieldInt32(69, useAssistSocialPt, 0);
}

static addUseAssistSocialPtMaxCount(builder:flatbuffers.Builder, useAssistSocialPtMaxCount:number) {
  builder.addFieldInt32(70, useAssistSocialPtMaxCount, 0);
}

static addAssistBeUsedSocialPt(builder:flatbuffers.Builder, assistBeUsedSocialPtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, assistBeUsedSocialPtOffset, 0);
}

static createAssistBeUsedSocialPtVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAssistBeUsedSocialPtVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPushForces(builder:flatbuffers.Builder, pushForcesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, pushForcesOffset, 0);
}

static createPushForcesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPushForcesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPushForcesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startPushForcesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPushForceZeroIndex(builder:flatbuffers.Builder, pushForceZeroIndex:number) {
  builder.addFieldInt32(73, pushForceZeroIndex, 0);
}

static addNormalGachaUnlockPrice(builder:flatbuffers.Builder, normalGachaUnlockPriceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, normalGachaUnlockPriceOffset, 0);
}

static createNormalGachaUnlockPriceVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createNormalGachaUnlockPriceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createNormalGachaUnlockPriceVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startNormalGachaUnlockPriceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPullForces(builder:flatbuffers.Builder, pullForcesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, pullForcesOffset, 0);
}

static createPullForcesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPullForcesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPullForcesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startPullForcesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPullForceZeroIndex(builder:flatbuffers.Builder, pullForceZeroIndex:number) {
  builder.addFieldInt32(76, pullForceZeroIndex, 0);
}

static addMultiInComeByRank(builder:flatbuffers.Builder, multiInComeByRankOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, multiInComeByRankOffset, 0);
}

static createMultiInComeByRankVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMultiInComeByRankVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLmtgstoEpgsratio(builder:flatbuffers.Builder, lmtgstoEpgsratio:number) {
  builder.addFieldInt32(78, lmtgstoEpgsratio, 0);
}

static addNewBeeGiftEpgs(builder:flatbuffers.Builder, newBeeGiftEpgs:number) {
  builder.addFieldInt32(79, newBeeGiftEpgs, 0);
}

static addLMtgsdescConstOne(builder:flatbuffers.Builder, lMtgsdescConstOneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(80, lMtgsdescConstOneOffset, 0);
}

static addLMtgsdescConstTwo(builder:flatbuffers.Builder, lMtgsdescConstTwoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(81, lMtgsdescConstTwoOffset, 0);
}

static addDefCdprimColor(builder:flatbuffers.Builder, defCdprimColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, defCdprimColorOffset, 0);
}

static addDefCdsecColor(builder:flatbuffers.Builder, defCdsecColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, defCdsecColorOffset, 0);
}

static addMailBannerType(builder:flatbuffers.Builder, mailBannerTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, mailBannerTypeOffset, 0);
}

static createMailBannerTypeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMailBannerTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMonthlySubWarningTime(builder:flatbuffers.Builder, monthlySubWarningTime:bigint) {
  builder.addFieldInt64(85, monthlySubWarningTime, BigInt('0'));
}

static addUnlimitSkinOutOfTime(builder:flatbuffers.Builder, unlimitSkinOutOfTime:bigint) {
  builder.addFieldInt64(86, unlimitSkinOutOfTime, BigInt('0'));
}

static addReplicateShopStartTime(builder:flatbuffers.Builder, replicateShopStartTime:bigint) {
  builder.addFieldInt64(87, replicateShopStartTime, BigInt('0'));
}

static addTso(builder:flatbuffers.Builder, tso:bigint) {
  builder.addFieldInt64(88, tso, BigInt('0'));
}

static addIsDynIllustEnabled(builder:flatbuffers.Builder, isDynIllustEnabled:boolean) {
  builder.addFieldInt8(89, +isDynIllustEnabled, +false);
}

static addIsDynIllustStartEnabled(builder:flatbuffers.Builder, isDynIllustStartEnabled:boolean) {
  builder.addFieldInt8(90, +isDynIllustStartEnabled, +false);
}

static addIsClassicQcshopEnabled(builder:flatbuffers.Builder, isClassicQcshopEnabled:boolean) {
  builder.addFieldInt8(91, +isClassicQcshopEnabled, +false);
}

static addIsRoguelikeTopicFuncEnabled(builder:flatbuffers.Builder, isRoguelikeTopicFuncEnabled:boolean) {
  builder.addFieldInt8(92, +isRoguelikeTopicFuncEnabled, +false);
}

static addIsSandboxPermFuncEnabled(builder:flatbuffers.Builder, isSandboxPermFuncEnabled:boolean) {
  builder.addFieldInt8(93, +isSandboxPermFuncEnabled, +false);
}

static addIsRoguelikeAvgAchieveFuncEnabled(builder:flatbuffers.Builder, isRoguelikeAvgAchieveFuncEnabled:boolean) {
  builder.addFieldInt8(94, +isRoguelikeAvgAchieveFuncEnabled, +false);
}

static addIsClassicPotentialItemFuncEnabled(builder:flatbuffers.Builder, isClassicPotentialItemFuncEnabled:boolean) {
  builder.addFieldInt8(95, +isClassicPotentialItemFuncEnabled, +false);
}

static addIsClassicGachaPoolFuncEnabled(builder:flatbuffers.Builder, isClassicGachaPoolFuncEnabled:boolean) {
  builder.addFieldInt8(96, +isClassicGachaPoolFuncEnabled, +false);
}

static addIsSpecialGachaPoolFuncEnabled(builder:flatbuffers.Builder, isSpecialGachaPoolFuncEnabled:boolean) {
  builder.addFieldInt8(97, +isSpecialGachaPoolFuncEnabled, +false);
}

static addIsVoucherClassicItemDistinguishable(builder:flatbuffers.Builder, isVoucherClassicItemDistinguishable:boolean) {
  builder.addFieldInt8(98, +isVoucherClassicItemDistinguishable, +false);
}

static addIsRecalRuneFuncEnabled(builder:flatbuffers.Builder, isRecalRuneFuncEnabled:boolean) {
  builder.addFieldInt8(99, +isRecalRuneFuncEnabled, +false);
}

static addVoucherSkinRedeem(builder:flatbuffers.Builder, voucherSkinRedeem:number) {
  builder.addFieldInt32(100, voucherSkinRedeem, 0);
}

static addVoucherSkinDesc(builder:flatbuffers.Builder, voucherSkinDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(101, voucherSkinDescOffset, 0);
}

static addCharmEquipCount(builder:flatbuffers.Builder, charmEquipCount:number) {
  builder.addFieldInt32(102, charmEquipCount, 0);
}

static addTermDescriptionDict(builder:flatbuffers.Builder, termDescriptionDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(103, termDescriptionDictOffset, 0);
}

static createTermDescriptionDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTermDescriptionDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStoryReviewUnlockItemLackTip(builder:flatbuffers.Builder, storyReviewUnlockItemLackTipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(104, storyReviewUnlockItemLackTipOffset, 0);
}

static addDataVersion(builder:flatbuffers.Builder, dataVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(105, dataVersionOffset, 0);
}

static addResPrefVersion(builder:flatbuffers.Builder, resPrefVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(106, resPrefVersionOffset, 0);
}

static addAnnounceWebBusType(builder:flatbuffers.Builder, announceWebBusTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(107, announceWebBusTypeOffset, 0);
}

static addVideoPlayerWebBusType(builder:flatbuffers.Builder, videoPlayerWebBusTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(108, videoPlayerWebBusTypeOffset, 0);
}

static addGachaLogBusType(builder:flatbuffers.Builder, gachaLogBusTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(109, gachaLogBusTypeOffset, 0);
}

static addDefaultMinMultipleBattleTimes(builder:flatbuffers.Builder, defaultMinMultipleBattleTimes:number) {
  builder.addFieldInt32(110, defaultMinMultipleBattleTimes, 0);
}

static addDefaultMaxMultipleBattleTimes(builder:flatbuffers.Builder, defaultMaxMultipleBattleTimes:number) {
  builder.addFieldInt32(111, defaultMaxMultipleBattleTimes, 0);
}

static addMultipleActionOpen(builder:flatbuffers.Builder, multipleActionOpen:boolean) {
  builder.addFieldInt8(112, +multipleActionOpen, +false);
}

static addSubProfessionDamageTypePairs(builder:flatbuffers.Builder, subProfessionDamageTypePairsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(113, subProfessionDamageTypePairsOffset, 0);
}

static createSubProfessionDamageTypePairsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubProfessionDamageTypePairsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClassicProtectChar(builder:flatbuffers.Builder, classicProtectCharOffset:flatbuffers.Offset) {
  builder.addFieldOffset(114, classicProtectCharOffset, 0);
}

static createClassicProtectCharVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClassicProtectCharVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFeverGameData(builder:flatbuffers.Builder, feverGameDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(115, feverGameDataOffset, 0);
}

static addBirthdaySettingDesc(builder:flatbuffers.Builder, birthdaySettingDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(116, birthdaySettingDescOffset, 0);
}

static addBirthdaySettingConfirmDesc(builder:flatbuffers.Builder, birthdaySettingConfirmDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(117, birthdaySettingConfirmDescOffset, 0);
}

static addBirthdaySettingLeapConfirmDesc(builder:flatbuffers.Builder, birthdaySettingLeapConfirmDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(118, birthdaySettingLeapConfirmDescOffset, 0);
}

static addLeapBirthdayRewardMonth(builder:flatbuffers.Builder, leapBirthdayRewardMonth:number) {
  builder.addFieldInt32(119, leapBirthdayRewardMonth, 0);
}

static addLeapBirthdayRewardDay(builder:flatbuffers.Builder, leapBirthdayRewardDay:number) {
  builder.addFieldInt32(120, leapBirthdayRewardDay, 0);
}

static addBirthdaySettingShowStageId(builder:flatbuffers.Builder, birthdaySettingShowStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(121, birthdaySettingShowStageIdOffset, 0);
}

static addIsBirthdayFuncEnabled(builder:flatbuffers.Builder, isBirthdayFuncEnabled:boolean) {
  builder.addFieldInt8(122, +isBirthdayFuncEnabled, +false);
}

static addIsSoCharEnabled(builder:flatbuffers.Builder, isSoCharEnabled:boolean) {
  builder.addFieldInt8(123, +isSoCharEnabled, +false);
}

static endclz_Torappu_GameDataConsts(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishclz_Torappu_GameDataConstsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedclz_Torappu_GameDataConstsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): clz_Torappu_GameDataConstsT {
  return new clz_Torappu_GameDataConstsT(
    this.maxPlayerLevel(),
    this.bb!.createScalarList<number>(this.playerExpMap.bind(this), this.playerExpMapLength()),
    this.bb!.createScalarList<number>(this.playerApMap.bind(this), this.playerApMapLength()),
    this.bb!.createObjList<list_int, list_intT>(this.maxLevel.bind(this), this.maxLevelLength()),
    this.bb!.createObjList<list_int, list_intT>(this.characterExpMap.bind(this), this.characterExpMapLength()),
    this.bb!.createObjList<list_int, list_intT>(this.characterUpgradeCostMap.bind(this), this.characterUpgradeCostMapLength()),
    this.bb!.createObjList<list_int, list_intT>(this.evolveGoldCost.bind(this), this.evolveGoldCostLength()),
    this.completeGainBonus(),
    this.playerApRegenSpeed(),
    this.maxPracticeTicket(),
    this.advancedGachaCrystalCost(),
    this.completeCrystalBonus(),
    this.initPlayerGold(),
    this.initPlayerDiamondShard(),
    this.initCampaignTotalFee(),
    this.bb!.createScalarList<number>(this.initRecruitTagList.bind(this), this.initRecruitTagListLength()),
    this.bb!.createScalarList<string>(this.initCharIdList.bind(this), this.initCharIdListLength()),
    this.attackMax(),
    this.defMax(),
    this.hpMax(),
    this.reMax(),
    this.diamondToShdRate(),
    this.requestSameFriendCd(),
    this.baseMaxFriendNum(),
    this.maxStarFriendNum(),
    this.maxSquadAssistDisplayNum(),
    this.friendStarEditTrackTs(),
    this.hardDiamondDrop(),
    this.instFinDmdShdCost(),
    this.easyCrystalBonus(),
    this.diamondMaterialToShardExchangeRatio(),
    this.diamondHandbookStageGain(),
    this.apBuyCost(),
    this.apBuyThreshold(),
    this.creditLimit(),
    this.monthlySubRemainTimeLimitDays(),
    this.bb!.createScalarList<number>(this.friendAssistRarityLimit.bind(this), this.friendAssistRarityLimitLength()),
    this.mainlineCompatibleDesc(),
    this.mainlineToughDesc(),
    this.mainlineEasyDesc(),
    this.mainlineNormalDesc(),
    this.rejectSpCharMission(),
    this.addedRewardDisplayZone(),
    this.oneDiamondAp(),
    this.charRotationPresetMaxCnt(),
    this.charRotationSkinListMaxCnt(),
    this.defaultCrpresetCharId(),
    this.defaultCrpresetCharSkinId(),
    this.defaultCrpresetBgid(),
    this.defaultCrpresetThemeId(),
    this.defaultCrpresetName(),
    this.charRotationPresetTrackTs(),
    this.uniequipArchiveSysTrackTs(),
    this.manufactPromptTime(),
    this.mainGuideActivedStageId(),
    this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.richTextStyles.bind(this), this.richTextStylesLength()),
    this.bb!.createObjList<clz_Torappu_GameDataConsts_CharAssistRefreshTimeState, clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateT>(this.charAssistRefreshTime.bind(this), this.charAssistRefreshTimeLength()),
    this.bb!.createScalarList<string>(this.normalRecruitLockedString.bind(this), this.normalRecruitLockedStringLength()),
    this.commonPotentialLvlUpCount(),
    this.weeklyOverrideDesc(),
    this.voucherDiv(),
    this.recruitPoolVersion(),
    this.v006RecruitTimeStep1Refresh(),
    this.v006RecruitTimeStep2Check(),
    this.v006RecruitTimeStep2Flush(),
    this.buyApTimeNoLimitFlag(),
    this.isLmgtsenabled(),
    this.legacyTime(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.legacyItemList.bind(this), this.legacyItemListLength()),
    this.useAssistSocialPt(),
    this.useAssistSocialPtMaxCount(),
    this.bb!.createObjList<dict__int__int, dict__int__intT>(this.assistBeUsedSocialPt.bind(this), this.assistBeUsedSocialPtLength()),
    this.bb!.createScalarList<number>(this.pushForces.bind(this), this.pushForcesLength()),
    this.pushForceZeroIndex(),
    this.bb!.createScalarList<number>(this.normalGachaUnlockPrice.bind(this), this.normalGachaUnlockPriceLength()),
    this.bb!.createScalarList<number>(this.pullForces.bind(this), this.pullForcesLength()),
    this.pullForceZeroIndex(),
    this.bb!.createScalarList<string>(this.multiInComeByRank.bind(this), this.multiInComeByRankLength()),
    this.lmtgstoEpgsratio(),
    this.newBeeGiftEpgs(),
    this.lMtgsdescConstOne(),
    this.lMtgsdescConstTwo(),
    this.defCdprimColor(),
    this.defCdsecColor(),
    this.bb!.createScalarList<string>(this.mailBannerType.bind(this), this.mailBannerTypeLength()),
    this.monthlySubWarningTime(),
    this.unlimitSkinOutOfTime(),
    this.replicateShopStartTime(),
    this.tso(),
    this.isDynIllustEnabled(),
    this.isDynIllustStartEnabled(),
    this.isClassicQcshopEnabled(),
    this.isRoguelikeTopicFuncEnabled(),
    this.isSandboxPermFuncEnabled(),
    this.isRoguelikeAvgAchieveFuncEnabled(),
    this.isClassicPotentialItemFuncEnabled(),
    this.isClassicGachaPoolFuncEnabled(),
    this.isSpecialGachaPoolFuncEnabled(),
    this.isVoucherClassicItemDistinguishable(),
    this.isRecalRuneFuncEnabled(),
    this.voucherSkinRedeem(),
    this.voucherSkinDesc(),
    this.charmEquipCount(),
    this.bb!.createObjList<dict__string__clz_Torappu_TermDescriptionData, dict__string__clz_Torappu_TermDescriptionDataT>(this.termDescriptionDict.bind(this), this.termDescriptionDictLength()),
    this.storyReviewUnlockItemLackTip(),
    this.dataVersion(),
    this.resPrefVersion(),
    this.announceWebBusType(),
    this.videoPlayerWebBusType(),
    this.gachaLogBusType(),
    this.defaultMinMultipleBattleTimes(),
    this.defaultMaxMultipleBattleTimes(),
    this.multipleActionOpen(),
    this.bb!.createObjList<dict__string__enum__Torappu_SubProfessionAttackType, dict__string__enum__Torappu_SubProfessionAttackTypeT>(this.subProfessionDamageTypePairs.bind(this), this.subProfessionDamageTypePairsLength()),
    this.bb!.createScalarList<string>(this.classicProtectChar.bind(this), this.classicProtectCharLength()),
    (this.feverGameData() !== null ? this.feverGameData()!.unpack() : null),
    this.birthdaySettingDesc(),
    this.birthdaySettingConfirmDesc(),
    this.birthdaySettingLeapConfirmDesc(),
    this.leapBirthdayRewardMonth(),
    this.leapBirthdayRewardDay(),
    this.birthdaySettingShowStageId(),
    this.isBirthdayFuncEnabled(),
    this.isSoCharEnabled()
  );
}


unpackTo(_o: clz_Torappu_GameDataConstsT): void {
  _o.maxPlayerLevel = this.maxPlayerLevel();
  _o.playerExpMap = this.bb!.createScalarList<number>(this.playerExpMap.bind(this), this.playerExpMapLength());
  _o.playerApMap = this.bb!.createScalarList<number>(this.playerApMap.bind(this), this.playerApMapLength());
  _o.maxLevel = this.bb!.createObjList<list_int, list_intT>(this.maxLevel.bind(this), this.maxLevelLength());
  _o.characterExpMap = this.bb!.createObjList<list_int, list_intT>(this.characterExpMap.bind(this), this.characterExpMapLength());
  _o.characterUpgradeCostMap = this.bb!.createObjList<list_int, list_intT>(this.characterUpgradeCostMap.bind(this), this.characterUpgradeCostMapLength());
  _o.evolveGoldCost = this.bb!.createObjList<list_int, list_intT>(this.evolveGoldCost.bind(this), this.evolveGoldCostLength());
  _o.completeGainBonus = this.completeGainBonus();
  _o.playerApRegenSpeed = this.playerApRegenSpeed();
  _o.maxPracticeTicket = this.maxPracticeTicket();
  _o.advancedGachaCrystalCost = this.advancedGachaCrystalCost();
  _o.completeCrystalBonus = this.completeCrystalBonus();
  _o.initPlayerGold = this.initPlayerGold();
  _o.initPlayerDiamondShard = this.initPlayerDiamondShard();
  _o.initCampaignTotalFee = this.initCampaignTotalFee();
  _o.initRecruitTagList = this.bb!.createScalarList<number>(this.initRecruitTagList.bind(this), this.initRecruitTagListLength());
  _o.initCharIdList = this.bb!.createScalarList<string>(this.initCharIdList.bind(this), this.initCharIdListLength());
  _o.attackMax = this.attackMax();
  _o.defMax = this.defMax();
  _o.hpMax = this.hpMax();
  _o.reMax = this.reMax();
  _o.diamondToShdRate = this.diamondToShdRate();
  _o.requestSameFriendCd = this.requestSameFriendCd();
  _o.baseMaxFriendNum = this.baseMaxFriendNum();
  _o.maxStarFriendNum = this.maxStarFriendNum();
  _o.maxSquadAssistDisplayNum = this.maxSquadAssistDisplayNum();
  _o.friendStarEditTrackTs = this.friendStarEditTrackTs();
  _o.hardDiamondDrop = this.hardDiamondDrop();
  _o.instFinDmdShdCost = this.instFinDmdShdCost();
  _o.easyCrystalBonus = this.easyCrystalBonus();
  _o.diamondMaterialToShardExchangeRatio = this.diamondMaterialToShardExchangeRatio();
  _o.diamondHandbookStageGain = this.diamondHandbookStageGain();
  _o.apBuyCost = this.apBuyCost();
  _o.apBuyThreshold = this.apBuyThreshold();
  _o.creditLimit = this.creditLimit();
  _o.monthlySubRemainTimeLimitDays = this.monthlySubRemainTimeLimitDays();
  _o.friendAssistRarityLimit = this.bb!.createScalarList<number>(this.friendAssistRarityLimit.bind(this), this.friendAssistRarityLimitLength());
  _o.mainlineCompatibleDesc = this.mainlineCompatibleDesc();
  _o.mainlineToughDesc = this.mainlineToughDesc();
  _o.mainlineEasyDesc = this.mainlineEasyDesc();
  _o.mainlineNormalDesc = this.mainlineNormalDesc();
  _o.rejectSpCharMission = this.rejectSpCharMission();
  _o.addedRewardDisplayZone = this.addedRewardDisplayZone();
  _o.oneDiamondAp = this.oneDiamondAp();
  _o.charRotationPresetMaxCnt = this.charRotationPresetMaxCnt();
  _o.charRotationSkinListMaxCnt = this.charRotationSkinListMaxCnt();
  _o.defaultCrpresetCharId = this.defaultCrpresetCharId();
  _o.defaultCrpresetCharSkinId = this.defaultCrpresetCharSkinId();
  _o.defaultCrpresetBgid = this.defaultCrpresetBgid();
  _o.defaultCrpresetThemeId = this.defaultCrpresetThemeId();
  _o.defaultCrpresetName = this.defaultCrpresetName();
  _o.charRotationPresetTrackTs = this.charRotationPresetTrackTs();
  _o.uniequipArchiveSysTrackTs = this.uniequipArchiveSysTrackTs();
  _o.manufactPromptTime = this.manufactPromptTime();
  _o.mainGuideActivedStageId = this.mainGuideActivedStageId();
  _o.richTextStyles = this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.richTextStyles.bind(this), this.richTextStylesLength());
  _o.charAssistRefreshTime = this.bb!.createObjList<clz_Torappu_GameDataConsts_CharAssistRefreshTimeState, clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateT>(this.charAssistRefreshTime.bind(this), this.charAssistRefreshTimeLength());
  _o.normalRecruitLockedString = this.bb!.createScalarList<string>(this.normalRecruitLockedString.bind(this), this.normalRecruitLockedStringLength());
  _o.commonPotentialLvlUpCount = this.commonPotentialLvlUpCount();
  _o.weeklyOverrideDesc = this.weeklyOverrideDesc();
  _o.voucherDiv = this.voucherDiv();
  _o.recruitPoolVersion = this.recruitPoolVersion();
  _o.v006RecruitTimeStep1Refresh = this.v006RecruitTimeStep1Refresh();
  _o.v006RecruitTimeStep2Check = this.v006RecruitTimeStep2Check();
  _o.v006RecruitTimeStep2Flush = this.v006RecruitTimeStep2Flush();
  _o.buyApTimeNoLimitFlag = this.buyApTimeNoLimitFlag();
  _o.isLmgtsenabled = this.isLmgtsenabled();
  _o.legacyTime = this.legacyTime();
  _o.legacyItemList = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.legacyItemList.bind(this), this.legacyItemListLength());
  _o.useAssistSocialPt = this.useAssistSocialPt();
  _o.useAssistSocialPtMaxCount = this.useAssistSocialPtMaxCount();
  _o.assistBeUsedSocialPt = this.bb!.createObjList<dict__int__int, dict__int__intT>(this.assistBeUsedSocialPt.bind(this), this.assistBeUsedSocialPtLength());
  _o.pushForces = this.bb!.createScalarList<number>(this.pushForces.bind(this), this.pushForcesLength());
  _o.pushForceZeroIndex = this.pushForceZeroIndex();
  _o.normalGachaUnlockPrice = this.bb!.createScalarList<number>(this.normalGachaUnlockPrice.bind(this), this.normalGachaUnlockPriceLength());
  _o.pullForces = this.bb!.createScalarList<number>(this.pullForces.bind(this), this.pullForcesLength());
  _o.pullForceZeroIndex = this.pullForceZeroIndex();
  _o.multiInComeByRank = this.bb!.createScalarList<string>(this.multiInComeByRank.bind(this), this.multiInComeByRankLength());
  _o.lmtgstoEpgsratio = this.lmtgstoEpgsratio();
  _o.newBeeGiftEpgs = this.newBeeGiftEpgs();
  _o.lMtgsdescConstOne = this.lMtgsdescConstOne();
  _o.lMtgsdescConstTwo = this.lMtgsdescConstTwo();
  _o.defCdprimColor = this.defCdprimColor();
  _o.defCdsecColor = this.defCdsecColor();
  _o.mailBannerType = this.bb!.createScalarList<string>(this.mailBannerType.bind(this), this.mailBannerTypeLength());
  _o.monthlySubWarningTime = this.monthlySubWarningTime();
  _o.unlimitSkinOutOfTime = this.unlimitSkinOutOfTime();
  _o.replicateShopStartTime = this.replicateShopStartTime();
  _o.tso = this.tso();
  _o.isDynIllustEnabled = this.isDynIllustEnabled();
  _o.isDynIllustStartEnabled = this.isDynIllustStartEnabled();
  _o.isClassicQcshopEnabled = this.isClassicQcshopEnabled();
  _o.isRoguelikeTopicFuncEnabled = this.isRoguelikeTopicFuncEnabled();
  _o.isSandboxPermFuncEnabled = this.isSandboxPermFuncEnabled();
  _o.isRoguelikeAvgAchieveFuncEnabled = this.isRoguelikeAvgAchieveFuncEnabled();
  _o.isClassicPotentialItemFuncEnabled = this.isClassicPotentialItemFuncEnabled();
  _o.isClassicGachaPoolFuncEnabled = this.isClassicGachaPoolFuncEnabled();
  _o.isSpecialGachaPoolFuncEnabled = this.isSpecialGachaPoolFuncEnabled();
  _o.isVoucherClassicItemDistinguishable = this.isVoucherClassicItemDistinguishable();
  _o.isRecalRuneFuncEnabled = this.isRecalRuneFuncEnabled();
  _o.voucherSkinRedeem = this.voucherSkinRedeem();
  _o.voucherSkinDesc = this.voucherSkinDesc();
  _o.charmEquipCount = this.charmEquipCount();
  _o.termDescriptionDict = this.bb!.createObjList<dict__string__clz_Torappu_TermDescriptionData, dict__string__clz_Torappu_TermDescriptionDataT>(this.termDescriptionDict.bind(this), this.termDescriptionDictLength());
  _o.storyReviewUnlockItemLackTip = this.storyReviewUnlockItemLackTip();
  _o.dataVersion = this.dataVersion();
  _o.resPrefVersion = this.resPrefVersion();
  _o.announceWebBusType = this.announceWebBusType();
  _o.videoPlayerWebBusType = this.videoPlayerWebBusType();
  _o.gachaLogBusType = this.gachaLogBusType();
  _o.defaultMinMultipleBattleTimes = this.defaultMinMultipleBattleTimes();
  _o.defaultMaxMultipleBattleTimes = this.defaultMaxMultipleBattleTimes();
  _o.multipleActionOpen = this.multipleActionOpen();
  _o.subProfessionDamageTypePairs = this.bb!.createObjList<dict__string__enum__Torappu_SubProfessionAttackType, dict__string__enum__Torappu_SubProfessionAttackTypeT>(this.subProfessionDamageTypePairs.bind(this), this.subProfessionDamageTypePairsLength());
  _o.classicProtectChar = this.bb!.createScalarList<string>(this.classicProtectChar.bind(this), this.classicProtectCharLength());
  _o.feverGameData = (this.feverGameData() !== null ? this.feverGameData()!.unpack() : null);
  _o.birthdaySettingDesc = this.birthdaySettingDesc();
  _o.birthdaySettingConfirmDesc = this.birthdaySettingConfirmDesc();
  _o.birthdaySettingLeapConfirmDesc = this.birthdaySettingLeapConfirmDesc();
  _o.leapBirthdayRewardMonth = this.leapBirthdayRewardMonth();
  _o.leapBirthdayRewardDay = this.leapBirthdayRewardDay();
  _o.birthdaySettingShowStageId = this.birthdaySettingShowStageId();
  _o.isBirthdayFuncEnabled = this.isBirthdayFuncEnabled();
  _o.isSoCharEnabled = this.isSoCharEnabled();
}
}

export class clz_Torappu_GameDataConstsT implements flatbuffers.IGeneratedObject {
constructor(
  public maxPlayerLevel: number = 0,
  public playerExpMap: (number)[] = [],
  public playerApMap: (number)[] = [],
  public maxLevel: (list_intT)[] = [],
  public characterExpMap: (list_intT)[] = [],
  public characterUpgradeCostMap: (list_intT)[] = [],
  public evolveGoldCost: (list_intT)[] = [],
  public completeGainBonus: number = 0.0,
  public playerApRegenSpeed: number = 0,
  public maxPracticeTicket: number = 0,
  public advancedGachaCrystalCost: number = 0,
  public completeCrystalBonus: number = 0,
  public initPlayerGold: number = 0,
  public initPlayerDiamondShard: number = 0,
  public initCampaignTotalFee: number = 0,
  public initRecruitTagList: (number)[] = [],
  public initCharIdList: (string)[] = [],
  public attackMax: number = 0.0,
  public defMax: number = 0.0,
  public hpMax: number = 0.0,
  public reMax: number = 0.0,
  public diamondToShdRate: number = 0,
  public requestSameFriendCd: number = 0,
  public baseMaxFriendNum: number = 0,
  public maxStarFriendNum: number = 0,
  public maxSquadAssistDisplayNum: number = 0,
  public friendStarEditTrackTs: bigint = BigInt('0'),
  public hardDiamondDrop: number = 0,
  public instFinDmdShdCost: number = 0,
  public easyCrystalBonus: number = 0,
  public diamondMaterialToShardExchangeRatio: number = 0,
  public diamondHandbookStageGain: number = 0,
  public apBuyCost: number = 0,
  public apBuyThreshold: number = 0,
  public creditLimit: number = 0,
  public monthlySubRemainTimeLimitDays: number = 0,
  public friendAssistRarityLimit: (number)[] = [],
  public mainlineCompatibleDesc: string|Uint8Array|null = null,
  public mainlineToughDesc: string|Uint8Array|null = null,
  public mainlineEasyDesc: string|Uint8Array|null = null,
  public mainlineNormalDesc: string|Uint8Array|null = null,
  public rejectSpCharMission: bigint = BigInt('0'),
  public addedRewardDisplayZone: string|Uint8Array|null = null,
  public oneDiamondAp: number = 0,
  public charRotationPresetMaxCnt: number = 0,
  public charRotationSkinListMaxCnt: number = 0,
  public defaultCrpresetCharId: string|Uint8Array|null = null,
  public defaultCrpresetCharSkinId: string|Uint8Array|null = null,
  public defaultCrpresetBgid: string|Uint8Array|null = null,
  public defaultCrpresetThemeId: string|Uint8Array|null = null,
  public defaultCrpresetName: string|Uint8Array|null = null,
  public charRotationPresetTrackTs: bigint = BigInt('0'),
  public uniequipArchiveSysTrackTs: bigint = BigInt('0'),
  public manufactPromptTime: number = 0,
  public mainGuideActivedStageId: string|Uint8Array|null = null,
  public richTextStyles: (dict__string__stringT)[] = [],
  public charAssistRefreshTime: (clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateT)[] = [],
  public normalRecruitLockedString: (string)[] = [],
  public commonPotentialLvlUpCount: number = 0,
  public weeklyOverrideDesc: string|Uint8Array|null = null,
  public voucherDiv: number = 0,
  public recruitPoolVersion: number = 0,
  public v006RecruitTimeStep1Refresh: bigint = BigInt('0'),
  public v006RecruitTimeStep2Check: bigint = BigInt('0'),
  public v006RecruitTimeStep2Flush: bigint = BigInt('0'),
  public buyApTimeNoLimitFlag: boolean = false,
  public isLmgtsenabled: boolean = false,
  public legacyTime: bigint = BigInt('0'),
  public legacyItemList: (clz_Torappu_ItemBundleT)[] = [],
  public useAssistSocialPt: number = 0,
  public useAssistSocialPtMaxCount: number = 0,
  public assistBeUsedSocialPt: (dict__int__intT)[] = [],
  public pushForces: (number)[] = [],
  public pushForceZeroIndex: number = 0,
  public normalGachaUnlockPrice: (number)[] = [],
  public pullForces: (number)[] = [],
  public pullForceZeroIndex: number = 0,
  public multiInComeByRank: (string)[] = [],
  public lmtgstoEpgsratio: number = 0,
  public newBeeGiftEpgs: number = 0,
  public lMtgsdescConstOne: string|Uint8Array|null = null,
  public lMtgsdescConstTwo: string|Uint8Array|null = null,
  public defCdprimColor: string|Uint8Array|null = null,
  public defCdsecColor: string|Uint8Array|null = null,
  public mailBannerType: (string)[] = [],
  public monthlySubWarningTime: bigint = BigInt('0'),
  public unlimitSkinOutOfTime: bigint = BigInt('0'),
  public replicateShopStartTime: bigint = BigInt('0'),
  public tso: bigint = BigInt('0'),
  public isDynIllustEnabled: boolean = false,
  public isDynIllustStartEnabled: boolean = false,
  public isClassicQcshopEnabled: boolean = false,
  public isRoguelikeTopicFuncEnabled: boolean = false,
  public isSandboxPermFuncEnabled: boolean = false,
  public isRoguelikeAvgAchieveFuncEnabled: boolean = false,
  public isClassicPotentialItemFuncEnabled: boolean = false,
  public isClassicGachaPoolFuncEnabled: boolean = false,
  public isSpecialGachaPoolFuncEnabled: boolean = false,
  public isVoucherClassicItemDistinguishable: boolean = false,
  public isRecalRuneFuncEnabled: boolean = false,
  public voucherSkinRedeem: number = 0,
  public voucherSkinDesc: string|Uint8Array|null = null,
  public charmEquipCount: number = 0,
  public termDescriptionDict: (dict__string__clz_Torappu_TermDescriptionDataT)[] = [],
  public storyReviewUnlockItemLackTip: string|Uint8Array|null = null,
  public dataVersion: string|Uint8Array|null = null,
  public resPrefVersion: string|Uint8Array|null = null,
  public announceWebBusType: string|Uint8Array|null = null,
  public videoPlayerWebBusType: string|Uint8Array|null = null,
  public gachaLogBusType: string|Uint8Array|null = null,
  public defaultMinMultipleBattleTimes: number = 0,
  public defaultMaxMultipleBattleTimes: number = 0,
  public multipleActionOpen: boolean = false,
  public subProfessionDamageTypePairs: (dict__string__enum__Torappu_SubProfessionAttackTypeT)[] = [],
  public classicProtectChar: (string)[] = [],
  public feverGameData: clz_Torappu_GameDataConsts_FeverGameDataT|null = null,
  public birthdaySettingDesc: string|Uint8Array|null = null,
  public birthdaySettingConfirmDesc: string|Uint8Array|null = null,
  public birthdaySettingLeapConfirmDesc: string|Uint8Array|null = null,
  public leapBirthdayRewardMonth: number = 0,
  public leapBirthdayRewardDay: number = 0,
  public birthdaySettingShowStageId: string|Uint8Array|null = null,
  public isBirthdayFuncEnabled: boolean = false,
  public isSoCharEnabled: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const playerExpMap = clz_Torappu_GameDataConsts.createPlayerExpMapVector(builder, this.playerExpMap);
  const playerApMap = clz_Torappu_GameDataConsts.createPlayerApMapVector(builder, this.playerApMap);
  const maxLevel = clz_Torappu_GameDataConsts.createMaxLevelVector(builder, builder.createObjectOffsetList(this.maxLevel));
  const characterExpMap = clz_Torappu_GameDataConsts.createCharacterExpMapVector(builder, builder.createObjectOffsetList(this.characterExpMap));
  const characterUpgradeCostMap = clz_Torappu_GameDataConsts.createCharacterUpgradeCostMapVector(builder, builder.createObjectOffsetList(this.characterUpgradeCostMap));
  const evolveGoldCost = clz_Torappu_GameDataConsts.createEvolveGoldCostVector(builder, builder.createObjectOffsetList(this.evolveGoldCost));
  const initRecruitTagList = clz_Torappu_GameDataConsts.createInitRecruitTagListVector(builder, this.initRecruitTagList);
  const initCharIdList = clz_Torappu_GameDataConsts.createInitCharIdListVector(builder, builder.createObjectOffsetList(this.initCharIdList));
  const friendAssistRarityLimit = clz_Torappu_GameDataConsts.createFriendAssistRarityLimitVector(builder, this.friendAssistRarityLimit);
  const mainlineCompatibleDesc = (this.mainlineCompatibleDesc !== null ? builder.createString(this.mainlineCompatibleDesc!) : 0);
  const mainlineToughDesc = (this.mainlineToughDesc !== null ? builder.createString(this.mainlineToughDesc!) : 0);
  const mainlineEasyDesc = (this.mainlineEasyDesc !== null ? builder.createString(this.mainlineEasyDesc!) : 0);
  const mainlineNormalDesc = (this.mainlineNormalDesc !== null ? builder.createString(this.mainlineNormalDesc!) : 0);
  const addedRewardDisplayZone = (this.addedRewardDisplayZone !== null ? builder.createString(this.addedRewardDisplayZone!) : 0);
  const defaultCrpresetCharId = (this.defaultCrpresetCharId !== null ? builder.createString(this.defaultCrpresetCharId!) : 0);
  const defaultCrpresetCharSkinId = (this.defaultCrpresetCharSkinId !== null ? builder.createString(this.defaultCrpresetCharSkinId!) : 0);
  const defaultCrpresetBgid = (this.defaultCrpresetBgid !== null ? builder.createString(this.defaultCrpresetBgid!) : 0);
  const defaultCrpresetThemeId = (this.defaultCrpresetThemeId !== null ? builder.createString(this.defaultCrpresetThemeId!) : 0);
  const defaultCrpresetName = (this.defaultCrpresetName !== null ? builder.createString(this.defaultCrpresetName!) : 0);
  const mainGuideActivedStageId = (this.mainGuideActivedStageId !== null ? builder.createString(this.mainGuideActivedStageId!) : 0);
  const richTextStyles = clz_Torappu_GameDataConsts.createRichTextStylesVector(builder, builder.createObjectOffsetList(this.richTextStyles));
  const charAssistRefreshTime = clz_Torappu_GameDataConsts.createCharAssistRefreshTimeVector(builder, builder.createObjectOffsetList(this.charAssistRefreshTime));
  const normalRecruitLockedString = clz_Torappu_GameDataConsts.createNormalRecruitLockedStringVector(builder, builder.createObjectOffsetList(this.normalRecruitLockedString));
  const weeklyOverrideDesc = (this.weeklyOverrideDesc !== null ? builder.createString(this.weeklyOverrideDesc!) : 0);
  const legacyItemList = clz_Torappu_GameDataConsts.createLegacyItemListVector(builder, builder.createObjectOffsetList(this.legacyItemList));
  const assistBeUsedSocialPt = clz_Torappu_GameDataConsts.createAssistBeUsedSocialPtVector(builder, builder.createObjectOffsetList(this.assistBeUsedSocialPt));
  const pushForces = clz_Torappu_GameDataConsts.createPushForcesVector(builder, this.pushForces);
  const normalGachaUnlockPrice = clz_Torappu_GameDataConsts.createNormalGachaUnlockPriceVector(builder, this.normalGachaUnlockPrice);
  const pullForces = clz_Torappu_GameDataConsts.createPullForcesVector(builder, this.pullForces);
  const multiInComeByRank = clz_Torappu_GameDataConsts.createMultiInComeByRankVector(builder, builder.createObjectOffsetList(this.multiInComeByRank));
  const lMtgsdescConstOne = (this.lMtgsdescConstOne !== null ? builder.createString(this.lMtgsdescConstOne!) : 0);
  const lMtgsdescConstTwo = (this.lMtgsdescConstTwo !== null ? builder.createString(this.lMtgsdescConstTwo!) : 0);
  const defCdprimColor = (this.defCdprimColor !== null ? builder.createString(this.defCdprimColor!) : 0);
  const defCdsecColor = (this.defCdsecColor !== null ? builder.createString(this.defCdsecColor!) : 0);
  const mailBannerType = clz_Torappu_GameDataConsts.createMailBannerTypeVector(builder, builder.createObjectOffsetList(this.mailBannerType));
  const voucherSkinDesc = (this.voucherSkinDesc !== null ? builder.createString(this.voucherSkinDesc!) : 0);
  const termDescriptionDict = clz_Torappu_GameDataConsts.createTermDescriptionDictVector(builder, builder.createObjectOffsetList(this.termDescriptionDict));
  const storyReviewUnlockItemLackTip = (this.storyReviewUnlockItemLackTip !== null ? builder.createString(this.storyReviewUnlockItemLackTip!) : 0);
  const dataVersion = (this.dataVersion !== null ? builder.createString(this.dataVersion!) : 0);
  const resPrefVersion = (this.resPrefVersion !== null ? builder.createString(this.resPrefVersion!) : 0);
  const announceWebBusType = (this.announceWebBusType !== null ? builder.createString(this.announceWebBusType!) : 0);
  const videoPlayerWebBusType = (this.videoPlayerWebBusType !== null ? builder.createString(this.videoPlayerWebBusType!) : 0);
  const gachaLogBusType = (this.gachaLogBusType !== null ? builder.createString(this.gachaLogBusType!) : 0);
  const subProfessionDamageTypePairs = clz_Torappu_GameDataConsts.createSubProfessionDamageTypePairsVector(builder, builder.createObjectOffsetList(this.subProfessionDamageTypePairs));
  const classicProtectChar = clz_Torappu_GameDataConsts.createClassicProtectCharVector(builder, builder.createObjectOffsetList(this.classicProtectChar));
  const feverGameData = (this.feverGameData !== null ? this.feverGameData!.pack(builder) : 0);
  const birthdaySettingDesc = (this.birthdaySettingDesc !== null ? builder.createString(this.birthdaySettingDesc!) : 0);
  const birthdaySettingConfirmDesc = (this.birthdaySettingConfirmDesc !== null ? builder.createString(this.birthdaySettingConfirmDesc!) : 0);
  const birthdaySettingLeapConfirmDesc = (this.birthdaySettingLeapConfirmDesc !== null ? builder.createString(this.birthdaySettingLeapConfirmDesc!) : 0);
  const birthdaySettingShowStageId = (this.birthdaySettingShowStageId !== null ? builder.createString(this.birthdaySettingShowStageId!) : 0);

  clz_Torappu_GameDataConsts.startclz_Torappu_GameDataConsts(builder);
  clz_Torappu_GameDataConsts.addMaxPlayerLevel(builder, this.maxPlayerLevel);
  clz_Torappu_GameDataConsts.addPlayerExpMap(builder, playerExpMap);
  clz_Torappu_GameDataConsts.addPlayerApMap(builder, playerApMap);
  clz_Torappu_GameDataConsts.addMaxLevel(builder, maxLevel);
  clz_Torappu_GameDataConsts.addCharacterExpMap(builder, characterExpMap);
  clz_Torappu_GameDataConsts.addCharacterUpgradeCostMap(builder, characterUpgradeCostMap);
  clz_Torappu_GameDataConsts.addEvolveGoldCost(builder, evolveGoldCost);
  clz_Torappu_GameDataConsts.addCompleteGainBonus(builder, this.completeGainBonus);
  clz_Torappu_GameDataConsts.addPlayerApRegenSpeed(builder, this.playerApRegenSpeed);
  clz_Torappu_GameDataConsts.addMaxPracticeTicket(builder, this.maxPracticeTicket);
  clz_Torappu_GameDataConsts.addAdvancedGachaCrystalCost(builder, this.advancedGachaCrystalCost);
  clz_Torappu_GameDataConsts.addCompleteCrystalBonus(builder, this.completeCrystalBonus);
  clz_Torappu_GameDataConsts.addInitPlayerGold(builder, this.initPlayerGold);
  clz_Torappu_GameDataConsts.addInitPlayerDiamondShard(builder, this.initPlayerDiamondShard);
  clz_Torappu_GameDataConsts.addInitCampaignTotalFee(builder, this.initCampaignTotalFee);
  clz_Torappu_GameDataConsts.addInitRecruitTagList(builder, initRecruitTagList);
  clz_Torappu_GameDataConsts.addInitCharIdList(builder, initCharIdList);
  clz_Torappu_GameDataConsts.addAttackMax(builder, this.attackMax);
  clz_Torappu_GameDataConsts.addDefMax(builder, this.defMax);
  clz_Torappu_GameDataConsts.addHpMax(builder, this.hpMax);
  clz_Torappu_GameDataConsts.addReMax(builder, this.reMax);
  clz_Torappu_GameDataConsts.addDiamondToShdRate(builder, this.diamondToShdRate);
  clz_Torappu_GameDataConsts.addRequestSameFriendCd(builder, this.requestSameFriendCd);
  clz_Torappu_GameDataConsts.addBaseMaxFriendNum(builder, this.baseMaxFriendNum);
  clz_Torappu_GameDataConsts.addMaxStarFriendNum(builder, this.maxStarFriendNum);
  clz_Torappu_GameDataConsts.addMaxSquadAssistDisplayNum(builder, this.maxSquadAssistDisplayNum);
  clz_Torappu_GameDataConsts.addFriendStarEditTrackTs(builder, this.friendStarEditTrackTs);
  clz_Torappu_GameDataConsts.addHardDiamondDrop(builder, this.hardDiamondDrop);
  clz_Torappu_GameDataConsts.addInstFinDmdShdCost(builder, this.instFinDmdShdCost);
  clz_Torappu_GameDataConsts.addEasyCrystalBonus(builder, this.easyCrystalBonus);
  clz_Torappu_GameDataConsts.addDiamondMaterialToShardExchangeRatio(builder, this.diamondMaterialToShardExchangeRatio);
  clz_Torappu_GameDataConsts.addDiamondHandbookStageGain(builder, this.diamondHandbookStageGain);
  clz_Torappu_GameDataConsts.addApBuyCost(builder, this.apBuyCost);
  clz_Torappu_GameDataConsts.addApBuyThreshold(builder, this.apBuyThreshold);
  clz_Torappu_GameDataConsts.addCreditLimit(builder, this.creditLimit);
  clz_Torappu_GameDataConsts.addMonthlySubRemainTimeLimitDays(builder, this.monthlySubRemainTimeLimitDays);
  clz_Torappu_GameDataConsts.addFriendAssistRarityLimit(builder, friendAssistRarityLimit);
  clz_Torappu_GameDataConsts.addMainlineCompatibleDesc(builder, mainlineCompatibleDesc);
  clz_Torappu_GameDataConsts.addMainlineToughDesc(builder, mainlineToughDesc);
  clz_Torappu_GameDataConsts.addMainlineEasyDesc(builder, mainlineEasyDesc);
  clz_Torappu_GameDataConsts.addMainlineNormalDesc(builder, mainlineNormalDesc);
  clz_Torappu_GameDataConsts.addRejectSpCharMission(builder, this.rejectSpCharMission);
  clz_Torappu_GameDataConsts.addAddedRewardDisplayZone(builder, addedRewardDisplayZone);
  clz_Torappu_GameDataConsts.addOneDiamondAp(builder, this.oneDiamondAp);
  clz_Torappu_GameDataConsts.addCharRotationPresetMaxCnt(builder, this.charRotationPresetMaxCnt);
  clz_Torappu_GameDataConsts.addCharRotationSkinListMaxCnt(builder, this.charRotationSkinListMaxCnt);
  clz_Torappu_GameDataConsts.addDefaultCrpresetCharId(builder, defaultCrpresetCharId);
  clz_Torappu_GameDataConsts.addDefaultCrpresetCharSkinId(builder, defaultCrpresetCharSkinId);
  clz_Torappu_GameDataConsts.addDefaultCrpresetBgid(builder, defaultCrpresetBgid);
  clz_Torappu_GameDataConsts.addDefaultCrpresetThemeId(builder, defaultCrpresetThemeId);
  clz_Torappu_GameDataConsts.addDefaultCrpresetName(builder, defaultCrpresetName);
  clz_Torappu_GameDataConsts.addCharRotationPresetTrackTs(builder, this.charRotationPresetTrackTs);
  clz_Torappu_GameDataConsts.addUniequipArchiveSysTrackTs(builder, this.uniequipArchiveSysTrackTs);
  clz_Torappu_GameDataConsts.addManufactPromptTime(builder, this.manufactPromptTime);
  clz_Torappu_GameDataConsts.addMainGuideActivedStageId(builder, mainGuideActivedStageId);
  clz_Torappu_GameDataConsts.addRichTextStyles(builder, richTextStyles);
  clz_Torappu_GameDataConsts.addCharAssistRefreshTime(builder, charAssistRefreshTime);
  clz_Torappu_GameDataConsts.addNormalRecruitLockedString(builder, normalRecruitLockedString);
  clz_Torappu_GameDataConsts.addCommonPotentialLvlUpCount(builder, this.commonPotentialLvlUpCount);
  clz_Torappu_GameDataConsts.addWeeklyOverrideDesc(builder, weeklyOverrideDesc);
  clz_Torappu_GameDataConsts.addVoucherDiv(builder, this.voucherDiv);
  clz_Torappu_GameDataConsts.addRecruitPoolVersion(builder, this.recruitPoolVersion);
  clz_Torappu_GameDataConsts.addV006RecruitTimeStep1Refresh(builder, this.v006RecruitTimeStep1Refresh);
  clz_Torappu_GameDataConsts.addV006RecruitTimeStep2Check(builder, this.v006RecruitTimeStep2Check);
  clz_Torappu_GameDataConsts.addV006RecruitTimeStep2Flush(builder, this.v006RecruitTimeStep2Flush);
  clz_Torappu_GameDataConsts.addBuyApTimeNoLimitFlag(builder, this.buyApTimeNoLimitFlag);
  clz_Torappu_GameDataConsts.addIsLmgtsenabled(builder, this.isLmgtsenabled);
  clz_Torappu_GameDataConsts.addLegacyTime(builder, this.legacyTime);
  clz_Torappu_GameDataConsts.addLegacyItemList(builder, legacyItemList);
  clz_Torappu_GameDataConsts.addUseAssistSocialPt(builder, this.useAssistSocialPt);
  clz_Torappu_GameDataConsts.addUseAssistSocialPtMaxCount(builder, this.useAssistSocialPtMaxCount);
  clz_Torappu_GameDataConsts.addAssistBeUsedSocialPt(builder, assistBeUsedSocialPt);
  clz_Torappu_GameDataConsts.addPushForces(builder, pushForces);
  clz_Torappu_GameDataConsts.addPushForceZeroIndex(builder, this.pushForceZeroIndex);
  clz_Torappu_GameDataConsts.addNormalGachaUnlockPrice(builder, normalGachaUnlockPrice);
  clz_Torappu_GameDataConsts.addPullForces(builder, pullForces);
  clz_Torappu_GameDataConsts.addPullForceZeroIndex(builder, this.pullForceZeroIndex);
  clz_Torappu_GameDataConsts.addMultiInComeByRank(builder, multiInComeByRank);
  clz_Torappu_GameDataConsts.addLmtgstoEpgsratio(builder, this.lmtgstoEpgsratio);
  clz_Torappu_GameDataConsts.addNewBeeGiftEpgs(builder, this.newBeeGiftEpgs);
  clz_Torappu_GameDataConsts.addLMtgsdescConstOne(builder, lMtgsdescConstOne);
  clz_Torappu_GameDataConsts.addLMtgsdescConstTwo(builder, lMtgsdescConstTwo);
  clz_Torappu_GameDataConsts.addDefCdprimColor(builder, defCdprimColor);
  clz_Torappu_GameDataConsts.addDefCdsecColor(builder, defCdsecColor);
  clz_Torappu_GameDataConsts.addMailBannerType(builder, mailBannerType);
  clz_Torappu_GameDataConsts.addMonthlySubWarningTime(builder, this.monthlySubWarningTime);
  clz_Torappu_GameDataConsts.addUnlimitSkinOutOfTime(builder, this.unlimitSkinOutOfTime);
  clz_Torappu_GameDataConsts.addReplicateShopStartTime(builder, this.replicateShopStartTime);
  clz_Torappu_GameDataConsts.addTso(builder, this.tso);
  clz_Torappu_GameDataConsts.addIsDynIllustEnabled(builder, this.isDynIllustEnabled);
  clz_Torappu_GameDataConsts.addIsDynIllustStartEnabled(builder, this.isDynIllustStartEnabled);
  clz_Torappu_GameDataConsts.addIsClassicQcshopEnabled(builder, this.isClassicQcshopEnabled);
  clz_Torappu_GameDataConsts.addIsRoguelikeTopicFuncEnabled(builder, this.isRoguelikeTopicFuncEnabled);
  clz_Torappu_GameDataConsts.addIsSandboxPermFuncEnabled(builder, this.isSandboxPermFuncEnabled);
  clz_Torappu_GameDataConsts.addIsRoguelikeAvgAchieveFuncEnabled(builder, this.isRoguelikeAvgAchieveFuncEnabled);
  clz_Torappu_GameDataConsts.addIsClassicPotentialItemFuncEnabled(builder, this.isClassicPotentialItemFuncEnabled);
  clz_Torappu_GameDataConsts.addIsClassicGachaPoolFuncEnabled(builder, this.isClassicGachaPoolFuncEnabled);
  clz_Torappu_GameDataConsts.addIsSpecialGachaPoolFuncEnabled(builder, this.isSpecialGachaPoolFuncEnabled);
  clz_Torappu_GameDataConsts.addIsVoucherClassicItemDistinguishable(builder, this.isVoucherClassicItemDistinguishable);
  clz_Torappu_GameDataConsts.addIsRecalRuneFuncEnabled(builder, this.isRecalRuneFuncEnabled);
  clz_Torappu_GameDataConsts.addVoucherSkinRedeem(builder, this.voucherSkinRedeem);
  clz_Torappu_GameDataConsts.addVoucherSkinDesc(builder, voucherSkinDesc);
  clz_Torappu_GameDataConsts.addCharmEquipCount(builder, this.charmEquipCount);
  clz_Torappu_GameDataConsts.addTermDescriptionDict(builder, termDescriptionDict);
  clz_Torappu_GameDataConsts.addStoryReviewUnlockItemLackTip(builder, storyReviewUnlockItemLackTip);
  clz_Torappu_GameDataConsts.addDataVersion(builder, dataVersion);
  clz_Torappu_GameDataConsts.addResPrefVersion(builder, resPrefVersion);
  clz_Torappu_GameDataConsts.addAnnounceWebBusType(builder, announceWebBusType);
  clz_Torappu_GameDataConsts.addVideoPlayerWebBusType(builder, videoPlayerWebBusType);
  clz_Torappu_GameDataConsts.addGachaLogBusType(builder, gachaLogBusType);
  clz_Torappu_GameDataConsts.addDefaultMinMultipleBattleTimes(builder, this.defaultMinMultipleBattleTimes);
  clz_Torappu_GameDataConsts.addDefaultMaxMultipleBattleTimes(builder, this.defaultMaxMultipleBattleTimes);
  clz_Torappu_GameDataConsts.addMultipleActionOpen(builder, this.multipleActionOpen);
  clz_Torappu_GameDataConsts.addSubProfessionDamageTypePairs(builder, subProfessionDamageTypePairs);
  clz_Torappu_GameDataConsts.addClassicProtectChar(builder, classicProtectChar);
  clz_Torappu_GameDataConsts.addFeverGameData(builder, feverGameData);
  clz_Torappu_GameDataConsts.addBirthdaySettingDesc(builder, birthdaySettingDesc);
  clz_Torappu_GameDataConsts.addBirthdaySettingConfirmDesc(builder, birthdaySettingConfirmDesc);
  clz_Torappu_GameDataConsts.addBirthdaySettingLeapConfirmDesc(builder, birthdaySettingLeapConfirmDesc);
  clz_Torappu_GameDataConsts.addLeapBirthdayRewardMonth(builder, this.leapBirthdayRewardMonth);
  clz_Torappu_GameDataConsts.addLeapBirthdayRewardDay(builder, this.leapBirthdayRewardDay);
  clz_Torappu_GameDataConsts.addBirthdaySettingShowStageId(builder, birthdaySettingShowStageId);
  clz_Torappu_GameDataConsts.addIsBirthdayFuncEnabled(builder, this.isBirthdayFuncEnabled);
  clz_Torappu_GameDataConsts.addIsSoCharEnabled(builder, this.isSoCharEnabled);

  return clz_Torappu_GameDataConsts.endclz_Torappu_GameDataConsts(builder);
}
}
