// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_RL02DevelopmentLine implements flatbuffers.IUnpackableObject<clz_Torappu_RL02DevelopmentLineT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RL02DevelopmentLine {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RL02DevelopmentLine(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RL02DevelopmentLine):clz_Torappu_RL02DevelopmentLine {
  return (obj || new clz_Torappu_RL02DevelopmentLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RL02DevelopmentLine(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RL02DevelopmentLine):clz_Torappu_RL02DevelopmentLine {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RL02DevelopmentLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fromNode():string|null
fromNode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fromNode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

toNode():string|null
toNode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
toNode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fromNodeP():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fromNodeR():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

toNodeP():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

toNodeR():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enrollId():string|null
enrollId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enrollId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_RL02DevelopmentLine(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addFromNode(builder:flatbuffers.Builder, fromNodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fromNodeOffset, 0);
}

static addToNode(builder:flatbuffers.Builder, toNodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, toNodeOffset, 0);
}

static addFromNodeP(builder:flatbuffers.Builder, fromNodeP:number) {
  builder.addFieldInt32(2, fromNodeP, 0);
}

static addFromNodeR(builder:flatbuffers.Builder, fromNodeR:number) {
  builder.addFieldInt32(3, fromNodeR, 0);
}

static addToNodeP(builder:flatbuffers.Builder, toNodeP:number) {
  builder.addFieldInt32(4, toNodeP, 0);
}

static addToNodeR(builder:flatbuffers.Builder, toNodeR:number) {
  builder.addFieldInt32(5, toNodeR, 0);
}

static addEnrollId(builder:flatbuffers.Builder, enrollIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, enrollIdOffset, 0);
}

static endclz_Torappu_RL02DevelopmentLine(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RL02DevelopmentLine(builder:flatbuffers.Builder, fromNodeOffset:flatbuffers.Offset, toNodeOffset:flatbuffers.Offset, fromNodeP:number, fromNodeR:number, toNodeP:number, toNodeR:number, enrollIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RL02DevelopmentLine.startclz_Torappu_RL02DevelopmentLine(builder);
  clz_Torappu_RL02DevelopmentLine.addFromNode(builder, fromNodeOffset);
  clz_Torappu_RL02DevelopmentLine.addToNode(builder, toNodeOffset);
  clz_Torappu_RL02DevelopmentLine.addFromNodeP(builder, fromNodeP);
  clz_Torappu_RL02DevelopmentLine.addFromNodeR(builder, fromNodeR);
  clz_Torappu_RL02DevelopmentLine.addToNodeP(builder, toNodeP);
  clz_Torappu_RL02DevelopmentLine.addToNodeR(builder, toNodeR);
  clz_Torappu_RL02DevelopmentLine.addEnrollId(builder, enrollIdOffset);
  return clz_Torappu_RL02DevelopmentLine.endclz_Torappu_RL02DevelopmentLine(builder);
}

unpack(): clz_Torappu_RL02DevelopmentLineT {
  return new clz_Torappu_RL02DevelopmentLineT(
    this.fromNode(),
    this.toNode(),
    this.fromNodeP(),
    this.fromNodeR(),
    this.toNodeP(),
    this.toNodeR(),
    this.enrollId()
  );
}


unpackTo(_o: clz_Torappu_RL02DevelopmentLineT): void {
  _o.fromNode = this.fromNode();
  _o.toNode = this.toNode();
  _o.fromNodeP = this.fromNodeP();
  _o.fromNodeR = this.fromNodeR();
  _o.toNodeP = this.toNodeP();
  _o.toNodeR = this.toNodeR();
  _o.enrollId = this.enrollId();
}
}

export class clz_Torappu_RL02DevelopmentLineT implements flatbuffers.IGeneratedObject {
constructor(
  public fromNode: string|Uint8Array|null = null,
  public toNode: string|Uint8Array|null = null,
  public fromNodeP: number = 0,
  public fromNodeR: number = 0,
  public toNodeP: number = 0,
  public toNodeR: number = 0,
  public enrollId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fromNode = (this.fromNode !== null ? builder.createString(this.fromNode!) : 0);
  const toNode = (this.toNode !== null ? builder.createString(this.toNode!) : 0);
  const enrollId = (this.enrollId !== null ? builder.createString(this.enrollId!) : 0);

  return clz_Torappu_RL02DevelopmentLine.createclz_Torappu_RL02DevelopmentLine(builder,
    fromNode,
    toNode,
    this.fromNodeP,
    this.fromNodeR,
    this.toNodeP,
    this.toNodeR,
    enrollId
  );
}
}
