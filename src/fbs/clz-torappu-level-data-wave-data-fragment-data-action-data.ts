// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType } from './enum--torappu-level-data-wave-data-fragment-data-action-data-action-type.js';
import { enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType } from './enum--torappu-level-data-wave-data-fragment-data-action-data-random-type.js';
import { enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType } from './enum--torappu-level-data-wave-data-fragment-data-action-data-refresh-type.js';


export class clz_Torappu_LevelData_WaveData_FragmentData_ActionData implements flatbuffers.IUnpackableObject<clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_LevelData_WaveData_FragmentData_ActionData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_LevelData_WaveData_FragmentData_ActionData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_WaveData_FragmentData_ActionData):clz_Torappu_LevelData_WaveData_FragmentData_ActionData {
  return (obj || new clz_Torappu_LevelData_WaveData_FragmentData_ActionData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_LevelData_WaveData_FragmentData_ActionData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_WaveData_FragmentData_ActionData):clz_Torappu_LevelData_WaveData_FragmentData_ActionData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_LevelData_WaveData_FragmentData_ActionData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

actionType():enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType.SPAWN;
}

managedByScheduler():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

preDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

interval():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

routeIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

blockFragment():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

autoPreviewRoute():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

autoDisplayEnemyInfo():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isUnharmfulAndAlwaysCountAsKilled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hiddenGroup():string|null
hiddenGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hiddenGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

randomSpawnGroupKey():string|null
randomSpawnGroupKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
randomSpawnGroupKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

randomSpawnGroupPackKey():string|null
randomSpawnGroupPackKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
randomSpawnGroupPackKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

randomType():enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType.ALWAYS;
}

refreshType():enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType.ALWAYS;
}

weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dontBlockWave():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

forceBlockWaveInBranch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_LevelData_WaveData_FragmentData_ActionData(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addActionType(builder:flatbuffers.Builder, actionType:enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType) {
  builder.addFieldInt32(0, actionType, enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType.SPAWN);
}

static addManagedByScheduler(builder:flatbuffers.Builder, managedByScheduler:boolean) {
  builder.addFieldInt8(1, +managedByScheduler, +false);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, keyOffset, 0);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(3, count, 0);
}

static addPreDelay(builder:flatbuffers.Builder, preDelay:number) {
  builder.addFieldFloat32(4, preDelay, 0.0);
}

static addInterval(builder:flatbuffers.Builder, interval:number) {
  builder.addFieldFloat32(5, interval, 0.0);
}

static addRouteIndex(builder:flatbuffers.Builder, routeIndex:number) {
  builder.addFieldInt32(6, routeIndex, 0);
}

static addBlockFragment(builder:flatbuffers.Builder, blockFragment:boolean) {
  builder.addFieldInt8(7, +blockFragment, +false);
}

static addAutoPreviewRoute(builder:flatbuffers.Builder, autoPreviewRoute:boolean) {
  builder.addFieldInt8(8, +autoPreviewRoute, +false);
}

static addAutoDisplayEnemyInfo(builder:flatbuffers.Builder, autoDisplayEnemyInfo:boolean) {
  builder.addFieldInt8(9, +autoDisplayEnemyInfo, +false);
}

static addIsUnharmfulAndAlwaysCountAsKilled(builder:flatbuffers.Builder, isUnharmfulAndAlwaysCountAsKilled:boolean) {
  builder.addFieldInt8(10, +isUnharmfulAndAlwaysCountAsKilled, +false);
}

static addHiddenGroup(builder:flatbuffers.Builder, hiddenGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, hiddenGroupOffset, 0);
}

static addRandomSpawnGroupKey(builder:flatbuffers.Builder, randomSpawnGroupKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, randomSpawnGroupKeyOffset, 0);
}

static addRandomSpawnGroupPackKey(builder:flatbuffers.Builder, randomSpawnGroupPackKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, randomSpawnGroupPackKeyOffset, 0);
}

static addRandomType(builder:flatbuffers.Builder, randomType:enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType) {
  builder.addFieldInt32(14, randomType, enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType.ALWAYS);
}

static addRefreshType(builder:flatbuffers.Builder, refreshType:enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType) {
  builder.addFieldInt32(15, refreshType, enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType.ALWAYS);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldInt32(16, weight, 0);
}

static addDontBlockWave(builder:flatbuffers.Builder, dontBlockWave:boolean) {
  builder.addFieldInt8(17, +dontBlockWave, +false);
}

static addForceBlockWaveInBranch(builder:flatbuffers.Builder, forceBlockWaveInBranch:boolean) {
  builder.addFieldInt8(18, +forceBlockWaveInBranch, +false);
}

static endclz_Torappu_LevelData_WaveData_FragmentData_ActionData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_LevelData_WaveData_FragmentData_ActionData(builder:flatbuffers.Builder, actionType:enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType, managedByScheduler:boolean, keyOffset:flatbuffers.Offset, count:number, preDelay:number, interval:number, routeIndex:number, blockFragment:boolean, autoPreviewRoute:boolean, autoDisplayEnemyInfo:boolean, isUnharmfulAndAlwaysCountAsKilled:boolean, hiddenGroupOffset:flatbuffers.Offset, randomSpawnGroupKeyOffset:flatbuffers.Offset, randomSpawnGroupPackKeyOffset:flatbuffers.Offset, randomType:enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType, refreshType:enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType, weight:number, dontBlockWave:boolean, forceBlockWaveInBranch:boolean):flatbuffers.Offset {
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.startclz_Torappu_LevelData_WaveData_FragmentData_ActionData(builder);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addActionType(builder, actionType);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addManagedByScheduler(builder, managedByScheduler);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addKey(builder, keyOffset);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addCount(builder, count);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addPreDelay(builder, preDelay);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addInterval(builder, interval);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addRouteIndex(builder, routeIndex);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addBlockFragment(builder, blockFragment);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addAutoPreviewRoute(builder, autoPreviewRoute);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addAutoDisplayEnemyInfo(builder, autoDisplayEnemyInfo);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addIsUnharmfulAndAlwaysCountAsKilled(builder, isUnharmfulAndAlwaysCountAsKilled);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addHiddenGroup(builder, hiddenGroupOffset);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addRandomSpawnGroupKey(builder, randomSpawnGroupKeyOffset);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKeyOffset);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addRandomType(builder, randomType);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addRefreshType(builder, refreshType);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addWeight(builder, weight);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addDontBlockWave(builder, dontBlockWave);
  clz_Torappu_LevelData_WaveData_FragmentData_ActionData.addForceBlockWaveInBranch(builder, forceBlockWaveInBranch);
  return clz_Torappu_LevelData_WaveData_FragmentData_ActionData.endclz_Torappu_LevelData_WaveData_FragmentData_ActionData(builder);
}

unpack(): clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT {
  return new clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT(
    this.actionType(),
    this.managedByScheduler(),
    this.key(),
    this.count(),
    this.preDelay(),
    this.interval(),
    this.routeIndex(),
    this.blockFragment(),
    this.autoPreviewRoute(),
    this.autoDisplayEnemyInfo(),
    this.isUnharmfulAndAlwaysCountAsKilled(),
    this.hiddenGroup(),
    this.randomSpawnGroupKey(),
    this.randomSpawnGroupPackKey(),
    this.randomType(),
    this.refreshType(),
    this.weight(),
    this.dontBlockWave(),
    this.forceBlockWaveInBranch()
  );
}


unpackTo(_o: clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT): void {
  _o.actionType = this.actionType();
  _o.managedByScheduler = this.managedByScheduler();
  _o.key = this.key();
  _o.count = this.count();
  _o.preDelay = this.preDelay();
  _o.interval = this.interval();
  _o.routeIndex = this.routeIndex();
  _o.blockFragment = this.blockFragment();
  _o.autoPreviewRoute = this.autoPreviewRoute();
  _o.autoDisplayEnemyInfo = this.autoDisplayEnemyInfo();
  _o.isUnharmfulAndAlwaysCountAsKilled = this.isUnharmfulAndAlwaysCountAsKilled();
  _o.hiddenGroup = this.hiddenGroup();
  _o.randomSpawnGroupKey = this.randomSpawnGroupKey();
  _o.randomSpawnGroupPackKey = this.randomSpawnGroupPackKey();
  _o.randomType = this.randomType();
  _o.refreshType = this.refreshType();
  _o.weight = this.weight();
  _o.dontBlockWave = this.dontBlockWave();
  _o.forceBlockWaveInBranch = this.forceBlockWaveInBranch();
}
}

export class clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT implements flatbuffers.IGeneratedObject {
constructor(
  public actionType: enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType = enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType.SPAWN,
  public managedByScheduler: boolean = false,
  public key: string|Uint8Array|null = null,
  public count: number = 0,
  public preDelay: number = 0.0,
  public interval: number = 0.0,
  public routeIndex: number = 0,
  public blockFragment: boolean = false,
  public autoPreviewRoute: boolean = false,
  public autoDisplayEnemyInfo: boolean = false,
  public isUnharmfulAndAlwaysCountAsKilled: boolean = false,
  public hiddenGroup: string|Uint8Array|null = null,
  public randomSpawnGroupKey: string|Uint8Array|null = null,
  public randomSpawnGroupPackKey: string|Uint8Array|null = null,
  public randomType: enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType = enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType.ALWAYS,
  public refreshType: enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType = enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType.ALWAYS,
  public weight: number = 0,
  public dontBlockWave: boolean = false,
  public forceBlockWaveInBranch: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? builder.createString(this.key!) : 0);
  const hiddenGroup = (this.hiddenGroup !== null ? builder.createString(this.hiddenGroup!) : 0);
  const randomSpawnGroupKey = (this.randomSpawnGroupKey !== null ? builder.createString(this.randomSpawnGroupKey!) : 0);
  const randomSpawnGroupPackKey = (this.randomSpawnGroupPackKey !== null ? builder.createString(this.randomSpawnGroupPackKey!) : 0);

  return clz_Torappu_LevelData_WaveData_FragmentData_ActionData.createclz_Torappu_LevelData_WaveData_FragmentData_ActionData(builder,
    this.actionType,
    this.managedByScheduler,
    key,
    this.count,
    this.preDelay,
    this.interval,
    this.routeIndex,
    this.blockFragment,
    this.autoPreviewRoute,
    this.autoDisplayEnemyInfo,
    this.isUnharmfulAndAlwaysCountAsKilled,
    hiddenGroup,
    randomSpawnGroupKey,
    randomSpawnGroupPackKey,
    this.randomType,
    this.refreshType,
    this.weight,
    this.dontBlockWave,
    this.forceBlockWaveInBranch
  );
}
}
