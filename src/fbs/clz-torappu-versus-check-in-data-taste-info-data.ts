// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_VersusCheckInData_TasteType } from './enum--torappu-versus-check-in-data-taste-type.js';


export class clz_Torappu_VersusCheckInData_TasteInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_VersusCheckInData_TasteInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_VersusCheckInData_TasteInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_VersusCheckInData_TasteInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VersusCheckInData_TasteInfoData):clz_Torappu_VersusCheckInData_TasteInfoData {
  return (obj || new clz_Torappu_VersusCheckInData_TasteInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_VersusCheckInData_TasteInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VersusCheckInData_TasteInfoData):clz_Torappu_VersusCheckInData_TasteInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_VersusCheckInData_TasteInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

plTaste():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tasteType():enum__Torappu_VersusCheckInData_TasteType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_VersusCheckInData_TasteType.DRAW;
}

tasteText():string|null
tasteText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tasteText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_VersusCheckInData_TasteInfoData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPlTaste(builder:flatbuffers.Builder, plTaste:number) {
  builder.addFieldInt32(0, plTaste, 0);
}

static addTasteType(builder:flatbuffers.Builder, tasteType:enum__Torappu_VersusCheckInData_TasteType) {
  builder.addFieldInt32(1, tasteType, enum__Torappu_VersusCheckInData_TasteType.DRAW);
}

static addTasteText(builder:flatbuffers.Builder, tasteTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, tasteTextOffset, 0);
}

static endclz_Torappu_VersusCheckInData_TasteInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_VersusCheckInData_TasteInfoData(builder:flatbuffers.Builder, plTaste:number, tasteType:enum__Torappu_VersusCheckInData_TasteType, tasteTextOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_VersusCheckInData_TasteInfoData.startclz_Torappu_VersusCheckInData_TasteInfoData(builder);
  clz_Torappu_VersusCheckInData_TasteInfoData.addPlTaste(builder, plTaste);
  clz_Torappu_VersusCheckInData_TasteInfoData.addTasteType(builder, tasteType);
  clz_Torappu_VersusCheckInData_TasteInfoData.addTasteText(builder, tasteTextOffset);
  return clz_Torappu_VersusCheckInData_TasteInfoData.endclz_Torappu_VersusCheckInData_TasteInfoData(builder);
}

unpack(): clz_Torappu_VersusCheckInData_TasteInfoDataT {
  return new clz_Torappu_VersusCheckInData_TasteInfoDataT(
    this.plTaste(),
    this.tasteType(),
    this.tasteText()
  );
}


unpackTo(_o: clz_Torappu_VersusCheckInData_TasteInfoDataT): void {
  _o.plTaste = this.plTaste();
  _o.tasteType = this.tasteType();
  _o.tasteText = this.tasteText();
}
}

export class clz_Torappu_VersusCheckInData_TasteInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public plTaste: number = 0,
  public tasteType: enum__Torappu_VersusCheckInData_TasteType = enum__Torappu_VersusCheckInData_TasteType.DRAW,
  public tasteText: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const tasteText = (this.tasteText !== null ? builder.createString(this.tasteText!) : 0);

  return clz_Torappu_VersusCheckInData_TasteInfoData.createclz_Torappu_VersusCheckInData_TasteInfoData(builder,
    this.plTaste,
    this.tasteType,
    tasteText
  );
}
}
