// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_GridPosition, clz_Torappu_GridPositionT } from './clz-torappu-grid-position.js';
import { clz_Torappu_RouteData_CheckpointData, clz_Torappu_RouteData_CheckpointDataT } from './clz-torappu-route-data-checkpoint-data.js';
import { clz_UnityEngine_Vector2, clz_UnityEngine_Vector2T } from './clz-unity-engine-vector2.js';
import { enum__Torappu_MotionMode } from './enum--torappu-motion-mode.js';


export class clz_Torappu_RouteData implements flatbuffers.IUnpackableObject<clz_Torappu_RouteDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RouteData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RouteData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RouteData):clz_Torappu_RouteData {
  return (obj || new clz_Torappu_RouteData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RouteData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RouteData):clz_Torappu_RouteData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RouteData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

motionMode():enum__Torappu_MotionMode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_MotionMode.WALK;
}

startPosition(obj?:clz_Torappu_GridPosition):clz_Torappu_GridPosition|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_GridPosition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

endPosition(obj?:clz_Torappu_GridPosition):clz_Torappu_GridPosition|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_GridPosition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

spawnRandomRange(obj?:clz_UnityEngine_Vector2):clz_UnityEngine_Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_UnityEngine_Vector2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

spawnOffset(obj?:clz_UnityEngine_Vector2):clz_UnityEngine_Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_UnityEngine_Vector2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

checkpoints(index: number, obj?:clz_Torappu_RouteData_CheckpointData):clz_Torappu_RouteData_CheckpointData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_RouteData_CheckpointData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

checkpointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

allowDiagonalMove():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

visitEveryTileCenter():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

visitEveryNodeCenter():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

visitEveryCheckPoint():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_RouteData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addMotionMode(builder:flatbuffers.Builder, motionMode:enum__Torappu_MotionMode) {
  builder.addFieldInt32(0, motionMode, enum__Torappu_MotionMode.WALK);
}

static addStartPosition(builder:flatbuffers.Builder, startPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, startPositionOffset, 0);
}

static addEndPosition(builder:flatbuffers.Builder, endPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, endPositionOffset, 0);
}

static addSpawnRandomRange(builder:flatbuffers.Builder, spawnRandomRangeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, spawnRandomRangeOffset, 0);
}

static addSpawnOffset(builder:flatbuffers.Builder, spawnOffsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, spawnOffsetOffset, 0);
}

static addCheckpoints(builder:flatbuffers.Builder, checkpointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, checkpointsOffset, 0);
}

static createCheckpointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCheckpointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAllowDiagonalMove(builder:flatbuffers.Builder, allowDiagonalMove:boolean) {
  builder.addFieldInt8(6, +allowDiagonalMove, +false);
}

static addVisitEveryTileCenter(builder:flatbuffers.Builder, visitEveryTileCenter:boolean) {
  builder.addFieldInt8(7, +visitEveryTileCenter, +false);
}

static addVisitEveryNodeCenter(builder:flatbuffers.Builder, visitEveryNodeCenter:boolean) {
  builder.addFieldInt8(8, +visitEveryNodeCenter, +false);
}

static addVisitEveryCheckPoint(builder:flatbuffers.Builder, visitEveryCheckPoint:boolean) {
  builder.addFieldInt8(9, +visitEveryCheckPoint, +false);
}

static endclz_Torappu_RouteData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_RouteDataT {
  return new clz_Torappu_RouteDataT(
    this.motionMode(),
    (this.startPosition() !== null ? this.startPosition()!.unpack() : null),
    (this.endPosition() !== null ? this.endPosition()!.unpack() : null),
    (this.spawnRandomRange() !== null ? this.spawnRandomRange()!.unpack() : null),
    (this.spawnOffset() !== null ? this.spawnOffset()!.unpack() : null),
    this.bb!.createObjList<clz_Torappu_RouteData_CheckpointData, clz_Torappu_RouteData_CheckpointDataT>(this.checkpoints.bind(this), this.checkpointsLength()),
    this.allowDiagonalMove(),
    this.visitEveryTileCenter(),
    this.visitEveryNodeCenter(),
    this.visitEveryCheckPoint()
  );
}


unpackTo(_o: clz_Torappu_RouteDataT): void {
  _o.motionMode = this.motionMode();
  _o.startPosition = (this.startPosition() !== null ? this.startPosition()!.unpack() : null);
  _o.endPosition = (this.endPosition() !== null ? this.endPosition()!.unpack() : null);
  _o.spawnRandomRange = (this.spawnRandomRange() !== null ? this.spawnRandomRange()!.unpack() : null);
  _o.spawnOffset = (this.spawnOffset() !== null ? this.spawnOffset()!.unpack() : null);
  _o.checkpoints = this.bb!.createObjList<clz_Torappu_RouteData_CheckpointData, clz_Torappu_RouteData_CheckpointDataT>(this.checkpoints.bind(this), this.checkpointsLength());
  _o.allowDiagonalMove = this.allowDiagonalMove();
  _o.visitEveryTileCenter = this.visitEveryTileCenter();
  _o.visitEveryNodeCenter = this.visitEveryNodeCenter();
  _o.visitEveryCheckPoint = this.visitEveryCheckPoint();
}
}

export class clz_Torappu_RouteDataT implements flatbuffers.IGeneratedObject {
constructor(
  public motionMode: enum__Torappu_MotionMode = enum__Torappu_MotionMode.WALK,
  public startPosition: clz_Torappu_GridPositionT|null = null,
  public endPosition: clz_Torappu_GridPositionT|null = null,
  public spawnRandomRange: clz_UnityEngine_Vector2T|null = null,
  public spawnOffset: clz_UnityEngine_Vector2T|null = null,
  public checkpoints: (clz_Torappu_RouteData_CheckpointDataT)[] = [],
  public allowDiagonalMove: boolean = false,
  public visitEveryTileCenter: boolean = false,
  public visitEveryNodeCenter: boolean = false,
  public visitEveryCheckPoint: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const startPosition = (this.startPosition !== null ? this.startPosition!.pack(builder) : 0);
  const endPosition = (this.endPosition !== null ? this.endPosition!.pack(builder) : 0);
  const spawnRandomRange = (this.spawnRandomRange !== null ? this.spawnRandomRange!.pack(builder) : 0);
  const spawnOffset = (this.spawnOffset !== null ? this.spawnOffset!.pack(builder) : 0);
  const checkpoints = clz_Torappu_RouteData.createCheckpointsVector(builder, builder.createObjectOffsetList(this.checkpoints));

  clz_Torappu_RouteData.startclz_Torappu_RouteData(builder);
  clz_Torappu_RouteData.addMotionMode(builder, this.motionMode);
  clz_Torappu_RouteData.addStartPosition(builder, startPosition);
  clz_Torappu_RouteData.addEndPosition(builder, endPosition);
  clz_Torappu_RouteData.addSpawnRandomRange(builder, spawnRandomRange);
  clz_Torappu_RouteData.addSpawnOffset(builder, spawnOffset);
  clz_Torappu_RouteData.addCheckpoints(builder, checkpoints);
  clz_Torappu_RouteData.addAllowDiagonalMove(builder, this.allowDiagonalMove);
  clz_Torappu_RouteData.addVisitEveryTileCenter(builder, this.visitEveryTileCenter);
  clz_Torappu_RouteData.addVisitEveryNodeCenter(builder, this.visitEveryNodeCenter);
  clz_Torappu_RouteData.addVisitEveryCheckPoint(builder, this.visitEveryCheckPoint);

  return clz_Torappu_RouteData.endclz_Torappu_RouteData(builder);
}
}
