// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo):clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo {
  return (obj || new clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo):clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

targets(index: number):string
targets(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
targets(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

targetsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTargets(builder:flatbuffers.Builder, targetsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, targetsOffset, 0);
}

static createTargetsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTargetsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static endclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(builder:flatbuffers.Builder, targetsOffset:flatbuffers.Offset, sortId:number):flatbuffers.Offset {
  clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo.startclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(builder);
  clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo.addTargets(builder, targetsOffset);
  clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo.addSortId(builder, sortId);
  return clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo.endclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(builder);
}

unpack(): clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfoT {
  return new clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfoT(
    this.bb!.createScalarList<string>(this.targets.bind(this), this.targetsLength()),
    this.sortId()
  );
}


unpackTo(_o: clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfoT): void {
  _o.targets = this.bb!.createScalarList<string>(this.targets.bind(this), this.targetsLength());
  _o.sortId = this.sortId();
}
}

export class clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public targets: (string)[] = [],
  public sortId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const targets = clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo.createTargetsVector(builder, builder.createObjectOffsetList(this.targets));

  return clz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo.createclz_Torappu_BuildingData_BuildingRoomTypeBuffSortData_buffGroupInfo(builder,
    targets,
    this.sortId
  );
}
}
