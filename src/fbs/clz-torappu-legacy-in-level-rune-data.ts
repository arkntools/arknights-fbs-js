// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';
import { enum__Torappu_BuildableType } from './enum--torappu-buildable-type.js';
import { enum__Torappu_LevelData_Difficulty } from './enum--torappu-level-data-difficulty.js';
import { enum__Torappu_ProfessionCategory } from './enum--torappu-profession-category.js';


export class clz_Torappu_LegacyInLevelRuneData implements flatbuffers.IUnpackableObject<clz_Torappu_LegacyInLevelRuneDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_LegacyInLevelRuneData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_LegacyInLevelRuneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LegacyInLevelRuneData):clz_Torappu_LegacyInLevelRuneData {
  return (obj || new clz_Torappu_LegacyInLevelRuneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_LegacyInLevelRuneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LegacyInLevelRuneData):clz_Torappu_LegacyInLevelRuneData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_LegacyInLevelRuneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

difficultyMask():enum__Torappu_LevelData_Difficulty {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_LevelData_Difficulty.NONE;
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

professionMask():enum__Torappu_ProfessionCategory {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ProfessionCategory.NONE;
}

buildableMask():enum__Torappu_BuildableType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuildableType.NONE;
}

blackboard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blackboardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_LegacyInLevelRuneData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addDifficultyMask(builder:flatbuffers.Builder, difficultyMask:enum__Torappu_LevelData_Difficulty) {
  builder.addFieldInt32(0, difficultyMask, enum__Torappu_LevelData_Difficulty.NONE);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, keyOffset, 0);
}

static addProfessionMask(builder:flatbuffers.Builder, professionMask:enum__Torappu_ProfessionCategory) {
  builder.addFieldInt32(2, professionMask, enum__Torappu_ProfessionCategory.NONE);
}

static addBuildableMask(builder:flatbuffers.Builder, buildableMask:enum__Torappu_BuildableType) {
  builder.addFieldInt32(3, buildableMask, enum__Torappu_BuildableType.NONE);
}

static addBlackboard(builder:flatbuffers.Builder, blackboardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, blackboardOffset, 0);
}

static createBlackboardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlackboardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_LegacyInLevelRuneData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_LegacyInLevelRuneData(builder:flatbuffers.Builder, difficultyMask:enum__Torappu_LevelData_Difficulty, keyOffset:flatbuffers.Offset, professionMask:enum__Torappu_ProfessionCategory, buildableMask:enum__Torappu_BuildableType, blackboardOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_LegacyInLevelRuneData.startclz_Torappu_LegacyInLevelRuneData(builder);
  clz_Torappu_LegacyInLevelRuneData.addDifficultyMask(builder, difficultyMask);
  clz_Torappu_LegacyInLevelRuneData.addKey(builder, keyOffset);
  clz_Torappu_LegacyInLevelRuneData.addProfessionMask(builder, professionMask);
  clz_Torappu_LegacyInLevelRuneData.addBuildableMask(builder, buildableMask);
  clz_Torappu_LegacyInLevelRuneData.addBlackboard(builder, blackboardOffset);
  return clz_Torappu_LegacyInLevelRuneData.endclz_Torappu_LegacyInLevelRuneData(builder);
}

unpack(): clz_Torappu_LegacyInLevelRuneDataT {
  return new clz_Torappu_LegacyInLevelRuneDataT(
    this.difficultyMask(),
    this.key(),
    this.professionMask(),
    this.buildableMask(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength())
  );
}


unpackTo(_o: clz_Torappu_LegacyInLevelRuneDataT): void {
  _o.difficultyMask = this.difficultyMask();
  _o.key = this.key();
  _o.professionMask = this.professionMask();
  _o.buildableMask = this.buildableMask();
  _o.blackboard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength());
}
}

export class clz_Torappu_LegacyInLevelRuneDataT implements flatbuffers.IGeneratedObject {
constructor(
  public difficultyMask: enum__Torappu_LevelData_Difficulty = enum__Torappu_LevelData_Difficulty.NONE,
  public key: string|Uint8Array|null = null,
  public professionMask: enum__Torappu_ProfessionCategory = enum__Torappu_ProfessionCategory.NONE,
  public buildableMask: enum__Torappu_BuildableType = enum__Torappu_BuildableType.NONE,
  public blackboard: (clz_Torappu_Blackboard_DataPairT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? builder.createString(this.key!) : 0);
  const blackboard = clz_Torappu_LegacyInLevelRuneData.createBlackboardVector(builder, builder.createObjectOffsetList(this.blackboard));

  return clz_Torappu_LegacyInLevelRuneData.createclz_Torappu_LegacyInLevelRuneData(builder,
    this.difficultyMask,
    key,
    this.professionMask,
    this.buildableMask,
    blackboard
  );
}
}
