// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class dict__int__float implements flatbuffers.IUnpackableObject<dict__int__floatT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):dict__int__float {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsdict__int__float(bb:flatbuffers.ByteBuffer, obj?:dict__int__float):dict__int__float {
  return (obj || new dict__int__float()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsdict__int__float(bb:flatbuffers.ByteBuffer, obj?:dict__int__float):dict__int__float {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new dict__int__float()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startdict__int__float(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:number) {
  builder.addFieldInt32(0, key, 0);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(1, value, 0.0);
}

static enddict__int__float(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createdict__int__float(builder:flatbuffers.Builder, key:number, value:number):flatbuffers.Offset {
  dict__int__float.startdict__int__float(builder);
  dict__int__float.addKey(builder, key);
  dict__int__float.addValue(builder, value);
  return dict__int__float.enddict__int__float(builder);
}

unpack(): dict__int__floatT {
  return new dict__int__floatT(
    this.key(),
    this.value()
  );
}


unpackTo(_o: dict__int__floatT): void {
  _o.key = this.key();
  _o.value = this.value();
}
}

export class dict__int__floatT implements flatbuffers.IGeneratedObject {
constructor(
  public key: number = 0,
  public value: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return dict__int__float.createdict__int__float(builder,
    this.key,
    this.value
  );
}
}
