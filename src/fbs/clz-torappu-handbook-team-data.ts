// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_HandbookTeamData implements flatbuffers.IUnpackableObject<clz_Torappu_HandbookTeamDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_HandbookTeamData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_HandbookTeamData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HandbookTeamData):clz_Torappu_HandbookTeamData {
  return (obj || new clz_Torappu_HandbookTeamData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_HandbookTeamData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HandbookTeamData):clz_Torappu_HandbookTeamData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_HandbookTeamData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

powerId():string|null
powerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
powerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

orderNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

powerLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

powerName():string|null
powerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
powerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

powerCode():string|null
powerCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
powerCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isLimited():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRaw():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_HandbookTeamData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addPowerId(builder:flatbuffers.Builder, powerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, powerIdOffset, 0);
}

static addOrderNum(builder:flatbuffers.Builder, orderNum:number) {
  builder.addFieldInt32(1, orderNum, 0);
}

static addPowerLevel(builder:flatbuffers.Builder, powerLevel:number) {
  builder.addFieldInt32(2, powerLevel, 0);
}

static addPowerName(builder:flatbuffers.Builder, powerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, powerNameOffset, 0);
}

static addPowerCode(builder:flatbuffers.Builder, powerCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, powerCodeOffset, 0);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, colorOffset, 0);
}

static addIsLimited(builder:flatbuffers.Builder, isLimited:boolean) {
  builder.addFieldInt8(6, +isLimited, +false);
}

static addIsRaw(builder:flatbuffers.Builder, isRaw:boolean) {
  builder.addFieldInt8(7, +isRaw, +false);
}

static endclz_Torappu_HandbookTeamData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_HandbookTeamData(builder:flatbuffers.Builder, powerIdOffset:flatbuffers.Offset, orderNum:number, powerLevel:number, powerNameOffset:flatbuffers.Offset, powerCodeOffset:flatbuffers.Offset, colorOffset:flatbuffers.Offset, isLimited:boolean, isRaw:boolean):flatbuffers.Offset {
  clz_Torappu_HandbookTeamData.startclz_Torappu_HandbookTeamData(builder);
  clz_Torappu_HandbookTeamData.addPowerId(builder, powerIdOffset);
  clz_Torappu_HandbookTeamData.addOrderNum(builder, orderNum);
  clz_Torappu_HandbookTeamData.addPowerLevel(builder, powerLevel);
  clz_Torappu_HandbookTeamData.addPowerName(builder, powerNameOffset);
  clz_Torappu_HandbookTeamData.addPowerCode(builder, powerCodeOffset);
  clz_Torappu_HandbookTeamData.addColor(builder, colorOffset);
  clz_Torappu_HandbookTeamData.addIsLimited(builder, isLimited);
  clz_Torappu_HandbookTeamData.addIsRaw(builder, isRaw);
  return clz_Torappu_HandbookTeamData.endclz_Torappu_HandbookTeamData(builder);
}

unpack(): clz_Torappu_HandbookTeamDataT {
  return new clz_Torappu_HandbookTeamDataT(
    this.powerId(),
    this.orderNum(),
    this.powerLevel(),
    this.powerName(),
    this.powerCode(),
    this.color(),
    this.isLimited(),
    this.isRaw()
  );
}


unpackTo(_o: clz_Torappu_HandbookTeamDataT): void {
  _o.powerId = this.powerId();
  _o.orderNum = this.orderNum();
  _o.powerLevel = this.powerLevel();
  _o.powerName = this.powerName();
  _o.powerCode = this.powerCode();
  _o.color = this.color();
  _o.isLimited = this.isLimited();
  _o.isRaw = this.isRaw();
}
}

export class clz_Torappu_HandbookTeamDataT implements flatbuffers.IGeneratedObject {
constructor(
  public powerId: string|Uint8Array|null = null,
  public orderNum: number = 0,
  public powerLevel: number = 0,
  public powerName: string|Uint8Array|null = null,
  public powerCode: string|Uint8Array|null = null,
  public color: string|Uint8Array|null = null,
  public isLimited: boolean = false,
  public isRaw: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const powerId = (this.powerId !== null ? builder.createString(this.powerId!) : 0);
  const powerName = (this.powerName !== null ? builder.createString(this.powerName!) : 0);
  const powerCode = (this.powerCode !== null ? builder.createString(this.powerCode!) : 0);
  const color = (this.color !== null ? builder.createString(this.color!) : 0);

  return clz_Torappu_HandbookTeamData.createclz_Torappu_HandbookTeamData(builder,
    powerId,
    this.orderNum,
    this.powerLevel,
    powerName,
    powerCode,
    color,
    this.isLimited,
    this.isRaw
  );
}
}
