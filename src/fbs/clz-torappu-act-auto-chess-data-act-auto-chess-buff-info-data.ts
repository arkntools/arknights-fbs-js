// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';
import { enum__Torappu_AutoChessCountType } from './enum--torappu-auto-chess-count-type.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData):clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData):clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blackboard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blackboardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

countType():enum__Torappu_AutoChessCountType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_AutoChessCountType.NONE;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addBlackboard(builder:flatbuffers.Builder, blackboardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, blackboardOffset, 0);
}

static createBlackboardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlackboardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCountType(builder:flatbuffers.Builder, countType:enum__Torappu_AutoChessCountType) {
  builder.addFieldInt32(2, countType, enum__Torappu_AutoChessCountType.NONE);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, blackboardOffset:flatbuffers.Offset, countType:enum__Torappu_AutoChessCountType):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.startclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.addKey(builder, keyOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.addBlackboard(builder, blackboardOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.addCountType(builder, countType);
  return clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.endclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoDataT(
    this.key(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength()),
    this.countType()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoDataT): void {
  _o.key = this.key();
  _o.blackboard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength());
  _o.countType = this.countType();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public key: string|Uint8Array|null = null,
  public blackboard: (clz_Torappu_Blackboard_DataPairT)[] = [],
  public countType: enum__Torappu_AutoChessCountType = enum__Torappu_AutoChessCountType.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? builder.createString(this.key!) : 0);
  const blackboard = clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.createBlackboardVector(builder, builder.createObjectOffsetList(this.blackboard));

  return clz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData.createclz_Torappu_ActAutoChessData_ActAutoChessBuffInfoData(builder,
    key,
    blackboard,
    this.countType
  );
}
}
