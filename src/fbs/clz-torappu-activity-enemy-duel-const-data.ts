// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActivityEnemyDuelConstData_PingCond, clz_Torappu_ActivityEnemyDuelConstData_PingCondT } from './clz-torappu-activity-enemy-duel-const-data-ping-cond.js';
import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_ActivityEnemyDuelConstData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityEnemyDuelConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityEnemyDuelConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityEnemyDuelConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelConstData):clz_Torappu_ActivityEnemyDuelConstData {
  return (obj || new clz_Torappu_ActivityEnemyDuelConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityEnemyDuelConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelConstData):clz_Torappu_ActivityEnemyDuelConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityEnemyDuelConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxLoadingTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxRetryTimeInBattle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxMatchTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxRoomTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxRetryTimeInTeamRoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

roomReserveTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minRoomNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

roomFinishWaitingTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

roomMasterRestartWaitingTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pingConds(index: number, obj?:clz_Torappu_ActivityEnemyDuelConstData_PingCond):clz_Torappu_ActivityEnemyDuelConstData_PingCond|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new clz_Torappu_ActivityEnemyDuelConstData_PingCond()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pingCondsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

chatCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

chatTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

dailyMissionParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyMissionReward(obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dailyMissionName():string|null
dailyMissionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dailyMissionDesc():string|null
dailyMissionDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dailyMissionDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxOperatorDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxPlaySpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

delayTimeNeedTip():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

netBlockTimeNeedTip():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

stageTimeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

npcCorrectProb():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

winStreakRoundNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

settlementPicNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

timeBeforeSelectAfterRoundBegin():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

npcMaxCorrectCountInStand():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

battlePhaseTimeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

battleFinishToSettleTimeMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

minBetCd():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

defaultEmoticonItemId():string|null
defaultEmoticonItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultEmoticonItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultEmoticonPicId():string|null
defaultEmoticonPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultEmoticonPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeOperationRoundNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationInitialScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationMaxScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationSelectTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationSelectTimeLast():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationSkipParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

modeOperationBetParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

modeOperationAllinParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

modeOperationTopRank():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationRankTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeSoloOperationRankTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationRewardMultiplier():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationRewardMultiplierAllin():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeOperationHotRoundNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeSoloOperationSelectTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandRoundNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandShieldTurn():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandSelectTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandSelectTimeLast():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandAllinParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

modeStandTopRank():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandRankTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeStandHotRoundNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

milestoneName():string|null
milestoneName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

milestoneItemId():string|null
milestoneItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

milestoneItemName():string|null
milestoneItemName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneItemName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

milestoneItemText():string|null
milestoneItemText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneItemText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

milestoneTrackId():string|null
milestoneTrackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestoneTrackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

entryVideoId():string|null
entryVideoId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryVideoId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

entryTabText():string|null
entryTabText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryTabText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

matchTabText():string|null
matchTabText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matchTabText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeOperationId():string|null
modeOperationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeOperationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeStandId():string|null
modeStandId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeStandId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

multiPreposedModeId():string|null
multiPreposedModeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multiPreposedModeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

entryMusicName():string|null
entryMusicName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryMusicName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

milestonePlanName():string|null
milestonePlanName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
milestonePlanName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeCondLockText():string|null
modeCondLockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeCondLockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeTimeLockText():string|null
modeTimeLockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeTimeLockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

titlePicRotateTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

titlePicId():string|null
titlePicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
titlePicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActivityEnemyDuelConstData(builder:flatbuffers.Builder) {
  builder.startObject(71);
}

static addMaxLoadingTime(builder:flatbuffers.Builder, maxLoadingTime:number) {
  builder.addFieldFloat32(0, maxLoadingTime, 0.0);
}

static addMaxRetryTimeInBattle(builder:flatbuffers.Builder, maxRetryTimeInBattle:number) {
  builder.addFieldFloat32(1, maxRetryTimeInBattle, 0.0);
}

static addMaxMatchTime(builder:flatbuffers.Builder, maxMatchTime:number) {
  builder.addFieldFloat32(2, maxMatchTime, 0.0);
}

static addMaxRoomTime(builder:flatbuffers.Builder, maxRoomTime:number) {
  builder.addFieldFloat32(3, maxRoomTime, 0.0);
}

static addMaxRetryTimeInTeamRoom(builder:flatbuffers.Builder, maxRetryTimeInTeamRoom:number) {
  builder.addFieldFloat32(4, maxRetryTimeInTeamRoom, 0.0);
}

static addRoomReserveTime(builder:flatbuffers.Builder, roomReserveTime:number) {
  builder.addFieldFloat32(5, roomReserveTime, 0.0);
}

static addMinRoomNum(builder:flatbuffers.Builder, minRoomNum:number) {
  builder.addFieldInt32(6, minRoomNum, 0);
}

static addRoomFinishWaitingTime(builder:flatbuffers.Builder, roomFinishWaitingTime:number) {
  builder.addFieldInt32(7, roomFinishWaitingTime, 0);
}

static addRoomMasterRestartWaitingTime(builder:flatbuffers.Builder, roomMasterRestartWaitingTime:number) {
  builder.addFieldInt32(8, roomMasterRestartWaitingTime, 0);
}

static addPingConds(builder:flatbuffers.Builder, pingCondsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, pingCondsOffset, 0);
}

static createPingCondsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPingCondsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChatCd(builder:flatbuffers.Builder, chatCd:number) {
  builder.addFieldFloat32(10, chatCd, 0.0);
}

static addChatTime(builder:flatbuffers.Builder, chatTime:number) {
  builder.addFieldFloat32(11, chatTime, 0.0);
}

static addDailyMissionParam(builder:flatbuffers.Builder, dailyMissionParam:number) {
  builder.addFieldInt32(12, dailyMissionParam, 0);
}

static addDailyMissionReward(builder:flatbuffers.Builder, dailyMissionRewardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, dailyMissionRewardOffset, 0);
}

static addDailyMissionName(builder:flatbuffers.Builder, dailyMissionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, dailyMissionNameOffset, 0);
}

static addDailyMissionDesc(builder:flatbuffers.Builder, dailyMissionDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, dailyMissionDescOffset, 0);
}

static addMaxOperatorDelay(builder:flatbuffers.Builder, maxOperatorDelay:number) {
  builder.addFieldFloat32(16, maxOperatorDelay, 0.0);
}

static addMaxPlaySpeed(builder:flatbuffers.Builder, maxPlaySpeed:number) {
  builder.addFieldFloat32(17, maxPlaySpeed, 0.0);
}

static addDelayTimeNeedTip(builder:flatbuffers.Builder, delayTimeNeedTip:number) {
  builder.addFieldFloat32(18, delayTimeNeedTip, 0.0);
}

static addNetBlockTimeNeedTip(builder:flatbuffers.Builder, netBlockTimeNeedTip:number) {
  builder.addFieldFloat32(19, netBlockTimeNeedTip, 0.0);
}

static addStageTimeMax(builder:flatbuffers.Builder, stageTimeMax:number) {
  builder.addFieldFloat32(20, stageTimeMax, 0.0);
}

static addNpcCorrectProb(builder:flatbuffers.Builder, npcCorrectProb:number) {
  builder.addFieldFloat32(21, npcCorrectProb, 0.0);
}

static addWinStreakRoundNum(builder:flatbuffers.Builder, winStreakRoundNum:number) {
  builder.addFieldInt32(22, winStreakRoundNum, 0);
}

static addSettlementPicNum(builder:flatbuffers.Builder, settlementPicNum:number) {
  builder.addFieldInt32(23, settlementPicNum, 0);
}

static addTimeBeforeSelectAfterRoundBegin(builder:flatbuffers.Builder, timeBeforeSelectAfterRoundBegin:number) {
  builder.addFieldInt32(24, timeBeforeSelectAfterRoundBegin, 0);
}

static addNpcMaxCorrectCountInStand(builder:flatbuffers.Builder, npcMaxCorrectCountInStand:number) {
  builder.addFieldInt32(25, npcMaxCorrectCountInStand, 0);
}

static addBattlePhaseTimeMax(builder:flatbuffers.Builder, battlePhaseTimeMax:number) {
  builder.addFieldInt32(26, battlePhaseTimeMax, 0);
}

static addBattleFinishToSettleTimeMax(builder:flatbuffers.Builder, battleFinishToSettleTimeMax:number) {
  builder.addFieldInt32(27, battleFinishToSettleTimeMax, 0);
}

static addMinBetCd(builder:flatbuffers.Builder, minBetCd:number) {
  builder.addFieldFloat32(28, minBetCd, 0.0);
}

static addDefaultEmoticonItemId(builder:flatbuffers.Builder, defaultEmoticonItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, defaultEmoticonItemIdOffset, 0);
}

static addDefaultEmoticonPicId(builder:flatbuffers.Builder, defaultEmoticonPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, defaultEmoticonPicIdOffset, 0);
}

static addModeOperationRoundNumber(builder:flatbuffers.Builder, modeOperationRoundNumber:number) {
  builder.addFieldInt32(31, modeOperationRoundNumber, 0);
}

static addModeOperationInitialScore(builder:flatbuffers.Builder, modeOperationInitialScore:number) {
  builder.addFieldInt32(32, modeOperationInitialScore, 0);
}

static addModeOperationMaxScore(builder:flatbuffers.Builder, modeOperationMaxScore:number) {
  builder.addFieldInt32(33, modeOperationMaxScore, 0);
}

static addModeOperationSelectTime(builder:flatbuffers.Builder, modeOperationSelectTime:number) {
  builder.addFieldInt32(34, modeOperationSelectTime, 0);
}

static addModeOperationSelectTimeLast(builder:flatbuffers.Builder, modeOperationSelectTimeLast:number) {
  builder.addFieldInt32(35, modeOperationSelectTimeLast, 0);
}

static addModeOperationSkipParam(builder:flatbuffers.Builder, modeOperationSkipParam:number) {
  builder.addFieldFloat32(36, modeOperationSkipParam, 0.0);
}

static addModeOperationBetParam(builder:flatbuffers.Builder, modeOperationBetParam:number) {
  builder.addFieldFloat32(37, modeOperationBetParam, 0.0);
}

static addModeOperationAllinParam(builder:flatbuffers.Builder, modeOperationAllinParam:number) {
  builder.addFieldFloat32(38, modeOperationAllinParam, 0.0);
}

static addModeOperationTopRank(builder:flatbuffers.Builder, modeOperationTopRank:number) {
  builder.addFieldInt32(39, modeOperationTopRank, 0);
}

static addModeOperationRankTime(builder:flatbuffers.Builder, modeOperationRankTime:number) {
  builder.addFieldInt32(40, modeOperationRankTime, 0);
}

static addModeSoloOperationRankTime(builder:flatbuffers.Builder, modeSoloOperationRankTime:number) {
  builder.addFieldInt32(41, modeSoloOperationRankTime, 0);
}

static addModeOperationRewardMultiplier(builder:flatbuffers.Builder, modeOperationRewardMultiplier:number) {
  builder.addFieldInt32(42, modeOperationRewardMultiplier, 0);
}

static addModeOperationRewardMultiplierAllin(builder:flatbuffers.Builder, modeOperationRewardMultiplierAllin:number) {
  builder.addFieldInt32(43, modeOperationRewardMultiplierAllin, 0);
}

static addModeOperationHotRoundNumber(builder:flatbuffers.Builder, modeOperationHotRoundNumber:number) {
  builder.addFieldInt32(44, modeOperationHotRoundNumber, 0);
}

static addModeSoloOperationSelectTime(builder:flatbuffers.Builder, modeSoloOperationSelectTime:number) {
  builder.addFieldInt32(45, modeSoloOperationSelectTime, 0);
}

static addModeStandRoundNumber(builder:flatbuffers.Builder, modeStandRoundNumber:number) {
  builder.addFieldInt32(46, modeStandRoundNumber, 0);
}

static addModeStandShieldTurn(builder:flatbuffers.Builder, modeStandShieldTurn:number) {
  builder.addFieldInt32(47, modeStandShieldTurn, 0);
}

static addModeStandSelectTime(builder:flatbuffers.Builder, modeStandSelectTime:number) {
  builder.addFieldInt32(48, modeStandSelectTime, 0);
}

static addModeStandSelectTimeLast(builder:flatbuffers.Builder, modeStandSelectTimeLast:number) {
  builder.addFieldInt32(49, modeStandSelectTimeLast, 0);
}

static addModeStandAllinParam(builder:flatbuffers.Builder, modeStandAllinParam:number) {
  builder.addFieldFloat32(50, modeStandAllinParam, 0.0);
}

static addModeStandTopRank(builder:flatbuffers.Builder, modeStandTopRank:number) {
  builder.addFieldInt32(51, modeStandTopRank, 0);
}

static addModeStandRankTime(builder:flatbuffers.Builder, modeStandRankTime:number) {
  builder.addFieldInt32(52, modeStandRankTime, 0);
}

static addModeStandHotRoundNumber(builder:flatbuffers.Builder, modeStandHotRoundNumber:number) {
  builder.addFieldInt32(53, modeStandHotRoundNumber, 0);
}

static addMilestoneName(builder:flatbuffers.Builder, milestoneNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, milestoneNameOffset, 0);
}

static addMilestoneItemId(builder:flatbuffers.Builder, milestoneItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, milestoneItemIdOffset, 0);
}

static addMilestoneItemName(builder:flatbuffers.Builder, milestoneItemNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, milestoneItemNameOffset, 0);
}

static addMilestoneItemText(builder:flatbuffers.Builder, milestoneItemTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, milestoneItemTextOffset, 0);
}

static addMilestoneTrackId(builder:flatbuffers.Builder, milestoneTrackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, milestoneTrackIdOffset, 0);
}

static addEntryVideoId(builder:flatbuffers.Builder, entryVideoIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, entryVideoIdOffset, 0);
}

static addEntryTabText(builder:flatbuffers.Builder, entryTabTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, entryTabTextOffset, 0);
}

static addMatchTabText(builder:flatbuffers.Builder, matchTabTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, matchTabTextOffset, 0);
}

static addModeOperationId(builder:flatbuffers.Builder, modeOperationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, modeOperationIdOffset, 0);
}

static addModeStandId(builder:flatbuffers.Builder, modeStandIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(63, modeStandIdOffset, 0);
}

static addMultiPreposedModeId(builder:flatbuffers.Builder, multiPreposedModeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, multiPreposedModeIdOffset, 0);
}

static addEntryMusicName(builder:flatbuffers.Builder, entryMusicNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, entryMusicNameOffset, 0);
}

static addMilestonePlanName(builder:flatbuffers.Builder, milestonePlanNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, milestonePlanNameOffset, 0);
}

static addModeCondLockText(builder:flatbuffers.Builder, modeCondLockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, modeCondLockTextOffset, 0);
}

static addModeTimeLockText(builder:flatbuffers.Builder, modeTimeLockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, modeTimeLockTextOffset, 0);
}

static addTitlePicRotateTime(builder:flatbuffers.Builder, titlePicRotateTime:number) {
  builder.addFieldFloat32(69, titlePicRotateTime, 0.0);
}

static addTitlePicId(builder:flatbuffers.Builder, titlePicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, titlePicIdOffset, 0);
}

static endclz_Torappu_ActivityEnemyDuelConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActivityEnemyDuelConstDataT {
  return new clz_Torappu_ActivityEnemyDuelConstDataT(
    this.maxLoadingTime(),
    this.maxRetryTimeInBattle(),
    this.maxMatchTime(),
    this.maxRoomTime(),
    this.maxRetryTimeInTeamRoom(),
    this.roomReserveTime(),
    this.minRoomNum(),
    this.roomFinishWaitingTime(),
    this.roomMasterRestartWaitingTime(),
    this.bb!.createObjList<clz_Torappu_ActivityEnemyDuelConstData_PingCond, clz_Torappu_ActivityEnemyDuelConstData_PingCondT>(this.pingConds.bind(this), this.pingCondsLength()),
    this.chatCd(),
    this.chatTime(),
    this.dailyMissionParam(),
    (this.dailyMissionReward() !== null ? this.dailyMissionReward()!.unpack() : null),
    this.dailyMissionName(),
    this.dailyMissionDesc(),
    this.maxOperatorDelay(),
    this.maxPlaySpeed(),
    this.delayTimeNeedTip(),
    this.netBlockTimeNeedTip(),
    this.stageTimeMax(),
    this.npcCorrectProb(),
    this.winStreakRoundNum(),
    this.settlementPicNum(),
    this.timeBeforeSelectAfterRoundBegin(),
    this.npcMaxCorrectCountInStand(),
    this.battlePhaseTimeMax(),
    this.battleFinishToSettleTimeMax(),
    this.minBetCd(),
    this.defaultEmoticonItemId(),
    this.defaultEmoticonPicId(),
    this.modeOperationRoundNumber(),
    this.modeOperationInitialScore(),
    this.modeOperationMaxScore(),
    this.modeOperationSelectTime(),
    this.modeOperationSelectTimeLast(),
    this.modeOperationSkipParam(),
    this.modeOperationBetParam(),
    this.modeOperationAllinParam(),
    this.modeOperationTopRank(),
    this.modeOperationRankTime(),
    this.modeSoloOperationRankTime(),
    this.modeOperationRewardMultiplier(),
    this.modeOperationRewardMultiplierAllin(),
    this.modeOperationHotRoundNumber(),
    this.modeSoloOperationSelectTime(),
    this.modeStandRoundNumber(),
    this.modeStandShieldTurn(),
    this.modeStandSelectTime(),
    this.modeStandSelectTimeLast(),
    this.modeStandAllinParam(),
    this.modeStandTopRank(),
    this.modeStandRankTime(),
    this.modeStandHotRoundNumber(),
    this.milestoneName(),
    this.milestoneItemId(),
    this.milestoneItemName(),
    this.milestoneItemText(),
    this.milestoneTrackId(),
    this.entryVideoId(),
    this.entryTabText(),
    this.matchTabText(),
    this.modeOperationId(),
    this.modeStandId(),
    this.multiPreposedModeId(),
    this.entryMusicName(),
    this.milestonePlanName(),
    this.modeCondLockText(),
    this.modeTimeLockText(),
    this.titlePicRotateTime(),
    this.titlePicId()
  );
}


unpackTo(_o: clz_Torappu_ActivityEnemyDuelConstDataT): void {
  _o.maxLoadingTime = this.maxLoadingTime();
  _o.maxRetryTimeInBattle = this.maxRetryTimeInBattle();
  _o.maxMatchTime = this.maxMatchTime();
  _o.maxRoomTime = this.maxRoomTime();
  _o.maxRetryTimeInTeamRoom = this.maxRetryTimeInTeamRoom();
  _o.roomReserveTime = this.roomReserveTime();
  _o.minRoomNum = this.minRoomNum();
  _o.roomFinishWaitingTime = this.roomFinishWaitingTime();
  _o.roomMasterRestartWaitingTime = this.roomMasterRestartWaitingTime();
  _o.pingConds = this.bb!.createObjList<clz_Torappu_ActivityEnemyDuelConstData_PingCond, clz_Torappu_ActivityEnemyDuelConstData_PingCondT>(this.pingConds.bind(this), this.pingCondsLength());
  _o.chatCd = this.chatCd();
  _o.chatTime = this.chatTime();
  _o.dailyMissionParam = this.dailyMissionParam();
  _o.dailyMissionReward = (this.dailyMissionReward() !== null ? this.dailyMissionReward()!.unpack() : null);
  _o.dailyMissionName = this.dailyMissionName();
  _o.dailyMissionDesc = this.dailyMissionDesc();
  _o.maxOperatorDelay = this.maxOperatorDelay();
  _o.maxPlaySpeed = this.maxPlaySpeed();
  _o.delayTimeNeedTip = this.delayTimeNeedTip();
  _o.netBlockTimeNeedTip = this.netBlockTimeNeedTip();
  _o.stageTimeMax = this.stageTimeMax();
  _o.npcCorrectProb = this.npcCorrectProb();
  _o.winStreakRoundNum = this.winStreakRoundNum();
  _o.settlementPicNum = this.settlementPicNum();
  _o.timeBeforeSelectAfterRoundBegin = this.timeBeforeSelectAfterRoundBegin();
  _o.npcMaxCorrectCountInStand = this.npcMaxCorrectCountInStand();
  _o.battlePhaseTimeMax = this.battlePhaseTimeMax();
  _o.battleFinishToSettleTimeMax = this.battleFinishToSettleTimeMax();
  _o.minBetCd = this.minBetCd();
  _o.defaultEmoticonItemId = this.defaultEmoticonItemId();
  _o.defaultEmoticonPicId = this.defaultEmoticonPicId();
  _o.modeOperationRoundNumber = this.modeOperationRoundNumber();
  _o.modeOperationInitialScore = this.modeOperationInitialScore();
  _o.modeOperationMaxScore = this.modeOperationMaxScore();
  _o.modeOperationSelectTime = this.modeOperationSelectTime();
  _o.modeOperationSelectTimeLast = this.modeOperationSelectTimeLast();
  _o.modeOperationSkipParam = this.modeOperationSkipParam();
  _o.modeOperationBetParam = this.modeOperationBetParam();
  _o.modeOperationAllinParam = this.modeOperationAllinParam();
  _o.modeOperationTopRank = this.modeOperationTopRank();
  _o.modeOperationRankTime = this.modeOperationRankTime();
  _o.modeSoloOperationRankTime = this.modeSoloOperationRankTime();
  _o.modeOperationRewardMultiplier = this.modeOperationRewardMultiplier();
  _o.modeOperationRewardMultiplierAllin = this.modeOperationRewardMultiplierAllin();
  _o.modeOperationHotRoundNumber = this.modeOperationHotRoundNumber();
  _o.modeSoloOperationSelectTime = this.modeSoloOperationSelectTime();
  _o.modeStandRoundNumber = this.modeStandRoundNumber();
  _o.modeStandShieldTurn = this.modeStandShieldTurn();
  _o.modeStandSelectTime = this.modeStandSelectTime();
  _o.modeStandSelectTimeLast = this.modeStandSelectTimeLast();
  _o.modeStandAllinParam = this.modeStandAllinParam();
  _o.modeStandTopRank = this.modeStandTopRank();
  _o.modeStandRankTime = this.modeStandRankTime();
  _o.modeStandHotRoundNumber = this.modeStandHotRoundNumber();
  _o.milestoneName = this.milestoneName();
  _o.milestoneItemId = this.milestoneItemId();
  _o.milestoneItemName = this.milestoneItemName();
  _o.milestoneItemText = this.milestoneItemText();
  _o.milestoneTrackId = this.milestoneTrackId();
  _o.entryVideoId = this.entryVideoId();
  _o.entryTabText = this.entryTabText();
  _o.matchTabText = this.matchTabText();
  _o.modeOperationId = this.modeOperationId();
  _o.modeStandId = this.modeStandId();
  _o.multiPreposedModeId = this.multiPreposedModeId();
  _o.entryMusicName = this.entryMusicName();
  _o.milestonePlanName = this.milestonePlanName();
  _o.modeCondLockText = this.modeCondLockText();
  _o.modeTimeLockText = this.modeTimeLockText();
  _o.titlePicRotateTime = this.titlePicRotateTime();
  _o.titlePicId = this.titlePicId();
}
}

export class clz_Torappu_ActivityEnemyDuelConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public maxLoadingTime: number = 0.0,
  public maxRetryTimeInBattle: number = 0.0,
  public maxMatchTime: number = 0.0,
  public maxRoomTime: number = 0.0,
  public maxRetryTimeInTeamRoom: number = 0.0,
  public roomReserveTime: number = 0.0,
  public minRoomNum: number = 0,
  public roomFinishWaitingTime: number = 0,
  public roomMasterRestartWaitingTime: number = 0,
  public pingConds: (clz_Torappu_ActivityEnemyDuelConstData_PingCondT)[] = [],
  public chatCd: number = 0.0,
  public chatTime: number = 0.0,
  public dailyMissionParam: number = 0,
  public dailyMissionReward: clz_Torappu_ItemBundleT|null = null,
  public dailyMissionName: string|Uint8Array|null = null,
  public dailyMissionDesc: string|Uint8Array|null = null,
  public maxOperatorDelay: number = 0.0,
  public maxPlaySpeed: number = 0.0,
  public delayTimeNeedTip: number = 0.0,
  public netBlockTimeNeedTip: number = 0.0,
  public stageTimeMax: number = 0.0,
  public npcCorrectProb: number = 0.0,
  public winStreakRoundNum: number = 0,
  public settlementPicNum: number = 0,
  public timeBeforeSelectAfterRoundBegin: number = 0,
  public npcMaxCorrectCountInStand: number = 0,
  public battlePhaseTimeMax: number = 0,
  public battleFinishToSettleTimeMax: number = 0,
  public minBetCd: number = 0.0,
  public defaultEmoticonItemId: string|Uint8Array|null = null,
  public defaultEmoticonPicId: string|Uint8Array|null = null,
  public modeOperationRoundNumber: number = 0,
  public modeOperationInitialScore: number = 0,
  public modeOperationMaxScore: number = 0,
  public modeOperationSelectTime: number = 0,
  public modeOperationSelectTimeLast: number = 0,
  public modeOperationSkipParam: number = 0.0,
  public modeOperationBetParam: number = 0.0,
  public modeOperationAllinParam: number = 0.0,
  public modeOperationTopRank: number = 0,
  public modeOperationRankTime: number = 0,
  public modeSoloOperationRankTime: number = 0,
  public modeOperationRewardMultiplier: number = 0,
  public modeOperationRewardMultiplierAllin: number = 0,
  public modeOperationHotRoundNumber: number = 0,
  public modeSoloOperationSelectTime: number = 0,
  public modeStandRoundNumber: number = 0,
  public modeStandShieldTurn: number = 0,
  public modeStandSelectTime: number = 0,
  public modeStandSelectTimeLast: number = 0,
  public modeStandAllinParam: number = 0.0,
  public modeStandTopRank: number = 0,
  public modeStandRankTime: number = 0,
  public modeStandHotRoundNumber: number = 0,
  public milestoneName: string|Uint8Array|null = null,
  public milestoneItemId: string|Uint8Array|null = null,
  public milestoneItemName: string|Uint8Array|null = null,
  public milestoneItemText: string|Uint8Array|null = null,
  public milestoneTrackId: string|Uint8Array|null = null,
  public entryVideoId: string|Uint8Array|null = null,
  public entryTabText: string|Uint8Array|null = null,
  public matchTabText: string|Uint8Array|null = null,
  public modeOperationId: string|Uint8Array|null = null,
  public modeStandId: string|Uint8Array|null = null,
  public multiPreposedModeId: string|Uint8Array|null = null,
  public entryMusicName: string|Uint8Array|null = null,
  public milestonePlanName: string|Uint8Array|null = null,
  public modeCondLockText: string|Uint8Array|null = null,
  public modeTimeLockText: string|Uint8Array|null = null,
  public titlePicRotateTime: number = 0.0,
  public titlePicId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pingConds = clz_Torappu_ActivityEnemyDuelConstData.createPingCondsVector(builder, builder.createObjectOffsetList(this.pingConds));
  const dailyMissionReward = (this.dailyMissionReward !== null ? this.dailyMissionReward!.pack(builder) : 0);
  const dailyMissionName = (this.dailyMissionName !== null ? builder.createString(this.dailyMissionName!) : 0);
  const dailyMissionDesc = (this.dailyMissionDesc !== null ? builder.createString(this.dailyMissionDesc!) : 0);
  const defaultEmoticonItemId = (this.defaultEmoticonItemId !== null ? builder.createString(this.defaultEmoticonItemId!) : 0);
  const defaultEmoticonPicId = (this.defaultEmoticonPicId !== null ? builder.createString(this.defaultEmoticonPicId!) : 0);
  const milestoneName = (this.milestoneName !== null ? builder.createString(this.milestoneName!) : 0);
  const milestoneItemId = (this.milestoneItemId !== null ? builder.createString(this.milestoneItemId!) : 0);
  const milestoneItemName = (this.milestoneItemName !== null ? builder.createString(this.milestoneItemName!) : 0);
  const milestoneItemText = (this.milestoneItemText !== null ? builder.createString(this.milestoneItemText!) : 0);
  const milestoneTrackId = (this.milestoneTrackId !== null ? builder.createString(this.milestoneTrackId!) : 0);
  const entryVideoId = (this.entryVideoId !== null ? builder.createString(this.entryVideoId!) : 0);
  const entryTabText = (this.entryTabText !== null ? builder.createString(this.entryTabText!) : 0);
  const matchTabText = (this.matchTabText !== null ? builder.createString(this.matchTabText!) : 0);
  const modeOperationId = (this.modeOperationId !== null ? builder.createString(this.modeOperationId!) : 0);
  const modeStandId = (this.modeStandId !== null ? builder.createString(this.modeStandId!) : 0);
  const multiPreposedModeId = (this.multiPreposedModeId !== null ? builder.createString(this.multiPreposedModeId!) : 0);
  const entryMusicName = (this.entryMusicName !== null ? builder.createString(this.entryMusicName!) : 0);
  const milestonePlanName = (this.milestonePlanName !== null ? builder.createString(this.milestonePlanName!) : 0);
  const modeCondLockText = (this.modeCondLockText !== null ? builder.createString(this.modeCondLockText!) : 0);
  const modeTimeLockText = (this.modeTimeLockText !== null ? builder.createString(this.modeTimeLockText!) : 0);
  const titlePicId = (this.titlePicId !== null ? builder.createString(this.titlePicId!) : 0);

  clz_Torappu_ActivityEnemyDuelConstData.startclz_Torappu_ActivityEnemyDuelConstData(builder);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxLoadingTime(builder, this.maxLoadingTime);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxRetryTimeInBattle(builder, this.maxRetryTimeInBattle);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxMatchTime(builder, this.maxMatchTime);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxRoomTime(builder, this.maxRoomTime);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxRetryTimeInTeamRoom(builder, this.maxRetryTimeInTeamRoom);
  clz_Torappu_ActivityEnemyDuelConstData.addRoomReserveTime(builder, this.roomReserveTime);
  clz_Torappu_ActivityEnemyDuelConstData.addMinRoomNum(builder, this.minRoomNum);
  clz_Torappu_ActivityEnemyDuelConstData.addRoomFinishWaitingTime(builder, this.roomFinishWaitingTime);
  clz_Torappu_ActivityEnemyDuelConstData.addRoomMasterRestartWaitingTime(builder, this.roomMasterRestartWaitingTime);
  clz_Torappu_ActivityEnemyDuelConstData.addPingConds(builder, pingConds);
  clz_Torappu_ActivityEnemyDuelConstData.addChatCd(builder, this.chatCd);
  clz_Torappu_ActivityEnemyDuelConstData.addChatTime(builder, this.chatTime);
  clz_Torappu_ActivityEnemyDuelConstData.addDailyMissionParam(builder, this.dailyMissionParam);
  clz_Torappu_ActivityEnemyDuelConstData.addDailyMissionReward(builder, dailyMissionReward);
  clz_Torappu_ActivityEnemyDuelConstData.addDailyMissionName(builder, dailyMissionName);
  clz_Torappu_ActivityEnemyDuelConstData.addDailyMissionDesc(builder, dailyMissionDesc);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxOperatorDelay(builder, this.maxOperatorDelay);
  clz_Torappu_ActivityEnemyDuelConstData.addMaxPlaySpeed(builder, this.maxPlaySpeed);
  clz_Torappu_ActivityEnemyDuelConstData.addDelayTimeNeedTip(builder, this.delayTimeNeedTip);
  clz_Torappu_ActivityEnemyDuelConstData.addNetBlockTimeNeedTip(builder, this.netBlockTimeNeedTip);
  clz_Torappu_ActivityEnemyDuelConstData.addStageTimeMax(builder, this.stageTimeMax);
  clz_Torappu_ActivityEnemyDuelConstData.addNpcCorrectProb(builder, this.npcCorrectProb);
  clz_Torappu_ActivityEnemyDuelConstData.addWinStreakRoundNum(builder, this.winStreakRoundNum);
  clz_Torappu_ActivityEnemyDuelConstData.addSettlementPicNum(builder, this.settlementPicNum);
  clz_Torappu_ActivityEnemyDuelConstData.addTimeBeforeSelectAfterRoundBegin(builder, this.timeBeforeSelectAfterRoundBegin);
  clz_Torappu_ActivityEnemyDuelConstData.addNpcMaxCorrectCountInStand(builder, this.npcMaxCorrectCountInStand);
  clz_Torappu_ActivityEnemyDuelConstData.addBattlePhaseTimeMax(builder, this.battlePhaseTimeMax);
  clz_Torappu_ActivityEnemyDuelConstData.addBattleFinishToSettleTimeMax(builder, this.battleFinishToSettleTimeMax);
  clz_Torappu_ActivityEnemyDuelConstData.addMinBetCd(builder, this.minBetCd);
  clz_Torappu_ActivityEnemyDuelConstData.addDefaultEmoticonItemId(builder, defaultEmoticonItemId);
  clz_Torappu_ActivityEnemyDuelConstData.addDefaultEmoticonPicId(builder, defaultEmoticonPicId);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationRoundNumber(builder, this.modeOperationRoundNumber);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationInitialScore(builder, this.modeOperationInitialScore);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationMaxScore(builder, this.modeOperationMaxScore);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationSelectTime(builder, this.modeOperationSelectTime);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationSelectTimeLast(builder, this.modeOperationSelectTimeLast);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationSkipParam(builder, this.modeOperationSkipParam);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationBetParam(builder, this.modeOperationBetParam);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationAllinParam(builder, this.modeOperationAllinParam);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationTopRank(builder, this.modeOperationTopRank);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationRankTime(builder, this.modeOperationRankTime);
  clz_Torappu_ActivityEnemyDuelConstData.addModeSoloOperationRankTime(builder, this.modeSoloOperationRankTime);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationRewardMultiplier(builder, this.modeOperationRewardMultiplier);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationRewardMultiplierAllin(builder, this.modeOperationRewardMultiplierAllin);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationHotRoundNumber(builder, this.modeOperationHotRoundNumber);
  clz_Torappu_ActivityEnemyDuelConstData.addModeSoloOperationSelectTime(builder, this.modeSoloOperationSelectTime);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandRoundNumber(builder, this.modeStandRoundNumber);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandShieldTurn(builder, this.modeStandShieldTurn);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandSelectTime(builder, this.modeStandSelectTime);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandSelectTimeLast(builder, this.modeStandSelectTimeLast);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandAllinParam(builder, this.modeStandAllinParam);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandTopRank(builder, this.modeStandTopRank);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandRankTime(builder, this.modeStandRankTime);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandHotRoundNumber(builder, this.modeStandHotRoundNumber);
  clz_Torappu_ActivityEnemyDuelConstData.addMilestoneName(builder, milestoneName);
  clz_Torappu_ActivityEnemyDuelConstData.addMilestoneItemId(builder, milestoneItemId);
  clz_Torappu_ActivityEnemyDuelConstData.addMilestoneItemName(builder, milestoneItemName);
  clz_Torappu_ActivityEnemyDuelConstData.addMilestoneItemText(builder, milestoneItemText);
  clz_Torappu_ActivityEnemyDuelConstData.addMilestoneTrackId(builder, milestoneTrackId);
  clz_Torappu_ActivityEnemyDuelConstData.addEntryVideoId(builder, entryVideoId);
  clz_Torappu_ActivityEnemyDuelConstData.addEntryTabText(builder, entryTabText);
  clz_Torappu_ActivityEnemyDuelConstData.addMatchTabText(builder, matchTabText);
  clz_Torappu_ActivityEnemyDuelConstData.addModeOperationId(builder, modeOperationId);
  clz_Torappu_ActivityEnemyDuelConstData.addModeStandId(builder, modeStandId);
  clz_Torappu_ActivityEnemyDuelConstData.addMultiPreposedModeId(builder, multiPreposedModeId);
  clz_Torappu_ActivityEnemyDuelConstData.addEntryMusicName(builder, entryMusicName);
  clz_Torappu_ActivityEnemyDuelConstData.addMilestonePlanName(builder, milestonePlanName);
  clz_Torappu_ActivityEnemyDuelConstData.addModeCondLockText(builder, modeCondLockText);
  clz_Torappu_ActivityEnemyDuelConstData.addModeTimeLockText(builder, modeTimeLockText);
  clz_Torappu_ActivityEnemyDuelConstData.addTitlePicRotateTime(builder, this.titlePicRotateTime);
  clz_Torappu_ActivityEnemyDuelConstData.addTitlePicId(builder, titlePicId);

  return clz_Torappu_ActivityEnemyDuelConstData.endclz_Torappu_ActivityEnemyDuelConstData(builder);
}
}
