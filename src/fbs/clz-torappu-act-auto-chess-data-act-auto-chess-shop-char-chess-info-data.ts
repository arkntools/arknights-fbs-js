// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_EvolvePhase } from './enum--torappu-evolve-phase.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData):clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData):clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chessLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isGolden():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

evolvePhase():enum__Torappu_EvolvePhase {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_EvolvePhase.PHASE_0;
}

charLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

skillLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

favorPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

equipLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

purchasePrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

chessSoldPrice():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

eliteIconId():string|null
eliteIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eliteIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addChessLevel(builder:flatbuffers.Builder, chessLevel:number) {
  builder.addFieldInt32(0, chessLevel, 0);
}

static addIsGolden(builder:flatbuffers.Builder, isGolden:boolean) {
  builder.addFieldInt8(1, +isGolden, +false);
}

static addEvolvePhase(builder:flatbuffers.Builder, evolvePhase:enum__Torappu_EvolvePhase) {
  builder.addFieldInt32(2, evolvePhase, enum__Torappu_EvolvePhase.PHASE_0);
}

static addCharLevel(builder:flatbuffers.Builder, charLevel:number) {
  builder.addFieldInt32(3, charLevel, 0);
}

static addSkillLevel(builder:flatbuffers.Builder, skillLevel:number) {
  builder.addFieldInt32(4, skillLevel, 0);
}

static addFavorPoint(builder:flatbuffers.Builder, favorPoint:number) {
  builder.addFieldInt32(5, favorPoint, 0);
}

static addEquipLevel(builder:flatbuffers.Builder, equipLevel:number) {
  builder.addFieldInt32(6, equipLevel, 0);
}

static addPurchasePrice(builder:flatbuffers.Builder, purchasePrice:number) {
  builder.addFieldInt32(7, purchasePrice, 0);
}

static addChessSoldPrice(builder:flatbuffers.Builder, chessSoldPrice:number) {
  builder.addFieldInt32(8, chessSoldPrice, 0);
}

static addEliteIconId(builder:flatbuffers.Builder, eliteIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, eliteIconIdOffset, 0);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(builder:flatbuffers.Builder, chessLevel:number, isGolden:boolean, evolvePhase:enum__Torappu_EvolvePhase, charLevel:number, skillLevel:number, favorPoint:number, equipLevel:number, purchasePrice:number, chessSoldPrice:number, eliteIconIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.startclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addChessLevel(builder, chessLevel);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addIsGolden(builder, isGolden);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addEvolvePhase(builder, evolvePhase);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addCharLevel(builder, charLevel);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addSkillLevel(builder, skillLevel);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addFavorPoint(builder, favorPoint);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addEquipLevel(builder, equipLevel);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addPurchasePrice(builder, purchasePrice);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addChessSoldPrice(builder, chessSoldPrice);
  clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.addEliteIconId(builder, eliteIconIdOffset);
  return clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.endclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoDataT(
    this.chessLevel(),
    this.isGolden(),
    this.evolvePhase(),
    this.charLevel(),
    this.skillLevel(),
    this.favorPoint(),
    this.equipLevel(),
    this.purchasePrice(),
    this.chessSoldPrice(),
    this.eliteIconId()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoDataT): void {
  _o.chessLevel = this.chessLevel();
  _o.isGolden = this.isGolden();
  _o.evolvePhase = this.evolvePhase();
  _o.charLevel = this.charLevel();
  _o.skillLevel = this.skillLevel();
  _o.favorPoint = this.favorPoint();
  _o.equipLevel = this.equipLevel();
  _o.purchasePrice = this.purchasePrice();
  _o.chessSoldPrice = this.chessSoldPrice();
  _o.eliteIconId = this.eliteIconId();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public chessLevel: number = 0,
  public isGolden: boolean = false,
  public evolvePhase: enum__Torappu_EvolvePhase = enum__Torappu_EvolvePhase.PHASE_0,
  public charLevel: number = 0,
  public skillLevel: number = 0,
  public favorPoint: number = 0,
  public equipLevel: number = 0,
  public purchasePrice: number = 0,
  public chessSoldPrice: number = 0,
  public eliteIconId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const eliteIconId = (this.eliteIconId !== null ? builder.createString(this.eliteIconId!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData.createclz_Torappu_ActAutoChessData_ActAutoChessShopCharChessInfoData(builder,
    this.chessLevel,
    this.isGolden,
    this.evolvePhase,
    this.charLevel,
    this.skillLevel,
    this.favorPoint,
    this.equipLevel,
    this.purchasePrice,
    this.chessSoldPrice,
    eliteIconId
  );
}
}
