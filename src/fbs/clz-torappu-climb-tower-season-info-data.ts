// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ClimbTowerSeasonInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_ClimbTowerSeasonInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ClimbTowerSeasonInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ClimbTowerSeasonInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerSeasonInfoData):clz_Torappu_ClimbTowerSeasonInfoData {
  return (obj || new clz_Torappu_ClimbTowerSeasonInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ClimbTowerSeasonInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerSeasonInfoData):clz_Torappu_ClimbTowerSeasonInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ClimbTowerSeasonInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

seasonNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

startTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

towers(index: number):string
towers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
towers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

towersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

seasonCards(index: number):string
seasonCards(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
seasonCards(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

seasonCardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

replicatedTowers(index: number):string
replicatedTowers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
replicatedTowers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

replicatedTowersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ClimbTowerSeasonInfoData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addSeasonNum(builder:flatbuffers.Builder, seasonNum:number) {
  builder.addFieldInt32(2, seasonNum, 0);
}

static addStartTs(builder:flatbuffers.Builder, startTs:bigint) {
  builder.addFieldInt64(3, startTs, BigInt('0'));
}

static addEndTs(builder:flatbuffers.Builder, endTs:bigint) {
  builder.addFieldInt64(4, endTs, BigInt('0'));
}

static addTowers(builder:flatbuffers.Builder, towersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, towersOffset, 0);
}

static createTowersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTowersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeasonCards(builder:flatbuffers.Builder, seasonCardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, seasonCardsOffset, 0);
}

static createSeasonCardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeasonCardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReplicatedTowers(builder:flatbuffers.Builder, replicatedTowersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, replicatedTowersOffset, 0);
}

static createReplicatedTowersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReplicatedTowersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ClimbTowerSeasonInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ClimbTowerSeasonInfoData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, seasonNum:number, startTs:bigint, endTs:bigint, towersOffset:flatbuffers.Offset, seasonCardsOffset:flatbuffers.Offset, replicatedTowersOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ClimbTowerSeasonInfoData.startclz_Torappu_ClimbTowerSeasonInfoData(builder);
  clz_Torappu_ClimbTowerSeasonInfoData.addId(builder, idOffset);
  clz_Torappu_ClimbTowerSeasonInfoData.addName(builder, nameOffset);
  clz_Torappu_ClimbTowerSeasonInfoData.addSeasonNum(builder, seasonNum);
  clz_Torappu_ClimbTowerSeasonInfoData.addStartTs(builder, startTs);
  clz_Torappu_ClimbTowerSeasonInfoData.addEndTs(builder, endTs);
  clz_Torappu_ClimbTowerSeasonInfoData.addTowers(builder, towersOffset);
  clz_Torappu_ClimbTowerSeasonInfoData.addSeasonCards(builder, seasonCardsOffset);
  clz_Torappu_ClimbTowerSeasonInfoData.addReplicatedTowers(builder, replicatedTowersOffset);
  return clz_Torappu_ClimbTowerSeasonInfoData.endclz_Torappu_ClimbTowerSeasonInfoData(builder);
}

unpack(): clz_Torappu_ClimbTowerSeasonInfoDataT {
  return new clz_Torappu_ClimbTowerSeasonInfoDataT(
    this.id(),
    this.name(),
    this.seasonNum(),
    this.startTs(),
    this.endTs(),
    this.bb!.createScalarList<string>(this.towers.bind(this), this.towersLength()),
    this.bb!.createScalarList<string>(this.seasonCards.bind(this), this.seasonCardsLength()),
    this.bb!.createScalarList<string>(this.replicatedTowers.bind(this), this.replicatedTowersLength())
  );
}


unpackTo(_o: clz_Torappu_ClimbTowerSeasonInfoDataT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.seasonNum = this.seasonNum();
  _o.startTs = this.startTs();
  _o.endTs = this.endTs();
  _o.towers = this.bb!.createScalarList<string>(this.towers.bind(this), this.towersLength());
  _o.seasonCards = this.bb!.createScalarList<string>(this.seasonCards.bind(this), this.seasonCardsLength());
  _o.replicatedTowers = this.bb!.createScalarList<string>(this.replicatedTowers.bind(this), this.replicatedTowersLength());
}
}

export class clz_Torappu_ClimbTowerSeasonInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public seasonNum: number = 0,
  public startTs: bigint = BigInt('0'),
  public endTs: bigint = BigInt('0'),
  public towers: (string)[] = [],
  public seasonCards: (string)[] = [],
  public replicatedTowers: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const towers = clz_Torappu_ClimbTowerSeasonInfoData.createTowersVector(builder, builder.createObjectOffsetList(this.towers));
  const seasonCards = clz_Torappu_ClimbTowerSeasonInfoData.createSeasonCardsVector(builder, builder.createObjectOffsetList(this.seasonCards));
  const replicatedTowers = clz_Torappu_ClimbTowerSeasonInfoData.createReplicatedTowersVector(builder, builder.createObjectOffsetList(this.replicatedTowers));

  return clz_Torappu_ClimbTowerSeasonInfoData.createclz_Torappu_ClimbTowerSeasonInfoData(builder,
    id,
    name,
    this.seasonNum,
    this.startTs,
    this.endTs,
    towers,
    seasonCards,
    replicatedTowers
  );
}
}
