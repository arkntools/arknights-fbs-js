// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_GachaRuleType } from './enum--torappu-gacha-rule-type.js';
import { hg__internal__JObject, hg__internal__JObjectT } from './hg--internal--jobject.js';


export class clz_Torappu_GachaPoolClientData implements flatbuffers.IUnpackableObject<clz_Torappu_GachaPoolClientDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_GachaPoolClientData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_GachaPoolClientData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_GachaPoolClientData):clz_Torappu_GachaPoolClientData {
  return (obj || new clz_Torappu_GachaPoolClientData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_GachaPoolClientData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_GachaPoolClientData):clz_Torappu_GachaPoolClientData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_GachaPoolClientData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

gachaPoolId():string|null
gachaPoolId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaPoolId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gachaIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

openTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

gachaPoolName():string|null
gachaPoolName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaPoolName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gachaPoolSummary():string|null
gachaPoolSummary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaPoolSummary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gachaPoolDetail():string|null
gachaPoolDetail(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaPoolDetail(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

guaranteeName():string|null
guaranteeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
guaranteeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

guarantee5Avail():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

guarantee5Count():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lmtgsid():string|null
lmtgsid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lmtgsid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cdprimColor():string|null
cdprimColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cdprimColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cdsecColor():string|null
cdsecColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cdsecColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

freeBackColor():string|null
freeBackColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
freeBackColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gachaRuleType():enum__Torappu_GachaRuleType {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_GachaRuleType.NORMAL;
}

dynMeta(obj?:hg__internal__JObject):hg__internal__JObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new hg__internal__JObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

linkageRuleId():string|null
linkageRuleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
linkageRuleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

linkageParam(obj?:hg__internal__JObject):hg__internal__JObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? (obj || new hg__internal__JObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

limitParam(obj?:hg__internal__JObject):hg__internal__JObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new hg__internal__JObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_GachaPoolClientData(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addGachaPoolId(builder:flatbuffers.Builder, gachaPoolIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gachaPoolIdOffset, 0);
}

static addGachaIndex(builder:flatbuffers.Builder, gachaIndex:number) {
  builder.addFieldInt32(1, gachaIndex, 0);
}

static addOpenTime(builder:flatbuffers.Builder, openTime:bigint) {
  builder.addFieldInt64(2, openTime, BigInt('0'));
}

static addEndTime(builder:flatbuffers.Builder, endTime:bigint) {
  builder.addFieldInt64(3, endTime, BigInt('0'));
}

static addGachaPoolName(builder:flatbuffers.Builder, gachaPoolNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, gachaPoolNameOffset, 0);
}

static addGachaPoolSummary(builder:flatbuffers.Builder, gachaPoolSummaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, gachaPoolSummaryOffset, 0);
}

static addGachaPoolDetail(builder:flatbuffers.Builder, gachaPoolDetailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, gachaPoolDetailOffset, 0);
}

static addGuaranteeName(builder:flatbuffers.Builder, guaranteeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, guaranteeNameOffset, 0);
}

static addGuarantee5Avail(builder:flatbuffers.Builder, guarantee5Avail:number) {
  builder.addFieldInt32(8, guarantee5Avail, 0);
}

static addGuarantee5Count(builder:flatbuffers.Builder, guarantee5Count:number) {
  builder.addFieldInt32(9, guarantee5Count, 0);
}

static addLmtgsid(builder:flatbuffers.Builder, lmtgsidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, lmtgsidOffset, 0);
}

static addCdprimColor(builder:flatbuffers.Builder, cdprimColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, cdprimColorOffset, 0);
}

static addCdsecColor(builder:flatbuffers.Builder, cdsecColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, cdsecColorOffset, 0);
}

static addFreeBackColor(builder:flatbuffers.Builder, freeBackColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, freeBackColorOffset, 0);
}

static addGachaRuleType(builder:flatbuffers.Builder, gachaRuleType:enum__Torappu_GachaRuleType) {
  builder.addFieldInt32(14, gachaRuleType, enum__Torappu_GachaRuleType.NORMAL);
}

static addDynMeta(builder:flatbuffers.Builder, dynMetaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, dynMetaOffset, 0);
}

static addLinkageRuleId(builder:flatbuffers.Builder, linkageRuleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, linkageRuleIdOffset, 0);
}

static addLinkageParam(builder:flatbuffers.Builder, linkageParamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, linkageParamOffset, 0);
}

static addLimitParam(builder:flatbuffers.Builder, limitParamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, limitParamOffset, 0);
}

static endclz_Torappu_GachaPoolClientData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_GachaPoolClientDataT {
  return new clz_Torappu_GachaPoolClientDataT(
    this.gachaPoolId(),
    this.gachaIndex(),
    this.openTime(),
    this.endTime(),
    this.gachaPoolName(),
    this.gachaPoolSummary(),
    this.gachaPoolDetail(),
    this.guaranteeName(),
    this.guarantee5Avail(),
    this.guarantee5Count(),
    this.lmtgsid(),
    this.cdprimColor(),
    this.cdsecColor(),
    this.freeBackColor(),
    this.gachaRuleType(),
    (this.dynMeta() !== null ? this.dynMeta()!.unpack() : null),
    this.linkageRuleId(),
    (this.linkageParam() !== null ? this.linkageParam()!.unpack() : null),
    (this.limitParam() !== null ? this.limitParam()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_GachaPoolClientDataT): void {
  _o.gachaPoolId = this.gachaPoolId();
  _o.gachaIndex = this.gachaIndex();
  _o.openTime = this.openTime();
  _o.endTime = this.endTime();
  _o.gachaPoolName = this.gachaPoolName();
  _o.gachaPoolSummary = this.gachaPoolSummary();
  _o.gachaPoolDetail = this.gachaPoolDetail();
  _o.guaranteeName = this.guaranteeName();
  _o.guarantee5Avail = this.guarantee5Avail();
  _o.guarantee5Count = this.guarantee5Count();
  _o.lmtgsid = this.lmtgsid();
  _o.cdprimColor = this.cdprimColor();
  _o.cdsecColor = this.cdsecColor();
  _o.freeBackColor = this.freeBackColor();
  _o.gachaRuleType = this.gachaRuleType();
  _o.dynMeta = (this.dynMeta() !== null ? this.dynMeta()!.unpack() : null);
  _o.linkageRuleId = this.linkageRuleId();
  _o.linkageParam = (this.linkageParam() !== null ? this.linkageParam()!.unpack() : null);
  _o.limitParam = (this.limitParam() !== null ? this.limitParam()!.unpack() : null);
}
}

export class clz_Torappu_GachaPoolClientDataT implements flatbuffers.IGeneratedObject {
constructor(
  public gachaPoolId: string|Uint8Array|null = null,
  public gachaIndex: number = 0,
  public openTime: bigint = BigInt('0'),
  public endTime: bigint = BigInt('0'),
  public gachaPoolName: string|Uint8Array|null = null,
  public gachaPoolSummary: string|Uint8Array|null = null,
  public gachaPoolDetail: string|Uint8Array|null = null,
  public guaranteeName: string|Uint8Array|null = null,
  public guarantee5Avail: number = 0,
  public guarantee5Count: number = 0,
  public lmtgsid: string|Uint8Array|null = null,
  public cdprimColor: string|Uint8Array|null = null,
  public cdsecColor: string|Uint8Array|null = null,
  public freeBackColor: string|Uint8Array|null = null,
  public gachaRuleType: enum__Torappu_GachaRuleType = enum__Torappu_GachaRuleType.NORMAL,
  public dynMeta: hg__internal__JObjectT|null = null,
  public linkageRuleId: string|Uint8Array|null = null,
  public linkageParam: hg__internal__JObjectT|null = null,
  public limitParam: hg__internal__JObjectT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const gachaPoolId = (this.gachaPoolId !== null ? builder.createString(this.gachaPoolId!) : 0);
  const gachaPoolName = (this.gachaPoolName !== null ? builder.createString(this.gachaPoolName!) : 0);
  const gachaPoolSummary = (this.gachaPoolSummary !== null ? builder.createString(this.gachaPoolSummary!) : 0);
  const gachaPoolDetail = (this.gachaPoolDetail !== null ? builder.createString(this.gachaPoolDetail!) : 0);
  const guaranteeName = (this.guaranteeName !== null ? builder.createString(this.guaranteeName!) : 0);
  const lmtgsid = (this.lmtgsid !== null ? builder.createString(this.lmtgsid!) : 0);
  const cdprimColor = (this.cdprimColor !== null ? builder.createString(this.cdprimColor!) : 0);
  const cdsecColor = (this.cdsecColor !== null ? builder.createString(this.cdsecColor!) : 0);
  const freeBackColor = (this.freeBackColor !== null ? builder.createString(this.freeBackColor!) : 0);
  const dynMeta = (this.dynMeta !== null ? this.dynMeta!.pack(builder) : 0);
  const linkageRuleId = (this.linkageRuleId !== null ? builder.createString(this.linkageRuleId!) : 0);
  const linkageParam = (this.linkageParam !== null ? this.linkageParam!.pack(builder) : 0);
  const limitParam = (this.limitParam !== null ? this.limitParam!.pack(builder) : 0);

  clz_Torappu_GachaPoolClientData.startclz_Torappu_GachaPoolClientData(builder);
  clz_Torappu_GachaPoolClientData.addGachaPoolId(builder, gachaPoolId);
  clz_Torappu_GachaPoolClientData.addGachaIndex(builder, this.gachaIndex);
  clz_Torappu_GachaPoolClientData.addOpenTime(builder, this.openTime);
  clz_Torappu_GachaPoolClientData.addEndTime(builder, this.endTime);
  clz_Torappu_GachaPoolClientData.addGachaPoolName(builder, gachaPoolName);
  clz_Torappu_GachaPoolClientData.addGachaPoolSummary(builder, gachaPoolSummary);
  clz_Torappu_GachaPoolClientData.addGachaPoolDetail(builder, gachaPoolDetail);
  clz_Torappu_GachaPoolClientData.addGuaranteeName(builder, guaranteeName);
  clz_Torappu_GachaPoolClientData.addGuarantee5Avail(builder, this.guarantee5Avail);
  clz_Torappu_GachaPoolClientData.addGuarantee5Count(builder, this.guarantee5Count);
  clz_Torappu_GachaPoolClientData.addLmtgsid(builder, lmtgsid);
  clz_Torappu_GachaPoolClientData.addCdprimColor(builder, cdprimColor);
  clz_Torappu_GachaPoolClientData.addCdsecColor(builder, cdsecColor);
  clz_Torappu_GachaPoolClientData.addFreeBackColor(builder, freeBackColor);
  clz_Torappu_GachaPoolClientData.addGachaRuleType(builder, this.gachaRuleType);
  clz_Torappu_GachaPoolClientData.addDynMeta(builder, dynMeta);
  clz_Torappu_GachaPoolClientData.addLinkageRuleId(builder, linkageRuleId);
  clz_Torappu_GachaPoolClientData.addLinkageParam(builder, linkageParam);
  clz_Torappu_GachaPoolClientData.addLimitParam(builder, limitParam);

  return clz_Torappu_GachaPoolClientData.endclz_Torappu_GachaPoolClientData(builder);
}
}
