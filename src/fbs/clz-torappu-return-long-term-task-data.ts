// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_MissionDisplayRewards, clz_Torappu_MissionDisplayRewardsT } from './clz-torappu-mission-display-rewards.js';


export class clz_Torappu_ReturnLongTermTaskData implements flatbuffers.IUnpackableObject<clz_Torappu_ReturnLongTermTaskDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ReturnLongTermTaskData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ReturnLongTermTaskData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ReturnLongTermTaskData):clz_Torappu_ReturnLongTermTaskData {
  return (obj || new clz_Torappu_ReturnLongTermTaskData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ReturnLongTermTaskData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ReturnLongTermTaskData):clz_Torappu_ReturnLongTermTaskData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ReturnLongTermTaskData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

template():string|null
template(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
template(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

param(index: number):string
param(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
param(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

paramLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewards(index: number, obj?:clz_Torappu_MissionDisplayRewards):clz_Torappu_MissionDisplayRewards|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_MissionDisplayRewards()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

playPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ReturnLongTermTaskData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addTemplate(builder:flatbuffers.Builder, templateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, templateOffset, 0);
}

static addParam(builder:flatbuffers.Builder, paramOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, paramOffset, 0);
}

static createParamVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParamVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descOffset, 0);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rewardsOffset, 0);
}

static createRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlayPoint(builder:flatbuffers.Builder, playPoint:number) {
  builder.addFieldInt32(6, playPoint, 0);
}

static endclz_Torappu_ReturnLongTermTaskData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ReturnLongTermTaskData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, sortId:number, templateOffset:flatbuffers.Offset, paramOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, rewardsOffset:flatbuffers.Offset, playPoint:number):flatbuffers.Offset {
  clz_Torappu_ReturnLongTermTaskData.startclz_Torappu_ReturnLongTermTaskData(builder);
  clz_Torappu_ReturnLongTermTaskData.addId(builder, idOffset);
  clz_Torappu_ReturnLongTermTaskData.addSortId(builder, sortId);
  clz_Torappu_ReturnLongTermTaskData.addTemplate(builder, templateOffset);
  clz_Torappu_ReturnLongTermTaskData.addParam(builder, paramOffset);
  clz_Torappu_ReturnLongTermTaskData.addDesc(builder, descOffset);
  clz_Torappu_ReturnLongTermTaskData.addRewards(builder, rewardsOffset);
  clz_Torappu_ReturnLongTermTaskData.addPlayPoint(builder, playPoint);
  return clz_Torappu_ReturnLongTermTaskData.endclz_Torappu_ReturnLongTermTaskData(builder);
}

unpack(): clz_Torappu_ReturnLongTermTaskDataT {
  return new clz_Torappu_ReturnLongTermTaskDataT(
    this.id(),
    this.sortId(),
    this.template(),
    this.bb!.createScalarList<string>(this.param.bind(this), this.paramLength()),
    this.desc(),
    this.bb!.createObjList<clz_Torappu_MissionDisplayRewards, clz_Torappu_MissionDisplayRewardsT>(this.rewards.bind(this), this.rewardsLength()),
    this.playPoint()
  );
}


unpackTo(_o: clz_Torappu_ReturnLongTermTaskDataT): void {
  _o.id = this.id();
  _o.sortId = this.sortId();
  _o.template = this.template();
  _o.param = this.bb!.createScalarList<string>(this.param.bind(this), this.paramLength());
  _o.desc = this.desc();
  _o.rewards = this.bb!.createObjList<clz_Torappu_MissionDisplayRewards, clz_Torappu_MissionDisplayRewardsT>(this.rewards.bind(this), this.rewardsLength());
  _o.playPoint = this.playPoint();
}
}

export class clz_Torappu_ReturnLongTermTaskDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public sortId: number = 0,
  public template: string|Uint8Array|null = null,
  public param: (string)[] = [],
  public desc: string|Uint8Array|null = null,
  public rewards: (clz_Torappu_MissionDisplayRewardsT)[] = [],
  public playPoint: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const template = (this.template !== null ? builder.createString(this.template!) : 0);
  const param = clz_Torappu_ReturnLongTermTaskData.createParamVector(builder, builder.createObjectOffsetList(this.param));
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const rewards = clz_Torappu_ReturnLongTermTaskData.createRewardsVector(builder, builder.createObjectOffsetList(this.rewards));

  return clz_Torappu_ReturnLongTermTaskData.createclz_Torappu_ReturnLongTermTaskData(builder,
    id,
    this.sortId,
    template,
    param,
    desc,
    rewards,
    this.playPoint
  );
}
}
