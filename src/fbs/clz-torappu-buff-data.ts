// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_AttributeModifierData, clz_Torappu_AttributeModifierDataT } from './clz-torappu-attribute-modifier-data.js';
import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';
import { enum__Torappu_BuffData_OnEventPriority } from './enum--torappu-buff-data-on-event-priority.js';
import { enum__Torappu_BuffData_OverrideType } from './enum--torappu-buff-data-override-type.js';
import { enum__Torappu_BuffData_StatusResistable } from './enum--torappu-buff-data-status-resistable.js';
import { enum__Torappu_LifeType } from './enum--torappu-life-type.js';


export class clz_Torappu_BuffData implements flatbuffers.IUnpackableObject<clz_Torappu_BuffDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuffData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuffData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuffData):clz_Torappu_BuffData {
  return (obj || new clz_Torappu_BuffData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuffData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuffData):clz_Torappu_BuffData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuffData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

attributes(obj?:clz_Torappu_AttributeModifierData):clz_Torappu_AttributeModifierData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_AttributeModifierData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

buffKey():string|null
buffKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
buffKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

loadFromDb():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isDurableBuff():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isDamageMissable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSilenceable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isStunnable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isFreezable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isLevitatable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

statusResistable():enum__Torappu_BuffData_StatusResistable {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : enum__Torappu_BuffData_StatusResistable.NO;
}

templateKey():string|null
templateKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

disableOverride():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

overrideKey():string|null
overrideKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
overrideKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

overrideType():enum__Torappu_BuffData_OverrideType {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuffData_OverrideType.DEFAULT;
}

maxStackCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

refreshRemainingTimeWhenStackMax():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

clearAllStackCntWhenTimeUp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maxValidStackCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

independentCharacterSource():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

overrideEffectKey():string|null
overrideEffectKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
overrideEffectKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

overrideOnEventPriority():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

onEventPriority():enum__Torappu_BuffData_OnEventPriority {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuffData_OnEventPriority.DEFAULT;
}

audioSignal():string|null
audioSignal(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
audioSignal(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lifeTimeType():enum__Torappu_LifeType {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : enum__Torappu_LifeType.IMMEDIATELY;
}

takeSnapshotWhenExtend():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

durationKey():string|null
durationKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
durationKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lifeTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

triggerLifeType():enum__Torappu_LifeType {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : enum__Torappu_LifeType.IMMEDIATELY;
}

triggerCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

triggerInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

waitFirstTriggerInterval():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

firstTriggerInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

priorityBbkeys(index: number):string
priorityBbkeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
priorityBbkeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

priorityBbkeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stripBlackboardParamsWithBuffKey():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

blackboard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blackboardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuffData(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static addAttributes(builder:flatbuffers.Builder, attributesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, attributesOffset, 0);
}

static addBuffKey(builder:flatbuffers.Builder, buffKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, buffKeyOffset, 0);
}

static addLoadFromDb(builder:flatbuffers.Builder, loadFromDb:boolean) {
  builder.addFieldInt8(2, +loadFromDb, +false);
}

static addIsDurableBuff(builder:flatbuffers.Builder, isDurableBuff:boolean) {
  builder.addFieldInt8(3, +isDurableBuff, +false);
}

static addIsDamageMissable(builder:flatbuffers.Builder, isDamageMissable:boolean) {
  builder.addFieldInt8(4, +isDamageMissable, +false);
}

static addIsSilenceable(builder:flatbuffers.Builder, isSilenceable:boolean) {
  builder.addFieldInt8(5, +isSilenceable, +false);
}

static addIsStunnable(builder:flatbuffers.Builder, isStunnable:boolean) {
  builder.addFieldInt8(6, +isStunnable, +false);
}

static addIsFreezable(builder:flatbuffers.Builder, isFreezable:boolean) {
  builder.addFieldInt8(7, +isFreezable, +false);
}

static addIsLevitatable(builder:flatbuffers.Builder, isLevitatable:boolean) {
  builder.addFieldInt8(8, +isLevitatable, +false);
}

static addStatusResistable(builder:flatbuffers.Builder, statusResistable:enum__Torappu_BuffData_StatusResistable) {
  builder.addFieldInt8(9, statusResistable, enum__Torappu_BuffData_StatusResistable.NO);
}

static addTemplateKey(builder:flatbuffers.Builder, templateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, templateKeyOffset, 0);
}

static addDisableOverride(builder:flatbuffers.Builder, disableOverride:boolean) {
  builder.addFieldInt8(11, +disableOverride, +false);
}

static addOverrideKey(builder:flatbuffers.Builder, overrideKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, overrideKeyOffset, 0);
}

static addOverrideType(builder:flatbuffers.Builder, overrideType:enum__Torappu_BuffData_OverrideType) {
  builder.addFieldInt32(13, overrideType, enum__Torappu_BuffData_OverrideType.DEFAULT);
}

static addMaxStackCnt(builder:flatbuffers.Builder, maxStackCnt:number) {
  builder.addFieldInt32(14, maxStackCnt, 0);
}

static addRefreshRemainingTimeWhenStackMax(builder:flatbuffers.Builder, refreshRemainingTimeWhenStackMax:boolean) {
  builder.addFieldInt8(15, +refreshRemainingTimeWhenStackMax, +false);
}

static addClearAllStackCntWhenTimeUp(builder:flatbuffers.Builder, clearAllStackCntWhenTimeUp:boolean) {
  builder.addFieldInt8(16, +clearAllStackCntWhenTimeUp, +false);
}

static addMaxValidStackCnt(builder:flatbuffers.Builder, maxValidStackCnt:number) {
  builder.addFieldInt32(17, maxValidStackCnt, 0);
}

static addIndependentCharacterSource(builder:flatbuffers.Builder, independentCharacterSource:boolean) {
  builder.addFieldInt8(18, +independentCharacterSource, +false);
}

static addOverrideEffectKey(builder:flatbuffers.Builder, overrideEffectKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, overrideEffectKeyOffset, 0);
}

static addOverrideOnEventPriority(builder:flatbuffers.Builder, overrideOnEventPriority:boolean) {
  builder.addFieldInt8(20, +overrideOnEventPriority, +false);
}

static addOnEventPriority(builder:flatbuffers.Builder, onEventPriority:enum__Torappu_BuffData_OnEventPriority) {
  builder.addFieldInt32(21, onEventPriority, enum__Torappu_BuffData_OnEventPriority.DEFAULT);
}

static addAudioSignal(builder:flatbuffers.Builder, audioSignalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, audioSignalOffset, 0);
}

static addLifeTimeType(builder:flatbuffers.Builder, lifeTimeType:enum__Torappu_LifeType) {
  builder.addFieldInt8(23, lifeTimeType, enum__Torappu_LifeType.IMMEDIATELY);
}

static addTakeSnapshotWhenExtend(builder:flatbuffers.Builder, takeSnapshotWhenExtend:boolean) {
  builder.addFieldInt8(24, +takeSnapshotWhenExtend, +false);
}

static addDurationKey(builder:flatbuffers.Builder, durationKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, durationKeyOffset, 0);
}

static addLifeTime(builder:flatbuffers.Builder, lifeTime:number) {
  builder.addFieldFloat32(26, lifeTime, 0.0);
}

static addTriggerLifeType(builder:flatbuffers.Builder, triggerLifeType:enum__Torappu_LifeType) {
  builder.addFieldInt8(27, triggerLifeType, enum__Torappu_LifeType.IMMEDIATELY);
}

static addTriggerCnt(builder:flatbuffers.Builder, triggerCnt:number) {
  builder.addFieldInt32(28, triggerCnt, 0);
}

static addTriggerInterval(builder:flatbuffers.Builder, triggerInterval:number) {
  builder.addFieldFloat32(29, triggerInterval, 0.0);
}

static addWaitFirstTriggerInterval(builder:flatbuffers.Builder, waitFirstTriggerInterval:boolean) {
  builder.addFieldInt8(30, +waitFirstTriggerInterval, +false);
}

static addFirstTriggerInterval(builder:flatbuffers.Builder, firstTriggerInterval:number) {
  builder.addFieldFloat32(31, firstTriggerInterval, 0.0);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt32(32, priority, 0);
}

static addPriorityBbkeys(builder:flatbuffers.Builder, priorityBbkeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, priorityBbkeysOffset, 0);
}

static createPriorityBbkeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPriorityBbkeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStripBlackboardParamsWithBuffKey(builder:flatbuffers.Builder, stripBlackboardParamsWithBuffKey:boolean) {
  builder.addFieldInt8(34, +stripBlackboardParamsWithBuffKey, +false);
}

static addBlackboard(builder:flatbuffers.Builder, blackboardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, blackboardOffset, 0);
}

static createBlackboardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlackboardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuffData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuffData(builder:flatbuffers.Builder, attributesOffset:flatbuffers.Offset, buffKeyOffset:flatbuffers.Offset, loadFromDb:boolean, isDurableBuff:boolean, isDamageMissable:boolean, isSilenceable:boolean, isStunnable:boolean, isFreezable:boolean, isLevitatable:boolean, statusResistable:enum__Torappu_BuffData_StatusResistable, templateKeyOffset:flatbuffers.Offset, disableOverride:boolean, overrideKeyOffset:flatbuffers.Offset, overrideType:enum__Torappu_BuffData_OverrideType, maxStackCnt:number, refreshRemainingTimeWhenStackMax:boolean, clearAllStackCntWhenTimeUp:boolean, maxValidStackCnt:number, independentCharacterSource:boolean, overrideEffectKeyOffset:flatbuffers.Offset, overrideOnEventPriority:boolean, onEventPriority:enum__Torappu_BuffData_OnEventPriority, audioSignalOffset:flatbuffers.Offset, lifeTimeType:enum__Torappu_LifeType, takeSnapshotWhenExtend:boolean, durationKeyOffset:flatbuffers.Offset, lifeTime:number, triggerLifeType:enum__Torappu_LifeType, triggerCnt:number, triggerInterval:number, waitFirstTriggerInterval:boolean, firstTriggerInterval:number, priority:number, priorityBbkeysOffset:flatbuffers.Offset, stripBlackboardParamsWithBuffKey:boolean, blackboardOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuffData.startclz_Torappu_BuffData(builder);
  clz_Torappu_BuffData.addAttributes(builder, attributesOffset);
  clz_Torappu_BuffData.addBuffKey(builder, buffKeyOffset);
  clz_Torappu_BuffData.addLoadFromDb(builder, loadFromDb);
  clz_Torappu_BuffData.addIsDurableBuff(builder, isDurableBuff);
  clz_Torappu_BuffData.addIsDamageMissable(builder, isDamageMissable);
  clz_Torappu_BuffData.addIsSilenceable(builder, isSilenceable);
  clz_Torappu_BuffData.addIsStunnable(builder, isStunnable);
  clz_Torappu_BuffData.addIsFreezable(builder, isFreezable);
  clz_Torappu_BuffData.addIsLevitatable(builder, isLevitatable);
  clz_Torappu_BuffData.addStatusResistable(builder, statusResistable);
  clz_Torappu_BuffData.addTemplateKey(builder, templateKeyOffset);
  clz_Torappu_BuffData.addDisableOverride(builder, disableOverride);
  clz_Torappu_BuffData.addOverrideKey(builder, overrideKeyOffset);
  clz_Torappu_BuffData.addOverrideType(builder, overrideType);
  clz_Torappu_BuffData.addMaxStackCnt(builder, maxStackCnt);
  clz_Torappu_BuffData.addRefreshRemainingTimeWhenStackMax(builder, refreshRemainingTimeWhenStackMax);
  clz_Torappu_BuffData.addClearAllStackCntWhenTimeUp(builder, clearAllStackCntWhenTimeUp);
  clz_Torappu_BuffData.addMaxValidStackCnt(builder, maxValidStackCnt);
  clz_Torappu_BuffData.addIndependentCharacterSource(builder, independentCharacterSource);
  clz_Torappu_BuffData.addOverrideEffectKey(builder, overrideEffectKeyOffset);
  clz_Torappu_BuffData.addOverrideOnEventPriority(builder, overrideOnEventPriority);
  clz_Torappu_BuffData.addOnEventPriority(builder, onEventPriority);
  clz_Torappu_BuffData.addAudioSignal(builder, audioSignalOffset);
  clz_Torappu_BuffData.addLifeTimeType(builder, lifeTimeType);
  clz_Torappu_BuffData.addTakeSnapshotWhenExtend(builder, takeSnapshotWhenExtend);
  clz_Torappu_BuffData.addDurationKey(builder, durationKeyOffset);
  clz_Torappu_BuffData.addLifeTime(builder, lifeTime);
  clz_Torappu_BuffData.addTriggerLifeType(builder, triggerLifeType);
  clz_Torappu_BuffData.addTriggerCnt(builder, triggerCnt);
  clz_Torappu_BuffData.addTriggerInterval(builder, triggerInterval);
  clz_Torappu_BuffData.addWaitFirstTriggerInterval(builder, waitFirstTriggerInterval);
  clz_Torappu_BuffData.addFirstTriggerInterval(builder, firstTriggerInterval);
  clz_Torappu_BuffData.addPriority(builder, priority);
  clz_Torappu_BuffData.addPriorityBbkeys(builder, priorityBbkeysOffset);
  clz_Torappu_BuffData.addStripBlackboardParamsWithBuffKey(builder, stripBlackboardParamsWithBuffKey);
  clz_Torappu_BuffData.addBlackboard(builder, blackboardOffset);
  return clz_Torappu_BuffData.endclz_Torappu_BuffData(builder);
}

unpack(): clz_Torappu_BuffDataT {
  return new clz_Torappu_BuffDataT(
    (this.attributes() !== null ? this.attributes()!.unpack() : null),
    this.buffKey(),
    this.loadFromDb(),
    this.isDurableBuff(),
    this.isDamageMissable(),
    this.isSilenceable(),
    this.isStunnable(),
    this.isFreezable(),
    this.isLevitatable(),
    this.statusResistable(),
    this.templateKey(),
    this.disableOverride(),
    this.overrideKey(),
    this.overrideType(),
    this.maxStackCnt(),
    this.refreshRemainingTimeWhenStackMax(),
    this.clearAllStackCntWhenTimeUp(),
    this.maxValidStackCnt(),
    this.independentCharacterSource(),
    this.overrideEffectKey(),
    this.overrideOnEventPriority(),
    this.onEventPriority(),
    this.audioSignal(),
    this.lifeTimeType(),
    this.takeSnapshotWhenExtend(),
    this.durationKey(),
    this.lifeTime(),
    this.triggerLifeType(),
    this.triggerCnt(),
    this.triggerInterval(),
    this.waitFirstTriggerInterval(),
    this.firstTriggerInterval(),
    this.priority(),
    this.bb!.createScalarList<string>(this.priorityBbkeys.bind(this), this.priorityBbkeysLength()),
    this.stripBlackboardParamsWithBuffKey(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength())
  );
}


unpackTo(_o: clz_Torappu_BuffDataT): void {
  _o.attributes = (this.attributes() !== null ? this.attributes()!.unpack() : null);
  _o.buffKey = this.buffKey();
  _o.loadFromDb = this.loadFromDb();
  _o.isDurableBuff = this.isDurableBuff();
  _o.isDamageMissable = this.isDamageMissable();
  _o.isSilenceable = this.isSilenceable();
  _o.isStunnable = this.isStunnable();
  _o.isFreezable = this.isFreezable();
  _o.isLevitatable = this.isLevitatable();
  _o.statusResistable = this.statusResistable();
  _o.templateKey = this.templateKey();
  _o.disableOverride = this.disableOverride();
  _o.overrideKey = this.overrideKey();
  _o.overrideType = this.overrideType();
  _o.maxStackCnt = this.maxStackCnt();
  _o.refreshRemainingTimeWhenStackMax = this.refreshRemainingTimeWhenStackMax();
  _o.clearAllStackCntWhenTimeUp = this.clearAllStackCntWhenTimeUp();
  _o.maxValidStackCnt = this.maxValidStackCnt();
  _o.independentCharacterSource = this.independentCharacterSource();
  _o.overrideEffectKey = this.overrideEffectKey();
  _o.overrideOnEventPriority = this.overrideOnEventPriority();
  _o.onEventPriority = this.onEventPriority();
  _o.audioSignal = this.audioSignal();
  _o.lifeTimeType = this.lifeTimeType();
  _o.takeSnapshotWhenExtend = this.takeSnapshotWhenExtend();
  _o.durationKey = this.durationKey();
  _o.lifeTime = this.lifeTime();
  _o.triggerLifeType = this.triggerLifeType();
  _o.triggerCnt = this.triggerCnt();
  _o.triggerInterval = this.triggerInterval();
  _o.waitFirstTriggerInterval = this.waitFirstTriggerInterval();
  _o.firstTriggerInterval = this.firstTriggerInterval();
  _o.priority = this.priority();
  _o.priorityBbkeys = this.bb!.createScalarList<string>(this.priorityBbkeys.bind(this), this.priorityBbkeysLength());
  _o.stripBlackboardParamsWithBuffKey = this.stripBlackboardParamsWithBuffKey();
  _o.blackboard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength());
}
}

export class clz_Torappu_BuffDataT implements flatbuffers.IGeneratedObject {
constructor(
  public attributes: clz_Torappu_AttributeModifierDataT|null = null,
  public buffKey: string|Uint8Array|null = null,
  public loadFromDb: boolean = false,
  public isDurableBuff: boolean = false,
  public isDamageMissable: boolean = false,
  public isSilenceable: boolean = false,
  public isStunnable: boolean = false,
  public isFreezable: boolean = false,
  public isLevitatable: boolean = false,
  public statusResistable: enum__Torappu_BuffData_StatusResistable = enum__Torappu_BuffData_StatusResistable.NO,
  public templateKey: string|Uint8Array|null = null,
  public disableOverride: boolean = false,
  public overrideKey: string|Uint8Array|null = null,
  public overrideType: enum__Torappu_BuffData_OverrideType = enum__Torappu_BuffData_OverrideType.DEFAULT,
  public maxStackCnt: number = 0,
  public refreshRemainingTimeWhenStackMax: boolean = false,
  public clearAllStackCntWhenTimeUp: boolean = false,
  public maxValidStackCnt: number = 0,
  public independentCharacterSource: boolean = false,
  public overrideEffectKey: string|Uint8Array|null = null,
  public overrideOnEventPriority: boolean = false,
  public onEventPriority: enum__Torappu_BuffData_OnEventPriority = enum__Torappu_BuffData_OnEventPriority.DEFAULT,
  public audioSignal: string|Uint8Array|null = null,
  public lifeTimeType: enum__Torappu_LifeType = enum__Torappu_LifeType.IMMEDIATELY,
  public takeSnapshotWhenExtend: boolean = false,
  public durationKey: string|Uint8Array|null = null,
  public lifeTime: number = 0.0,
  public triggerLifeType: enum__Torappu_LifeType = enum__Torappu_LifeType.IMMEDIATELY,
  public triggerCnt: number = 0,
  public triggerInterval: number = 0.0,
  public waitFirstTriggerInterval: boolean = false,
  public firstTriggerInterval: number = 0.0,
  public priority: number = 0,
  public priorityBbkeys: (string)[] = [],
  public stripBlackboardParamsWithBuffKey: boolean = false,
  public blackboard: (clz_Torappu_Blackboard_DataPairT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const attributes = (this.attributes !== null ? this.attributes!.pack(builder) : 0);
  const buffKey = (this.buffKey !== null ? builder.createString(this.buffKey!) : 0);
  const templateKey = (this.templateKey !== null ? builder.createString(this.templateKey!) : 0);
  const overrideKey = (this.overrideKey !== null ? builder.createString(this.overrideKey!) : 0);
  const overrideEffectKey = (this.overrideEffectKey !== null ? builder.createString(this.overrideEffectKey!) : 0);
  const audioSignal = (this.audioSignal !== null ? builder.createString(this.audioSignal!) : 0);
  const durationKey = (this.durationKey !== null ? builder.createString(this.durationKey!) : 0);
  const priorityBbkeys = clz_Torappu_BuffData.createPriorityBbkeysVector(builder, builder.createObjectOffsetList(this.priorityBbkeys));
  const blackboard = clz_Torappu_BuffData.createBlackboardVector(builder, builder.createObjectOffsetList(this.blackboard));

  return clz_Torappu_BuffData.createclz_Torappu_BuffData(builder,
    attributes,
    buffKey,
    this.loadFromDb,
    this.isDurableBuff,
    this.isDamageMissable,
    this.isSilenceable,
    this.isStunnable,
    this.isFreezable,
    this.isLevitatable,
    this.statusResistable,
    templateKey,
    this.disableOverride,
    overrideKey,
    this.overrideType,
    this.maxStackCnt,
    this.refreshRemainingTimeWhenStackMax,
    this.clearAllStackCntWhenTimeUp,
    this.maxValidStackCnt,
    this.independentCharacterSource,
    overrideEffectKey,
    this.overrideOnEventPriority,
    this.onEventPriority,
    audioSignal,
    this.lifeTimeType,
    this.takeSnapshotWhenExtend,
    durationKey,
    this.lifeTime,
    this.triggerLifeType,
    this.triggerCnt,
    this.triggerInterval,
    this.waitFirstTriggerInterval,
    this.firstTriggerInterval,
    this.priority,
    priorityBbkeys,
    this.stripBlackboardParamsWithBuffKey,
    blackboard
  );
}
}
