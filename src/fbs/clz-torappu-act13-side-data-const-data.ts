// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { list_int, list_intT } from './list-int.js';


export class clz_Torappu_Act13SideData_ConstData implements flatbuffers.IUnpackableObject<clz_Torappu_Act13SideData_ConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act13SideData_ConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act13SideData_ConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act13SideData_ConstData):clz_Torappu_Act13SideData_ConstData {
  return (obj || new clz_Torappu_Act13SideData_ConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act13SideData_ConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act13SideData_ConstData):clz_Torappu_Act13SideData_ConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act13SideData_ConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prestigeDescList(index: number):string
prestigeDescList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
prestigeDescList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

prestigeDescListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dailyRandomCount(index: number, obj?:list_int):list_int|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new list_int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dailyRandomCountLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dailyWeightInitial():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dailyWeightComplete():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

agendaRecover():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

agendaMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

agendaHint():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

missionPoolMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

missionBoardMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

itemRandomList(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

itemRandomListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unlockPrestigeCond():string|null
unlockPrestigeCond(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockPrestigeCond(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hotSpotShowFlag():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startclz_Torappu_Act13SideData_ConstData(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addPrestigeDescList(builder:flatbuffers.Builder, prestigeDescListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, prestigeDescListOffset, 0);
}

static createPrestigeDescListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPrestigeDescListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDailyRandomCount(builder:flatbuffers.Builder, dailyRandomCountOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dailyRandomCountOffset, 0);
}

static createDailyRandomCountVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDailyRandomCountVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDailyWeightInitial(builder:flatbuffers.Builder, dailyWeightInitial:number) {
  builder.addFieldInt32(2, dailyWeightInitial, 0);
}

static addDailyWeightComplete(builder:flatbuffers.Builder, dailyWeightComplete:number) {
  builder.addFieldInt32(3, dailyWeightComplete, 0);
}

static addAgendaRecover(builder:flatbuffers.Builder, agendaRecover:number) {
  builder.addFieldInt32(4, agendaRecover, 0);
}

static addAgendaMax(builder:flatbuffers.Builder, agendaMax:number) {
  builder.addFieldInt32(5, agendaMax, 0);
}

static addAgendaHint(builder:flatbuffers.Builder, agendaHint:number) {
  builder.addFieldInt32(6, agendaHint, 0);
}

static addMissionPoolMax(builder:flatbuffers.Builder, missionPoolMax:number) {
  builder.addFieldInt32(7, missionPoolMax, 0);
}

static addMissionBoardMax(builder:flatbuffers.Builder, missionBoardMax:number) {
  builder.addFieldInt32(8, missionBoardMax, 0);
}

static addItemRandomList(builder:flatbuffers.Builder, itemRandomListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, itemRandomListOffset, 0);
}

static createItemRandomListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemRandomListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnlockPrestigeCond(builder:flatbuffers.Builder, unlockPrestigeCondOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, unlockPrestigeCondOffset, 0);
}

static addHotSpotShowFlag(builder:flatbuffers.Builder, hotSpotShowFlag:bigint) {
  builder.addFieldInt64(11, hotSpotShowFlag, BigInt('0'));
}

static endclz_Torappu_Act13SideData_ConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act13SideData_ConstData(builder:flatbuffers.Builder, prestigeDescListOffset:flatbuffers.Offset, dailyRandomCountOffset:flatbuffers.Offset, dailyWeightInitial:number, dailyWeightComplete:number, agendaRecover:number, agendaMax:number, agendaHint:number, missionPoolMax:number, missionBoardMax:number, itemRandomListOffset:flatbuffers.Offset, unlockPrestigeCondOffset:flatbuffers.Offset, hotSpotShowFlag:bigint):flatbuffers.Offset {
  clz_Torappu_Act13SideData_ConstData.startclz_Torappu_Act13SideData_ConstData(builder);
  clz_Torappu_Act13SideData_ConstData.addPrestigeDescList(builder, prestigeDescListOffset);
  clz_Torappu_Act13SideData_ConstData.addDailyRandomCount(builder, dailyRandomCountOffset);
  clz_Torappu_Act13SideData_ConstData.addDailyWeightInitial(builder, dailyWeightInitial);
  clz_Torappu_Act13SideData_ConstData.addDailyWeightComplete(builder, dailyWeightComplete);
  clz_Torappu_Act13SideData_ConstData.addAgendaRecover(builder, agendaRecover);
  clz_Torappu_Act13SideData_ConstData.addAgendaMax(builder, agendaMax);
  clz_Torappu_Act13SideData_ConstData.addAgendaHint(builder, agendaHint);
  clz_Torappu_Act13SideData_ConstData.addMissionPoolMax(builder, missionPoolMax);
  clz_Torappu_Act13SideData_ConstData.addMissionBoardMax(builder, missionBoardMax);
  clz_Torappu_Act13SideData_ConstData.addItemRandomList(builder, itemRandomListOffset);
  clz_Torappu_Act13SideData_ConstData.addUnlockPrestigeCond(builder, unlockPrestigeCondOffset);
  clz_Torappu_Act13SideData_ConstData.addHotSpotShowFlag(builder, hotSpotShowFlag);
  return clz_Torappu_Act13SideData_ConstData.endclz_Torappu_Act13SideData_ConstData(builder);
}

unpack(): clz_Torappu_Act13SideData_ConstDataT {
  return new clz_Torappu_Act13SideData_ConstDataT(
    this.bb!.createScalarList<string>(this.prestigeDescList.bind(this), this.prestigeDescListLength()),
    this.bb!.createObjList<list_int, list_intT>(this.dailyRandomCount.bind(this), this.dailyRandomCountLength()),
    this.dailyWeightInitial(),
    this.dailyWeightComplete(),
    this.agendaRecover(),
    this.agendaMax(),
    this.agendaHint(),
    this.missionPoolMax(),
    this.missionBoardMax(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.itemRandomList.bind(this), this.itemRandomListLength()),
    this.unlockPrestigeCond(),
    this.hotSpotShowFlag()
  );
}


unpackTo(_o: clz_Torappu_Act13SideData_ConstDataT): void {
  _o.prestigeDescList = this.bb!.createScalarList<string>(this.prestigeDescList.bind(this), this.prestigeDescListLength());
  _o.dailyRandomCount = this.bb!.createObjList<list_int, list_intT>(this.dailyRandomCount.bind(this), this.dailyRandomCountLength());
  _o.dailyWeightInitial = this.dailyWeightInitial();
  _o.dailyWeightComplete = this.dailyWeightComplete();
  _o.agendaRecover = this.agendaRecover();
  _o.agendaMax = this.agendaMax();
  _o.agendaHint = this.agendaHint();
  _o.missionPoolMax = this.missionPoolMax();
  _o.missionBoardMax = this.missionBoardMax();
  _o.itemRandomList = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.itemRandomList.bind(this), this.itemRandomListLength());
  _o.unlockPrestigeCond = this.unlockPrestigeCond();
  _o.hotSpotShowFlag = this.hotSpotShowFlag();
}
}

export class clz_Torappu_Act13SideData_ConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public prestigeDescList: (string)[] = [],
  public dailyRandomCount: (list_intT)[] = [],
  public dailyWeightInitial: number = 0,
  public dailyWeightComplete: number = 0,
  public agendaRecover: number = 0,
  public agendaMax: number = 0,
  public agendaHint: number = 0,
  public missionPoolMax: number = 0,
  public missionBoardMax: number = 0,
  public itemRandomList: (clz_Torappu_ItemBundleT)[] = [],
  public unlockPrestigeCond: string|Uint8Array|null = null,
  public hotSpotShowFlag: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const prestigeDescList = clz_Torappu_Act13SideData_ConstData.createPrestigeDescListVector(builder, builder.createObjectOffsetList(this.prestigeDescList));
  const dailyRandomCount = clz_Torappu_Act13SideData_ConstData.createDailyRandomCountVector(builder, builder.createObjectOffsetList(this.dailyRandomCount));
  const itemRandomList = clz_Torappu_Act13SideData_ConstData.createItemRandomListVector(builder, builder.createObjectOffsetList(this.itemRandomList));
  const unlockPrestigeCond = (this.unlockPrestigeCond !== null ? builder.createString(this.unlockPrestigeCond!) : 0);

  return clz_Torappu_Act13SideData_ConstData.createclz_Torappu_Act13SideData_ConstData(builder,
    prestigeDescList,
    dailyRandomCount,
    this.dailyWeightInitial,
    this.dailyWeightComplete,
    this.agendaRecover,
    this.agendaMax,
    this.agendaHint,
    this.missionPoolMax,
    this.missionBoardMax,
    itemRandomList,
    unlockPrestigeCond,
    this.hotSpotShowFlag
  );
}
}
