// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ClimbTowerDetailConst, clz_Torappu_ClimbTowerDetailConstT } from './clz-torappu-climb-tower-detail-const.js';
import { clz_Torappu_ClimbTowerRewardInfo, clz_Torappu_ClimbTowerRewardInfoT } from './clz-torappu-climb-tower-reward-info.js';
import { dict__string__clz_Torappu_ClimbTowerCurseCardData, dict__string__clz_Torappu_ClimbTowerCurseCardDataT } from './dict--string--clz-torappu-climb-tower-curse-card-data.js';
import { dict__string__clz_Torappu_ClimbTowerMainCardData, dict__string__clz_Torappu_ClimbTowerMainCardDataT } from './dict--string--clz-torappu-climb-tower-main-card-data.js';
import { dict__string__clz_Torappu_ClimbTowerMissionData, dict__string__clz_Torappu_ClimbTowerMissionDataT } from './dict--string--clz-torappu-climb-tower-mission-data.js';
import { dict__string__clz_Torappu_ClimbTowerSeasonInfoData, dict__string__clz_Torappu_ClimbTowerSeasonInfoDataT } from './dict--string--clz-torappu-climb-tower-season-info-data.js';
import { dict__string__clz_Torappu_ClimbTowerSingleLevelData, dict__string__clz_Torappu_ClimbTowerSingleLevelDataT } from './dict--string--clz-torappu-climb-tower-single-level-data.js';
import { dict__string__clz_Torappu_ClimbTowerSingleTowerData, dict__string__clz_Torappu_ClimbTowerSingleTowerDataT } from './dict--string--clz-torappu-climb-tower-single-tower-data.js';
import { dict__string__clz_Torappu_ClimbTowerSubCardData, dict__string__clz_Torappu_ClimbTowerSubCardDataT } from './dict--string--clz-torappu-climb-tower-sub-card-data.js';
import { dict__string__clz_Torappu_ClimbTowerTacticalBuffData, dict__string__clz_Torappu_ClimbTowerTacticalBuffDataT } from './dict--string--clz-torappu-climb-tower-tactical-buff-data.js';
import { dict__string__clz_Torappu_MissionGroup, dict__string__clz_Torappu_MissionGroupT } from './dict--string--clz-torappu-mission-group.js';


export class clz_Torappu_ClimbTowerTable implements flatbuffers.IUnpackableObject<clz_Torappu_ClimbTowerTableT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ClimbTowerTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ClimbTowerTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerTable):clz_Torappu_ClimbTowerTable {
  return (obj || new clz_Torappu_ClimbTowerTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ClimbTowerTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerTable):clz_Torappu_ClimbTowerTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ClimbTowerTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

towers(index: number, obj?:dict__string__clz_Torappu_ClimbTowerSingleTowerData):dict__string__clz_Torappu_ClimbTowerSingleTowerData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerSingleTowerData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

towersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

levels(index: number, obj?:dict__string__clz_Torappu_ClimbTowerSingleLevelData):dict__string__clz_Torappu_ClimbTowerSingleLevelData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerSingleLevelData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

levelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tacticalBuffs(index: number, obj?:dict__string__clz_Torappu_ClimbTowerTacticalBuffData):dict__string__clz_Torappu_ClimbTowerTacticalBuffData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerTacticalBuffData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tacticalBuffsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mainCards(index: number, obj?:dict__string__clz_Torappu_ClimbTowerMainCardData):dict__string__clz_Torappu_ClimbTowerMainCardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerMainCardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mainCardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

subCards(index: number, obj?:dict__string__clz_Torappu_ClimbTowerSubCardData):dict__string__clz_Torappu_ClimbTowerSubCardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerSubCardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subCardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

curseCards(index: number, obj?:dict__string__clz_Torappu_ClimbTowerCurseCardData):dict__string__clz_Torappu_ClimbTowerCurseCardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerCurseCardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

curseCardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

seasonInfos(index: number, obj?:dict__string__clz_Torappu_ClimbTowerSeasonInfoData):dict__string__clz_Torappu_ClimbTowerSeasonInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerSeasonInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

seasonInfosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

detailConst(obj?:clz_Torappu_ClimbTowerDetailConst):clz_Torappu_ClimbTowerDetailConst|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new clz_Torappu_ClimbTowerDetailConst()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rewardInfoList(index: number, obj?:clz_Torappu_ClimbTowerRewardInfo):clz_Torappu_ClimbTowerRewardInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new clz_Torappu_ClimbTowerRewardInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardInfoListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rewardInfoListHardMode(index: number, obj?:clz_Torappu_ClimbTowerRewardInfo):clz_Torappu_ClimbTowerRewardInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new clz_Torappu_ClimbTowerRewardInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardInfoListHardModeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

missionData(index: number, obj?:dict__string__clz_Torappu_ClimbTowerMissionData):dict__string__clz_Torappu_ClimbTowerMissionData|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new dict__string__clz_Torappu_ClimbTowerMissionData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

missionDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

missionGroup(index: number, obj?:dict__string__clz_Torappu_MissionGroup):dict__string__clz_Torappu_MissionGroup|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new dict__string__clz_Torappu_MissionGroup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

missionGroupLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ClimbTowerTable(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addTowers(builder:flatbuffers.Builder, towersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, towersOffset, 0);
}

static createTowersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTowersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLevels(builder:flatbuffers.Builder, levelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, levelsOffset, 0);
}

static createLevelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTacticalBuffs(builder:flatbuffers.Builder, tacticalBuffsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, tacticalBuffsOffset, 0);
}

static createTacticalBuffsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTacticalBuffsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMainCards(builder:flatbuffers.Builder, mainCardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, mainCardsOffset, 0);
}

static createMainCardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMainCardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSubCards(builder:flatbuffers.Builder, subCardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, subCardsOffset, 0);
}

static createSubCardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubCardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCurseCards(builder:flatbuffers.Builder, curseCardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, curseCardsOffset, 0);
}

static createCurseCardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCurseCardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeasonInfos(builder:flatbuffers.Builder, seasonInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, seasonInfosOffset, 0);
}

static createSeasonInfosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSeasonInfosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDetailConst(builder:flatbuffers.Builder, detailConstOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, detailConstOffset, 0);
}

static addRewardInfoList(builder:flatbuffers.Builder, rewardInfoListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, rewardInfoListOffset, 0);
}

static createRewardInfoListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardInfoListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRewardInfoListHardMode(builder:flatbuffers.Builder, rewardInfoListHardModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, rewardInfoListHardModeOffset, 0);
}

static createRewardInfoListHardModeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardInfoListHardModeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissionData(builder:flatbuffers.Builder, missionDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, missionDataOffset, 0);
}

static createMissionDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissionGroup(builder:flatbuffers.Builder, missionGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, missionGroupOffset, 0);
}

static createMissionGroupVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionGroupVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ClimbTowerTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishclz_Torappu_ClimbTowerTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedclz_Torappu_ClimbTowerTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): clz_Torappu_ClimbTowerTableT {
  return new clz_Torappu_ClimbTowerTableT(
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSingleTowerData, dict__string__clz_Torappu_ClimbTowerSingleTowerDataT>(this.towers.bind(this), this.towersLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSingleLevelData, dict__string__clz_Torappu_ClimbTowerSingleLevelDataT>(this.levels.bind(this), this.levelsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerTacticalBuffData, dict__string__clz_Torappu_ClimbTowerTacticalBuffDataT>(this.tacticalBuffs.bind(this), this.tacticalBuffsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerMainCardData, dict__string__clz_Torappu_ClimbTowerMainCardDataT>(this.mainCards.bind(this), this.mainCardsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSubCardData, dict__string__clz_Torappu_ClimbTowerSubCardDataT>(this.subCards.bind(this), this.subCardsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerCurseCardData, dict__string__clz_Torappu_ClimbTowerCurseCardDataT>(this.curseCards.bind(this), this.curseCardsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSeasonInfoData, dict__string__clz_Torappu_ClimbTowerSeasonInfoDataT>(this.seasonInfos.bind(this), this.seasonInfosLength()),
    (this.detailConst() !== null ? this.detailConst()!.unpack() : null),
    this.bb!.createObjList<clz_Torappu_ClimbTowerRewardInfo, clz_Torappu_ClimbTowerRewardInfoT>(this.rewardInfoList.bind(this), this.rewardInfoListLength()),
    this.bb!.createObjList<clz_Torappu_ClimbTowerRewardInfo, clz_Torappu_ClimbTowerRewardInfoT>(this.rewardInfoListHardMode.bind(this), this.rewardInfoListHardModeLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerMissionData, dict__string__clz_Torappu_ClimbTowerMissionDataT>(this.missionData.bind(this), this.missionDataLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_MissionGroup, dict__string__clz_Torappu_MissionGroupT>(this.missionGroup.bind(this), this.missionGroupLength())
  );
}


unpackTo(_o: clz_Torappu_ClimbTowerTableT): void {
  _o.towers = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSingleTowerData, dict__string__clz_Torappu_ClimbTowerSingleTowerDataT>(this.towers.bind(this), this.towersLength());
  _o.levels = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSingleLevelData, dict__string__clz_Torappu_ClimbTowerSingleLevelDataT>(this.levels.bind(this), this.levelsLength());
  _o.tacticalBuffs = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerTacticalBuffData, dict__string__clz_Torappu_ClimbTowerTacticalBuffDataT>(this.tacticalBuffs.bind(this), this.tacticalBuffsLength());
  _o.mainCards = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerMainCardData, dict__string__clz_Torappu_ClimbTowerMainCardDataT>(this.mainCards.bind(this), this.mainCardsLength());
  _o.subCards = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSubCardData, dict__string__clz_Torappu_ClimbTowerSubCardDataT>(this.subCards.bind(this), this.subCardsLength());
  _o.curseCards = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerCurseCardData, dict__string__clz_Torappu_ClimbTowerCurseCardDataT>(this.curseCards.bind(this), this.curseCardsLength());
  _o.seasonInfos = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerSeasonInfoData, dict__string__clz_Torappu_ClimbTowerSeasonInfoDataT>(this.seasonInfos.bind(this), this.seasonInfosLength());
  _o.detailConst = (this.detailConst() !== null ? this.detailConst()!.unpack() : null);
  _o.rewardInfoList = this.bb!.createObjList<clz_Torappu_ClimbTowerRewardInfo, clz_Torappu_ClimbTowerRewardInfoT>(this.rewardInfoList.bind(this), this.rewardInfoListLength());
  _o.rewardInfoListHardMode = this.bb!.createObjList<clz_Torappu_ClimbTowerRewardInfo, clz_Torappu_ClimbTowerRewardInfoT>(this.rewardInfoListHardMode.bind(this), this.rewardInfoListHardModeLength());
  _o.missionData = this.bb!.createObjList<dict__string__clz_Torappu_ClimbTowerMissionData, dict__string__clz_Torappu_ClimbTowerMissionDataT>(this.missionData.bind(this), this.missionDataLength());
  _o.missionGroup = this.bb!.createObjList<dict__string__clz_Torappu_MissionGroup, dict__string__clz_Torappu_MissionGroupT>(this.missionGroup.bind(this), this.missionGroupLength());
}
}

export class clz_Torappu_ClimbTowerTableT implements flatbuffers.IGeneratedObject {
constructor(
  public towers: (dict__string__clz_Torappu_ClimbTowerSingleTowerDataT)[] = [],
  public levels: (dict__string__clz_Torappu_ClimbTowerSingleLevelDataT)[] = [],
  public tacticalBuffs: (dict__string__clz_Torappu_ClimbTowerTacticalBuffDataT)[] = [],
  public mainCards: (dict__string__clz_Torappu_ClimbTowerMainCardDataT)[] = [],
  public subCards: (dict__string__clz_Torappu_ClimbTowerSubCardDataT)[] = [],
  public curseCards: (dict__string__clz_Torappu_ClimbTowerCurseCardDataT)[] = [],
  public seasonInfos: (dict__string__clz_Torappu_ClimbTowerSeasonInfoDataT)[] = [],
  public detailConst: clz_Torappu_ClimbTowerDetailConstT|null = null,
  public rewardInfoList: (clz_Torappu_ClimbTowerRewardInfoT)[] = [],
  public rewardInfoListHardMode: (clz_Torappu_ClimbTowerRewardInfoT)[] = [],
  public missionData: (dict__string__clz_Torappu_ClimbTowerMissionDataT)[] = [],
  public missionGroup: (dict__string__clz_Torappu_MissionGroupT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const towers = clz_Torappu_ClimbTowerTable.createTowersVector(builder, builder.createObjectOffsetList(this.towers));
  const levels = clz_Torappu_ClimbTowerTable.createLevelsVector(builder, builder.createObjectOffsetList(this.levels));
  const tacticalBuffs = clz_Torappu_ClimbTowerTable.createTacticalBuffsVector(builder, builder.createObjectOffsetList(this.tacticalBuffs));
  const mainCards = clz_Torappu_ClimbTowerTable.createMainCardsVector(builder, builder.createObjectOffsetList(this.mainCards));
  const subCards = clz_Torappu_ClimbTowerTable.createSubCardsVector(builder, builder.createObjectOffsetList(this.subCards));
  const curseCards = clz_Torappu_ClimbTowerTable.createCurseCardsVector(builder, builder.createObjectOffsetList(this.curseCards));
  const seasonInfos = clz_Torappu_ClimbTowerTable.createSeasonInfosVector(builder, builder.createObjectOffsetList(this.seasonInfos));
  const detailConst = (this.detailConst !== null ? this.detailConst!.pack(builder) : 0);
  const rewardInfoList = clz_Torappu_ClimbTowerTable.createRewardInfoListVector(builder, builder.createObjectOffsetList(this.rewardInfoList));
  const rewardInfoListHardMode = clz_Torappu_ClimbTowerTable.createRewardInfoListHardModeVector(builder, builder.createObjectOffsetList(this.rewardInfoListHardMode));
  const missionData = clz_Torappu_ClimbTowerTable.createMissionDataVector(builder, builder.createObjectOffsetList(this.missionData));
  const missionGroup = clz_Torappu_ClimbTowerTable.createMissionGroupVector(builder, builder.createObjectOffsetList(this.missionGroup));

  clz_Torappu_ClimbTowerTable.startclz_Torappu_ClimbTowerTable(builder);
  clz_Torappu_ClimbTowerTable.addTowers(builder, towers);
  clz_Torappu_ClimbTowerTable.addLevels(builder, levels);
  clz_Torappu_ClimbTowerTable.addTacticalBuffs(builder, tacticalBuffs);
  clz_Torappu_ClimbTowerTable.addMainCards(builder, mainCards);
  clz_Torappu_ClimbTowerTable.addSubCards(builder, subCards);
  clz_Torappu_ClimbTowerTable.addCurseCards(builder, curseCards);
  clz_Torappu_ClimbTowerTable.addSeasonInfos(builder, seasonInfos);
  clz_Torappu_ClimbTowerTable.addDetailConst(builder, detailConst);
  clz_Torappu_ClimbTowerTable.addRewardInfoList(builder, rewardInfoList);
  clz_Torappu_ClimbTowerTable.addRewardInfoListHardMode(builder, rewardInfoListHardMode);
  clz_Torappu_ClimbTowerTable.addMissionData(builder, missionData);
  clz_Torappu_ClimbTowerTable.addMissionGroup(builder, missionGroup);

  return clz_Torappu_ClimbTowerTable.endclz_Torappu_ClimbTowerTable(builder);
}
}
