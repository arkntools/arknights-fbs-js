// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_ActivitySwitchCheckinMainRewardShowData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivitySwitchCheckinMainRewardShowDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivitySwitchCheckinMainRewardShowData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivitySwitchCheckinMainRewardShowData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivitySwitchCheckinMainRewardShowData):clz_Torappu_ActivitySwitchCheckinMainRewardShowData {
  return (obj || new clz_Torappu_ActivitySwitchCheckinMainRewardShowData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivitySwitchCheckinMainRewardShowData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivitySwitchCheckinMainRewardShowData):clz_Torappu_ActivitySwitchCheckinMainRewardShowData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivitySwitchCheckinMainRewardShowData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mainRewardPicId():string|null
mainRewardPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainRewardPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainRewardName():string|null
mainRewardName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainRewardName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainRewardCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hasTip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

tipItemBundle(obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_ActivitySwitchCheckinMainRewardShowData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addMainRewardPicId(builder:flatbuffers.Builder, mainRewardPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mainRewardPicIdOffset, 0);
}

static addMainRewardName(builder:flatbuffers.Builder, mainRewardNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mainRewardNameOffset, 0);
}

static addMainRewardCount(builder:flatbuffers.Builder, mainRewardCount:number) {
  builder.addFieldInt32(2, mainRewardCount, 0);
}

static addHasTip(builder:flatbuffers.Builder, hasTip:boolean) {
  builder.addFieldInt8(3, +hasTip, +false);
}

static addTipItemBundle(builder:flatbuffers.Builder, tipItemBundleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tipItemBundleOffset, 0);
}

static endclz_Torappu_ActivitySwitchCheckinMainRewardShowData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActivitySwitchCheckinMainRewardShowDataT {
  return new clz_Torappu_ActivitySwitchCheckinMainRewardShowDataT(
    this.mainRewardPicId(),
    this.mainRewardName(),
    this.mainRewardCount(),
    this.hasTip(),
    (this.tipItemBundle() !== null ? this.tipItemBundle()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_ActivitySwitchCheckinMainRewardShowDataT): void {
  _o.mainRewardPicId = this.mainRewardPicId();
  _o.mainRewardName = this.mainRewardName();
  _o.mainRewardCount = this.mainRewardCount();
  _o.hasTip = this.hasTip();
  _o.tipItemBundle = (this.tipItemBundle() !== null ? this.tipItemBundle()!.unpack() : null);
}
}

export class clz_Torappu_ActivitySwitchCheckinMainRewardShowDataT implements flatbuffers.IGeneratedObject {
constructor(
  public mainRewardPicId: string|Uint8Array|null = null,
  public mainRewardName: string|Uint8Array|null = null,
  public mainRewardCount: number = 0,
  public hasTip: boolean = false,
  public tipItemBundle: clz_Torappu_ItemBundleT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mainRewardPicId = (this.mainRewardPicId !== null ? builder.createString(this.mainRewardPicId!) : 0);
  const mainRewardName = (this.mainRewardName !== null ? builder.createString(this.mainRewardName!) : 0);
  const tipItemBundle = (this.tipItemBundle !== null ? this.tipItemBundle!.pack(builder) : 0);

  clz_Torappu_ActivitySwitchCheckinMainRewardShowData.startclz_Torappu_ActivitySwitchCheckinMainRewardShowData(builder);
  clz_Torappu_ActivitySwitchCheckinMainRewardShowData.addMainRewardPicId(builder, mainRewardPicId);
  clz_Torappu_ActivitySwitchCheckinMainRewardShowData.addMainRewardName(builder, mainRewardName);
  clz_Torappu_ActivitySwitchCheckinMainRewardShowData.addMainRewardCount(builder, this.mainRewardCount);
  clz_Torappu_ActivitySwitchCheckinMainRewardShowData.addHasTip(builder, this.hasTip);
  clz_Torappu_ActivitySwitchCheckinMainRewardShowData.addTipItemBundle(builder, tipItemBundle);

  return clz_Torappu_ActivitySwitchCheckinMainRewardShowData.endclz_Torappu_ActivitySwitchCheckinMainRewardShowData(builder);
}
}
