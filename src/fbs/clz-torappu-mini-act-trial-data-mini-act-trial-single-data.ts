// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_MiniActTrialData_MiniActTrialRewardData, clz_Torappu_MiniActTrialData_MiniActTrialRewardDataT } from './clz-torappu-mini-act-trial-data-mini-act-trial-reward-data.js';


export class clz_Torappu_MiniActTrialData_MiniActTrialSingleData implements flatbuffers.IUnpackableObject<clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MiniActTrialData_MiniActTrialSingleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MiniActTrialData_MiniActTrialSingleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MiniActTrialData_MiniActTrialSingleData):clz_Torappu_MiniActTrialData_MiniActTrialSingleData {
  return (obj || new clz_Torappu_MiniActTrialData_MiniActTrialSingleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MiniActTrialData_MiniActTrialSingleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MiniActTrialData_MiniActTrialSingleData):clz_Torappu_MiniActTrialData_MiniActTrialSingleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MiniActTrialData_MiniActTrialSingleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

actId():string|null
actId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewardStartTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

themeColor():string|null
themeColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
themeColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewardList(index: number, obj?:clz_Torappu_MiniActTrialData_MiniActTrialRewardData):clz_Torappu_MiniActTrialData_MiniActTrialRewardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_MiniActTrialData_MiniActTrialRewardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_MiniActTrialData_MiniActTrialSingleData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addActId(builder:flatbuffers.Builder, actIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, actIdOffset, 0);
}

static addRewardStartTime(builder:flatbuffers.Builder, rewardStartTime:bigint) {
  builder.addFieldInt64(1, rewardStartTime, BigInt('0'));
}

static addThemeColor(builder:flatbuffers.Builder, themeColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, themeColorOffset, 0);
}

static addRewardList(builder:flatbuffers.Builder, rewardListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rewardListOffset, 0);
}

static createRewardListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_MiniActTrialData_MiniActTrialSingleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MiniActTrialData_MiniActTrialSingleData(builder:flatbuffers.Builder, actIdOffset:flatbuffers.Offset, rewardStartTime:bigint, themeColorOffset:flatbuffers.Offset, rewardListOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_MiniActTrialData_MiniActTrialSingleData.startclz_Torappu_MiniActTrialData_MiniActTrialSingleData(builder);
  clz_Torappu_MiniActTrialData_MiniActTrialSingleData.addActId(builder, actIdOffset);
  clz_Torappu_MiniActTrialData_MiniActTrialSingleData.addRewardStartTime(builder, rewardStartTime);
  clz_Torappu_MiniActTrialData_MiniActTrialSingleData.addThemeColor(builder, themeColorOffset);
  clz_Torappu_MiniActTrialData_MiniActTrialSingleData.addRewardList(builder, rewardListOffset);
  return clz_Torappu_MiniActTrialData_MiniActTrialSingleData.endclz_Torappu_MiniActTrialData_MiniActTrialSingleData(builder);
}

unpack(): clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT {
  return new clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT(
    this.actId(),
    this.rewardStartTime(),
    this.themeColor(),
    this.bb!.createObjList<clz_Torappu_MiniActTrialData_MiniActTrialRewardData, clz_Torappu_MiniActTrialData_MiniActTrialRewardDataT>(this.rewardList.bind(this), this.rewardListLength())
  );
}


unpackTo(_o: clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT): void {
  _o.actId = this.actId();
  _o.rewardStartTime = this.rewardStartTime();
  _o.themeColor = this.themeColor();
  _o.rewardList = this.bb!.createObjList<clz_Torappu_MiniActTrialData_MiniActTrialRewardData, clz_Torappu_MiniActTrialData_MiniActTrialRewardDataT>(this.rewardList.bind(this), this.rewardListLength());
}
}

export class clz_Torappu_MiniActTrialData_MiniActTrialSingleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public actId: string|Uint8Array|null = null,
  public rewardStartTime: bigint = BigInt('0'),
  public themeColor: string|Uint8Array|null = null,
  public rewardList: (clz_Torappu_MiniActTrialData_MiniActTrialRewardDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const actId = (this.actId !== null ? builder.createString(this.actId!) : 0);
  const themeColor = (this.themeColor !== null ? builder.createString(this.themeColor!) : 0);
  const rewardList = clz_Torappu_MiniActTrialData_MiniActTrialSingleData.createRewardListVector(builder, builder.createObjectOffsetList(this.rewardList));

  return clz_Torappu_MiniActTrialData_MiniActTrialSingleData.createclz_Torappu_MiniActTrialData_MiniActTrialSingleData(builder,
    actId,
    this.rewardStartTime,
    themeColor,
    rewardList
  );
}
}
