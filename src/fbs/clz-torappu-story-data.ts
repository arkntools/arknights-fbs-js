// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { clz_Torappu_StoryData_Condition, clz_Torappu_StoryData_ConditionT } from './clz-torappu-story-data-condition.js';
import { clz_Torappu_StoryData_Trigger, clz_Torappu_StoryData_TriggerT } from './clz-torappu-story-data-trigger.js';


export class clz_Torappu_StoryData implements flatbuffers.IUnpackableObject<clz_Torappu_StoryDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_StoryData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_StoryData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StoryData):clz_Torappu_StoryData {
  return (obj || new clz_Torappu_StoryData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_StoryData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StoryData):clz_Torappu_StoryData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_StoryData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

needCommit():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

repeatable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

disabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

videoResource():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

trigger(obj?:clz_Torappu_StoryData_Trigger):clz_Torappu_StoryData_Trigger|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_StoryData_Trigger()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

condition(obj?:clz_Torappu_StoryData_Condition):clz_Torappu_StoryData_Condition|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_StoryData_Condition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

setProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

setFlags(index: number):string
setFlags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
setFlags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

setFlagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

completedRewards(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

completedRewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_StoryData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addNeedCommit(builder:flatbuffers.Builder, needCommit:boolean) {
  builder.addFieldInt8(1, +needCommit, +false);
}

static addRepeatable(builder:flatbuffers.Builder, repeatable:boolean) {
  builder.addFieldInt8(2, +repeatable, +false);
}

static addDisabled(builder:flatbuffers.Builder, disabled:boolean) {
  builder.addFieldInt8(3, +disabled, +false);
}

static addVideoResource(builder:flatbuffers.Builder, videoResource:boolean) {
  builder.addFieldInt8(4, +videoResource, +false);
}

static addTrigger(builder:flatbuffers.Builder, triggerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, triggerOffset, 0);
}

static addCondition(builder:flatbuffers.Builder, conditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, conditionOffset, 0);
}

static addSetProgress(builder:flatbuffers.Builder, setProgress:number) {
  builder.addFieldInt32(7, setProgress, 0);
}

static addSetFlags(builder:flatbuffers.Builder, setFlagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, setFlagsOffset, 0);
}

static createSetFlagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSetFlagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCompletedRewards(builder:flatbuffers.Builder, completedRewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, completedRewardsOffset, 0);
}

static createCompletedRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCompletedRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_StoryData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_StoryDataT {
  return new clz_Torappu_StoryDataT(
    this.id(),
    this.needCommit(),
    this.repeatable(),
    this.disabled(),
    this.videoResource(),
    (this.trigger() !== null ? this.trigger()!.unpack() : null),
    (this.condition() !== null ? this.condition()!.unpack() : null),
    this.setProgress(),
    this.bb!.createScalarList<string>(this.setFlags.bind(this), this.setFlagsLength()),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.completedRewards.bind(this), this.completedRewardsLength())
  );
}


unpackTo(_o: clz_Torappu_StoryDataT): void {
  _o.id = this.id();
  _o.needCommit = this.needCommit();
  _o.repeatable = this.repeatable();
  _o.disabled = this.disabled();
  _o.videoResource = this.videoResource();
  _o.trigger = (this.trigger() !== null ? this.trigger()!.unpack() : null);
  _o.condition = (this.condition() !== null ? this.condition()!.unpack() : null);
  _o.setProgress = this.setProgress();
  _o.setFlags = this.bb!.createScalarList<string>(this.setFlags.bind(this), this.setFlagsLength());
  _o.completedRewards = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.completedRewards.bind(this), this.completedRewardsLength());
}
}

export class clz_Torappu_StoryDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public needCommit: boolean = false,
  public repeatable: boolean = false,
  public disabled: boolean = false,
  public videoResource: boolean = false,
  public trigger: clz_Torappu_StoryData_TriggerT|null = null,
  public condition: clz_Torappu_StoryData_ConditionT|null = null,
  public setProgress: number = 0,
  public setFlags: (string)[] = [],
  public completedRewards: (clz_Torappu_ItemBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const trigger = (this.trigger !== null ? this.trigger!.pack(builder) : 0);
  const condition = (this.condition !== null ? this.condition!.pack(builder) : 0);
  const setFlags = clz_Torappu_StoryData.createSetFlagsVector(builder, builder.createObjectOffsetList(this.setFlags));
  const completedRewards = clz_Torappu_StoryData.createCompletedRewardsVector(builder, builder.createObjectOffsetList(this.completedRewards));

  clz_Torappu_StoryData.startclz_Torappu_StoryData(builder);
  clz_Torappu_StoryData.addId(builder, id);
  clz_Torappu_StoryData.addNeedCommit(builder, this.needCommit);
  clz_Torappu_StoryData.addRepeatable(builder, this.repeatable);
  clz_Torappu_StoryData.addDisabled(builder, this.disabled);
  clz_Torappu_StoryData.addVideoResource(builder, this.videoResource);
  clz_Torappu_StoryData.addTrigger(builder, trigger);
  clz_Torappu_StoryData.addCondition(builder, condition);
  clz_Torappu_StoryData.addSetProgress(builder, this.setProgress);
  clz_Torappu_StoryData.addSetFlags(builder, setFlags);
  clz_Torappu_StoryData.addCompletedRewards(builder, completedRewards);

  return clz_Torappu_StoryData.endclz_Torappu_StoryData(builder);
}
}
