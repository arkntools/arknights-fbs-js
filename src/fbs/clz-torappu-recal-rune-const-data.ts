// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_RecalRuneConstData implements flatbuffers.IUnpackableObject<clz_Torappu_RecalRuneConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RecalRuneConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RecalRuneConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RecalRuneConstData):clz_Torappu_RecalRuneConstData {
  return (obj || new clz_Torappu_RecalRuneConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RecalRuneConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RecalRuneConstData):clz_Torappu_RecalRuneConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RecalRuneConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stageCountPerSeason():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

juniorRewardMedalCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

seniorRewardMedalCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlockLevelIds(index: number):string
unlockLevelIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
unlockLevelIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

unlockLevelIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RecalRuneConstData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addStageCountPerSeason(builder:flatbuffers.Builder, stageCountPerSeason:number) {
  builder.addFieldInt32(0, stageCountPerSeason, 0);
}

static addJuniorRewardMedalCount(builder:flatbuffers.Builder, juniorRewardMedalCount:number) {
  builder.addFieldInt32(1, juniorRewardMedalCount, 0);
}

static addSeniorRewardMedalCount(builder:flatbuffers.Builder, seniorRewardMedalCount:number) {
  builder.addFieldInt32(2, seniorRewardMedalCount, 0);
}

static addUnlockLevelIds(builder:flatbuffers.Builder, unlockLevelIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, unlockLevelIdsOffset, 0);
}

static createUnlockLevelIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUnlockLevelIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_RecalRuneConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RecalRuneConstData(builder:flatbuffers.Builder, stageCountPerSeason:number, juniorRewardMedalCount:number, seniorRewardMedalCount:number, unlockLevelIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RecalRuneConstData.startclz_Torappu_RecalRuneConstData(builder);
  clz_Torappu_RecalRuneConstData.addStageCountPerSeason(builder, stageCountPerSeason);
  clz_Torappu_RecalRuneConstData.addJuniorRewardMedalCount(builder, juniorRewardMedalCount);
  clz_Torappu_RecalRuneConstData.addSeniorRewardMedalCount(builder, seniorRewardMedalCount);
  clz_Torappu_RecalRuneConstData.addUnlockLevelIds(builder, unlockLevelIdsOffset);
  return clz_Torappu_RecalRuneConstData.endclz_Torappu_RecalRuneConstData(builder);
}

unpack(): clz_Torappu_RecalRuneConstDataT {
  return new clz_Torappu_RecalRuneConstDataT(
    this.stageCountPerSeason(),
    this.juniorRewardMedalCount(),
    this.seniorRewardMedalCount(),
    this.bb!.createScalarList<string>(this.unlockLevelIds.bind(this), this.unlockLevelIdsLength())
  );
}


unpackTo(_o: clz_Torappu_RecalRuneConstDataT): void {
  _o.stageCountPerSeason = this.stageCountPerSeason();
  _o.juniorRewardMedalCount = this.juniorRewardMedalCount();
  _o.seniorRewardMedalCount = this.seniorRewardMedalCount();
  _o.unlockLevelIds = this.bb!.createScalarList<string>(this.unlockLevelIds.bind(this), this.unlockLevelIdsLength());
}
}

export class clz_Torappu_RecalRuneConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public stageCountPerSeason: number = 0,
  public juniorRewardMedalCount: number = 0,
  public seniorRewardMedalCount: number = 0,
  public unlockLevelIds: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const unlockLevelIds = clz_Torappu_RecalRuneConstData.createUnlockLevelIdsVector(builder, builder.createObjectOffsetList(this.unlockLevelIds));

  return clz_Torappu_RecalRuneConstData.createclz_Torappu_RecalRuneConstData(builder,
    this.stageCountPerSeason,
    this.juniorRewardMedalCount,
    this.seniorRewardMedalCount,
    unlockLevelIds
  );
}
}
