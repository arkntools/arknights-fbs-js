// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_FestivalTimeData, clz_Torappu_FestivalTimeDataT } from './clz-torappu-festival-time-data.js';
import { enum__Torappu_CharWordShowType } from './enum--torappu-char-word-show-type.js';


export class clz_Torappu_FestivalVoiceData implements flatbuffers.IUnpackableObject<clz_Torappu_FestivalVoiceDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_FestivalVoiceData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_FestivalVoiceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_FestivalVoiceData):clz_Torappu_FestivalVoiceData {
  return (obj || new clz_Torappu_FestivalVoiceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_FestivalVoiceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_FestivalVoiceData):clz_Torappu_FestivalVoiceData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_FestivalVoiceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

showType():enum__Torappu_CharWordShowType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_CharWordShowType.HOME_SHOW;
}

timeData(index: number, obj?:clz_Torappu_FestivalTimeData):clz_Torappu_FestivalTimeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_FestivalTimeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

timeDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_FestivalVoiceData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addShowType(builder:flatbuffers.Builder, showType:enum__Torappu_CharWordShowType) {
  builder.addFieldInt32(0, showType, enum__Torappu_CharWordShowType.HOME_SHOW);
}

static addTimeData(builder:flatbuffers.Builder, timeDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, timeDataOffset, 0);
}

static createTimeDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTimeDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_FestivalVoiceData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_FestivalVoiceData(builder:flatbuffers.Builder, showType:enum__Torappu_CharWordShowType, timeDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_FestivalVoiceData.startclz_Torappu_FestivalVoiceData(builder);
  clz_Torappu_FestivalVoiceData.addShowType(builder, showType);
  clz_Torappu_FestivalVoiceData.addTimeData(builder, timeDataOffset);
  return clz_Torappu_FestivalVoiceData.endclz_Torappu_FestivalVoiceData(builder);
}

unpack(): clz_Torappu_FestivalVoiceDataT {
  return new clz_Torappu_FestivalVoiceDataT(
    this.showType(),
    this.bb!.createObjList<clz_Torappu_FestivalTimeData, clz_Torappu_FestivalTimeDataT>(this.timeData.bind(this), this.timeDataLength())
  );
}


unpackTo(_o: clz_Torappu_FestivalVoiceDataT): void {
  _o.showType = this.showType();
  _o.timeData = this.bb!.createObjList<clz_Torappu_FestivalTimeData, clz_Torappu_FestivalTimeDataT>(this.timeData.bind(this), this.timeDataLength());
}
}

export class clz_Torappu_FestivalVoiceDataT implements flatbuffers.IGeneratedObject {
constructor(
  public showType: enum__Torappu_CharWordShowType = enum__Torappu_CharWordShowType.HOME_SHOW,
  public timeData: (clz_Torappu_FestivalTimeDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const timeData = clz_Torappu_FestivalVoiceData.createTimeDataVector(builder, builder.createObjectOffsetList(this.timeData));

  return clz_Torappu_FestivalVoiceData.createclz_Torappu_FestivalVoiceData(builder,
    this.showType,
    timeData
  );
}
}
