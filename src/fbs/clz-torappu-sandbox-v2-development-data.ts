// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_SandboxV2DevelopmentType } from './enum--torappu-sandbox-v2-development-type.js';


export class clz_Torappu_SandboxV2DevelopmentData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2DevelopmentDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2DevelopmentData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2DevelopmentData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2DevelopmentData):clz_Torappu_SandboxV2DevelopmentData {
  return (obj || new clz_Torappu_SandboxV2DevelopmentData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2DevelopmentData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2DevelopmentData):clz_Torappu_SandboxV2DevelopmentData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2DevelopmentData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

techId():string|null
techId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

techType():enum__Torappu_SandboxV2DevelopmentType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SandboxV2DevelopmentType.NONE;
}

positionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

positionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

frontNodeId():string|null
frontNodeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frontNodeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nextNodeIds(index: number):string
nextNodeIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
nextNodeIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

nextNodeIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

limitBaseLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tokenCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

techName():string|null
techName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

techIconId():string|null
techIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeTitle():string|null
nodeTitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeTitle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rawDesc():string|null
rawDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canBuffReserch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_SandboxV2DevelopmentData(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addTechId(builder:flatbuffers.Builder, techIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, techIdOffset, 0);
}

static addTechType(builder:flatbuffers.Builder, techType:enum__Torappu_SandboxV2DevelopmentType) {
  builder.addFieldInt32(1, techType, enum__Torappu_SandboxV2DevelopmentType.NONE);
}

static addPositionX(builder:flatbuffers.Builder, positionX:number) {
  builder.addFieldInt32(2, positionX, 0);
}

static addPositionY(builder:flatbuffers.Builder, positionY:number) {
  builder.addFieldInt32(3, positionY, 0);
}

static addFrontNodeId(builder:flatbuffers.Builder, frontNodeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, frontNodeIdOffset, 0);
}

static addNextNodeIds(builder:flatbuffers.Builder, nextNodeIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, nextNodeIdsOffset, 0);
}

static createNextNodeIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNextNodeIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLimitBaseLevel(builder:flatbuffers.Builder, limitBaseLevel:number) {
  builder.addFieldInt32(6, limitBaseLevel, 0);
}

static addTokenCost(builder:flatbuffers.Builder, tokenCost:number) {
  builder.addFieldInt32(7, tokenCost, 0);
}

static addTechName(builder:flatbuffers.Builder, techNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, techNameOffset, 0);
}

static addTechIconId(builder:flatbuffers.Builder, techIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, techIconIdOffset, 0);
}

static addNodeTitle(builder:flatbuffers.Builder, nodeTitleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, nodeTitleOffset, 0);
}

static addRawDesc(builder:flatbuffers.Builder, rawDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, rawDescOffset, 0);
}

static addCanBuffReserch(builder:flatbuffers.Builder, canBuffReserch:boolean) {
  builder.addFieldInt8(12, +canBuffReserch, +false);
}

static endclz_Torappu_SandboxV2DevelopmentData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2DevelopmentData(builder:flatbuffers.Builder, techIdOffset:flatbuffers.Offset, techType:enum__Torappu_SandboxV2DevelopmentType, positionX:number, positionY:number, frontNodeIdOffset:flatbuffers.Offset, nextNodeIdsOffset:flatbuffers.Offset, limitBaseLevel:number, tokenCost:number, techNameOffset:flatbuffers.Offset, techIconIdOffset:flatbuffers.Offset, nodeTitleOffset:flatbuffers.Offset, rawDescOffset:flatbuffers.Offset, canBuffReserch:boolean):flatbuffers.Offset {
  clz_Torappu_SandboxV2DevelopmentData.startclz_Torappu_SandboxV2DevelopmentData(builder);
  clz_Torappu_SandboxV2DevelopmentData.addTechId(builder, techIdOffset);
  clz_Torappu_SandboxV2DevelopmentData.addTechType(builder, techType);
  clz_Torappu_SandboxV2DevelopmentData.addPositionX(builder, positionX);
  clz_Torappu_SandboxV2DevelopmentData.addPositionY(builder, positionY);
  clz_Torappu_SandboxV2DevelopmentData.addFrontNodeId(builder, frontNodeIdOffset);
  clz_Torappu_SandboxV2DevelopmentData.addNextNodeIds(builder, nextNodeIdsOffset);
  clz_Torappu_SandboxV2DevelopmentData.addLimitBaseLevel(builder, limitBaseLevel);
  clz_Torappu_SandboxV2DevelopmentData.addTokenCost(builder, tokenCost);
  clz_Torappu_SandboxV2DevelopmentData.addTechName(builder, techNameOffset);
  clz_Torappu_SandboxV2DevelopmentData.addTechIconId(builder, techIconIdOffset);
  clz_Torappu_SandboxV2DevelopmentData.addNodeTitle(builder, nodeTitleOffset);
  clz_Torappu_SandboxV2DevelopmentData.addRawDesc(builder, rawDescOffset);
  clz_Torappu_SandboxV2DevelopmentData.addCanBuffReserch(builder, canBuffReserch);
  return clz_Torappu_SandboxV2DevelopmentData.endclz_Torappu_SandboxV2DevelopmentData(builder);
}

unpack(): clz_Torappu_SandboxV2DevelopmentDataT {
  return new clz_Torappu_SandboxV2DevelopmentDataT(
    this.techId(),
    this.techType(),
    this.positionX(),
    this.positionY(),
    this.frontNodeId(),
    this.bb!.createScalarList<string>(this.nextNodeIds.bind(this), this.nextNodeIdsLength()),
    this.limitBaseLevel(),
    this.tokenCost(),
    this.techName(),
    this.techIconId(),
    this.nodeTitle(),
    this.rawDesc(),
    this.canBuffReserch()
  );
}


unpackTo(_o: clz_Torappu_SandboxV2DevelopmentDataT): void {
  _o.techId = this.techId();
  _o.techType = this.techType();
  _o.positionX = this.positionX();
  _o.positionY = this.positionY();
  _o.frontNodeId = this.frontNodeId();
  _o.nextNodeIds = this.bb!.createScalarList<string>(this.nextNodeIds.bind(this), this.nextNodeIdsLength());
  _o.limitBaseLevel = this.limitBaseLevel();
  _o.tokenCost = this.tokenCost();
  _o.techName = this.techName();
  _o.techIconId = this.techIconId();
  _o.nodeTitle = this.nodeTitle();
  _o.rawDesc = this.rawDesc();
  _o.canBuffReserch = this.canBuffReserch();
}
}

export class clz_Torappu_SandboxV2DevelopmentDataT implements flatbuffers.IGeneratedObject {
constructor(
  public techId: string|Uint8Array|null = null,
  public techType: enum__Torappu_SandboxV2DevelopmentType = enum__Torappu_SandboxV2DevelopmentType.NONE,
  public positionX: number = 0,
  public positionY: number = 0,
  public frontNodeId: string|Uint8Array|null = null,
  public nextNodeIds: (string)[] = [],
  public limitBaseLevel: number = 0,
  public tokenCost: number = 0,
  public techName: string|Uint8Array|null = null,
  public techIconId: string|Uint8Array|null = null,
  public nodeTitle: string|Uint8Array|null = null,
  public rawDesc: string|Uint8Array|null = null,
  public canBuffReserch: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const techId = (this.techId !== null ? builder.createString(this.techId!) : 0);
  const frontNodeId = (this.frontNodeId !== null ? builder.createString(this.frontNodeId!) : 0);
  const nextNodeIds = clz_Torappu_SandboxV2DevelopmentData.createNextNodeIdsVector(builder, builder.createObjectOffsetList(this.nextNodeIds));
  const techName = (this.techName !== null ? builder.createString(this.techName!) : 0);
  const techIconId = (this.techIconId !== null ? builder.createString(this.techIconId!) : 0);
  const nodeTitle = (this.nodeTitle !== null ? builder.createString(this.nodeTitle!) : 0);
  const rawDesc = (this.rawDesc !== null ? builder.createString(this.rawDesc!) : 0);

  return clz_Torappu_SandboxV2DevelopmentData.createclz_Torappu_SandboxV2DevelopmentData(builder,
    techId,
    this.techType,
    this.positionX,
    this.positionY,
    frontNodeId,
    nextNodeIds,
    this.limitBaseLevel,
    this.tokenCost,
    techName,
    techIconId,
    nodeTitle,
    rawDesc,
    this.canBuffReserch
  );
}
}
