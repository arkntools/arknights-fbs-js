// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_MeetingClueData_ClueTypeData implements flatbuffers.IUnpackableObject<clz_Torappu_MeetingClueData_ClueTypeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MeetingClueData_ClueTypeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MeetingClueData_ClueTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MeetingClueData_ClueTypeData):clz_Torappu_MeetingClueData_ClueTypeData {
  return (obj || new clz_Torappu_MeetingClueData_ClueTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MeetingClueData_ClueTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MeetingClueData_ClueTypeData):clz_Torappu_MeetingClueData_ClueTypeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MeetingClueData_ClueTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clueType():string|null
clueType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
clueType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clueNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_MeetingClueData_ClueTypeData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addClueType(builder:flatbuffers.Builder, clueTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clueTypeOffset, 0);
}

static addClueNumber(builder:flatbuffers.Builder, clueNumber:number) {
  builder.addFieldInt32(1, clueNumber, 0);
}

static endclz_Torappu_MeetingClueData_ClueTypeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MeetingClueData_ClueTypeData(builder:flatbuffers.Builder, clueTypeOffset:flatbuffers.Offset, clueNumber:number):flatbuffers.Offset {
  clz_Torappu_MeetingClueData_ClueTypeData.startclz_Torappu_MeetingClueData_ClueTypeData(builder);
  clz_Torappu_MeetingClueData_ClueTypeData.addClueType(builder, clueTypeOffset);
  clz_Torappu_MeetingClueData_ClueTypeData.addClueNumber(builder, clueNumber);
  return clz_Torappu_MeetingClueData_ClueTypeData.endclz_Torappu_MeetingClueData_ClueTypeData(builder);
}

unpack(): clz_Torappu_MeetingClueData_ClueTypeDataT {
  return new clz_Torappu_MeetingClueData_ClueTypeDataT(
    this.clueType(),
    this.clueNumber()
  );
}


unpackTo(_o: clz_Torappu_MeetingClueData_ClueTypeDataT): void {
  _o.clueType = this.clueType();
  _o.clueNumber = this.clueNumber();
}
}

export class clz_Torappu_MeetingClueData_ClueTypeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public clueType: string|Uint8Array|null = null,
  public clueNumber: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const clueType = (this.clueType !== null ? builder.createString(this.clueType!) : 0);

  return clz_Torappu_MeetingClueData_ClueTypeData.createclz_Torappu_MeetingClueData_ClueTypeData(builder,
    clueType,
    this.clueNumber
  );
}
}
