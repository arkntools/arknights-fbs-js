// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { dict__string__clz_Torappu_RoguelikeTopicChallengeTask, dict__string__clz_Torappu_RoguelikeTopicChallengeTaskT } from './dict--string--clz-torappu-roguelike-topic-challenge-task.js';


export class clz_Torappu_RoguelikeTopicChallenge implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeTopicChallengeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeTopicChallenge {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeTopicChallenge(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeTopicChallenge):clz_Torappu_RoguelikeTopicChallenge {
  return (obj || new clz_Torappu_RoguelikeTopicChallenge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeTopicChallenge(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeTopicChallenge):clz_Torappu_RoguelikeTopicChallenge {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeTopicChallenge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

challengeId():string|null
challengeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

challengeName():string|null
challengeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

challengeGroup():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

challengeGroupSortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

challengeGroupName():string|null
challengeGroupName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeGroupName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

challengeUnlockDesc():string|null
challengeUnlockDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeUnlockDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

challengeUnlockToastDesc():string|null
challengeUnlockToastDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeUnlockToastDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

challengeDes():string|null
challengeDes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeDes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

challengeConditionDes(index: number):string
challengeConditionDes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
challengeConditionDes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

challengeConditionDesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeTasks(index: number, obj?:dict__string__clz_Torappu_RoguelikeTopicChallengeTask):dict__string__clz_Torappu_RoguelikeTopicChallengeTask|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new dict__string__clz_Torappu_RoguelikeTopicChallengeTask()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

challengeTasksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

defaultTaskId():string|null
defaultTaskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultTaskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rewards(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeStoryId():string|null
challengeStoryId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeStoryId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_RoguelikeTopicChallenge(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addChallengeId(builder:flatbuffers.Builder, challengeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, challengeIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addChallengeName(builder:flatbuffers.Builder, challengeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, challengeNameOffset, 0);
}

static addChallengeGroup(builder:flatbuffers.Builder, challengeGroup:number) {
  builder.addFieldInt32(3, challengeGroup, 0);
}

static addChallengeGroupSortId(builder:flatbuffers.Builder, challengeGroupSortId:number) {
  builder.addFieldInt32(4, challengeGroupSortId, 0);
}

static addChallengeGroupName(builder:flatbuffers.Builder, challengeGroupNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, challengeGroupNameOffset, 0);
}

static addChallengeUnlockDesc(builder:flatbuffers.Builder, challengeUnlockDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, challengeUnlockDescOffset, 0);
}

static addChallengeUnlockToastDesc(builder:flatbuffers.Builder, challengeUnlockToastDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, challengeUnlockToastDescOffset, 0);
}

static addChallengeDes(builder:flatbuffers.Builder, challengeDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, challengeDesOffset, 0);
}

static addChallengeConditionDes(builder:flatbuffers.Builder, challengeConditionDesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, challengeConditionDesOffset, 0);
}

static createChallengeConditionDesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChallengeConditionDesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChallengeTasks(builder:flatbuffers.Builder, challengeTasksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, challengeTasksOffset, 0);
}

static createChallengeTasksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChallengeTasksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDefaultTaskId(builder:flatbuffers.Builder, defaultTaskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, defaultTaskIdOffset, 0);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, rewardsOffset, 0);
}

static createRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChallengeStoryId(builder:flatbuffers.Builder, challengeStoryIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, challengeStoryIdOffset, 0);
}

static endclz_Torappu_RoguelikeTopicChallenge(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeTopicChallenge(builder:flatbuffers.Builder, challengeIdOffset:flatbuffers.Offset, sortId:number, challengeNameOffset:flatbuffers.Offset, challengeGroup:number, challengeGroupSortId:number, challengeGroupNameOffset:flatbuffers.Offset, challengeUnlockDescOffset:flatbuffers.Offset, challengeUnlockToastDescOffset:flatbuffers.Offset, challengeDesOffset:flatbuffers.Offset, challengeConditionDesOffset:flatbuffers.Offset, challengeTasksOffset:flatbuffers.Offset, defaultTaskIdOffset:flatbuffers.Offset, rewardsOffset:flatbuffers.Offset, challengeStoryIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeTopicChallenge.startclz_Torappu_RoguelikeTopicChallenge(builder);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeId(builder, challengeIdOffset);
  clz_Torappu_RoguelikeTopicChallenge.addSortId(builder, sortId);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeName(builder, challengeNameOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeGroup(builder, challengeGroup);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeGroupSortId(builder, challengeGroupSortId);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeGroupName(builder, challengeGroupNameOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeUnlockDesc(builder, challengeUnlockDescOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeUnlockToastDesc(builder, challengeUnlockToastDescOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeDes(builder, challengeDesOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeConditionDes(builder, challengeConditionDesOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeTasks(builder, challengeTasksOffset);
  clz_Torappu_RoguelikeTopicChallenge.addDefaultTaskId(builder, defaultTaskIdOffset);
  clz_Torappu_RoguelikeTopicChallenge.addRewards(builder, rewardsOffset);
  clz_Torappu_RoguelikeTopicChallenge.addChallengeStoryId(builder, challengeStoryIdOffset);
  return clz_Torappu_RoguelikeTopicChallenge.endclz_Torappu_RoguelikeTopicChallenge(builder);
}

unpack(): clz_Torappu_RoguelikeTopicChallengeT {
  return new clz_Torappu_RoguelikeTopicChallengeT(
    this.challengeId(),
    this.sortId(),
    this.challengeName(),
    this.challengeGroup(),
    this.challengeGroupSortId(),
    this.challengeGroupName(),
    this.challengeUnlockDesc(),
    this.challengeUnlockToastDesc(),
    this.challengeDes(),
    this.bb!.createScalarList<string>(this.challengeConditionDes.bind(this), this.challengeConditionDesLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeTopicChallengeTask, dict__string__clz_Torappu_RoguelikeTopicChallengeTaskT>(this.challengeTasks.bind(this), this.challengeTasksLength()),
    this.defaultTaskId(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.rewards.bind(this), this.rewardsLength()),
    this.challengeStoryId()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeTopicChallengeT): void {
  _o.challengeId = this.challengeId();
  _o.sortId = this.sortId();
  _o.challengeName = this.challengeName();
  _o.challengeGroup = this.challengeGroup();
  _o.challengeGroupSortId = this.challengeGroupSortId();
  _o.challengeGroupName = this.challengeGroupName();
  _o.challengeUnlockDesc = this.challengeUnlockDesc();
  _o.challengeUnlockToastDesc = this.challengeUnlockToastDesc();
  _o.challengeDes = this.challengeDes();
  _o.challengeConditionDes = this.bb!.createScalarList<string>(this.challengeConditionDes.bind(this), this.challengeConditionDesLength());
  _o.challengeTasks = this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeTopicChallengeTask, dict__string__clz_Torappu_RoguelikeTopicChallengeTaskT>(this.challengeTasks.bind(this), this.challengeTasksLength());
  _o.defaultTaskId = this.defaultTaskId();
  _o.rewards = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.rewards.bind(this), this.rewardsLength());
  _o.challengeStoryId = this.challengeStoryId();
}
}

export class clz_Torappu_RoguelikeTopicChallengeT implements flatbuffers.IGeneratedObject {
constructor(
  public challengeId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public challengeName: string|Uint8Array|null = null,
  public challengeGroup: number = 0,
  public challengeGroupSortId: number = 0,
  public challengeGroupName: string|Uint8Array|null = null,
  public challengeUnlockDesc: string|Uint8Array|null = null,
  public challengeUnlockToastDesc: string|Uint8Array|null = null,
  public challengeDes: string|Uint8Array|null = null,
  public challengeConditionDes: (string)[] = [],
  public challengeTasks: (dict__string__clz_Torappu_RoguelikeTopicChallengeTaskT)[] = [],
  public defaultTaskId: string|Uint8Array|null = null,
  public rewards: (clz_Torappu_ItemBundleT)[] = [],
  public challengeStoryId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const challengeId = (this.challengeId !== null ? builder.createString(this.challengeId!) : 0);
  const challengeName = (this.challengeName !== null ? builder.createString(this.challengeName!) : 0);
  const challengeGroupName = (this.challengeGroupName !== null ? builder.createString(this.challengeGroupName!) : 0);
  const challengeUnlockDesc = (this.challengeUnlockDesc !== null ? builder.createString(this.challengeUnlockDesc!) : 0);
  const challengeUnlockToastDesc = (this.challengeUnlockToastDesc !== null ? builder.createString(this.challengeUnlockToastDesc!) : 0);
  const challengeDes = (this.challengeDes !== null ? builder.createString(this.challengeDes!) : 0);
  const challengeConditionDes = clz_Torappu_RoguelikeTopicChallenge.createChallengeConditionDesVector(builder, builder.createObjectOffsetList(this.challengeConditionDes));
  const challengeTasks = clz_Torappu_RoguelikeTopicChallenge.createChallengeTasksVector(builder, builder.createObjectOffsetList(this.challengeTasks));
  const defaultTaskId = (this.defaultTaskId !== null ? builder.createString(this.defaultTaskId!) : 0);
  const rewards = clz_Torappu_RoguelikeTopicChallenge.createRewardsVector(builder, builder.createObjectOffsetList(this.rewards));
  const challengeStoryId = (this.challengeStoryId !== null ? builder.createString(this.challengeStoryId!) : 0);

  return clz_Torappu_RoguelikeTopicChallenge.createclz_Torappu_RoguelikeTopicChallenge(builder,
    challengeId,
    this.sortId,
    challengeName,
    this.challengeGroup,
    this.challengeGroupSortId,
    challengeGroupName,
    challengeUnlockDesc,
    challengeUnlockToastDesc,
    challengeDes,
    challengeConditionDes,
    challengeTasks,
    defaultTaskId,
    rewards,
    challengeStoryId
  );
}
}
