// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_SandboxBaseConstTable implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxBaseConstTableT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxBaseConstTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxBaseConstTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxBaseConstTable):clz_Torappu_SandboxBaseConstTable {
  return (obj || new clz_Torappu_SandboxBaseConstTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxBaseConstTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxBaseConstTable):clz_Torappu_SandboxBaseConstTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxBaseConstTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cookRegularCostItemId():string|null
cookRegularCostItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cookRegularCostItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cookRegularCostItemIdCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

squadTabNameList(index: number):string
squadTabNameList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
squadTabNameList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

squadTabNameListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

charRarityColorList(index: number):string
charRarityColorList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
charRarityColorList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

charRarityColorListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sumFoodLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sumBuildingLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sumTacticalLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sumFoodMatLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sumBuildingMatLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sumStaminaPotLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sumGoldLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

itemLimitedCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

blackBoxSlotCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

scoutNodeUpgradeId():string|null
scoutNodeUpgradeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scoutNodeUpgradeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleNodeUpgradeId():string|null
battleNodeUpgradeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleNodeUpgradeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

staminaPotCostOnce():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

staminaPotItemId():string|null
staminaPotItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
staminaPotItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

staminapotRedMinCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

staminapotYellowMinCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

staminapotGreenMinCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

staminapotMaxPercentCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

staminaPotActionPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

goldItemId():string|null
goldItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
goldItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

toolboxSlotCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

toolboxSlotCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamPopulationLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

researchInformationDesc():string|null
researchInformationDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
researchInformationDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

settleFailDesc():string|null
settleFailDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
settleFailDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

settleAbortDesc():string|null
settleAbortDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
settleAbortDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

settleSucDesc():string|null
settleSucDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
settleSucDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_SandboxBaseConstTable(builder:flatbuffers.Builder) {
  builder.startObject(30);
}

static addCookRegularCostItemId(builder:flatbuffers.Builder, cookRegularCostItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, cookRegularCostItemIdOffset, 0);
}

static addCookRegularCostItemIdCnt(builder:flatbuffers.Builder, cookRegularCostItemIdCnt:number) {
  builder.addFieldInt32(1, cookRegularCostItemIdCnt, 0);
}

static addSquadTabNameList(builder:flatbuffers.Builder, squadTabNameListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, squadTabNameListOffset, 0);
}

static createSquadTabNameListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSquadTabNameListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharRarityColorList(builder:flatbuffers.Builder, charRarityColorListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, charRarityColorListOffset, 0);
}

static createCharRarityColorListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharRarityColorListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSumFoodLimitedCount(builder:flatbuffers.Builder, sumFoodLimitedCount:number) {
  builder.addFieldInt32(4, sumFoodLimitedCount, 0);
}

static addSumBuildingLimitedCount(builder:flatbuffers.Builder, sumBuildingLimitedCount:number) {
  builder.addFieldInt32(5, sumBuildingLimitedCount, 0);
}

static addSumTacticalLimitedCount(builder:flatbuffers.Builder, sumTacticalLimitedCount:number) {
  builder.addFieldInt32(6, sumTacticalLimitedCount, 0);
}

static addSumFoodMatLimitedCount(builder:flatbuffers.Builder, sumFoodMatLimitedCount:number) {
  builder.addFieldInt32(7, sumFoodMatLimitedCount, 0);
}

static addSumBuildingMatLimitedCount(builder:flatbuffers.Builder, sumBuildingMatLimitedCount:number) {
  builder.addFieldInt32(8, sumBuildingMatLimitedCount, 0);
}

static addSumStaminaPotLimitedCount(builder:flatbuffers.Builder, sumStaminaPotLimitedCount:number) {
  builder.addFieldInt32(9, sumStaminaPotLimitedCount, 0);
}

static addSumGoldLimitedCount(builder:flatbuffers.Builder, sumGoldLimitedCount:number) {
  builder.addFieldInt32(10, sumGoldLimitedCount, 0);
}

static addItemLimitedCount(builder:flatbuffers.Builder, itemLimitedCount:number) {
  builder.addFieldInt32(11, itemLimitedCount, 0);
}

static addBlackBoxSlotCnt(builder:flatbuffers.Builder, blackBoxSlotCnt:number) {
  builder.addFieldInt32(12, blackBoxSlotCnt, 0);
}

static addScoutNodeUpgradeId(builder:flatbuffers.Builder, scoutNodeUpgradeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, scoutNodeUpgradeIdOffset, 0);
}

static addBattleNodeUpgradeId(builder:flatbuffers.Builder, battleNodeUpgradeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, battleNodeUpgradeIdOffset, 0);
}

static addStaminaPotCostOnce(builder:flatbuffers.Builder, staminaPotCostOnce:number) {
  builder.addFieldInt32(15, staminaPotCostOnce, 0);
}

static addStaminaPotItemId(builder:flatbuffers.Builder, staminaPotItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, staminaPotItemIdOffset, 0);
}

static addStaminapotRedMinCnt(builder:flatbuffers.Builder, staminapotRedMinCnt:number) {
  builder.addFieldInt32(17, staminapotRedMinCnt, 0);
}

static addStaminapotYellowMinCnt(builder:flatbuffers.Builder, staminapotYellowMinCnt:number) {
  builder.addFieldInt32(18, staminapotYellowMinCnt, 0);
}

static addStaminapotGreenMinCnt(builder:flatbuffers.Builder, staminapotGreenMinCnt:number) {
  builder.addFieldInt32(19, staminapotGreenMinCnt, 0);
}

static addStaminapotMaxPercentCnt(builder:flatbuffers.Builder, staminapotMaxPercentCnt:number) {
  builder.addFieldInt32(20, staminapotMaxPercentCnt, 0);
}

static addStaminaPotActionPoint(builder:flatbuffers.Builder, staminaPotActionPoint:number) {
  builder.addFieldInt32(21, staminaPotActionPoint, 0);
}

static addGoldItemId(builder:flatbuffers.Builder, goldItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, goldItemIdOffset, 0);
}

static addToolboxSlotCapacity(builder:flatbuffers.Builder, toolboxSlotCapacity:number) {
  builder.addFieldInt32(23, toolboxSlotCapacity, 0);
}

static addToolboxSlotCnt(builder:flatbuffers.Builder, toolboxSlotCnt:number) {
  builder.addFieldInt32(24, toolboxSlotCnt, 0);
}

static addTeamPopulationLimit(builder:flatbuffers.Builder, teamPopulationLimit:number) {
  builder.addFieldInt32(25, teamPopulationLimit, 0);
}

static addResearchInformationDesc(builder:flatbuffers.Builder, researchInformationDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, researchInformationDescOffset, 0);
}

static addSettleFailDesc(builder:flatbuffers.Builder, settleFailDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, settleFailDescOffset, 0);
}

static addSettleAbortDesc(builder:flatbuffers.Builder, settleAbortDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, settleAbortDescOffset, 0);
}

static addSettleSucDesc(builder:flatbuffers.Builder, settleSucDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, settleSucDescOffset, 0);
}

static endclz_Torappu_SandboxBaseConstTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxBaseConstTable(builder:flatbuffers.Builder, cookRegularCostItemIdOffset:flatbuffers.Offset, cookRegularCostItemIdCnt:number, squadTabNameListOffset:flatbuffers.Offset, charRarityColorListOffset:flatbuffers.Offset, sumFoodLimitedCount:number, sumBuildingLimitedCount:number, sumTacticalLimitedCount:number, sumFoodMatLimitedCount:number, sumBuildingMatLimitedCount:number, sumStaminaPotLimitedCount:number, sumGoldLimitedCount:number, itemLimitedCount:number, blackBoxSlotCnt:number, scoutNodeUpgradeIdOffset:flatbuffers.Offset, battleNodeUpgradeIdOffset:flatbuffers.Offset, staminaPotCostOnce:number, staminaPotItemIdOffset:flatbuffers.Offset, staminapotRedMinCnt:number, staminapotYellowMinCnt:number, staminapotGreenMinCnt:number, staminapotMaxPercentCnt:number, staminaPotActionPoint:number, goldItemIdOffset:flatbuffers.Offset, toolboxSlotCapacity:number, toolboxSlotCnt:number, teamPopulationLimit:number, researchInformationDescOffset:flatbuffers.Offset, settleFailDescOffset:flatbuffers.Offset, settleAbortDescOffset:flatbuffers.Offset, settleSucDescOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SandboxBaseConstTable.startclz_Torappu_SandboxBaseConstTable(builder);
  clz_Torappu_SandboxBaseConstTable.addCookRegularCostItemId(builder, cookRegularCostItemIdOffset);
  clz_Torappu_SandboxBaseConstTable.addCookRegularCostItemIdCnt(builder, cookRegularCostItemIdCnt);
  clz_Torappu_SandboxBaseConstTable.addSquadTabNameList(builder, squadTabNameListOffset);
  clz_Torappu_SandboxBaseConstTable.addCharRarityColorList(builder, charRarityColorListOffset);
  clz_Torappu_SandboxBaseConstTable.addSumFoodLimitedCount(builder, sumFoodLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addSumBuildingLimitedCount(builder, sumBuildingLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addSumTacticalLimitedCount(builder, sumTacticalLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addSumFoodMatLimitedCount(builder, sumFoodMatLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addSumBuildingMatLimitedCount(builder, sumBuildingMatLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addSumStaminaPotLimitedCount(builder, sumStaminaPotLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addSumGoldLimitedCount(builder, sumGoldLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addItemLimitedCount(builder, itemLimitedCount);
  clz_Torappu_SandboxBaseConstTable.addBlackBoxSlotCnt(builder, blackBoxSlotCnt);
  clz_Torappu_SandboxBaseConstTable.addScoutNodeUpgradeId(builder, scoutNodeUpgradeIdOffset);
  clz_Torappu_SandboxBaseConstTable.addBattleNodeUpgradeId(builder, battleNodeUpgradeIdOffset);
  clz_Torappu_SandboxBaseConstTable.addStaminaPotCostOnce(builder, staminaPotCostOnce);
  clz_Torappu_SandboxBaseConstTable.addStaminaPotItemId(builder, staminaPotItemIdOffset);
  clz_Torappu_SandboxBaseConstTable.addStaminapotRedMinCnt(builder, staminapotRedMinCnt);
  clz_Torappu_SandboxBaseConstTable.addStaminapotYellowMinCnt(builder, staminapotYellowMinCnt);
  clz_Torappu_SandboxBaseConstTable.addStaminapotGreenMinCnt(builder, staminapotGreenMinCnt);
  clz_Torappu_SandboxBaseConstTable.addStaminapotMaxPercentCnt(builder, staminapotMaxPercentCnt);
  clz_Torappu_SandboxBaseConstTable.addStaminaPotActionPoint(builder, staminaPotActionPoint);
  clz_Torappu_SandboxBaseConstTable.addGoldItemId(builder, goldItemIdOffset);
  clz_Torappu_SandboxBaseConstTable.addToolboxSlotCapacity(builder, toolboxSlotCapacity);
  clz_Torappu_SandboxBaseConstTable.addToolboxSlotCnt(builder, toolboxSlotCnt);
  clz_Torappu_SandboxBaseConstTable.addTeamPopulationLimit(builder, teamPopulationLimit);
  clz_Torappu_SandboxBaseConstTable.addResearchInformationDesc(builder, researchInformationDescOffset);
  clz_Torappu_SandboxBaseConstTable.addSettleFailDesc(builder, settleFailDescOffset);
  clz_Torappu_SandboxBaseConstTable.addSettleAbortDesc(builder, settleAbortDescOffset);
  clz_Torappu_SandboxBaseConstTable.addSettleSucDesc(builder, settleSucDescOffset);
  return clz_Torappu_SandboxBaseConstTable.endclz_Torappu_SandboxBaseConstTable(builder);
}

unpack(): clz_Torappu_SandboxBaseConstTableT {
  return new clz_Torappu_SandboxBaseConstTableT(
    this.cookRegularCostItemId(),
    this.cookRegularCostItemIdCnt(),
    this.bb!.createScalarList<string>(this.squadTabNameList.bind(this), this.squadTabNameListLength()),
    this.bb!.createScalarList<string>(this.charRarityColorList.bind(this), this.charRarityColorListLength()),
    this.sumFoodLimitedCount(),
    this.sumBuildingLimitedCount(),
    this.sumTacticalLimitedCount(),
    this.sumFoodMatLimitedCount(),
    this.sumBuildingMatLimitedCount(),
    this.sumStaminaPotLimitedCount(),
    this.sumGoldLimitedCount(),
    this.itemLimitedCount(),
    this.blackBoxSlotCnt(),
    this.scoutNodeUpgradeId(),
    this.battleNodeUpgradeId(),
    this.staminaPotCostOnce(),
    this.staminaPotItemId(),
    this.staminapotRedMinCnt(),
    this.staminapotYellowMinCnt(),
    this.staminapotGreenMinCnt(),
    this.staminapotMaxPercentCnt(),
    this.staminaPotActionPoint(),
    this.goldItemId(),
    this.toolboxSlotCapacity(),
    this.toolboxSlotCnt(),
    this.teamPopulationLimit(),
    this.researchInformationDesc(),
    this.settleFailDesc(),
    this.settleAbortDesc(),
    this.settleSucDesc()
  );
}


unpackTo(_o: clz_Torappu_SandboxBaseConstTableT): void {
  _o.cookRegularCostItemId = this.cookRegularCostItemId();
  _o.cookRegularCostItemIdCnt = this.cookRegularCostItemIdCnt();
  _o.squadTabNameList = this.bb!.createScalarList<string>(this.squadTabNameList.bind(this), this.squadTabNameListLength());
  _o.charRarityColorList = this.bb!.createScalarList<string>(this.charRarityColorList.bind(this), this.charRarityColorListLength());
  _o.sumFoodLimitedCount = this.sumFoodLimitedCount();
  _o.sumBuildingLimitedCount = this.sumBuildingLimitedCount();
  _o.sumTacticalLimitedCount = this.sumTacticalLimitedCount();
  _o.sumFoodMatLimitedCount = this.sumFoodMatLimitedCount();
  _o.sumBuildingMatLimitedCount = this.sumBuildingMatLimitedCount();
  _o.sumStaminaPotLimitedCount = this.sumStaminaPotLimitedCount();
  _o.sumGoldLimitedCount = this.sumGoldLimitedCount();
  _o.itemLimitedCount = this.itemLimitedCount();
  _o.blackBoxSlotCnt = this.blackBoxSlotCnt();
  _o.scoutNodeUpgradeId = this.scoutNodeUpgradeId();
  _o.battleNodeUpgradeId = this.battleNodeUpgradeId();
  _o.staminaPotCostOnce = this.staminaPotCostOnce();
  _o.staminaPotItemId = this.staminaPotItemId();
  _o.staminapotRedMinCnt = this.staminapotRedMinCnt();
  _o.staminapotYellowMinCnt = this.staminapotYellowMinCnt();
  _o.staminapotGreenMinCnt = this.staminapotGreenMinCnt();
  _o.staminapotMaxPercentCnt = this.staminapotMaxPercentCnt();
  _o.staminaPotActionPoint = this.staminaPotActionPoint();
  _o.goldItemId = this.goldItemId();
  _o.toolboxSlotCapacity = this.toolboxSlotCapacity();
  _o.toolboxSlotCnt = this.toolboxSlotCnt();
  _o.teamPopulationLimit = this.teamPopulationLimit();
  _o.researchInformationDesc = this.researchInformationDesc();
  _o.settleFailDesc = this.settleFailDesc();
  _o.settleAbortDesc = this.settleAbortDesc();
  _o.settleSucDesc = this.settleSucDesc();
}
}

export class clz_Torappu_SandboxBaseConstTableT implements flatbuffers.IGeneratedObject {
constructor(
  public cookRegularCostItemId: string|Uint8Array|null = null,
  public cookRegularCostItemIdCnt: number = 0,
  public squadTabNameList: (string)[] = [],
  public charRarityColorList: (string)[] = [],
  public sumFoodLimitedCount: number = 0,
  public sumBuildingLimitedCount: number = 0,
  public sumTacticalLimitedCount: number = 0,
  public sumFoodMatLimitedCount: number = 0,
  public sumBuildingMatLimitedCount: number = 0,
  public sumStaminaPotLimitedCount: number = 0,
  public sumGoldLimitedCount: number = 0,
  public itemLimitedCount: number = 0,
  public blackBoxSlotCnt: number = 0,
  public scoutNodeUpgradeId: string|Uint8Array|null = null,
  public battleNodeUpgradeId: string|Uint8Array|null = null,
  public staminaPotCostOnce: number = 0,
  public staminaPotItemId: string|Uint8Array|null = null,
  public staminapotRedMinCnt: number = 0,
  public staminapotYellowMinCnt: number = 0,
  public staminapotGreenMinCnt: number = 0,
  public staminapotMaxPercentCnt: number = 0,
  public staminaPotActionPoint: number = 0,
  public goldItemId: string|Uint8Array|null = null,
  public toolboxSlotCapacity: number = 0,
  public toolboxSlotCnt: number = 0,
  public teamPopulationLimit: number = 0,
  public researchInformationDesc: string|Uint8Array|null = null,
  public settleFailDesc: string|Uint8Array|null = null,
  public settleAbortDesc: string|Uint8Array|null = null,
  public settleSucDesc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cookRegularCostItemId = (this.cookRegularCostItemId !== null ? builder.createString(this.cookRegularCostItemId!) : 0);
  const squadTabNameList = clz_Torappu_SandboxBaseConstTable.createSquadTabNameListVector(builder, builder.createObjectOffsetList(this.squadTabNameList));
  const charRarityColorList = clz_Torappu_SandboxBaseConstTable.createCharRarityColorListVector(builder, builder.createObjectOffsetList(this.charRarityColorList));
  const scoutNodeUpgradeId = (this.scoutNodeUpgradeId !== null ? builder.createString(this.scoutNodeUpgradeId!) : 0);
  const battleNodeUpgradeId = (this.battleNodeUpgradeId !== null ? builder.createString(this.battleNodeUpgradeId!) : 0);
  const staminaPotItemId = (this.staminaPotItemId !== null ? builder.createString(this.staminaPotItemId!) : 0);
  const goldItemId = (this.goldItemId !== null ? builder.createString(this.goldItemId!) : 0);
  const researchInformationDesc = (this.researchInformationDesc !== null ? builder.createString(this.researchInformationDesc!) : 0);
  const settleFailDesc = (this.settleFailDesc !== null ? builder.createString(this.settleFailDesc!) : 0);
  const settleAbortDesc = (this.settleAbortDesc !== null ? builder.createString(this.settleAbortDesc!) : 0);
  const settleSucDesc = (this.settleSucDesc !== null ? builder.createString(this.settleSucDesc!) : 0);

  return clz_Torappu_SandboxBaseConstTable.createclz_Torappu_SandboxBaseConstTable(builder,
    cookRegularCostItemId,
    this.cookRegularCostItemIdCnt,
    squadTabNameList,
    charRarityColorList,
    this.sumFoodLimitedCount,
    this.sumBuildingLimitedCount,
    this.sumTacticalLimitedCount,
    this.sumFoodMatLimitedCount,
    this.sumBuildingMatLimitedCount,
    this.sumStaminaPotLimitedCount,
    this.sumGoldLimitedCount,
    this.itemLimitedCount,
    this.blackBoxSlotCnt,
    scoutNodeUpgradeId,
    battleNodeUpgradeId,
    this.staminaPotCostOnce,
    staminaPotItemId,
    this.staminapotRedMinCnt,
    this.staminapotYellowMinCnt,
    this.staminapotGreenMinCnt,
    this.staminapotMaxPercentCnt,
    this.staminaPotActionPoint,
    goldItemId,
    this.toolboxSlotCapacity,
    this.toolboxSlotCnt,
    this.teamPopulationLimit,
    researchInformationDesc,
    settleFailDesc,
    settleAbortDesc,
    settleSucDesc
  );
}
}
