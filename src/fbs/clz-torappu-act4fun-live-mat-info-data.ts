// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo, dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoT } from './dict--enum--torappu-act4fun-stage-attribute-type--clz-torappu-act4fun-live-mat-effect-info.js';


export class clz_Torappu_Act4funLiveMatInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_Act4funLiveMatInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act4funLiveMatInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act4funLiveMatInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funLiveMatInfoData):clz_Torappu_Act4funLiveMatInfoData {
  return (obj || new clz_Torappu_Act4funLiveMatInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act4funLiveMatInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funLiveMatInfoData):clz_Torappu_Act4funLiveMatInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act4funLiveMatInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

liveMatId():string|null
liveMatId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
liveMatId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stageId():string|null
stageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

picId():string|null
picId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
picId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tagTxt():string|null
tagTxt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tagTxt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

emojiIcon():string|null
emojiIcon(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
emojiIcon(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selectedPerformId():string|null
selectedPerformId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
selectedPerformId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

effectInfos(index: number, obj?:dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo):dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

effectInfosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act4funLiveMatInfoData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addLiveMatId(builder:flatbuffers.Builder, liveMatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, liveMatIdOffset, 0);
}

static addStageId(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stageIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addPicId(builder:flatbuffers.Builder, picIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, picIdOffset, 0);
}

static addTagTxt(builder:flatbuffers.Builder, tagTxtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tagTxtOffset, 0);
}

static addEmojiIcon(builder:flatbuffers.Builder, emojiIconOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, emojiIconOffset, 0);
}

static addSelectedPerformId(builder:flatbuffers.Builder, selectedPerformIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, selectedPerformIdOffset, 0);
}

static addEffectInfos(builder:flatbuffers.Builder, effectInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, effectInfosOffset, 0);
}

static createEffectInfosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectInfosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act4funLiveMatInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act4funLiveMatInfoData(builder:flatbuffers.Builder, liveMatIdOffset:flatbuffers.Offset, stageIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, picIdOffset:flatbuffers.Offset, tagTxtOffset:flatbuffers.Offset, emojiIconOffset:flatbuffers.Offset, selectedPerformIdOffset:flatbuffers.Offset, effectInfosOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act4funLiveMatInfoData.startclz_Torappu_Act4funLiveMatInfoData(builder);
  clz_Torappu_Act4funLiveMatInfoData.addLiveMatId(builder, liveMatIdOffset);
  clz_Torappu_Act4funLiveMatInfoData.addStageId(builder, stageIdOffset);
  clz_Torappu_Act4funLiveMatInfoData.addName(builder, nameOffset);
  clz_Torappu_Act4funLiveMatInfoData.addPicId(builder, picIdOffset);
  clz_Torappu_Act4funLiveMatInfoData.addTagTxt(builder, tagTxtOffset);
  clz_Torappu_Act4funLiveMatInfoData.addEmojiIcon(builder, emojiIconOffset);
  clz_Torappu_Act4funLiveMatInfoData.addSelectedPerformId(builder, selectedPerformIdOffset);
  clz_Torappu_Act4funLiveMatInfoData.addEffectInfos(builder, effectInfosOffset);
  return clz_Torappu_Act4funLiveMatInfoData.endclz_Torappu_Act4funLiveMatInfoData(builder);
}

unpack(): clz_Torappu_Act4funLiveMatInfoDataT {
  return new clz_Torappu_Act4funLiveMatInfoDataT(
    this.liveMatId(),
    this.stageId(),
    this.name(),
    this.picId(),
    this.tagTxt(),
    this.emojiIcon(),
    this.selectedPerformId(),
    this.bb!.createObjList<dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo, dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoT>(this.effectInfos.bind(this), this.effectInfosLength())
  );
}


unpackTo(_o: clz_Torappu_Act4funLiveMatInfoDataT): void {
  _o.liveMatId = this.liveMatId();
  _o.stageId = this.stageId();
  _o.name = this.name();
  _o.picId = this.picId();
  _o.tagTxt = this.tagTxt();
  _o.emojiIcon = this.emojiIcon();
  _o.selectedPerformId = this.selectedPerformId();
  _o.effectInfos = this.bb!.createObjList<dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo, dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoT>(this.effectInfos.bind(this), this.effectInfosLength());
}
}

export class clz_Torappu_Act4funLiveMatInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public liveMatId: string|Uint8Array|null = null,
  public stageId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public picId: string|Uint8Array|null = null,
  public tagTxt: string|Uint8Array|null = null,
  public emojiIcon: string|Uint8Array|null = null,
  public selectedPerformId: string|Uint8Array|null = null,
  public effectInfos: (dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const liveMatId = (this.liveMatId !== null ? builder.createString(this.liveMatId!) : 0);
  const stageId = (this.stageId !== null ? builder.createString(this.stageId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const picId = (this.picId !== null ? builder.createString(this.picId!) : 0);
  const tagTxt = (this.tagTxt !== null ? builder.createString(this.tagTxt!) : 0);
  const emojiIcon = (this.emojiIcon !== null ? builder.createString(this.emojiIcon!) : 0);
  const selectedPerformId = (this.selectedPerformId !== null ? builder.createString(this.selectedPerformId!) : 0);
  const effectInfos = clz_Torappu_Act4funLiveMatInfoData.createEffectInfosVector(builder, builder.createObjectOffsetList(this.effectInfos));

  return clz_Torappu_Act4funLiveMatInfoData.createclz_Torappu_Act4funLiveMatInfoData(builder,
    liveMatId,
    stageId,
    name,
    picId,
    tagTxt,
    emojiIcon,
    selectedPerformId,
    effectInfos
  );
}
}
