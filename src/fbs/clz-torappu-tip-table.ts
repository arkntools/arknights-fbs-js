// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_TipData, clz_Torappu_TipDataT } from './clz-torappu-tip-data.js';
import { clz_Torappu_WorldViewTip, clz_Torappu_WorldViewTipT } from './clz-torappu-world-view-tip.js';


export class clz_Torappu_TipTable implements flatbuffers.IUnpackableObject<clz_Torappu_TipTableT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_TipTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_TipTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TipTable):clz_Torappu_TipTable {
  return (obj || new clz_Torappu_TipTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_TipTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TipTable):clz_Torappu_TipTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_TipTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tips(index: number, obj?:clz_Torappu_TipData):clz_Torappu_TipData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_TipData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tipsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

worldViewTips(index: number, obj?:clz_Torappu_WorldViewTip):clz_Torappu_WorldViewTip|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_WorldViewTip()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

worldViewTipsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_TipTable(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTips(builder:flatbuffers.Builder, tipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tipsOffset, 0);
}

static createTipsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTipsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWorldViewTips(builder:flatbuffers.Builder, worldViewTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, worldViewTipsOffset, 0);
}

static createWorldViewTipsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWorldViewTipsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_TipTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishclz_Torappu_TipTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedclz_Torappu_TipTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createclz_Torappu_TipTable(builder:flatbuffers.Builder, tipsOffset:flatbuffers.Offset, worldViewTipsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_TipTable.startclz_Torappu_TipTable(builder);
  clz_Torappu_TipTable.addTips(builder, tipsOffset);
  clz_Torappu_TipTable.addWorldViewTips(builder, worldViewTipsOffset);
  return clz_Torappu_TipTable.endclz_Torappu_TipTable(builder);
}

unpack(): clz_Torappu_TipTableT {
  return new clz_Torappu_TipTableT(
    this.bb!.createObjList<clz_Torappu_TipData, clz_Torappu_TipDataT>(this.tips.bind(this), this.tipsLength()),
    this.bb!.createObjList<clz_Torappu_WorldViewTip, clz_Torappu_WorldViewTipT>(this.worldViewTips.bind(this), this.worldViewTipsLength())
  );
}


unpackTo(_o: clz_Torappu_TipTableT): void {
  _o.tips = this.bb!.createObjList<clz_Torappu_TipData, clz_Torappu_TipDataT>(this.tips.bind(this), this.tipsLength());
  _o.worldViewTips = this.bb!.createObjList<clz_Torappu_WorldViewTip, clz_Torappu_WorldViewTipT>(this.worldViewTips.bind(this), this.worldViewTipsLength());
}
}

export class clz_Torappu_TipTableT implements flatbuffers.IGeneratedObject {
constructor(
  public tips: (clz_Torappu_TipDataT)[] = [],
  public worldViewTips: (clz_Torappu_WorldViewTipT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const tips = clz_Torappu_TipTable.createTipsVector(builder, builder.createObjectOffsetList(this.tips));
  const worldViewTips = clz_Torappu_TipTable.createWorldViewTipsVector(builder, builder.createObjectOffsetList(this.worldViewTips));

  return clz_Torappu_TipTable.createclz_Torappu_TipTable(builder,
    tips,
    worldViewTips
  );
}
}
