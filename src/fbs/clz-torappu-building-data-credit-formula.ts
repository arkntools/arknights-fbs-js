// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel, dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT } from './dict--int--clz-torappu-building-data-credit-formula-value-model.js';


export class clz_Torappu_BuildingData_CreditFormula implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_CreditFormulaT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_CreditFormula {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_CreditFormula(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_CreditFormula):clz_Torappu_BuildingData_CreditFormula {
  return (obj || new clz_Torappu_BuildingData_CreditFormula()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_CreditFormula(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_CreditFormula):clz_Torappu_BuildingData_CreditFormula {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_CreditFormula()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

initiative(index: number, obj?:dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel):dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

initiativeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

passive(index: number, obj?:dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel):dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

passiveLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_CreditFormula(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addInitiative(builder:flatbuffers.Builder, initiativeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, initiativeOffset, 0);
}

static createInitiativeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInitiativeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPassive(builder:flatbuffers.Builder, passiveOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, passiveOffset, 0);
}

static createPassiveVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPassiveVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_CreditFormula(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_CreditFormula(builder:flatbuffers.Builder, initiativeOffset:flatbuffers.Offset, passiveOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuildingData_CreditFormula.startclz_Torappu_BuildingData_CreditFormula(builder);
  clz_Torappu_BuildingData_CreditFormula.addInitiative(builder, initiativeOffset);
  clz_Torappu_BuildingData_CreditFormula.addPassive(builder, passiveOffset);
  return clz_Torappu_BuildingData_CreditFormula.endclz_Torappu_BuildingData_CreditFormula(builder);
}

unpack(): clz_Torappu_BuildingData_CreditFormulaT {
  return new clz_Torappu_BuildingData_CreditFormulaT(
    this.bb!.createObjList<dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel, dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT>(this.initiative.bind(this), this.initiativeLength()),
    this.bb!.createObjList<dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel, dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT>(this.passive.bind(this), this.passiveLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_CreditFormulaT): void {
  _o.initiative = this.bb!.createObjList<dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel, dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT>(this.initiative.bind(this), this.initiativeLength());
  _o.passive = this.bb!.createObjList<dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel, dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT>(this.passive.bind(this), this.passiveLength());
}
}

export class clz_Torappu_BuildingData_CreditFormulaT implements flatbuffers.IGeneratedObject {
constructor(
  public initiative: (dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT)[] = [],
  public passive: (dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const initiative = clz_Torappu_BuildingData_CreditFormula.createInitiativeVector(builder, builder.createObjectOffsetList(this.initiative));
  const passive = clz_Torappu_BuildingData_CreditFormula.createPassiveVector(builder, builder.createObjectOffsetList(this.passive));

  return clz_Torappu_BuildingData_CreditFormula.createclz_Torappu_BuildingData_CreditFormula(builder,
    initiative,
    passive
  );
}
}
