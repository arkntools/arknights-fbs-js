// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { enum__Torappu_RecordRewardStageDiff } from './enum--torappu-record-reward-stage-diff.js';
import { enum__Torappu_StageDiffGroup } from './enum--torappu-stage-diff-group.js';


export class clz_Torappu_RecordRewardInfo implements flatbuffers.IUnpackableObject<clz_Torappu_RecordRewardInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RecordRewardInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RecordRewardInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RecordRewardInfo):clz_Torappu_RecordRewardInfo {
  return (obj || new clz_Torappu_RecordRewardInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RecordRewardInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RecordRewardInfo):clz_Torappu_RecordRewardInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RecordRewardInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bindStageId():string|null
bindStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bindStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stageDiff1():enum__Torappu_RecordRewardStageDiff {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RecordRewardStageDiff.NONE;
}

stageDiff():enum__Torappu_StageDiffGroup {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_StageDiffGroup.NONE;
}

picRes():string|null
picRes(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
picRes(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textPath():string|null
textPath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textPath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textDesc():string|null
textDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

recordReward(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

recordRewardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RecordRewardInfo(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBindStageId(builder:flatbuffers.Builder, bindStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bindStageIdOffset, 0);
}

static addStageDiff1(builder:flatbuffers.Builder, stageDiff1:enum__Torappu_RecordRewardStageDiff) {
  builder.addFieldInt32(1, stageDiff1, enum__Torappu_RecordRewardStageDiff.NONE);
}

static addStageDiff(builder:flatbuffers.Builder, stageDiff:enum__Torappu_StageDiffGroup) {
  builder.addFieldInt32(2, stageDiff, enum__Torappu_StageDiffGroup.NONE);
}

static addPicRes(builder:flatbuffers.Builder, picResOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, picResOffset, 0);
}

static addTextPath(builder:flatbuffers.Builder, textPathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, textPathOffset, 0);
}

static addTextDesc(builder:flatbuffers.Builder, textDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, textDescOffset, 0);
}

static addRecordReward(builder:flatbuffers.Builder, recordRewardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, recordRewardOffset, 0);
}

static createRecordRewardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRecordRewardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_RecordRewardInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RecordRewardInfo(builder:flatbuffers.Builder, bindStageIdOffset:flatbuffers.Offset, stageDiff1:enum__Torappu_RecordRewardStageDiff, stageDiff:enum__Torappu_StageDiffGroup, picResOffset:flatbuffers.Offset, textPathOffset:flatbuffers.Offset, textDescOffset:flatbuffers.Offset, recordRewardOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RecordRewardInfo.startclz_Torappu_RecordRewardInfo(builder);
  clz_Torappu_RecordRewardInfo.addBindStageId(builder, bindStageIdOffset);
  clz_Torappu_RecordRewardInfo.addStageDiff1(builder, stageDiff1);
  clz_Torappu_RecordRewardInfo.addStageDiff(builder, stageDiff);
  clz_Torappu_RecordRewardInfo.addPicRes(builder, picResOffset);
  clz_Torappu_RecordRewardInfo.addTextPath(builder, textPathOffset);
  clz_Torappu_RecordRewardInfo.addTextDesc(builder, textDescOffset);
  clz_Torappu_RecordRewardInfo.addRecordReward(builder, recordRewardOffset);
  return clz_Torappu_RecordRewardInfo.endclz_Torappu_RecordRewardInfo(builder);
}

unpack(): clz_Torappu_RecordRewardInfoT {
  return new clz_Torappu_RecordRewardInfoT(
    this.bindStageId(),
    this.stageDiff1(),
    this.stageDiff(),
    this.picRes(),
    this.textPath(),
    this.textDesc(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.recordReward.bind(this), this.recordRewardLength())
  );
}


unpackTo(_o: clz_Torappu_RecordRewardInfoT): void {
  _o.bindStageId = this.bindStageId();
  _o.stageDiff1 = this.stageDiff1();
  _o.stageDiff = this.stageDiff();
  _o.picRes = this.picRes();
  _o.textPath = this.textPath();
  _o.textDesc = this.textDesc();
  _o.recordReward = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.recordReward.bind(this), this.recordRewardLength());
}
}

export class clz_Torappu_RecordRewardInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public bindStageId: string|Uint8Array|null = null,
  public stageDiff1: enum__Torappu_RecordRewardStageDiff = enum__Torappu_RecordRewardStageDiff.NONE,
  public stageDiff: enum__Torappu_StageDiffGroup = enum__Torappu_StageDiffGroup.NONE,
  public picRes: string|Uint8Array|null = null,
  public textPath: string|Uint8Array|null = null,
  public textDesc: string|Uint8Array|null = null,
  public recordReward: (clz_Torappu_ItemBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bindStageId = (this.bindStageId !== null ? builder.createString(this.bindStageId!) : 0);
  const picRes = (this.picRes !== null ? builder.createString(this.picRes!) : 0);
  const textPath = (this.textPath !== null ? builder.createString(this.textPath!) : 0);
  const textDesc = (this.textDesc !== null ? builder.createString(this.textDesc!) : 0);
  const recordReward = clz_Torappu_RecordRewardInfo.createRecordRewardVector(builder, builder.createObjectOffsetList(this.recordReward));

  return clz_Torappu_RecordRewardInfo.createclz_Torappu_RecordRewardInfo(builder,
    bindStageId,
    this.stageDiff1,
    this.stageDiff,
    picRes,
    textPath,
    textDesc,
    recordReward
  );
}
}
