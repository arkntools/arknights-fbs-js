// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ClimbTowerDetailConst implements flatbuffers.IUnpackableObject<clz_Torappu_ClimbTowerDetailConstT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ClimbTowerDetailConst {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ClimbTowerDetailConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerDetailConst):clz_Torappu_ClimbTowerDetailConst {
  return (obj || new clz_Torappu_ClimbTowerDetailConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ClimbTowerDetailConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerDetailConst):clz_Torappu_ClimbTowerDetailConst {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ClimbTowerDetailConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

unlockLevelId():string|null
unlockLevelId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockLevelId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockModuleNumRequirement():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lowerItemId():string|null
lowerItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lowerItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lowerItemLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

higherItemId():string|null
higherItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
higherItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

higherItemLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initCharCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

charRecruitTimes():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

charRecruitChoiceCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

subcardStageSort():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

assistCharLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

firstClearTaskDesc():string|null
firstClearTaskDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firstClearTaskDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subCardObtainDesc():string|null
subCardObtainDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subCardObtainDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subGodCardUnlockDesc():string|null
subGodCardUnlockDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subGodCardUnlockDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sweepStartTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

sweepOpenOrdinaryLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sweepOpenDifficultLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sweepCostCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

squadMemStartTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startclz_Torappu_ClimbTowerDetailConst(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addUnlockLevelId(builder:flatbuffers.Builder, unlockLevelIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, unlockLevelIdOffset, 0);
}

static addUnlockModuleNumRequirement(builder:flatbuffers.Builder, unlockModuleNumRequirement:number) {
  builder.addFieldInt32(1, unlockModuleNumRequirement, 0);
}

static addLowerItemId(builder:flatbuffers.Builder, lowerItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, lowerItemIdOffset, 0);
}

static addLowerItemLimit(builder:flatbuffers.Builder, lowerItemLimit:number) {
  builder.addFieldInt32(3, lowerItemLimit, 0);
}

static addHigherItemId(builder:flatbuffers.Builder, higherItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, higherItemIdOffset, 0);
}

static addHigherItemLimit(builder:flatbuffers.Builder, higherItemLimit:number) {
  builder.addFieldInt32(5, higherItemLimit, 0);
}

static addInitCharCount(builder:flatbuffers.Builder, initCharCount:number) {
  builder.addFieldInt32(6, initCharCount, 0);
}

static addCharRecruitTimes(builder:flatbuffers.Builder, charRecruitTimes:number) {
  builder.addFieldInt32(7, charRecruitTimes, 0);
}

static addCharRecruitChoiceCount(builder:flatbuffers.Builder, charRecruitChoiceCount:number) {
  builder.addFieldInt32(8, charRecruitChoiceCount, 0);
}

static addSubcardStageSort(builder:flatbuffers.Builder, subcardStageSort:number) {
  builder.addFieldInt32(9, subcardStageSort, 0);
}

static addAssistCharLimit(builder:flatbuffers.Builder, assistCharLimit:number) {
  builder.addFieldInt32(10, assistCharLimit, 0);
}

static addFirstClearTaskDesc(builder:flatbuffers.Builder, firstClearTaskDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, firstClearTaskDescOffset, 0);
}

static addSubCardObtainDesc(builder:flatbuffers.Builder, subCardObtainDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, subCardObtainDescOffset, 0);
}

static addSubGodCardUnlockDesc(builder:flatbuffers.Builder, subGodCardUnlockDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, subGodCardUnlockDescOffset, 0);
}

static addSweepStartTime(builder:flatbuffers.Builder, sweepStartTime:bigint) {
  builder.addFieldInt64(14, sweepStartTime, BigInt('0'));
}

static addSweepOpenOrdinaryLayer(builder:flatbuffers.Builder, sweepOpenOrdinaryLayer:number) {
  builder.addFieldInt32(15, sweepOpenOrdinaryLayer, 0);
}

static addSweepOpenDifficultLayer(builder:flatbuffers.Builder, sweepOpenDifficultLayer:number) {
  builder.addFieldInt32(16, sweepOpenDifficultLayer, 0);
}

static addSweepCostCount(builder:flatbuffers.Builder, sweepCostCount:number) {
  builder.addFieldInt32(17, sweepCostCount, 0);
}

static addSquadMemStartTime(builder:flatbuffers.Builder, squadMemStartTime:bigint) {
  builder.addFieldInt64(18, squadMemStartTime, BigInt('0'));
}

static endclz_Torappu_ClimbTowerDetailConst(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ClimbTowerDetailConst(builder:flatbuffers.Builder, unlockLevelIdOffset:flatbuffers.Offset, unlockModuleNumRequirement:number, lowerItemIdOffset:flatbuffers.Offset, lowerItemLimit:number, higherItemIdOffset:flatbuffers.Offset, higherItemLimit:number, initCharCount:number, charRecruitTimes:number, charRecruitChoiceCount:number, subcardStageSort:number, assistCharLimit:number, firstClearTaskDescOffset:flatbuffers.Offset, subCardObtainDescOffset:flatbuffers.Offset, subGodCardUnlockDescOffset:flatbuffers.Offset, sweepStartTime:bigint, sweepOpenOrdinaryLayer:number, sweepOpenDifficultLayer:number, sweepCostCount:number, squadMemStartTime:bigint):flatbuffers.Offset {
  clz_Torappu_ClimbTowerDetailConst.startclz_Torappu_ClimbTowerDetailConst(builder);
  clz_Torappu_ClimbTowerDetailConst.addUnlockLevelId(builder, unlockLevelIdOffset);
  clz_Torappu_ClimbTowerDetailConst.addUnlockModuleNumRequirement(builder, unlockModuleNumRequirement);
  clz_Torappu_ClimbTowerDetailConst.addLowerItemId(builder, lowerItemIdOffset);
  clz_Torappu_ClimbTowerDetailConst.addLowerItemLimit(builder, lowerItemLimit);
  clz_Torappu_ClimbTowerDetailConst.addHigherItemId(builder, higherItemIdOffset);
  clz_Torappu_ClimbTowerDetailConst.addHigherItemLimit(builder, higherItemLimit);
  clz_Torappu_ClimbTowerDetailConst.addInitCharCount(builder, initCharCount);
  clz_Torappu_ClimbTowerDetailConst.addCharRecruitTimes(builder, charRecruitTimes);
  clz_Torappu_ClimbTowerDetailConst.addCharRecruitChoiceCount(builder, charRecruitChoiceCount);
  clz_Torappu_ClimbTowerDetailConst.addSubcardStageSort(builder, subcardStageSort);
  clz_Torappu_ClimbTowerDetailConst.addAssistCharLimit(builder, assistCharLimit);
  clz_Torappu_ClimbTowerDetailConst.addFirstClearTaskDesc(builder, firstClearTaskDescOffset);
  clz_Torappu_ClimbTowerDetailConst.addSubCardObtainDesc(builder, subCardObtainDescOffset);
  clz_Torappu_ClimbTowerDetailConst.addSubGodCardUnlockDesc(builder, subGodCardUnlockDescOffset);
  clz_Torappu_ClimbTowerDetailConst.addSweepStartTime(builder, sweepStartTime);
  clz_Torappu_ClimbTowerDetailConst.addSweepOpenOrdinaryLayer(builder, sweepOpenOrdinaryLayer);
  clz_Torappu_ClimbTowerDetailConst.addSweepOpenDifficultLayer(builder, sweepOpenDifficultLayer);
  clz_Torappu_ClimbTowerDetailConst.addSweepCostCount(builder, sweepCostCount);
  clz_Torappu_ClimbTowerDetailConst.addSquadMemStartTime(builder, squadMemStartTime);
  return clz_Torappu_ClimbTowerDetailConst.endclz_Torappu_ClimbTowerDetailConst(builder);
}

unpack(): clz_Torappu_ClimbTowerDetailConstT {
  return new clz_Torappu_ClimbTowerDetailConstT(
    this.unlockLevelId(),
    this.unlockModuleNumRequirement(),
    this.lowerItemId(),
    this.lowerItemLimit(),
    this.higherItemId(),
    this.higherItemLimit(),
    this.initCharCount(),
    this.charRecruitTimes(),
    this.charRecruitChoiceCount(),
    this.subcardStageSort(),
    this.assistCharLimit(),
    this.firstClearTaskDesc(),
    this.subCardObtainDesc(),
    this.subGodCardUnlockDesc(),
    this.sweepStartTime(),
    this.sweepOpenOrdinaryLayer(),
    this.sweepOpenDifficultLayer(),
    this.sweepCostCount(),
    this.squadMemStartTime()
  );
}


unpackTo(_o: clz_Torappu_ClimbTowerDetailConstT): void {
  _o.unlockLevelId = this.unlockLevelId();
  _o.unlockModuleNumRequirement = this.unlockModuleNumRequirement();
  _o.lowerItemId = this.lowerItemId();
  _o.lowerItemLimit = this.lowerItemLimit();
  _o.higherItemId = this.higherItemId();
  _o.higherItemLimit = this.higherItemLimit();
  _o.initCharCount = this.initCharCount();
  _o.charRecruitTimes = this.charRecruitTimes();
  _o.charRecruitChoiceCount = this.charRecruitChoiceCount();
  _o.subcardStageSort = this.subcardStageSort();
  _o.assistCharLimit = this.assistCharLimit();
  _o.firstClearTaskDesc = this.firstClearTaskDesc();
  _o.subCardObtainDesc = this.subCardObtainDesc();
  _o.subGodCardUnlockDesc = this.subGodCardUnlockDesc();
  _o.sweepStartTime = this.sweepStartTime();
  _o.sweepOpenOrdinaryLayer = this.sweepOpenOrdinaryLayer();
  _o.sweepOpenDifficultLayer = this.sweepOpenDifficultLayer();
  _o.sweepCostCount = this.sweepCostCount();
  _o.squadMemStartTime = this.squadMemStartTime();
}
}

export class clz_Torappu_ClimbTowerDetailConstT implements flatbuffers.IGeneratedObject {
constructor(
  public unlockLevelId: string|Uint8Array|null = null,
  public unlockModuleNumRequirement: number = 0,
  public lowerItemId: string|Uint8Array|null = null,
  public lowerItemLimit: number = 0,
  public higherItemId: string|Uint8Array|null = null,
  public higherItemLimit: number = 0,
  public initCharCount: number = 0,
  public charRecruitTimes: number = 0,
  public charRecruitChoiceCount: number = 0,
  public subcardStageSort: number = 0,
  public assistCharLimit: number = 0,
  public firstClearTaskDesc: string|Uint8Array|null = null,
  public subCardObtainDesc: string|Uint8Array|null = null,
  public subGodCardUnlockDesc: string|Uint8Array|null = null,
  public sweepStartTime: bigint = BigInt('0'),
  public sweepOpenOrdinaryLayer: number = 0,
  public sweepOpenDifficultLayer: number = 0,
  public sweepCostCount: number = 0,
  public squadMemStartTime: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const unlockLevelId = (this.unlockLevelId !== null ? builder.createString(this.unlockLevelId!) : 0);
  const lowerItemId = (this.lowerItemId !== null ? builder.createString(this.lowerItemId!) : 0);
  const higherItemId = (this.higherItemId !== null ? builder.createString(this.higherItemId!) : 0);
  const firstClearTaskDesc = (this.firstClearTaskDesc !== null ? builder.createString(this.firstClearTaskDesc!) : 0);
  const subCardObtainDesc = (this.subCardObtainDesc !== null ? builder.createString(this.subCardObtainDesc!) : 0);
  const subGodCardUnlockDesc = (this.subGodCardUnlockDesc !== null ? builder.createString(this.subGodCardUnlockDesc!) : 0);

  return clz_Torappu_ClimbTowerDetailConst.createclz_Torappu_ClimbTowerDetailConst(builder,
    unlockLevelId,
    this.unlockModuleNumRequirement,
    lowerItemId,
    this.lowerItemLimit,
    higherItemId,
    this.higherItemLimit,
    this.initCharCount,
    this.charRecruitTimes,
    this.charRecruitChoiceCount,
    this.subcardStageSort,
    this.assistCharLimit,
    firstClearTaskDesc,
    subCardObtainDesc,
    subGodCardUnlockDesc,
    this.sweepStartTime,
    this.sweepOpenOrdinaryLayer,
    this.sweepOpenDifficultLayer,
    this.sweepCostCount,
    this.squadMemStartTime
  );
}
}
