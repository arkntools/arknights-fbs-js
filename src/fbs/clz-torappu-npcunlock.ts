// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_DataUnlockType } from './enum--torappu-data-unlock-type.js';


export class clz_Torappu_NPCUnlock implements flatbuffers.IUnpackableObject<clz_Torappu_NPCUnlockT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_NPCUnlock {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_NPCUnlock(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_NPCUnlock):clz_Torappu_NPCUnlock {
  return (obj || new clz_Torappu_NPCUnlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_NPCUnlock(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_NPCUnlock):clz_Torappu_NPCUnlock {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_NPCUnlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

unLockType():enum__Torappu_DataUnlockType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_DataUnlockType.DIRECT;
}

unLockParam():string|null
unLockParam(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unLockParam(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unLockString():string|null
unLockString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unLockString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_NPCUnlock(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUnLockType(builder:flatbuffers.Builder, unLockType:enum__Torappu_DataUnlockType) {
  builder.addFieldInt32(0, unLockType, enum__Torappu_DataUnlockType.DIRECT);
}

static addUnLockParam(builder:flatbuffers.Builder, unLockParamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, unLockParamOffset, 0);
}

static addUnLockString(builder:flatbuffers.Builder, unLockStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, unLockStringOffset, 0);
}

static endclz_Torappu_NPCUnlock(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_NPCUnlock(builder:flatbuffers.Builder, unLockType:enum__Torappu_DataUnlockType, unLockParamOffset:flatbuffers.Offset, unLockStringOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_NPCUnlock.startclz_Torappu_NPCUnlock(builder);
  clz_Torappu_NPCUnlock.addUnLockType(builder, unLockType);
  clz_Torappu_NPCUnlock.addUnLockParam(builder, unLockParamOffset);
  clz_Torappu_NPCUnlock.addUnLockString(builder, unLockStringOffset);
  return clz_Torappu_NPCUnlock.endclz_Torappu_NPCUnlock(builder);
}

unpack(): clz_Torappu_NPCUnlockT {
  return new clz_Torappu_NPCUnlockT(
    this.unLockType(),
    this.unLockParam(),
    this.unLockString()
  );
}


unpackTo(_o: clz_Torappu_NPCUnlockT): void {
  _o.unLockType = this.unLockType();
  _o.unLockParam = this.unLockParam();
  _o.unLockString = this.unLockString();
}
}

export class clz_Torappu_NPCUnlockT implements flatbuffers.IGeneratedObject {
constructor(
  public unLockType: enum__Torappu_DataUnlockType = enum__Torappu_DataUnlockType.DIRECT,
  public unLockParam: string|Uint8Array|null = null,
  public unLockString: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const unLockParam = (this.unLockParam !== null ? builder.createString(this.unLockParam!) : 0);
  const unLockString = (this.unLockString !== null ? builder.createString(this.unLockString!) : 0);

  return clz_Torappu_NPCUnlock.createclz_Torappu_NPCUnlock(builder,
    this.unLockType,
    unLockParam,
    unLockString
  );
}
}
