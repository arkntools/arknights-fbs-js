// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_CharacterData_MainSkill, clz_Torappu_CharacterData_MainSkillT } from './clz-torappu-character-data-main-skill.js';
import { clz_Torappu_CharacterData_PhaseData, clz_Torappu_CharacterData_PhaseDataT } from './clz-torappu-character-data-phase-data.js';
import { clz_Torappu_CharacterData_PotentialRank, clz_Torappu_CharacterData_PotentialRankT } from './clz-torappu-character-data-potential-rank.js';
import { clz_Torappu_CharacterData_PowerData, clz_Torappu_CharacterData_PowerDataT } from './clz-torappu-character-data-power-data.js';
import { clz_Torappu_CharacterData_SkillLevelCost, clz_Torappu_CharacterData_SkillLevelCostT } from './clz-torappu-character-data-skill-level-cost.js';
import { clz_Torappu_CharacterData_TalentDataBundle, clz_Torappu_CharacterData_TalentDataBundleT } from './clz-torappu-character-data-talent-data-bundle.js';
import { clz_Torappu_CharacterData_TraitDataBundle, clz_Torappu_CharacterData_TraitDataBundleT } from './clz-torappu-character-data-trait-data-bundle.js';
import { clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_, clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_T } from './clz-torappu-key-frames2-key-frame-torappu-attributes-delta-data-torappu-attributes-data-.js';
import { dict__string__bool, dict__string__boolT } from './dict--string--bool.js';
import { enum__Torappu_BuildableType } from './enum--torappu-buildable-type.js';
import { enum__Torappu_ProfessionCategory } from './enum--torappu-profession-category.js';
import { enum__Torappu_RarityRank } from './enum--torappu-rarity-rank.js';
import { enum__Torappu_SpecialOperatorTargetType } from './enum--torappu-special-operator-target-type.js';


export class clz_Torappu_CharacterData implements flatbuffers.IUnpackableObject<clz_Torappu_CharacterDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_CharacterData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_CharacterData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharacterData):clz_Torappu_CharacterData {
  return (obj || new clz_Torappu_CharacterData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_CharacterData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharacterData):clz_Torappu_CharacterData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_CharacterData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

spTargetType():enum__Torappu_SpecialOperatorTargetType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SpecialOperatorTargetType.NONE;
}

spTargetId():string|null
spTargetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spTargetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canUseGeneralPotentialItem():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canUseActivityPotentialItem():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

potentialItemId():string|null
potentialItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
potentialItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

activityPotentialItemId():string|null
activityPotentialItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activityPotentialItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

classicPotentialItemId():string|null
classicPotentialItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classicPotentialItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nationId():string|null
nationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupId():string|null
groupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamId():string|null
teamId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainPower(obj?:clz_Torappu_CharacterData_PowerData):clz_Torappu_CharacterData_PowerData|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new clz_Torappu_CharacterData_PowerData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

subPower(index: number, obj?:clz_Torappu_CharacterData_PowerData):clz_Torappu_CharacterData_PowerData|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new clz_Torappu_CharacterData_PowerData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subPowerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

displayNumber():string|null
displayNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

appellation():string|null
appellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

position():enum__Torappu_BuildableType {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuildableType.NONE;
}

tagList(index: number):string
tagList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tagList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

itemUsage():string|null
itemUsage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemUsage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

itemDesc():string|null
itemDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

itemObtainApproach():string|null
itemObtainApproach(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemObtainApproach(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isNotObtainable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSpChar():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maxPotentialLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rarity():enum__Torappu_RarityRank {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RarityRank.TIER_1;
}

profession():enum__Torappu_ProfessionCategory {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ProfessionCategory.NONE;
}

subProfessionId():string|null
subProfessionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subProfessionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trait(obj?:clz_Torappu_CharacterData_TraitDataBundle):clz_Torappu_CharacterData_TraitDataBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new clz_Torappu_CharacterData_TraitDataBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

phases(index: number, obj?:clz_Torappu_CharacterData_PhaseData):clz_Torappu_CharacterData_PhaseData|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? (obj || new clz_Torappu_CharacterData_PhaseData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

phasesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

skills(index: number, obj?:clz_Torappu_CharacterData_MainSkill):clz_Torappu_CharacterData_MainSkill|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? (obj || new clz_Torappu_CharacterData_MainSkill()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

skillsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

displayTokenDict(index: number, obj?:dict__string__bool):dict__string__bool|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new dict__string__bool()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

displayTokenDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

talents(index: number, obj?:clz_Torappu_CharacterData_TalentDataBundle):clz_Torappu_CharacterData_TalentDataBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? (obj || new clz_Torappu_CharacterData_TalentDataBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

talentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

potentialRanks(index: number, obj?:clz_Torappu_CharacterData_PotentialRank):clz_Torappu_CharacterData_PotentialRank|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? (obj || new clz_Torappu_CharacterData_PotentialRank()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

potentialRanksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

favorKeyFrames(index: number, obj?:clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_):clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? (obj || new clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

favorKeyFramesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

allSkillLvlup(index: number, obj?:clz_Torappu_CharacterData_SkillLevelCost):clz_Torappu_CharacterData_SkillLevelCost|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? (obj || new clz_Torappu_CharacterData_SkillLevelCost()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

allSkillLvlupLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_CharacterData(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descriptionOffset, 0);
}

static addSortIndex(builder:flatbuffers.Builder, sortIndex:number) {
  builder.addFieldInt32(2, sortIndex, 0);
}

static addSpTargetType(builder:flatbuffers.Builder, spTargetType:enum__Torappu_SpecialOperatorTargetType) {
  builder.addFieldInt32(3, spTargetType, enum__Torappu_SpecialOperatorTargetType.NONE);
}

static addSpTargetId(builder:flatbuffers.Builder, spTargetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, spTargetIdOffset, 0);
}

static addCanUseGeneralPotentialItem(builder:flatbuffers.Builder, canUseGeneralPotentialItem:boolean) {
  builder.addFieldInt8(5, +canUseGeneralPotentialItem, +false);
}

static addCanUseActivityPotentialItem(builder:flatbuffers.Builder, canUseActivityPotentialItem:boolean) {
  builder.addFieldInt8(6, +canUseActivityPotentialItem, +false);
}

static addPotentialItemId(builder:flatbuffers.Builder, potentialItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, potentialItemIdOffset, 0);
}

static addActivityPotentialItemId(builder:flatbuffers.Builder, activityPotentialItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, activityPotentialItemIdOffset, 0);
}

static addClassicPotentialItemId(builder:flatbuffers.Builder, classicPotentialItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, classicPotentialItemIdOffset, 0);
}

static addNationId(builder:flatbuffers.Builder, nationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, nationIdOffset, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, groupIdOffset, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, teamIdOffset, 0);
}

static addMainPower(builder:flatbuffers.Builder, mainPowerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, mainPowerOffset, 0);
}

static addSubPower(builder:flatbuffers.Builder, subPowerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, subPowerOffset, 0);
}

static createSubPowerVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubPowerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDisplayNumber(builder:flatbuffers.Builder, displayNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, displayNumberOffset, 0);
}

static addAppellation(builder:flatbuffers.Builder, appellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, appellationOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, position:enum__Torappu_BuildableType) {
  builder.addFieldInt32(17, position, enum__Torappu_BuildableType.NONE);
}

static addTagList(builder:flatbuffers.Builder, tagListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, tagListOffset, 0);
}

static createTagListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addItemUsage(builder:flatbuffers.Builder, itemUsageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, itemUsageOffset, 0);
}

static addItemDesc(builder:flatbuffers.Builder, itemDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, itemDescOffset, 0);
}

static addItemObtainApproach(builder:flatbuffers.Builder, itemObtainApproachOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, itemObtainApproachOffset, 0);
}

static addIsNotObtainable(builder:flatbuffers.Builder, isNotObtainable:boolean) {
  builder.addFieldInt8(22, +isNotObtainable, +false);
}

static addIsSpChar(builder:flatbuffers.Builder, isSpChar:boolean) {
  builder.addFieldInt8(23, +isSpChar, +false);
}

static addMaxPotentialLevel(builder:flatbuffers.Builder, maxPotentialLevel:number) {
  builder.addFieldInt32(24, maxPotentialLevel, 0);
}

static addRarity(builder:flatbuffers.Builder, rarity:enum__Torappu_RarityRank) {
  builder.addFieldInt32(25, rarity, enum__Torappu_RarityRank.TIER_1);
}

static addProfession(builder:flatbuffers.Builder, profession:enum__Torappu_ProfessionCategory) {
  builder.addFieldInt32(26, profession, enum__Torappu_ProfessionCategory.NONE);
}

static addSubProfessionId(builder:flatbuffers.Builder, subProfessionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, subProfessionIdOffset, 0);
}

static addTrait(builder:flatbuffers.Builder, traitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, traitOffset, 0);
}

static addPhases(builder:flatbuffers.Builder, phasesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, phasesOffset, 0);
}

static createPhasesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPhasesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkills(builder:flatbuffers.Builder, skillsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, skillsOffset, 0);
}

static createSkillsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSkillsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDisplayTokenDict(builder:flatbuffers.Builder, displayTokenDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, displayTokenDictOffset, 0);
}

static createDisplayTokenDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDisplayTokenDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTalents(builder:flatbuffers.Builder, talentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, talentsOffset, 0);
}

static createTalentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTalentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPotentialRanks(builder:flatbuffers.Builder, potentialRanksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, potentialRanksOffset, 0);
}

static createPotentialRanksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPotentialRanksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFavorKeyFrames(builder:flatbuffers.Builder, favorKeyFramesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, favorKeyFramesOffset, 0);
}

static createFavorKeyFramesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFavorKeyFramesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAllSkillLvlup(builder:flatbuffers.Builder, allSkillLvlupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, allSkillLvlupOffset, 0);
}

static createAllSkillLvlupVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAllSkillLvlupVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_CharacterData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_CharacterDataT {
  return new clz_Torappu_CharacterDataT(
    this.name(),
    this.description(),
    this.sortIndex(),
    this.spTargetType(),
    this.spTargetId(),
    this.canUseGeneralPotentialItem(),
    this.canUseActivityPotentialItem(),
    this.potentialItemId(),
    this.activityPotentialItemId(),
    this.classicPotentialItemId(),
    this.nationId(),
    this.groupId(),
    this.teamId(),
    (this.mainPower() !== null ? this.mainPower()!.unpack() : null),
    this.bb!.createObjList<clz_Torappu_CharacterData_PowerData, clz_Torappu_CharacterData_PowerDataT>(this.subPower.bind(this), this.subPowerLength()),
    this.displayNumber(),
    this.appellation(),
    this.position(),
    this.bb!.createScalarList<string>(this.tagList.bind(this), this.tagListLength()),
    this.itemUsage(),
    this.itemDesc(),
    this.itemObtainApproach(),
    this.isNotObtainable(),
    this.isSpChar(),
    this.maxPotentialLevel(),
    this.rarity(),
    this.profession(),
    this.subProfessionId(),
    (this.trait() !== null ? this.trait()!.unpack() : null),
    this.bb!.createObjList<clz_Torappu_CharacterData_PhaseData, clz_Torappu_CharacterData_PhaseDataT>(this.phases.bind(this), this.phasesLength()),
    this.bb!.createObjList<clz_Torappu_CharacterData_MainSkill, clz_Torappu_CharacterData_MainSkillT>(this.skills.bind(this), this.skillsLength()),
    this.bb!.createObjList<dict__string__bool, dict__string__boolT>(this.displayTokenDict.bind(this), this.displayTokenDictLength()),
    this.bb!.createObjList<clz_Torappu_CharacterData_TalentDataBundle, clz_Torappu_CharacterData_TalentDataBundleT>(this.talents.bind(this), this.talentsLength()),
    this.bb!.createObjList<clz_Torappu_CharacterData_PotentialRank, clz_Torappu_CharacterData_PotentialRankT>(this.potentialRanks.bind(this), this.potentialRanksLength()),
    this.bb!.createObjList<clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_, clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_T>(this.favorKeyFrames.bind(this), this.favorKeyFramesLength()),
    this.bb!.createObjList<clz_Torappu_CharacterData_SkillLevelCost, clz_Torappu_CharacterData_SkillLevelCostT>(this.allSkillLvlup.bind(this), this.allSkillLvlupLength())
  );
}


unpackTo(_o: clz_Torappu_CharacterDataT): void {
  _o.name = this.name();
  _o.description = this.description();
  _o.sortIndex = this.sortIndex();
  _o.spTargetType = this.spTargetType();
  _o.spTargetId = this.spTargetId();
  _o.canUseGeneralPotentialItem = this.canUseGeneralPotentialItem();
  _o.canUseActivityPotentialItem = this.canUseActivityPotentialItem();
  _o.potentialItemId = this.potentialItemId();
  _o.activityPotentialItemId = this.activityPotentialItemId();
  _o.classicPotentialItemId = this.classicPotentialItemId();
  _o.nationId = this.nationId();
  _o.groupId = this.groupId();
  _o.teamId = this.teamId();
  _o.mainPower = (this.mainPower() !== null ? this.mainPower()!.unpack() : null);
  _o.subPower = this.bb!.createObjList<clz_Torappu_CharacterData_PowerData, clz_Torappu_CharacterData_PowerDataT>(this.subPower.bind(this), this.subPowerLength());
  _o.displayNumber = this.displayNumber();
  _o.appellation = this.appellation();
  _o.position = this.position();
  _o.tagList = this.bb!.createScalarList<string>(this.tagList.bind(this), this.tagListLength());
  _o.itemUsage = this.itemUsage();
  _o.itemDesc = this.itemDesc();
  _o.itemObtainApproach = this.itemObtainApproach();
  _o.isNotObtainable = this.isNotObtainable();
  _o.isSpChar = this.isSpChar();
  _o.maxPotentialLevel = this.maxPotentialLevel();
  _o.rarity = this.rarity();
  _o.profession = this.profession();
  _o.subProfessionId = this.subProfessionId();
  _o.trait = (this.trait() !== null ? this.trait()!.unpack() : null);
  _o.phases = this.bb!.createObjList<clz_Torappu_CharacterData_PhaseData, clz_Torappu_CharacterData_PhaseDataT>(this.phases.bind(this), this.phasesLength());
  _o.skills = this.bb!.createObjList<clz_Torappu_CharacterData_MainSkill, clz_Torappu_CharacterData_MainSkillT>(this.skills.bind(this), this.skillsLength());
  _o.displayTokenDict = this.bb!.createObjList<dict__string__bool, dict__string__boolT>(this.displayTokenDict.bind(this), this.displayTokenDictLength());
  _o.talents = this.bb!.createObjList<clz_Torappu_CharacterData_TalentDataBundle, clz_Torappu_CharacterData_TalentDataBundleT>(this.talents.bind(this), this.talentsLength());
  _o.potentialRanks = this.bb!.createObjList<clz_Torappu_CharacterData_PotentialRank, clz_Torappu_CharacterData_PotentialRankT>(this.potentialRanks.bind(this), this.potentialRanksLength());
  _o.favorKeyFrames = this.bb!.createObjList<clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_, clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_T>(this.favorKeyFrames.bind(this), this.favorKeyFramesLength());
  _o.allSkillLvlup = this.bb!.createObjList<clz_Torappu_CharacterData_SkillLevelCost, clz_Torappu_CharacterData_SkillLevelCostT>(this.allSkillLvlup.bind(this), this.allSkillLvlupLength());
}
}

export class clz_Torappu_CharacterDataT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public sortIndex: number = 0,
  public spTargetType: enum__Torappu_SpecialOperatorTargetType = enum__Torappu_SpecialOperatorTargetType.NONE,
  public spTargetId: string|Uint8Array|null = null,
  public canUseGeneralPotentialItem: boolean = false,
  public canUseActivityPotentialItem: boolean = false,
  public potentialItemId: string|Uint8Array|null = null,
  public activityPotentialItemId: string|Uint8Array|null = null,
  public classicPotentialItemId: string|Uint8Array|null = null,
  public nationId: string|Uint8Array|null = null,
  public groupId: string|Uint8Array|null = null,
  public teamId: string|Uint8Array|null = null,
  public mainPower: clz_Torappu_CharacterData_PowerDataT|null = null,
  public subPower: (clz_Torappu_CharacterData_PowerDataT)[] = [],
  public displayNumber: string|Uint8Array|null = null,
  public appellation: string|Uint8Array|null = null,
  public position: enum__Torappu_BuildableType = enum__Torappu_BuildableType.NONE,
  public tagList: (string)[] = [],
  public itemUsage: string|Uint8Array|null = null,
  public itemDesc: string|Uint8Array|null = null,
  public itemObtainApproach: string|Uint8Array|null = null,
  public isNotObtainable: boolean = false,
  public isSpChar: boolean = false,
  public maxPotentialLevel: number = 0,
  public rarity: enum__Torappu_RarityRank = enum__Torappu_RarityRank.TIER_1,
  public profession: enum__Torappu_ProfessionCategory = enum__Torappu_ProfessionCategory.NONE,
  public subProfessionId: string|Uint8Array|null = null,
  public trait: clz_Torappu_CharacterData_TraitDataBundleT|null = null,
  public phases: (clz_Torappu_CharacterData_PhaseDataT)[] = [],
  public skills: (clz_Torappu_CharacterData_MainSkillT)[] = [],
  public displayTokenDict: (dict__string__boolT)[] = [],
  public talents: (clz_Torappu_CharacterData_TalentDataBundleT)[] = [],
  public potentialRanks: (clz_Torappu_CharacterData_PotentialRankT)[] = [],
  public favorKeyFrames: (clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_T)[] = [],
  public allSkillLvlup: (clz_Torappu_CharacterData_SkillLevelCostT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const spTargetId = (this.spTargetId !== null ? builder.createString(this.spTargetId!) : 0);
  const potentialItemId = (this.potentialItemId !== null ? builder.createString(this.potentialItemId!) : 0);
  const activityPotentialItemId = (this.activityPotentialItemId !== null ? builder.createString(this.activityPotentialItemId!) : 0);
  const classicPotentialItemId = (this.classicPotentialItemId !== null ? builder.createString(this.classicPotentialItemId!) : 0);
  const nationId = (this.nationId !== null ? builder.createString(this.nationId!) : 0);
  const groupId = (this.groupId !== null ? builder.createString(this.groupId!) : 0);
  const teamId = (this.teamId !== null ? builder.createString(this.teamId!) : 0);
  const mainPower = (this.mainPower !== null ? this.mainPower!.pack(builder) : 0);
  const subPower = clz_Torappu_CharacterData.createSubPowerVector(builder, builder.createObjectOffsetList(this.subPower));
  const displayNumber = (this.displayNumber !== null ? builder.createString(this.displayNumber!) : 0);
  const appellation = (this.appellation !== null ? builder.createString(this.appellation!) : 0);
  const tagList = clz_Torappu_CharacterData.createTagListVector(builder, builder.createObjectOffsetList(this.tagList));
  const itemUsage = (this.itemUsage !== null ? builder.createString(this.itemUsage!) : 0);
  const itemDesc = (this.itemDesc !== null ? builder.createString(this.itemDesc!) : 0);
  const itemObtainApproach = (this.itemObtainApproach !== null ? builder.createString(this.itemObtainApproach!) : 0);
  const subProfessionId = (this.subProfessionId !== null ? builder.createString(this.subProfessionId!) : 0);
  const trait = (this.trait !== null ? this.trait!.pack(builder) : 0);
  const phases = clz_Torappu_CharacterData.createPhasesVector(builder, builder.createObjectOffsetList(this.phases));
  const skills = clz_Torappu_CharacterData.createSkillsVector(builder, builder.createObjectOffsetList(this.skills));
  const displayTokenDict = clz_Torappu_CharacterData.createDisplayTokenDictVector(builder, builder.createObjectOffsetList(this.displayTokenDict));
  const talents = clz_Torappu_CharacterData.createTalentsVector(builder, builder.createObjectOffsetList(this.talents));
  const potentialRanks = clz_Torappu_CharacterData.createPotentialRanksVector(builder, builder.createObjectOffsetList(this.potentialRanks));
  const favorKeyFrames = clz_Torappu_CharacterData.createFavorKeyFramesVector(builder, builder.createObjectOffsetList(this.favorKeyFrames));
  const allSkillLvlup = clz_Torappu_CharacterData.createAllSkillLvlupVector(builder, builder.createObjectOffsetList(this.allSkillLvlup));

  clz_Torappu_CharacterData.startclz_Torappu_CharacterData(builder);
  clz_Torappu_CharacterData.addName(builder, name);
  clz_Torappu_CharacterData.addDescription(builder, description);
  clz_Torappu_CharacterData.addSortIndex(builder, this.sortIndex);
  clz_Torappu_CharacterData.addSpTargetType(builder, this.spTargetType);
  clz_Torappu_CharacterData.addSpTargetId(builder, spTargetId);
  clz_Torappu_CharacterData.addCanUseGeneralPotentialItem(builder, this.canUseGeneralPotentialItem);
  clz_Torappu_CharacterData.addCanUseActivityPotentialItem(builder, this.canUseActivityPotentialItem);
  clz_Torappu_CharacterData.addPotentialItemId(builder, potentialItemId);
  clz_Torappu_CharacterData.addActivityPotentialItemId(builder, activityPotentialItemId);
  clz_Torappu_CharacterData.addClassicPotentialItemId(builder, classicPotentialItemId);
  clz_Torappu_CharacterData.addNationId(builder, nationId);
  clz_Torappu_CharacterData.addGroupId(builder, groupId);
  clz_Torappu_CharacterData.addTeamId(builder, teamId);
  clz_Torappu_CharacterData.addMainPower(builder, mainPower);
  clz_Torappu_CharacterData.addSubPower(builder, subPower);
  clz_Torappu_CharacterData.addDisplayNumber(builder, displayNumber);
  clz_Torappu_CharacterData.addAppellation(builder, appellation);
  clz_Torappu_CharacterData.addPosition(builder, this.position);
  clz_Torappu_CharacterData.addTagList(builder, tagList);
  clz_Torappu_CharacterData.addItemUsage(builder, itemUsage);
  clz_Torappu_CharacterData.addItemDesc(builder, itemDesc);
  clz_Torappu_CharacterData.addItemObtainApproach(builder, itemObtainApproach);
  clz_Torappu_CharacterData.addIsNotObtainable(builder, this.isNotObtainable);
  clz_Torappu_CharacterData.addIsSpChar(builder, this.isSpChar);
  clz_Torappu_CharacterData.addMaxPotentialLevel(builder, this.maxPotentialLevel);
  clz_Torappu_CharacterData.addRarity(builder, this.rarity);
  clz_Torappu_CharacterData.addProfession(builder, this.profession);
  clz_Torappu_CharacterData.addSubProfessionId(builder, subProfessionId);
  clz_Torappu_CharacterData.addTrait(builder, trait);
  clz_Torappu_CharacterData.addPhases(builder, phases);
  clz_Torappu_CharacterData.addSkills(builder, skills);
  clz_Torappu_CharacterData.addDisplayTokenDict(builder, displayTokenDict);
  clz_Torappu_CharacterData.addTalents(builder, talents);
  clz_Torappu_CharacterData.addPotentialRanks(builder, potentialRanks);
  clz_Torappu_CharacterData.addFavorKeyFrames(builder, favorKeyFrames);
  clz_Torappu_CharacterData.addAllSkillLvlup(builder, allSkillLvlup);

  return clz_Torappu_CharacterData.endclz_Torappu_CharacterData(builder);
}
}
