// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_HomeBackgroundLimitInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_HomeBackgroundLimitInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_HomeBackgroundLimitInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_HomeBackgroundLimitInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HomeBackgroundLimitInfoData):clz_Torappu_HomeBackgroundLimitInfoData {
  return (obj || new clz_Torappu_HomeBackgroundLimitInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_HomeBackgroundLimitInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HomeBackgroundLimitInfoData):clz_Torappu_HomeBackgroundLimitInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_HomeBackgroundLimitInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

limitInfoId():string|null
limitInfoId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
limitInfoId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

startTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

invalidObtainDesc():string|null
invalidObtainDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
invalidObtainDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

displayAfterEndTime():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_HomeBackgroundLimitInfoData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addLimitInfoId(builder:flatbuffers.Builder, limitInfoIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, limitInfoIdOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTime:bigint) {
  builder.addFieldInt64(1, startTime, BigInt('0'));
}

static addEndTime(builder:flatbuffers.Builder, endTime:bigint) {
  builder.addFieldInt64(2, endTime, BigInt('0'));
}

static addInvalidObtainDesc(builder:flatbuffers.Builder, invalidObtainDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, invalidObtainDescOffset, 0);
}

static addDisplayAfterEndTime(builder:flatbuffers.Builder, displayAfterEndTime:boolean) {
  builder.addFieldInt8(4, +displayAfterEndTime, +false);
}

static endclz_Torappu_HomeBackgroundLimitInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_HomeBackgroundLimitInfoData(builder:flatbuffers.Builder, limitInfoIdOffset:flatbuffers.Offset, startTime:bigint, endTime:bigint, invalidObtainDescOffset:flatbuffers.Offset, displayAfterEndTime:boolean):flatbuffers.Offset {
  clz_Torappu_HomeBackgroundLimitInfoData.startclz_Torappu_HomeBackgroundLimitInfoData(builder);
  clz_Torappu_HomeBackgroundLimitInfoData.addLimitInfoId(builder, limitInfoIdOffset);
  clz_Torappu_HomeBackgroundLimitInfoData.addStartTime(builder, startTime);
  clz_Torappu_HomeBackgroundLimitInfoData.addEndTime(builder, endTime);
  clz_Torappu_HomeBackgroundLimitInfoData.addInvalidObtainDesc(builder, invalidObtainDescOffset);
  clz_Torappu_HomeBackgroundLimitInfoData.addDisplayAfterEndTime(builder, displayAfterEndTime);
  return clz_Torappu_HomeBackgroundLimitInfoData.endclz_Torappu_HomeBackgroundLimitInfoData(builder);
}

unpack(): clz_Torappu_HomeBackgroundLimitInfoDataT {
  return new clz_Torappu_HomeBackgroundLimitInfoDataT(
    this.limitInfoId(),
    this.startTime(),
    this.endTime(),
    this.invalidObtainDesc(),
    this.displayAfterEndTime()
  );
}


unpackTo(_o: clz_Torappu_HomeBackgroundLimitInfoDataT): void {
  _o.limitInfoId = this.limitInfoId();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.invalidObtainDesc = this.invalidObtainDesc();
  _o.displayAfterEndTime = this.displayAfterEndTime();
}
}

export class clz_Torappu_HomeBackgroundLimitInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public limitInfoId: string|Uint8Array|null = null,
  public startTime: bigint = BigInt('0'),
  public endTime: bigint = BigInt('0'),
  public invalidObtainDesc: string|Uint8Array|null = null,
  public displayAfterEndTime: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const limitInfoId = (this.limitInfoId !== null ? builder.createString(this.limitInfoId!) : 0);
  const invalidObtainDesc = (this.invalidObtainDesc !== null ? builder.createString(this.invalidObtainDesc!) : 0);

  return clz_Torappu_HomeBackgroundLimitInfoData.createclz_Torappu_HomeBackgroundLimitInfoData(builder,
    limitInfoId,
    this.startTime,
    this.endTime,
    invalidObtainDesc,
    this.displayAfterEndTime
  );
}
}
