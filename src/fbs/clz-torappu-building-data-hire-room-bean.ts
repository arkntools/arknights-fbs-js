// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_BuildingData_HirePhase, clz_Torappu_BuildingData_HirePhaseT } from './clz-torappu-building-data-hire-phase.js';


export class clz_Torappu_BuildingData_HireRoomBean implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_HireRoomBeanT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_HireRoomBean {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_HireRoomBean(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_HireRoomBean):clz_Torappu_BuildingData_HireRoomBean {
  return (obj || new clz_Torappu_BuildingData_HireRoomBean()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_HireRoomBean(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_HireRoomBean):clz_Torappu_BuildingData_HireRoomBean {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_HireRoomBean()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

basicSpeedBuff():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

phases(index: number, obj?:clz_Torappu_BuildingData_HirePhase):clz_Torappu_BuildingData_HirePhase|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_BuildingData_HirePhase()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

phasesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_HireRoomBean(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBasicSpeedBuff(builder:flatbuffers.Builder, basicSpeedBuff:number) {
  builder.addFieldFloat32(0, basicSpeedBuff, 0.0);
}

static addPhases(builder:flatbuffers.Builder, phasesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, phasesOffset, 0);
}

static createPhasesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPhasesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_HireRoomBean(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_HireRoomBean(builder:flatbuffers.Builder, basicSpeedBuff:number, phasesOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuildingData_HireRoomBean.startclz_Torappu_BuildingData_HireRoomBean(builder);
  clz_Torappu_BuildingData_HireRoomBean.addBasicSpeedBuff(builder, basicSpeedBuff);
  clz_Torappu_BuildingData_HireRoomBean.addPhases(builder, phasesOffset);
  return clz_Torappu_BuildingData_HireRoomBean.endclz_Torappu_BuildingData_HireRoomBean(builder);
}

unpack(): clz_Torappu_BuildingData_HireRoomBeanT {
  return new clz_Torappu_BuildingData_HireRoomBeanT(
    this.basicSpeedBuff(),
    this.bb!.createObjList<clz_Torappu_BuildingData_HirePhase, clz_Torappu_BuildingData_HirePhaseT>(this.phases.bind(this), this.phasesLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_HireRoomBeanT): void {
  _o.basicSpeedBuff = this.basicSpeedBuff();
  _o.phases = this.bb!.createObjList<clz_Torappu_BuildingData_HirePhase, clz_Torappu_BuildingData_HirePhaseT>(this.phases.bind(this), this.phasesLength());
}
}

export class clz_Torappu_BuildingData_HireRoomBeanT implements flatbuffers.IGeneratedObject {
constructor(
  public basicSpeedBuff: number = 0.0,
  public phases: (clz_Torappu_BuildingData_HirePhaseT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const phases = clz_Torappu_BuildingData_HireRoomBean.createPhasesVector(builder, builder.createObjectOffsetList(this.phases));

  return clz_Torappu_BuildingData_HireRoomBean.createclz_Torappu_BuildingData_HireRoomBean(builder,
    this.basicSpeedBuff,
    phases
  );
}
}
