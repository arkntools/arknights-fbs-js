// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { enum__Torappu_SpType } from './enum--torappu-sp-type.js';


export class clz_Torappu_SpData implements flatbuffers.IUnpackableObject<clz_Torappu_SpDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SpData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SpData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SpData):clz_Torappu_SpData {
  return (obj || new clz_Torappu_SpData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SpData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SpData):clz_Torappu_SpData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SpData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

spType():enum__Torappu_SpType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SpType.NONE;
}

levelUpCost(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

levelUpCostLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

maxChargeTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

spCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initSp():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

increment():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_SpData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addSpType(builder:flatbuffers.Builder, spType:enum__Torappu_SpType) {
  builder.addFieldInt32(0, spType, enum__Torappu_SpType.NONE);
}

static addLevelUpCost(builder:flatbuffers.Builder, levelUpCostOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, levelUpCostOffset, 0);
}

static createLevelUpCostVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelUpCostVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMaxChargeTime(builder:flatbuffers.Builder, maxChargeTime:number) {
  builder.addFieldInt32(2, maxChargeTime, 0);
}

static addSpCost(builder:flatbuffers.Builder, spCost:number) {
  builder.addFieldInt32(3, spCost, 0);
}

static addInitSp(builder:flatbuffers.Builder, initSp:number) {
  builder.addFieldInt32(4, initSp, 0);
}

static addIncrement(builder:flatbuffers.Builder, increment:number) {
  builder.addFieldFloat32(5, increment, 0.0);
}

static endclz_Torappu_SpData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SpData(builder:flatbuffers.Builder, spType:enum__Torappu_SpType, levelUpCostOffset:flatbuffers.Offset, maxChargeTime:number, spCost:number, initSp:number, increment:number):flatbuffers.Offset {
  clz_Torappu_SpData.startclz_Torappu_SpData(builder);
  clz_Torappu_SpData.addSpType(builder, spType);
  clz_Torappu_SpData.addLevelUpCost(builder, levelUpCostOffset);
  clz_Torappu_SpData.addMaxChargeTime(builder, maxChargeTime);
  clz_Torappu_SpData.addSpCost(builder, spCost);
  clz_Torappu_SpData.addInitSp(builder, initSp);
  clz_Torappu_SpData.addIncrement(builder, increment);
  return clz_Torappu_SpData.endclz_Torappu_SpData(builder);
}

unpack(): clz_Torappu_SpDataT {
  return new clz_Torappu_SpDataT(
    this.spType(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.levelUpCost.bind(this), this.levelUpCostLength()),
    this.maxChargeTime(),
    this.spCost(),
    this.initSp(),
    this.increment()
  );
}


unpackTo(_o: clz_Torappu_SpDataT): void {
  _o.spType = this.spType();
  _o.levelUpCost = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.levelUpCost.bind(this), this.levelUpCostLength());
  _o.maxChargeTime = this.maxChargeTime();
  _o.spCost = this.spCost();
  _o.initSp = this.initSp();
  _o.increment = this.increment();
}
}

export class clz_Torappu_SpDataT implements flatbuffers.IGeneratedObject {
constructor(
  public spType: enum__Torappu_SpType = enum__Torappu_SpType.NONE,
  public levelUpCost: (clz_Torappu_ItemBundleT)[] = [],
  public maxChargeTime: number = 0,
  public spCost: number = 0,
  public initSp: number = 0,
  public increment: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const levelUpCost = clz_Torappu_SpData.createLevelUpCostVector(builder, builder.createObjectOffsetList(this.levelUpCost));

  return clz_Torappu_SpData.createclz_Torappu_SpData(builder,
    this.spType,
    levelUpCost,
    this.maxChargeTime,
    this.spCost,
    this.initSp,
    this.increment
  );
}
}
