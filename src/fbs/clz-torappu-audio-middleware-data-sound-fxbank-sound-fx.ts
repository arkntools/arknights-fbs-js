// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX implements flatbuffers.IUnpackableObject<clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX):clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX {
  return (obj || new clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX):clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

asset():string|null
asset(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
asset(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

important():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

is2D():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

delay():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minPitch():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxPitch():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

minVolume():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxVolume():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

ignoreTimeScale():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addAsset(builder:flatbuffers.Builder, assetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, assetOffset, 0);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldFloat32(1, weight, 0.0);
}

static addImportant(builder:flatbuffers.Builder, important:boolean) {
  builder.addFieldInt8(2, +important, +false);
}

static addIs2D(builder:flatbuffers.Builder, is2D:boolean) {
  builder.addFieldInt8(3, +is2D, +false);
}

static addDelay(builder:flatbuffers.Builder, delay:number) {
  builder.addFieldFloat32(4, delay, 0.0);
}

static addMinPitch(builder:flatbuffers.Builder, minPitch:number) {
  builder.addFieldFloat32(5, minPitch, 0.0);
}

static addMaxPitch(builder:flatbuffers.Builder, maxPitch:number) {
  builder.addFieldFloat32(6, maxPitch, 0.0);
}

static addMinVolume(builder:flatbuffers.Builder, minVolume:number) {
  builder.addFieldFloat32(7, minVolume, 0.0);
}

static addMaxVolume(builder:flatbuffers.Builder, maxVolume:number) {
  builder.addFieldFloat32(8, maxVolume, 0.0);
}

static addIgnoreTimeScale(builder:flatbuffers.Builder, ignoreTimeScale:boolean) {
  builder.addFieldInt8(9, +ignoreTimeScale, +false);
}

static endclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(builder:flatbuffers.Builder, assetOffset:flatbuffers.Offset, weight:number, important:boolean, is2D:boolean, delay:number, minPitch:number, maxPitch:number, minVolume:number, maxVolume:number, ignoreTimeScale:boolean):flatbuffers.Offset {
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.startclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(builder);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addAsset(builder, assetOffset);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addWeight(builder, weight);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addImportant(builder, important);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addIs2D(builder, is2D);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addDelay(builder, delay);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addMinPitch(builder, minPitch);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addMaxPitch(builder, maxPitch);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addMinVolume(builder, minVolume);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addMaxVolume(builder, maxVolume);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.addIgnoreTimeScale(builder, ignoreTimeScale);
  return clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.endclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(builder);
}

unpack(): clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT {
  return new clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT(
    this.asset(),
    this.weight(),
    this.important(),
    this.is2D(),
    this.delay(),
    this.minPitch(),
    this.maxPitch(),
    this.minVolume(),
    this.maxVolume(),
    this.ignoreTimeScale()
  );
}


unpackTo(_o: clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT): void {
  _o.asset = this.asset();
  _o.weight = this.weight();
  _o.important = this.important();
  _o.is2D = this.is2D();
  _o.delay = this.delay();
  _o.minPitch = this.minPitch();
  _o.maxPitch = this.maxPitch();
  _o.minVolume = this.minVolume();
  _o.maxVolume = this.maxVolume();
  _o.ignoreTimeScale = this.ignoreTimeScale();
}
}

export class clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT implements flatbuffers.IGeneratedObject {
constructor(
  public asset: string|Uint8Array|null = null,
  public weight: number = 0.0,
  public important: boolean = false,
  public is2D: boolean = false,
  public delay: number = 0.0,
  public minPitch: number = 0.0,
  public maxPitch: number = 0.0,
  public minVolume: number = 0.0,
  public maxVolume: number = 0.0,
  public ignoreTimeScale: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const asset = (this.asset !== null ? builder.createString(this.asset!) : 0);

  return clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX.createclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(builder,
    asset,
    this.weight,
    this.important,
    this.is2D,
    this.delay,
    this.minPitch,
    this.maxPitch,
    this.minVolume,
    this.maxVolume,
    this.ignoreTimeScale
  );
}
}
