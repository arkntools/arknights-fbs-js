// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_VoiceLangType } from './enum--torappu-voice-lang-type.js';


export class clz_Torappu_VoiceLangInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_VoiceLangInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_VoiceLangInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_VoiceLangInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangInfoData):clz_Torappu_VoiceLangInfoData {
  return (obj || new clz_Torappu_VoiceLangInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_VoiceLangInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangInfoData):clz_Torappu_VoiceLangInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_VoiceLangInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

wordkey():string|null
wordkey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wordkey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

voiceLangType():enum__Torappu_VoiceLangType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_VoiceLangType.NONE;
}

cvName(index: number):string
cvName(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cvName(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

cvNameLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

voicePath():string|null
voicePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
voicePath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_VoiceLangInfoData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addWordkey(builder:flatbuffers.Builder, wordkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, wordkeyOffset, 0);
}

static addVoiceLangType(builder:flatbuffers.Builder, voiceLangType:enum__Torappu_VoiceLangType) {
  builder.addFieldInt32(1, voiceLangType, enum__Torappu_VoiceLangType.NONE);
}

static addCvName(builder:flatbuffers.Builder, cvNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, cvNameOffset, 0);
}

static createCvNameVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCvNameVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVoicePath(builder:flatbuffers.Builder, voicePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, voicePathOffset, 0);
}

static endclz_Torappu_VoiceLangInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_VoiceLangInfoData(builder:flatbuffers.Builder, wordkeyOffset:flatbuffers.Offset, voiceLangType:enum__Torappu_VoiceLangType, cvNameOffset:flatbuffers.Offset, voicePathOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_VoiceLangInfoData.startclz_Torappu_VoiceLangInfoData(builder);
  clz_Torappu_VoiceLangInfoData.addWordkey(builder, wordkeyOffset);
  clz_Torappu_VoiceLangInfoData.addVoiceLangType(builder, voiceLangType);
  clz_Torappu_VoiceLangInfoData.addCvName(builder, cvNameOffset);
  clz_Torappu_VoiceLangInfoData.addVoicePath(builder, voicePathOffset);
  return clz_Torappu_VoiceLangInfoData.endclz_Torappu_VoiceLangInfoData(builder);
}

unpack(): clz_Torappu_VoiceLangInfoDataT {
  return new clz_Torappu_VoiceLangInfoDataT(
    this.wordkey(),
    this.voiceLangType(),
    this.bb!.createScalarList<string>(this.cvName.bind(this), this.cvNameLength()),
    this.voicePath()
  );
}


unpackTo(_o: clz_Torappu_VoiceLangInfoDataT): void {
  _o.wordkey = this.wordkey();
  _o.voiceLangType = this.voiceLangType();
  _o.cvName = this.bb!.createScalarList<string>(this.cvName.bind(this), this.cvNameLength());
  _o.voicePath = this.voicePath();
}
}

export class clz_Torappu_VoiceLangInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public wordkey: string|Uint8Array|null = null,
  public voiceLangType: enum__Torappu_VoiceLangType = enum__Torappu_VoiceLangType.NONE,
  public cvName: (string)[] = [],
  public voicePath: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const wordkey = (this.wordkey !== null ? builder.createString(this.wordkey!) : 0);
  const cvName = clz_Torappu_VoiceLangInfoData.createCvNameVector(builder, builder.createObjectOffsetList(this.cvName));
  const voicePath = (this.voicePath !== null ? builder.createString(this.voicePath!) : 0);

  return clz_Torappu_VoiceLangInfoData.createclz_Torappu_VoiceLangInfoData(builder,
    wordkey,
    this.voiceLangType,
    cvName,
    voicePath
  );
}
}
