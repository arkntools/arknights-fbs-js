// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_MiniActTrialData_RuleType } from './enum--torappu-mini-act-trial-data-rule-type.js';


export class clz_Torappu_MiniActTrialData_RuleData implements flatbuffers.IUnpackableObject<clz_Torappu_MiniActTrialData_RuleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MiniActTrialData_RuleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MiniActTrialData_RuleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MiniActTrialData_RuleData):clz_Torappu_MiniActTrialData_RuleData {
  return (obj || new clz_Torappu_MiniActTrialData_RuleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MiniActTrialData_RuleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MiniActTrialData_RuleData):clz_Torappu_MiniActTrialData_RuleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MiniActTrialData_RuleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ruleType():enum__Torappu_MiniActTrialData_RuleType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_MiniActTrialData_RuleType.NONE;
}

ruleText():string|null
ruleText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ruleText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_MiniActTrialData_RuleData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRuleType(builder:flatbuffers.Builder, ruleType:enum__Torappu_MiniActTrialData_RuleType) {
  builder.addFieldInt32(0, ruleType, enum__Torappu_MiniActTrialData_RuleType.NONE);
}

static addRuleText(builder:flatbuffers.Builder, ruleTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ruleTextOffset, 0);
}

static endclz_Torappu_MiniActTrialData_RuleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MiniActTrialData_RuleData(builder:flatbuffers.Builder, ruleType:enum__Torappu_MiniActTrialData_RuleType, ruleTextOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_MiniActTrialData_RuleData.startclz_Torappu_MiniActTrialData_RuleData(builder);
  clz_Torappu_MiniActTrialData_RuleData.addRuleType(builder, ruleType);
  clz_Torappu_MiniActTrialData_RuleData.addRuleText(builder, ruleTextOffset);
  return clz_Torappu_MiniActTrialData_RuleData.endclz_Torappu_MiniActTrialData_RuleData(builder);
}

unpack(): clz_Torappu_MiniActTrialData_RuleDataT {
  return new clz_Torappu_MiniActTrialData_RuleDataT(
    this.ruleType(),
    this.ruleText()
  );
}


unpackTo(_o: clz_Torappu_MiniActTrialData_RuleDataT): void {
  _o.ruleType = this.ruleType();
  _o.ruleText = this.ruleText();
}
}

export class clz_Torappu_MiniActTrialData_RuleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public ruleType: enum__Torappu_MiniActTrialData_RuleType = enum__Torappu_MiniActTrialData_RuleType.NONE,
  public ruleText: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ruleText = (this.ruleText !== null ? builder.createString(this.ruleText!) : 0);

  return clz_Torappu_MiniActTrialData_RuleData.createclz_Torappu_MiniActTrialData_RuleData(builder,
    this.ruleType,
    ruleText
  );
}
}
