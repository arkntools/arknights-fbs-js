// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_NpcStrategy } from './enum--torappu-npc-strategy.js';


export class clz_Torappu_Act5FunNpcData implements flatbuffers.IUnpackableObject<clz_Torappu_Act5FunNpcDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act5FunNpcData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act5FunNpcData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act5FunNpcData):clz_Torappu_Act5FunNpcData {
  return (obj || new clz_Torappu_Act5FunNpcData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act5FunNpcData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act5FunNpcData):clz_Torappu_Act5FunNpcData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act5FunNpcData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

npcId():string|null
npcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
npcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

avatarId():string|null
avatarId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
avatarId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

specialStrategy():enum__Torappu_NpcStrategy {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_NpcStrategy.DEFAULT;
}

npcProb():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

defaultEnemyScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_Act5FunNpcData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addNpcId(builder:flatbuffers.Builder, npcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, npcIdOffset, 0);
}

static addAvatarId(builder:flatbuffers.Builder, avatarIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, avatarIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldFloat32(3, priority, 0.0);
}

static addSpecialStrategy(builder:flatbuffers.Builder, specialStrategy:enum__Torappu_NpcStrategy) {
  builder.addFieldInt32(4, specialStrategy, enum__Torappu_NpcStrategy.DEFAULT);
}

static addNpcProb(builder:flatbuffers.Builder, npcProb:number) {
  builder.addFieldFloat32(5, npcProb, 0.0);
}

static addDefaultEnemyScore(builder:flatbuffers.Builder, defaultEnemyScore:number) {
  builder.addFieldFloat32(6, defaultEnemyScore, 0.0);
}

static endclz_Torappu_Act5FunNpcData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act5FunNpcData(builder:flatbuffers.Builder, npcIdOffset:flatbuffers.Offset, avatarIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, priority:number, specialStrategy:enum__Torappu_NpcStrategy, npcProb:number, defaultEnemyScore:number):flatbuffers.Offset {
  clz_Torappu_Act5FunNpcData.startclz_Torappu_Act5FunNpcData(builder);
  clz_Torappu_Act5FunNpcData.addNpcId(builder, npcIdOffset);
  clz_Torappu_Act5FunNpcData.addAvatarId(builder, avatarIdOffset);
  clz_Torappu_Act5FunNpcData.addName(builder, nameOffset);
  clz_Torappu_Act5FunNpcData.addPriority(builder, priority);
  clz_Torappu_Act5FunNpcData.addSpecialStrategy(builder, specialStrategy);
  clz_Torappu_Act5FunNpcData.addNpcProb(builder, npcProb);
  clz_Torappu_Act5FunNpcData.addDefaultEnemyScore(builder, defaultEnemyScore);
  return clz_Torappu_Act5FunNpcData.endclz_Torappu_Act5FunNpcData(builder);
}

unpack(): clz_Torappu_Act5FunNpcDataT {
  return new clz_Torappu_Act5FunNpcDataT(
    this.npcId(),
    this.avatarId(),
    this.name(),
    this.priority(),
    this.specialStrategy(),
    this.npcProb(),
    this.defaultEnemyScore()
  );
}


unpackTo(_o: clz_Torappu_Act5FunNpcDataT): void {
  _o.npcId = this.npcId();
  _o.avatarId = this.avatarId();
  _o.name = this.name();
  _o.priority = this.priority();
  _o.specialStrategy = this.specialStrategy();
  _o.npcProb = this.npcProb();
  _o.defaultEnemyScore = this.defaultEnemyScore();
}
}

export class clz_Torappu_Act5FunNpcDataT implements flatbuffers.IGeneratedObject {
constructor(
  public npcId: string|Uint8Array|null = null,
  public avatarId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public priority: number = 0.0,
  public specialStrategy: enum__Torappu_NpcStrategy = enum__Torappu_NpcStrategy.DEFAULT,
  public npcProb: number = 0.0,
  public defaultEnemyScore: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const npcId = (this.npcId !== null ? builder.createString(this.npcId!) : 0);
  const avatarId = (this.avatarId !== null ? builder.createString(this.avatarId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return clz_Torappu_Act5FunNpcData.createclz_Torappu_Act5FunNpcData(builder,
    npcId,
    avatarId,
    name,
    this.priority,
    this.specialStrategy,
    this.npcProb,
    this.defaultEnemyScore
  );
}
}
