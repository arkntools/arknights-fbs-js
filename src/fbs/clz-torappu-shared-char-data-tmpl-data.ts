// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_SharedCharData_SharedCharSkillData, clz_Torappu_SharedCharData_SharedCharSkillDataT } from './clz-torappu-shared-char-data-shared-char-skill-data.js';
import { dict__string__clz_Torappu_SharedCharData_CharEquipInfo, dict__string__clz_Torappu_SharedCharData_CharEquipInfoT } from './dict--string--clz-torappu-shared-char-data-char-equip-info.js';


export class clz_Torappu_SharedCharData_TmplData implements flatbuffers.IUnpackableObject<clz_Torappu_SharedCharData_TmplDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SharedCharData_TmplData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SharedCharData_TmplData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SharedCharData_TmplData):clz_Torappu_SharedCharData_TmplData {
  return (obj || new clz_Torappu_SharedCharData_TmplData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SharedCharData_TmplData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SharedCharData_TmplData):clz_Torappu_SharedCharData_TmplData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SharedCharData_TmplData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

skillIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

skinId():string|null
skinId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skinId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

skills(index: number, obj?:clz_Torappu_SharedCharData_SharedCharSkillData):clz_Torappu_SharedCharData_SharedCharSkillData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_SharedCharData_SharedCharSkillData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

skillsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

currentEquip():string|null
currentEquip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentEquip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

equip(index: number, obj?:dict__string__clz_Torappu_SharedCharData_CharEquipInfo):dict__string__clz_Torappu_SharedCharData_CharEquipInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new dict__string__clz_Torappu_SharedCharData_CharEquipInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

equipLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SharedCharData_TmplData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addSkillIndex(builder:flatbuffers.Builder, skillIndex:number) {
  builder.addFieldInt32(0, skillIndex, 0);
}

static addSkinId(builder:flatbuffers.Builder, skinIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, skinIdOffset, 0);
}

static addSkills(builder:flatbuffers.Builder, skillsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, skillsOffset, 0);
}

static createSkillsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSkillsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCurrentEquip(builder:flatbuffers.Builder, currentEquipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, currentEquipOffset, 0);
}

static addEquip(builder:flatbuffers.Builder, equipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, equipOffset, 0);
}

static createEquipVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEquipVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SharedCharData_TmplData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SharedCharData_TmplData(builder:flatbuffers.Builder, skillIndex:number, skinIdOffset:flatbuffers.Offset, skillsOffset:flatbuffers.Offset, currentEquipOffset:flatbuffers.Offset, equipOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SharedCharData_TmplData.startclz_Torappu_SharedCharData_TmplData(builder);
  clz_Torappu_SharedCharData_TmplData.addSkillIndex(builder, skillIndex);
  clz_Torappu_SharedCharData_TmplData.addSkinId(builder, skinIdOffset);
  clz_Torappu_SharedCharData_TmplData.addSkills(builder, skillsOffset);
  clz_Torappu_SharedCharData_TmplData.addCurrentEquip(builder, currentEquipOffset);
  clz_Torappu_SharedCharData_TmplData.addEquip(builder, equipOffset);
  return clz_Torappu_SharedCharData_TmplData.endclz_Torappu_SharedCharData_TmplData(builder);
}

unpack(): clz_Torappu_SharedCharData_TmplDataT {
  return new clz_Torappu_SharedCharData_TmplDataT(
    this.skillIndex(),
    this.skinId(),
    this.bb!.createObjList<clz_Torappu_SharedCharData_SharedCharSkillData, clz_Torappu_SharedCharData_SharedCharSkillDataT>(this.skills.bind(this), this.skillsLength()),
    this.currentEquip(),
    this.bb!.createObjList<dict__string__clz_Torappu_SharedCharData_CharEquipInfo, dict__string__clz_Torappu_SharedCharData_CharEquipInfoT>(this.equip.bind(this), this.equipLength())
  );
}


unpackTo(_o: clz_Torappu_SharedCharData_TmplDataT): void {
  _o.skillIndex = this.skillIndex();
  _o.skinId = this.skinId();
  _o.skills = this.bb!.createObjList<clz_Torappu_SharedCharData_SharedCharSkillData, clz_Torappu_SharedCharData_SharedCharSkillDataT>(this.skills.bind(this), this.skillsLength());
  _o.currentEquip = this.currentEquip();
  _o.equip = this.bb!.createObjList<dict__string__clz_Torappu_SharedCharData_CharEquipInfo, dict__string__clz_Torappu_SharedCharData_CharEquipInfoT>(this.equip.bind(this), this.equipLength());
}
}

export class clz_Torappu_SharedCharData_TmplDataT implements flatbuffers.IGeneratedObject {
constructor(
  public skillIndex: number = 0,
  public skinId: string|Uint8Array|null = null,
  public skills: (clz_Torappu_SharedCharData_SharedCharSkillDataT)[] = [],
  public currentEquip: string|Uint8Array|null = null,
  public equip: (dict__string__clz_Torappu_SharedCharData_CharEquipInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const skinId = (this.skinId !== null ? builder.createString(this.skinId!) : 0);
  const skills = clz_Torappu_SharedCharData_TmplData.createSkillsVector(builder, builder.createObjectOffsetList(this.skills));
  const currentEquip = (this.currentEquip !== null ? builder.createString(this.currentEquip!) : 0);
  const equip = clz_Torappu_SharedCharData_TmplData.createEquipVector(builder, builder.createObjectOffsetList(this.equip));

  return clz_Torappu_SharedCharData_TmplData.createclz_Torappu_SharedCharData_TmplData(builder,
    this.skillIndex,
    skinId,
    skills,
    currentEquip,
    equip
  );
}
}
