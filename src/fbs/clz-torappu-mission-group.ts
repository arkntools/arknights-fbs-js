// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_MissionDisplayRewards, clz_Torappu_MissionDisplayRewardsT } from './clz-torappu-mission-display-rewards.js';
import { enum__Torappu_MissionType } from './enum--torappu-mission-type.js';


export class clz_Torappu_MissionGroup implements flatbuffers.IUnpackableObject<clz_Torappu_MissionGroupT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MissionGroup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MissionGroup(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MissionGroup):clz_Torappu_MissionGroup {
  return (obj || new clz_Torappu_MissionGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MissionGroup(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MissionGroup):clz_Torappu_MissionGroup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MissionGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():enum__Torappu_MissionType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_MissionType.UNKNOWN;
}

preMissionGroup():string|null
preMissionGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preMissionGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

period(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

periodLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

periodArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

rewards(index: number, obj?:clz_Torappu_MissionDisplayRewards):clz_Torappu_MissionDisplayRewards|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_MissionDisplayRewards()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

missionIds(index: number):string
missionIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
missionIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

missionIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

startTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startclz_Torappu_MissionGroup(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, titleOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:enum__Torappu_MissionType) {
  builder.addFieldInt32(2, type, enum__Torappu_MissionType.UNKNOWN);
}

static addPreMissionGroup(builder:flatbuffers.Builder, preMissionGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, preMissionGroupOffset, 0);
}

static addPeriod(builder:flatbuffers.Builder, periodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, periodOffset, 0);
}

static createPeriodVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPeriodVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPeriodVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startPeriodVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rewardsOffset, 0);
}

static createRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMissionIds(builder:flatbuffers.Builder, missionIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, missionIdsOffset, 0);
}

static createMissionIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStartTs(builder:flatbuffers.Builder, startTs:bigint) {
  builder.addFieldInt64(7, startTs, BigInt('0'));
}

static addEndTs(builder:flatbuffers.Builder, endTs:bigint) {
  builder.addFieldInt64(8, endTs, BigInt('0'));
}

static endclz_Torappu_MissionGroup(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MissionGroup(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, titleOffset:flatbuffers.Offset, type:enum__Torappu_MissionType, preMissionGroupOffset:flatbuffers.Offset, periodOffset:flatbuffers.Offset, rewardsOffset:flatbuffers.Offset, missionIdsOffset:flatbuffers.Offset, startTs:bigint, endTs:bigint):flatbuffers.Offset {
  clz_Torappu_MissionGroup.startclz_Torappu_MissionGroup(builder);
  clz_Torappu_MissionGroup.addId(builder, idOffset);
  clz_Torappu_MissionGroup.addTitle(builder, titleOffset);
  clz_Torappu_MissionGroup.addType(builder, type);
  clz_Torappu_MissionGroup.addPreMissionGroup(builder, preMissionGroupOffset);
  clz_Torappu_MissionGroup.addPeriod(builder, periodOffset);
  clz_Torappu_MissionGroup.addRewards(builder, rewardsOffset);
  clz_Torappu_MissionGroup.addMissionIds(builder, missionIdsOffset);
  clz_Torappu_MissionGroup.addStartTs(builder, startTs);
  clz_Torappu_MissionGroup.addEndTs(builder, endTs);
  return clz_Torappu_MissionGroup.endclz_Torappu_MissionGroup(builder);
}

unpack(): clz_Torappu_MissionGroupT {
  return new clz_Torappu_MissionGroupT(
    this.id(),
    this.title(),
    this.type(),
    this.preMissionGroup(),
    this.bb!.createScalarList<number>(this.period.bind(this), this.periodLength()),
    this.bb!.createObjList<clz_Torappu_MissionDisplayRewards, clz_Torappu_MissionDisplayRewardsT>(this.rewards.bind(this), this.rewardsLength()),
    this.bb!.createScalarList<string>(this.missionIds.bind(this), this.missionIdsLength()),
    this.startTs(),
    this.endTs()
  );
}


unpackTo(_o: clz_Torappu_MissionGroupT): void {
  _o.id = this.id();
  _o.title = this.title();
  _o.type = this.type();
  _o.preMissionGroup = this.preMissionGroup();
  _o.period = this.bb!.createScalarList<number>(this.period.bind(this), this.periodLength());
  _o.rewards = this.bb!.createObjList<clz_Torappu_MissionDisplayRewards, clz_Torappu_MissionDisplayRewardsT>(this.rewards.bind(this), this.rewardsLength());
  _o.missionIds = this.bb!.createScalarList<string>(this.missionIds.bind(this), this.missionIdsLength());
  _o.startTs = this.startTs();
  _o.endTs = this.endTs();
}
}

export class clz_Torappu_MissionGroupT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public title: string|Uint8Array|null = null,
  public type: enum__Torappu_MissionType = enum__Torappu_MissionType.UNKNOWN,
  public preMissionGroup: string|Uint8Array|null = null,
  public period: (number)[] = [],
  public rewards: (clz_Torappu_MissionDisplayRewardsT)[] = [],
  public missionIds: (string)[] = [],
  public startTs: bigint = BigInt('0'),
  public endTs: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const title = (this.title !== null ? builder.createString(this.title!) : 0);
  const preMissionGroup = (this.preMissionGroup !== null ? builder.createString(this.preMissionGroup!) : 0);
  const period = clz_Torappu_MissionGroup.createPeriodVector(builder, this.period);
  const rewards = clz_Torappu_MissionGroup.createRewardsVector(builder, builder.createObjectOffsetList(this.rewards));
  const missionIds = clz_Torappu_MissionGroup.createMissionIdsVector(builder, builder.createObjectOffsetList(this.missionIds));

  return clz_Torappu_MissionGroup.createclz_Torappu_MissionGroup(builder,
    id,
    title,
    this.type,
    preMissionGroup,
    period,
    rewards,
    missionIds,
    this.startTs,
    this.endTs
  );
}
}
