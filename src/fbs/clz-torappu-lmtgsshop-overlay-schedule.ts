// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_LMTGSShopOverlaySchedule implements flatbuffers.IUnpackableObject<clz_Torappu_LMTGSShopOverlayScheduleT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_LMTGSShopOverlaySchedule {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_LMTGSShopOverlaySchedule(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LMTGSShopOverlaySchedule):clz_Torappu_LMTGSShopOverlaySchedule {
  return (obj || new clz_Torappu_LMTGSShopOverlaySchedule()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_LMTGSShopOverlaySchedule(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LMTGSShopOverlaySchedule):clz_Torappu_LMTGSShopOverlaySchedule {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_LMTGSShopOverlaySchedule()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

gachaPoolId1():string|null
gachaPoolId1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaPoolId1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gachaPoolId2():string|null
gachaPoolId2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gachaPoolId2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

picId():string|null
picId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
picId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_LMTGSShopOverlaySchedule(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addGachaPoolId1(builder:flatbuffers.Builder, gachaPoolId1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gachaPoolId1Offset, 0);
}

static addGachaPoolId2(builder:flatbuffers.Builder, gachaPoolId2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, gachaPoolId2Offset, 0);
}

static addPicId(builder:flatbuffers.Builder, picIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, picIdOffset, 0);
}

static endclz_Torappu_LMTGSShopOverlaySchedule(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_LMTGSShopOverlaySchedule(builder:flatbuffers.Builder, gachaPoolId1Offset:flatbuffers.Offset, gachaPoolId2Offset:flatbuffers.Offset, picIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_LMTGSShopOverlaySchedule.startclz_Torappu_LMTGSShopOverlaySchedule(builder);
  clz_Torappu_LMTGSShopOverlaySchedule.addGachaPoolId1(builder, gachaPoolId1Offset);
  clz_Torappu_LMTGSShopOverlaySchedule.addGachaPoolId2(builder, gachaPoolId2Offset);
  clz_Torappu_LMTGSShopOverlaySchedule.addPicId(builder, picIdOffset);
  return clz_Torappu_LMTGSShopOverlaySchedule.endclz_Torappu_LMTGSShopOverlaySchedule(builder);
}

unpack(): clz_Torappu_LMTGSShopOverlayScheduleT {
  return new clz_Torappu_LMTGSShopOverlayScheduleT(
    this.gachaPoolId1(),
    this.gachaPoolId2(),
    this.picId()
  );
}


unpackTo(_o: clz_Torappu_LMTGSShopOverlayScheduleT): void {
  _o.gachaPoolId1 = this.gachaPoolId1();
  _o.gachaPoolId2 = this.gachaPoolId2();
  _o.picId = this.picId();
}
}

export class clz_Torappu_LMTGSShopOverlayScheduleT implements flatbuffers.IGeneratedObject {
constructor(
  public gachaPoolId1: string|Uint8Array|null = null,
  public gachaPoolId2: string|Uint8Array|null = null,
  public picId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const gachaPoolId1 = (this.gachaPoolId1 !== null ? builder.createString(this.gachaPoolId1!) : 0);
  const gachaPoolId2 = (this.gachaPoolId2 !== null ? builder.createString(this.gachaPoolId2!) : 0);
  const picId = (this.picId !== null ? builder.createString(this.picId!) : 0);

  return clz_Torappu_LMTGSShopOverlaySchedule.createclz_Torappu_LMTGSShopOverlaySchedule(builder,
    gachaPoolId1,
    gachaPoolId2,
    picId
  );
}
}
