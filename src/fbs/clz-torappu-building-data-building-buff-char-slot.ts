// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem, clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemT } from './clz-torappu-building-data-building-buff-char-slot-slot-item.js';


export class clz_Torappu_BuildingData_BuildingBuffCharSlot implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_BuildingBuffCharSlotT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_BuildingBuffCharSlot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_BuildingBuffCharSlot(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_BuildingBuffCharSlot):clz_Torappu_BuildingData_BuildingBuffCharSlot {
  return (obj || new clz_Torappu_BuildingData_BuildingBuffCharSlot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_BuildingBuffCharSlot(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_BuildingBuffCharSlot):clz_Torappu_BuildingData_BuildingBuffCharSlot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_BuildingBuffCharSlot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

buffData(index: number, obj?:clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem):clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

buffDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_BuildingBuffCharSlot(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBuffData(builder:flatbuffers.Builder, buffDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, buffDataOffset, 0);
}

static createBuffDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBuffDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_BuildingBuffCharSlot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_BuildingBuffCharSlot(builder:flatbuffers.Builder, buffDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuildingData_BuildingBuffCharSlot.startclz_Torappu_BuildingData_BuildingBuffCharSlot(builder);
  clz_Torappu_BuildingData_BuildingBuffCharSlot.addBuffData(builder, buffDataOffset);
  return clz_Torappu_BuildingData_BuildingBuffCharSlot.endclz_Torappu_BuildingData_BuildingBuffCharSlot(builder);
}

unpack(): clz_Torappu_BuildingData_BuildingBuffCharSlotT {
  return new clz_Torappu_BuildingData_BuildingBuffCharSlotT(
    this.bb!.createObjList<clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem, clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemT>(this.buffData.bind(this), this.buffDataLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_BuildingBuffCharSlotT): void {
  _o.buffData = this.bb!.createObjList<clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem, clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemT>(this.buffData.bind(this), this.buffDataLength());
}
}

export class clz_Torappu_BuildingData_BuildingBuffCharSlotT implements flatbuffers.IGeneratedObject {
constructor(
  public buffData: (clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const buffData = clz_Torappu_BuildingData_BuildingBuffCharSlot.createBuffDataVector(builder, builder.createObjectOffsetList(this.buffData));

  return clz_Torappu_BuildingData_BuildingBuffCharSlot.createclz_Torappu_BuildingData_BuildingBuffCharSlot(builder,
    buffData
  );
}
}
