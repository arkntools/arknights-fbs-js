// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_SandboxV2SeasonType } from './enum--torappu-sandbox-v2-season-type.js';


export class clz_Torappu_SandboxV2GameConst implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2GameConstT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2GameConst {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2GameConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2GameConst):clz_Torappu_SandboxV2GameConst {
  return (obj || new clz_Torappu_SandboxV2GameConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2GameConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2GameConst):clz_Torappu_SandboxV2GameConst {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2GameConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mainMapId():string|null
mainMapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainMapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

baseTrapId():string|null
baseTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
baseTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

portableTrapId():string|null
portableTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
portableTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

doorTrapId():string|null
doorTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
doorTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mineTrapId():string|null
mineTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mineTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

neutralBossEnemyId(index: number):string
neutralBossEnemyId(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
neutralBossEnemyId(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

neutralBossEnemyIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nestTrapId():string|null
nestTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nestTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

shopNpcName():string|null
shopNpcName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shopNpcName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

daysBetweenAssessment():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

portableConstructUnlockLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

outpostConstructUnlockLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxEnemyCountSameTimeInRush():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxPreDelayTimeInRush():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxSaveCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

firstSeasonDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

seasonTransitionLoop(index: number):enum__Torappu_SandboxV2SeasonType|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

seasonTransitionLoopLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

seasonTransitionLoopArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

seasonDurationLoop(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

seasonDurationLoopLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

seasonDurationLoopArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

firstSeasonStartAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

seasonTransitionAngleLoop(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

seasonTransitionAngleLoopLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

seasonTransitionAngleLoopArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

seasonAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

battleItemDesc():string|null
battleItemDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleItemDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

foodDesc():string|null
foodDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
foodDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

multipleSurvivalDayDesc():string|null
multipleSurvivalDayDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multipleSurvivalDayDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

multipleTips():string|null
multipleTips(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
multipleTips(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

techProgressScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

otherEnemyRushName():string|null
otherEnemyRushName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
otherEnemyRushName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

surviveDayText():string|null
surviveDayText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
surviveDayText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

survivePeriodText():string|null
survivePeriodText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
survivePeriodText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

surviveScoreText():string|null
surviveScoreText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
surviveScoreText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

actionPointScoreText():string|null
actionPointScoreText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionPointScoreText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeExploreDesc():string|null
nodeExploreDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeExploreDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dungeonExploreDesc():string|null
dungeonExploreDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dungeonExploreDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeCompleteDesc():string|null
nodeCompleteDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeCompleteDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

noRiftDungeonDesc():string|null
noRiftDungeonDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
noRiftDungeonDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

baseRushedDesc():string|null
baseRushedDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
baseRushedDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

riftBaseDesc():string|null
riftBaseDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
riftBaseDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

riftBaseRushedDesc():string|null
riftBaseRushedDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
riftBaseRushedDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dungeonTriggeredGuideQuestList(index: number):string
dungeonTriggeredGuideQuestList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dungeonTriggeredGuideQuestList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dungeonTriggeredGuideQuestListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

noLogInEnemyStatsEnemyId(index: number):string
noLogInEnemyStatsEnemyId(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
noLogInEnemyStatsEnemyId(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

noLogInEnemyStatsEnemyIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SandboxV2GameConst(builder:flatbuffers.Builder) {
  builder.startObject(39);
}

static addMainMapId(builder:flatbuffers.Builder, mainMapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mainMapIdOffset, 0);
}

static addBaseTrapId(builder:flatbuffers.Builder, baseTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, baseTrapIdOffset, 0);
}

static addPortableTrapId(builder:flatbuffers.Builder, portableTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, portableTrapIdOffset, 0);
}

static addDoorTrapId(builder:flatbuffers.Builder, doorTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, doorTrapIdOffset, 0);
}

static addMineTrapId(builder:flatbuffers.Builder, mineTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, mineTrapIdOffset, 0);
}

static addNeutralBossEnemyId(builder:flatbuffers.Builder, neutralBossEnemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, neutralBossEnemyIdOffset, 0);
}

static createNeutralBossEnemyIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNeutralBossEnemyIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNestTrapId(builder:flatbuffers.Builder, nestTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nestTrapIdOffset, 0);
}

static addShopNpcName(builder:flatbuffers.Builder, shopNpcNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, shopNpcNameOffset, 0);
}

static addDaysBetweenAssessment(builder:flatbuffers.Builder, daysBetweenAssessment:number) {
  builder.addFieldInt32(8, daysBetweenAssessment, 0);
}

static addPortableConstructUnlockLevel(builder:flatbuffers.Builder, portableConstructUnlockLevel:number) {
  builder.addFieldInt32(9, portableConstructUnlockLevel, 0);
}

static addOutpostConstructUnlockLevel(builder:flatbuffers.Builder, outpostConstructUnlockLevel:number) {
  builder.addFieldInt32(10, outpostConstructUnlockLevel, 0);
}

static addMaxEnemyCountSameTimeInRush(builder:flatbuffers.Builder, maxEnemyCountSameTimeInRush:number) {
  builder.addFieldInt32(11, maxEnemyCountSameTimeInRush, 0);
}

static addMaxPreDelayTimeInRush(builder:flatbuffers.Builder, maxPreDelayTimeInRush:number) {
  builder.addFieldFloat32(12, maxPreDelayTimeInRush, 0.0);
}

static addMaxSaveCnt(builder:flatbuffers.Builder, maxSaveCnt:number) {
  builder.addFieldInt32(13, maxSaveCnt, 0);
}

static addFirstSeasonDuration(builder:flatbuffers.Builder, firstSeasonDuration:number) {
  builder.addFieldInt32(14, firstSeasonDuration, 0);
}

static addSeasonTransitionLoop(builder:flatbuffers.Builder, seasonTransitionLoopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, seasonTransitionLoopOffset, 0);
}

static createSeasonTransitionLoopVector(builder:flatbuffers.Builder, data:enum__Torappu_SandboxV2SeasonType[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startSeasonTransitionLoopVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeasonDurationLoop(builder:flatbuffers.Builder, seasonDurationLoopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, seasonDurationLoopOffset, 0);
}

static createSeasonDurationLoopVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSeasonDurationLoopVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSeasonDurationLoopVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startSeasonDurationLoopVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFirstSeasonStartAngle(builder:flatbuffers.Builder, firstSeasonStartAngle:number) {
  builder.addFieldFloat32(17, firstSeasonStartAngle, 0.0);
}

static addSeasonTransitionAngleLoop(builder:flatbuffers.Builder, seasonTransitionAngleLoopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, seasonTransitionAngleLoopOffset, 0);
}

static createSeasonTransitionAngleLoopVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSeasonTransitionAngleLoopVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSeasonTransitionAngleLoopVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startSeasonTransitionAngleLoopVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSeasonAngle(builder:flatbuffers.Builder, seasonAngle:number) {
  builder.addFieldFloat32(19, seasonAngle, 0.0);
}

static addBattleItemDesc(builder:flatbuffers.Builder, battleItemDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, battleItemDescOffset, 0);
}

static addFoodDesc(builder:flatbuffers.Builder, foodDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, foodDescOffset, 0);
}

static addMultipleSurvivalDayDesc(builder:flatbuffers.Builder, multipleSurvivalDayDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, multipleSurvivalDayDescOffset, 0);
}

static addMultipleTips(builder:flatbuffers.Builder, multipleTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, multipleTipsOffset, 0);
}

static addTechProgressScore(builder:flatbuffers.Builder, techProgressScore:number) {
  builder.addFieldInt32(24, techProgressScore, 0);
}

static addOtherEnemyRushName(builder:flatbuffers.Builder, otherEnemyRushNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, otherEnemyRushNameOffset, 0);
}

static addSurviveDayText(builder:flatbuffers.Builder, surviveDayTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, surviveDayTextOffset, 0);
}

static addSurvivePeriodText(builder:flatbuffers.Builder, survivePeriodTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, survivePeriodTextOffset, 0);
}

static addSurviveScoreText(builder:flatbuffers.Builder, surviveScoreTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, surviveScoreTextOffset, 0);
}

static addActionPointScoreText(builder:flatbuffers.Builder, actionPointScoreTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, actionPointScoreTextOffset, 0);
}

static addNodeExploreDesc(builder:flatbuffers.Builder, nodeExploreDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, nodeExploreDescOffset, 0);
}

static addDungeonExploreDesc(builder:flatbuffers.Builder, dungeonExploreDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, dungeonExploreDescOffset, 0);
}

static addNodeCompleteDesc(builder:flatbuffers.Builder, nodeCompleteDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, nodeCompleteDescOffset, 0);
}

static addNoRiftDungeonDesc(builder:flatbuffers.Builder, noRiftDungeonDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, noRiftDungeonDescOffset, 0);
}

static addBaseRushedDesc(builder:flatbuffers.Builder, baseRushedDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, baseRushedDescOffset, 0);
}

static addRiftBaseDesc(builder:flatbuffers.Builder, riftBaseDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, riftBaseDescOffset, 0);
}

static addRiftBaseRushedDesc(builder:flatbuffers.Builder, riftBaseRushedDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, riftBaseRushedDescOffset, 0);
}

static addDungeonTriggeredGuideQuestList(builder:flatbuffers.Builder, dungeonTriggeredGuideQuestListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, dungeonTriggeredGuideQuestListOffset, 0);
}

static createDungeonTriggeredGuideQuestListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDungeonTriggeredGuideQuestListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNoLogInEnemyStatsEnemyId(builder:flatbuffers.Builder, noLogInEnemyStatsEnemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, noLogInEnemyStatsEnemyIdOffset, 0);
}

static createNoLogInEnemyStatsEnemyIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNoLogInEnemyStatsEnemyIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SandboxV2GameConst(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2GameConst(builder:flatbuffers.Builder, mainMapIdOffset:flatbuffers.Offset, baseTrapIdOffset:flatbuffers.Offset, portableTrapIdOffset:flatbuffers.Offset, doorTrapIdOffset:flatbuffers.Offset, mineTrapIdOffset:flatbuffers.Offset, neutralBossEnemyIdOffset:flatbuffers.Offset, nestTrapIdOffset:flatbuffers.Offset, shopNpcNameOffset:flatbuffers.Offset, daysBetweenAssessment:number, portableConstructUnlockLevel:number, outpostConstructUnlockLevel:number, maxEnemyCountSameTimeInRush:number, maxPreDelayTimeInRush:number, maxSaveCnt:number, firstSeasonDuration:number, seasonTransitionLoopOffset:flatbuffers.Offset, seasonDurationLoopOffset:flatbuffers.Offset, firstSeasonStartAngle:number, seasonTransitionAngleLoopOffset:flatbuffers.Offset, seasonAngle:number, battleItemDescOffset:flatbuffers.Offset, foodDescOffset:flatbuffers.Offset, multipleSurvivalDayDescOffset:flatbuffers.Offset, multipleTipsOffset:flatbuffers.Offset, techProgressScore:number, otherEnemyRushNameOffset:flatbuffers.Offset, surviveDayTextOffset:flatbuffers.Offset, survivePeriodTextOffset:flatbuffers.Offset, surviveScoreTextOffset:flatbuffers.Offset, actionPointScoreTextOffset:flatbuffers.Offset, nodeExploreDescOffset:flatbuffers.Offset, dungeonExploreDescOffset:flatbuffers.Offset, nodeCompleteDescOffset:flatbuffers.Offset, noRiftDungeonDescOffset:flatbuffers.Offset, baseRushedDescOffset:flatbuffers.Offset, riftBaseDescOffset:flatbuffers.Offset, riftBaseRushedDescOffset:flatbuffers.Offset, dungeonTriggeredGuideQuestListOffset:flatbuffers.Offset, noLogInEnemyStatsEnemyIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SandboxV2GameConst.startclz_Torappu_SandboxV2GameConst(builder);
  clz_Torappu_SandboxV2GameConst.addMainMapId(builder, mainMapIdOffset);
  clz_Torappu_SandboxV2GameConst.addBaseTrapId(builder, baseTrapIdOffset);
  clz_Torappu_SandboxV2GameConst.addPortableTrapId(builder, portableTrapIdOffset);
  clz_Torappu_SandboxV2GameConst.addDoorTrapId(builder, doorTrapIdOffset);
  clz_Torappu_SandboxV2GameConst.addMineTrapId(builder, mineTrapIdOffset);
  clz_Torappu_SandboxV2GameConst.addNeutralBossEnemyId(builder, neutralBossEnemyIdOffset);
  clz_Torappu_SandboxV2GameConst.addNestTrapId(builder, nestTrapIdOffset);
  clz_Torappu_SandboxV2GameConst.addShopNpcName(builder, shopNpcNameOffset);
  clz_Torappu_SandboxV2GameConst.addDaysBetweenAssessment(builder, daysBetweenAssessment);
  clz_Torappu_SandboxV2GameConst.addPortableConstructUnlockLevel(builder, portableConstructUnlockLevel);
  clz_Torappu_SandboxV2GameConst.addOutpostConstructUnlockLevel(builder, outpostConstructUnlockLevel);
  clz_Torappu_SandboxV2GameConst.addMaxEnemyCountSameTimeInRush(builder, maxEnemyCountSameTimeInRush);
  clz_Torappu_SandboxV2GameConst.addMaxPreDelayTimeInRush(builder, maxPreDelayTimeInRush);
  clz_Torappu_SandboxV2GameConst.addMaxSaveCnt(builder, maxSaveCnt);
  clz_Torappu_SandboxV2GameConst.addFirstSeasonDuration(builder, firstSeasonDuration);
  clz_Torappu_SandboxV2GameConst.addSeasonTransitionLoop(builder, seasonTransitionLoopOffset);
  clz_Torappu_SandboxV2GameConst.addSeasonDurationLoop(builder, seasonDurationLoopOffset);
  clz_Torappu_SandboxV2GameConst.addFirstSeasonStartAngle(builder, firstSeasonStartAngle);
  clz_Torappu_SandboxV2GameConst.addSeasonTransitionAngleLoop(builder, seasonTransitionAngleLoopOffset);
  clz_Torappu_SandboxV2GameConst.addSeasonAngle(builder, seasonAngle);
  clz_Torappu_SandboxV2GameConst.addBattleItemDesc(builder, battleItemDescOffset);
  clz_Torappu_SandboxV2GameConst.addFoodDesc(builder, foodDescOffset);
  clz_Torappu_SandboxV2GameConst.addMultipleSurvivalDayDesc(builder, multipleSurvivalDayDescOffset);
  clz_Torappu_SandboxV2GameConst.addMultipleTips(builder, multipleTipsOffset);
  clz_Torappu_SandboxV2GameConst.addTechProgressScore(builder, techProgressScore);
  clz_Torappu_SandboxV2GameConst.addOtherEnemyRushName(builder, otherEnemyRushNameOffset);
  clz_Torappu_SandboxV2GameConst.addSurviveDayText(builder, surviveDayTextOffset);
  clz_Torappu_SandboxV2GameConst.addSurvivePeriodText(builder, survivePeriodTextOffset);
  clz_Torappu_SandboxV2GameConst.addSurviveScoreText(builder, surviveScoreTextOffset);
  clz_Torappu_SandboxV2GameConst.addActionPointScoreText(builder, actionPointScoreTextOffset);
  clz_Torappu_SandboxV2GameConst.addNodeExploreDesc(builder, nodeExploreDescOffset);
  clz_Torappu_SandboxV2GameConst.addDungeonExploreDesc(builder, dungeonExploreDescOffset);
  clz_Torappu_SandboxV2GameConst.addNodeCompleteDesc(builder, nodeCompleteDescOffset);
  clz_Torappu_SandboxV2GameConst.addNoRiftDungeonDesc(builder, noRiftDungeonDescOffset);
  clz_Torappu_SandboxV2GameConst.addBaseRushedDesc(builder, baseRushedDescOffset);
  clz_Torappu_SandboxV2GameConst.addRiftBaseDesc(builder, riftBaseDescOffset);
  clz_Torappu_SandboxV2GameConst.addRiftBaseRushedDesc(builder, riftBaseRushedDescOffset);
  clz_Torappu_SandboxV2GameConst.addDungeonTriggeredGuideQuestList(builder, dungeonTriggeredGuideQuestListOffset);
  clz_Torappu_SandboxV2GameConst.addNoLogInEnemyStatsEnemyId(builder, noLogInEnemyStatsEnemyIdOffset);
  return clz_Torappu_SandboxV2GameConst.endclz_Torappu_SandboxV2GameConst(builder);
}

unpack(): clz_Torappu_SandboxV2GameConstT {
  return new clz_Torappu_SandboxV2GameConstT(
    this.mainMapId(),
    this.baseTrapId(),
    this.portableTrapId(),
    this.doorTrapId(),
    this.mineTrapId(),
    this.bb!.createScalarList<string>(this.neutralBossEnemyId.bind(this), this.neutralBossEnemyIdLength()),
    this.nestTrapId(),
    this.shopNpcName(),
    this.daysBetweenAssessment(),
    this.portableConstructUnlockLevel(),
    this.outpostConstructUnlockLevel(),
    this.maxEnemyCountSameTimeInRush(),
    this.maxPreDelayTimeInRush(),
    this.maxSaveCnt(),
    this.firstSeasonDuration(),
    this.bb!.createScalarList<enum__Torappu_SandboxV2SeasonType>(this.seasonTransitionLoop.bind(this), this.seasonTransitionLoopLength()),
    this.bb!.createScalarList<number>(this.seasonDurationLoop.bind(this), this.seasonDurationLoopLength()),
    this.firstSeasonStartAngle(),
    this.bb!.createScalarList<number>(this.seasonTransitionAngleLoop.bind(this), this.seasonTransitionAngleLoopLength()),
    this.seasonAngle(),
    this.battleItemDesc(),
    this.foodDesc(),
    this.multipleSurvivalDayDesc(),
    this.multipleTips(),
    this.techProgressScore(),
    this.otherEnemyRushName(),
    this.surviveDayText(),
    this.survivePeriodText(),
    this.surviveScoreText(),
    this.actionPointScoreText(),
    this.nodeExploreDesc(),
    this.dungeonExploreDesc(),
    this.nodeCompleteDesc(),
    this.noRiftDungeonDesc(),
    this.baseRushedDesc(),
    this.riftBaseDesc(),
    this.riftBaseRushedDesc(),
    this.bb!.createScalarList<string>(this.dungeonTriggeredGuideQuestList.bind(this), this.dungeonTriggeredGuideQuestListLength()),
    this.bb!.createScalarList<string>(this.noLogInEnemyStatsEnemyId.bind(this), this.noLogInEnemyStatsEnemyIdLength())
  );
}


unpackTo(_o: clz_Torappu_SandboxV2GameConstT): void {
  _o.mainMapId = this.mainMapId();
  _o.baseTrapId = this.baseTrapId();
  _o.portableTrapId = this.portableTrapId();
  _o.doorTrapId = this.doorTrapId();
  _o.mineTrapId = this.mineTrapId();
  _o.neutralBossEnemyId = this.bb!.createScalarList<string>(this.neutralBossEnemyId.bind(this), this.neutralBossEnemyIdLength());
  _o.nestTrapId = this.nestTrapId();
  _o.shopNpcName = this.shopNpcName();
  _o.daysBetweenAssessment = this.daysBetweenAssessment();
  _o.portableConstructUnlockLevel = this.portableConstructUnlockLevel();
  _o.outpostConstructUnlockLevel = this.outpostConstructUnlockLevel();
  _o.maxEnemyCountSameTimeInRush = this.maxEnemyCountSameTimeInRush();
  _o.maxPreDelayTimeInRush = this.maxPreDelayTimeInRush();
  _o.maxSaveCnt = this.maxSaveCnt();
  _o.firstSeasonDuration = this.firstSeasonDuration();
  _o.seasonTransitionLoop = this.bb!.createScalarList<enum__Torappu_SandboxV2SeasonType>(this.seasonTransitionLoop.bind(this), this.seasonTransitionLoopLength());
  _o.seasonDurationLoop = this.bb!.createScalarList<number>(this.seasonDurationLoop.bind(this), this.seasonDurationLoopLength());
  _o.firstSeasonStartAngle = this.firstSeasonStartAngle();
  _o.seasonTransitionAngleLoop = this.bb!.createScalarList<number>(this.seasonTransitionAngleLoop.bind(this), this.seasonTransitionAngleLoopLength());
  _o.seasonAngle = this.seasonAngle();
  _o.battleItemDesc = this.battleItemDesc();
  _o.foodDesc = this.foodDesc();
  _o.multipleSurvivalDayDesc = this.multipleSurvivalDayDesc();
  _o.multipleTips = this.multipleTips();
  _o.techProgressScore = this.techProgressScore();
  _o.otherEnemyRushName = this.otherEnemyRushName();
  _o.surviveDayText = this.surviveDayText();
  _o.survivePeriodText = this.survivePeriodText();
  _o.surviveScoreText = this.surviveScoreText();
  _o.actionPointScoreText = this.actionPointScoreText();
  _o.nodeExploreDesc = this.nodeExploreDesc();
  _o.dungeonExploreDesc = this.dungeonExploreDesc();
  _o.nodeCompleteDesc = this.nodeCompleteDesc();
  _o.noRiftDungeonDesc = this.noRiftDungeonDesc();
  _o.baseRushedDesc = this.baseRushedDesc();
  _o.riftBaseDesc = this.riftBaseDesc();
  _o.riftBaseRushedDesc = this.riftBaseRushedDesc();
  _o.dungeonTriggeredGuideQuestList = this.bb!.createScalarList<string>(this.dungeonTriggeredGuideQuestList.bind(this), this.dungeonTriggeredGuideQuestListLength());
  _o.noLogInEnemyStatsEnemyId = this.bb!.createScalarList<string>(this.noLogInEnemyStatsEnemyId.bind(this), this.noLogInEnemyStatsEnemyIdLength());
}
}

export class clz_Torappu_SandboxV2GameConstT implements flatbuffers.IGeneratedObject {
constructor(
  public mainMapId: string|Uint8Array|null = null,
  public baseTrapId: string|Uint8Array|null = null,
  public portableTrapId: string|Uint8Array|null = null,
  public doorTrapId: string|Uint8Array|null = null,
  public mineTrapId: string|Uint8Array|null = null,
  public neutralBossEnemyId: (string)[] = [],
  public nestTrapId: string|Uint8Array|null = null,
  public shopNpcName: string|Uint8Array|null = null,
  public daysBetweenAssessment: number = 0,
  public portableConstructUnlockLevel: number = 0,
  public outpostConstructUnlockLevel: number = 0,
  public maxEnemyCountSameTimeInRush: number = 0,
  public maxPreDelayTimeInRush: number = 0.0,
  public maxSaveCnt: number = 0,
  public firstSeasonDuration: number = 0,
  public seasonTransitionLoop: (enum__Torappu_SandboxV2SeasonType)[] = [],
  public seasonDurationLoop: (number)[] = [],
  public firstSeasonStartAngle: number = 0.0,
  public seasonTransitionAngleLoop: (number)[] = [],
  public seasonAngle: number = 0.0,
  public battleItemDesc: string|Uint8Array|null = null,
  public foodDesc: string|Uint8Array|null = null,
  public multipleSurvivalDayDesc: string|Uint8Array|null = null,
  public multipleTips: string|Uint8Array|null = null,
  public techProgressScore: number = 0,
  public otherEnemyRushName: string|Uint8Array|null = null,
  public surviveDayText: string|Uint8Array|null = null,
  public survivePeriodText: string|Uint8Array|null = null,
  public surviveScoreText: string|Uint8Array|null = null,
  public actionPointScoreText: string|Uint8Array|null = null,
  public nodeExploreDesc: string|Uint8Array|null = null,
  public dungeonExploreDesc: string|Uint8Array|null = null,
  public nodeCompleteDesc: string|Uint8Array|null = null,
  public noRiftDungeonDesc: string|Uint8Array|null = null,
  public baseRushedDesc: string|Uint8Array|null = null,
  public riftBaseDesc: string|Uint8Array|null = null,
  public riftBaseRushedDesc: string|Uint8Array|null = null,
  public dungeonTriggeredGuideQuestList: (string)[] = [],
  public noLogInEnemyStatsEnemyId: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mainMapId = (this.mainMapId !== null ? builder.createString(this.mainMapId!) : 0);
  const baseTrapId = (this.baseTrapId !== null ? builder.createString(this.baseTrapId!) : 0);
  const portableTrapId = (this.portableTrapId !== null ? builder.createString(this.portableTrapId!) : 0);
  const doorTrapId = (this.doorTrapId !== null ? builder.createString(this.doorTrapId!) : 0);
  const mineTrapId = (this.mineTrapId !== null ? builder.createString(this.mineTrapId!) : 0);
  const neutralBossEnemyId = clz_Torappu_SandboxV2GameConst.createNeutralBossEnemyIdVector(builder, builder.createObjectOffsetList(this.neutralBossEnemyId));
  const nestTrapId = (this.nestTrapId !== null ? builder.createString(this.nestTrapId!) : 0);
  const shopNpcName = (this.shopNpcName !== null ? builder.createString(this.shopNpcName!) : 0);
  const seasonTransitionLoop = clz_Torappu_SandboxV2GameConst.createSeasonTransitionLoopVector(builder, this.seasonTransitionLoop);
  const seasonDurationLoop = clz_Torappu_SandboxV2GameConst.createSeasonDurationLoopVector(builder, this.seasonDurationLoop);
  const seasonTransitionAngleLoop = clz_Torappu_SandboxV2GameConst.createSeasonTransitionAngleLoopVector(builder, this.seasonTransitionAngleLoop);
  const battleItemDesc = (this.battleItemDesc !== null ? builder.createString(this.battleItemDesc!) : 0);
  const foodDesc = (this.foodDesc !== null ? builder.createString(this.foodDesc!) : 0);
  const multipleSurvivalDayDesc = (this.multipleSurvivalDayDesc !== null ? builder.createString(this.multipleSurvivalDayDesc!) : 0);
  const multipleTips = (this.multipleTips !== null ? builder.createString(this.multipleTips!) : 0);
  const otherEnemyRushName = (this.otherEnemyRushName !== null ? builder.createString(this.otherEnemyRushName!) : 0);
  const surviveDayText = (this.surviveDayText !== null ? builder.createString(this.surviveDayText!) : 0);
  const survivePeriodText = (this.survivePeriodText !== null ? builder.createString(this.survivePeriodText!) : 0);
  const surviveScoreText = (this.surviveScoreText !== null ? builder.createString(this.surviveScoreText!) : 0);
  const actionPointScoreText = (this.actionPointScoreText !== null ? builder.createString(this.actionPointScoreText!) : 0);
  const nodeExploreDesc = (this.nodeExploreDesc !== null ? builder.createString(this.nodeExploreDesc!) : 0);
  const dungeonExploreDesc = (this.dungeonExploreDesc !== null ? builder.createString(this.dungeonExploreDesc!) : 0);
  const nodeCompleteDesc = (this.nodeCompleteDesc !== null ? builder.createString(this.nodeCompleteDesc!) : 0);
  const noRiftDungeonDesc = (this.noRiftDungeonDesc !== null ? builder.createString(this.noRiftDungeonDesc!) : 0);
  const baseRushedDesc = (this.baseRushedDesc !== null ? builder.createString(this.baseRushedDesc!) : 0);
  const riftBaseDesc = (this.riftBaseDesc !== null ? builder.createString(this.riftBaseDesc!) : 0);
  const riftBaseRushedDesc = (this.riftBaseRushedDesc !== null ? builder.createString(this.riftBaseRushedDesc!) : 0);
  const dungeonTriggeredGuideQuestList = clz_Torappu_SandboxV2GameConst.createDungeonTriggeredGuideQuestListVector(builder, builder.createObjectOffsetList(this.dungeonTriggeredGuideQuestList));
  const noLogInEnemyStatsEnemyId = clz_Torappu_SandboxV2GameConst.createNoLogInEnemyStatsEnemyIdVector(builder, builder.createObjectOffsetList(this.noLogInEnemyStatsEnemyId));

  return clz_Torappu_SandboxV2GameConst.createclz_Torappu_SandboxV2GameConst(builder,
    mainMapId,
    baseTrapId,
    portableTrapId,
    doorTrapId,
    mineTrapId,
    neutralBossEnemyId,
    nestTrapId,
    shopNpcName,
    this.daysBetweenAssessment,
    this.portableConstructUnlockLevel,
    this.outpostConstructUnlockLevel,
    this.maxEnemyCountSameTimeInRush,
    this.maxPreDelayTimeInRush,
    this.maxSaveCnt,
    this.firstSeasonDuration,
    seasonTransitionLoop,
    seasonDurationLoop,
    this.firstSeasonStartAngle,
    seasonTransitionAngleLoop,
    this.seasonAngle,
    battleItemDesc,
    foodDesc,
    multipleSurvivalDayDesc,
    multipleTips,
    this.techProgressScore,
    otherEnemyRushName,
    surviveDayText,
    survivePeriodText,
    surviveScoreText,
    actionPointScoreText,
    nodeExploreDesc,
    dungeonExploreDesc,
    nodeCompleteDesc,
    noRiftDungeonDesc,
    baseRushedDesc,
    riftBaseDesc,
    riftBaseRushedDesc,
    dungeonTriggeredGuideQuestList,
    noLogInEnemyStatsEnemyId
  );
}
}
