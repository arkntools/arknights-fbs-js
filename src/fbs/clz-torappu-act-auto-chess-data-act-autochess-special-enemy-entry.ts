// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntryT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry):clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry):clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

specialEnemyKey():string|null
specialEnemyKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialEnemyKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

randomWeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isInFirstHalf():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

attachedNormalEnemyKeys(index: number):string
attachedNormalEnemyKeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
attachedNormalEnemyKeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

attachedNormalEnemyKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

attachedEliteEnemyKeys(index: number):string
attachedEliteEnemyKeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
attachedEliteEnemyKeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

attachedEliteEnemyKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addSpecialEnemyKey(builder:flatbuffers.Builder, specialEnemyKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, specialEnemyKeyOffset, 0);
}

static addRandomWeight(builder:flatbuffers.Builder, randomWeight:number) {
  builder.addFieldInt32(2, randomWeight, 0);
}

static addIsInFirstHalf(builder:flatbuffers.Builder, isInFirstHalf:boolean) {
  builder.addFieldInt8(3, +isInFirstHalf, +false);
}

static addAttachedNormalEnemyKeys(builder:flatbuffers.Builder, attachedNormalEnemyKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, attachedNormalEnemyKeysOffset, 0);
}

static createAttachedNormalEnemyKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttachedNormalEnemyKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAttachedEliteEnemyKeys(builder:flatbuffers.Builder, attachedEliteEnemyKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, attachedEliteEnemyKeysOffset, 0);
}

static createAttachedEliteEnemyKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttachedEliteEnemyKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, specialEnemyKeyOffset:flatbuffers.Offset, randomWeight:number, isInFirstHalf:boolean, attachedNormalEnemyKeysOffset:flatbuffers.Offset, attachedEliteEnemyKeysOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.startclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(builder);
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.addType(builder, typeOffset);
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.addSpecialEnemyKey(builder, specialEnemyKeyOffset);
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.addRandomWeight(builder, randomWeight);
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.addIsInFirstHalf(builder, isInFirstHalf);
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.addAttachedNormalEnemyKeys(builder, attachedNormalEnemyKeysOffset);
  clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.addAttachedEliteEnemyKeys(builder, attachedEliteEnemyKeysOffset);
  return clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.endclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntryT {
  return new clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntryT(
    this.type(),
    this.specialEnemyKey(),
    this.randomWeight(),
    this.isInFirstHalf(),
    this.bb!.createScalarList<string>(this.attachedNormalEnemyKeys.bind(this), this.attachedNormalEnemyKeysLength()),
    this.bb!.createScalarList<string>(this.attachedEliteEnemyKeys.bind(this), this.attachedEliteEnemyKeysLength())
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntryT): void {
  _o.type = this.type();
  _o.specialEnemyKey = this.specialEnemyKey();
  _o.randomWeight = this.randomWeight();
  _o.isInFirstHalf = this.isInFirstHalf();
  _o.attachedNormalEnemyKeys = this.bb!.createScalarList<string>(this.attachedNormalEnemyKeys.bind(this), this.attachedNormalEnemyKeysLength());
  _o.attachedEliteEnemyKeys = this.bb!.createScalarList<string>(this.attachedEliteEnemyKeys.bind(this), this.attachedEliteEnemyKeysLength());
}
}

export class clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntryT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public specialEnemyKey: string|Uint8Array|null = null,
  public randomWeight: number = 0,
  public isInFirstHalf: boolean = false,
  public attachedNormalEnemyKeys: (string)[] = [],
  public attachedEliteEnemyKeys: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const specialEnemyKey = (this.specialEnemyKey !== null ? builder.createString(this.specialEnemyKey!) : 0);
  const attachedNormalEnemyKeys = clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.createAttachedNormalEnemyKeysVector(builder, builder.createObjectOffsetList(this.attachedNormalEnemyKeys));
  const attachedEliteEnemyKeys = clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.createAttachedEliteEnemyKeysVector(builder, builder.createObjectOffsetList(this.attachedEliteEnemyKeys));

  return clz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry.createclz_Torappu_ActAutoChessData_ActAutochessSpecialEnemyEntry(builder,
    type,
    specialEnemyKey,
    this.randomWeight,
    this.isInFirstHalf,
    attachedNormalEnemyKeys,
    attachedEliteEnemyKeys
  );
}
}
