// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActAutoChessData_ActAutoChessBattleData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessBattleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessBattleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessBattleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBattleData):clz_Torappu_ActAutoChessData_ActAutoChessBattleData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBattleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessBattleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBattleData):clz_Torappu_ActAutoChessData_ActAutoChessBattleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBattleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bossId():string|null
bossId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

levelId():string|null
levelId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
levelId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isSpPrepare():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessBattleData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBossId(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bossIdOffset, 0);
}

static addLevelId(builder:flatbuffers.Builder, levelIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, levelIdOffset, 0);
}

static addIsSpPrepare(builder:flatbuffers.Builder, isSpPrepare:boolean) {
  builder.addFieldInt8(2, +isSpPrepare, +false);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessBattleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessBattleData(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset, levelIdOffset:flatbuffers.Offset, isSpPrepare:boolean):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessBattleData.startclz_Torappu_ActAutoChessData_ActAutoChessBattleData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessBattleData.addBossId(builder, bossIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBattleData.addLevelId(builder, levelIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBattleData.addIsSpPrepare(builder, isSpPrepare);
  return clz_Torappu_ActAutoChessData_ActAutoChessBattleData.endclz_Torappu_ActAutoChessData_ActAutoChessBattleData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessBattleDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessBattleDataT(
    this.bossId(),
    this.levelId(),
    this.isSpPrepare()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessBattleDataT): void {
  _o.bossId = this.bossId();
  _o.levelId = this.levelId();
  _o.isSpPrepare = this.isSpPrepare();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessBattleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bossId: string|Uint8Array|null = null,
  public levelId: string|Uint8Array|null = null,
  public isSpPrepare: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bossId = (this.bossId !== null ? builder.createString(this.bossId!) : 0);
  const levelId = (this.levelId !== null ? builder.createString(this.levelId!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutoChessBattleData.createclz_Torappu_ActAutoChessData_ActAutoChessBattleData(builder,
    bossId,
    levelId,
    this.isSpPrepare
  );
}
}
