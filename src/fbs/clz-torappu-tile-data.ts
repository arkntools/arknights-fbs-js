// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';
import { clz_Torappu_MapEffectData, clz_Torappu_MapEffectDataT } from './clz-torappu-map-effect-data.js';
import { enum__Torappu_BuildableType } from './enum--torappu-buildable-type.js';
import { enum__Torappu_MotionMask } from './enum--torappu-motion-mask.js';
import { enum__Torappu_PlayerSideMask } from './enum--torappu-player-side-mask.js';
import { enum__Torappu_TileData_HeightType } from './enum--torappu-tile-data-height-type.js';


export class clz_Torappu_TileData implements flatbuffers.IUnpackableObject<clz_Torappu_TileDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_TileData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_TileData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TileData):clz_Torappu_TileData {
  return (obj || new clz_Torappu_TileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_TileData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TileData):clz_Torappu_TileData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_TileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tileKey():string|null
tileKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tileKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

heightType():enum__Torappu_TileData_HeightType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_TileData_HeightType.LOWLAND;
}

buildableType():enum__Torappu_BuildableType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuildableType.NONE;
}

passableMask():enum__Torappu_MotionMask {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_MotionMask.NONE;
}

playerSideMask():enum__Torappu_PlayerSideMask {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : enum__Torappu_PlayerSideMask.ALL;
}

blackboard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blackboardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

effects(index: number, obj?:clz_Torappu_MapEffectData):clz_Torappu_MapEffectData|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_MapEffectData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

effectsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_TileData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addTileKey(builder:flatbuffers.Builder, tileKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tileKeyOffset, 0);
}

static addHeightType(builder:flatbuffers.Builder, heightType:enum__Torappu_TileData_HeightType) {
  builder.addFieldInt32(1, heightType, enum__Torappu_TileData_HeightType.LOWLAND);
}

static addBuildableType(builder:flatbuffers.Builder, buildableType:enum__Torappu_BuildableType) {
  builder.addFieldInt32(2, buildableType, enum__Torappu_BuildableType.NONE);
}

static addPassableMask(builder:flatbuffers.Builder, passableMask:enum__Torappu_MotionMask) {
  builder.addFieldInt32(3, passableMask, enum__Torappu_MotionMask.NONE);
}

static addPlayerSideMask(builder:flatbuffers.Builder, playerSideMask:enum__Torappu_PlayerSideMask) {
  builder.addFieldInt8(4, playerSideMask, enum__Torappu_PlayerSideMask.ALL);
}

static addBlackboard(builder:flatbuffers.Builder, blackboardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, blackboardOffset, 0);
}

static createBlackboardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlackboardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEffects(builder:flatbuffers.Builder, effectsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, effectsOffset, 0);
}

static createEffectsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_TileData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_TileData(builder:flatbuffers.Builder, tileKeyOffset:flatbuffers.Offset, heightType:enum__Torappu_TileData_HeightType, buildableType:enum__Torappu_BuildableType, passableMask:enum__Torappu_MotionMask, playerSideMask:enum__Torappu_PlayerSideMask, blackboardOffset:flatbuffers.Offset, effectsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_TileData.startclz_Torappu_TileData(builder);
  clz_Torappu_TileData.addTileKey(builder, tileKeyOffset);
  clz_Torappu_TileData.addHeightType(builder, heightType);
  clz_Torappu_TileData.addBuildableType(builder, buildableType);
  clz_Torappu_TileData.addPassableMask(builder, passableMask);
  clz_Torappu_TileData.addPlayerSideMask(builder, playerSideMask);
  clz_Torappu_TileData.addBlackboard(builder, blackboardOffset);
  clz_Torappu_TileData.addEffects(builder, effectsOffset);
  return clz_Torappu_TileData.endclz_Torappu_TileData(builder);
}

unpack(): clz_Torappu_TileDataT {
  return new clz_Torappu_TileDataT(
    this.tileKey(),
    this.heightType(),
    this.buildableType(),
    this.passableMask(),
    this.playerSideMask(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength()),
    this.bb!.createObjList<clz_Torappu_MapEffectData, clz_Torappu_MapEffectDataT>(this.effects.bind(this), this.effectsLength())
  );
}


unpackTo(_o: clz_Torappu_TileDataT): void {
  _o.tileKey = this.tileKey();
  _o.heightType = this.heightType();
  _o.buildableType = this.buildableType();
  _o.passableMask = this.passableMask();
  _o.playerSideMask = this.playerSideMask();
  _o.blackboard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackboard.bind(this), this.blackboardLength());
  _o.effects = this.bb!.createObjList<clz_Torappu_MapEffectData, clz_Torappu_MapEffectDataT>(this.effects.bind(this), this.effectsLength());
}
}

export class clz_Torappu_TileDataT implements flatbuffers.IGeneratedObject {
constructor(
  public tileKey: string|Uint8Array|null = null,
  public heightType: enum__Torappu_TileData_HeightType = enum__Torappu_TileData_HeightType.LOWLAND,
  public buildableType: enum__Torappu_BuildableType = enum__Torappu_BuildableType.NONE,
  public passableMask: enum__Torappu_MotionMask = enum__Torappu_MotionMask.NONE,
  public playerSideMask: enum__Torappu_PlayerSideMask = enum__Torappu_PlayerSideMask.ALL,
  public blackboard: (clz_Torappu_Blackboard_DataPairT)[] = [],
  public effects: (clz_Torappu_MapEffectDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const tileKey = (this.tileKey !== null ? builder.createString(this.tileKey!) : 0);
  const blackboard = clz_Torappu_TileData.createBlackboardVector(builder, builder.createObjectOffsetList(this.blackboard));
  const effects = clz_Torappu_TileData.createEffectsVector(builder, builder.createObjectOffsetList(this.effects));

  return clz_Torappu_TileData.createclz_Torappu_TileData(builder,
    tileKey,
    this.heightType,
    this.buildableType,
    this.passableMask,
    this.playerSideMask,
    blackboard,
    effects
  );
}
}
