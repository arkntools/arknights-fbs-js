// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_AutoChessEffectChoiceType } from './enum--torappu-auto-chess-effect-choice-type.js';
import { enum__Torappu_AutoChessEffectType } from './enum--torappu-auto-chess-effect-type.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData):clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData):clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

choiceEventId():string|null
choiceEventId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
choiceEventId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

choiceType():enum__Torappu_AutoChessEffectChoiceType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_AutoChessEffectChoiceType.EQUIP_FREE;
}

effectType():enum__Torappu_AutoChessEffectType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_AutoChessEffectType.NONE;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

typeTxtColor():string|null
typeTxtColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
typeTxtColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addChoiceEventId(builder:flatbuffers.Builder, choiceEventIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, choiceEventIdOffset, 0);
}

static addChoiceType(builder:flatbuffers.Builder, choiceType:enum__Torappu_AutoChessEffectChoiceType) {
  builder.addFieldInt32(1, choiceType, enum__Torappu_AutoChessEffectChoiceType.EQUIP_FREE);
}

static addEffectType(builder:flatbuffers.Builder, effectType:enum__Torappu_AutoChessEffectType) {
  builder.addFieldInt32(2, effectType, enum__Torappu_AutoChessEffectType.NONE);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descOffset, 0);
}

static addTypeTxtColor(builder:flatbuffers.Builder, typeTxtColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, typeTxtColorOffset, 0);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(builder:flatbuffers.Builder, choiceEventIdOffset:flatbuffers.Offset, choiceType:enum__Torappu_AutoChessEffectChoiceType, effectType:enum__Torappu_AutoChessEffectType, nameOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, typeTxtColorOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.startclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.addChoiceEventId(builder, choiceEventIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.addChoiceType(builder, choiceType);
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.addEffectType(builder, effectType);
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.addName(builder, nameOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.addDesc(builder, descOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.addTypeTxtColor(builder, typeTxtColorOffset);
  return clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.endclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoDataT(
    this.choiceEventId(),
    this.choiceType(),
    this.effectType(),
    this.name(),
    this.desc(),
    this.typeTxtColor()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoDataT): void {
  _o.choiceEventId = this.choiceEventId();
  _o.choiceType = this.choiceType();
  _o.effectType = this.effectType();
  _o.name = this.name();
  _o.desc = this.desc();
  _o.typeTxtColor = this.typeTxtColor();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public choiceEventId: string|Uint8Array|null = null,
  public choiceType: enum__Torappu_AutoChessEffectChoiceType = enum__Torappu_AutoChessEffectChoiceType.EQUIP_FREE,
  public effectType: enum__Torappu_AutoChessEffectType = enum__Torappu_AutoChessEffectType.NONE,
  public name: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public typeTxtColor: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const choiceEventId = (this.choiceEventId !== null ? builder.createString(this.choiceEventId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const typeTxtColor = (this.typeTxtColor !== null ? builder.createString(this.typeTxtColor!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData.createclz_Torappu_ActAutoChessData_ActAutoChessEffectChoiceInfoData(builder,
    choiceEventId,
    this.choiceType,
    this.effectType,
    name,
    desc,
    typeTxtColor
  );
}
}
