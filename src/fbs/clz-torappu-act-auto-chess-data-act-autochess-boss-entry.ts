// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActAutoChessData_ActAutochessBossEntry implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutochessBossEntryT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutochessBossEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutochessBossEntry(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutochessBossEntry):clz_Torappu_ActAutoChessData_ActAutochessBossEntry {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutochessBossEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutochessBossEntry(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutochessBossEntry):clz_Torappu_ActAutoChessData_ActAutochessBossEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutochessBossEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bossId():string|null
bossId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bloodPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bloodPointNormal():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bloodPointHard():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isHidingBoss():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_ActAutoChessData_ActAutochessBossEntry(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBossId(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bossIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldInt32(2, weight, 0);
}

static addBloodPoint(builder:flatbuffers.Builder, bloodPoint:number) {
  builder.addFieldInt32(3, bloodPoint, 0);
}

static addBloodPointNormal(builder:flatbuffers.Builder, bloodPointNormal:number) {
  builder.addFieldInt32(4, bloodPointNormal, 0);
}

static addBloodPointHard(builder:flatbuffers.Builder, bloodPointHard:number) {
  builder.addFieldInt32(5, bloodPointHard, 0);
}

static addIsHidingBoss(builder:flatbuffers.Builder, isHidingBoss:boolean) {
  builder.addFieldInt8(6, +isHidingBoss, +false);
}

static endclz_Torappu_ActAutoChessData_ActAutochessBossEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutochessBossEntry(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset, sortId:number, weight:number, bloodPoint:number, bloodPointNormal:number, bloodPointHard:number, isHidingBoss:boolean):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.startclz_Torappu_ActAutoChessData_ActAutochessBossEntry(builder);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addBossId(builder, bossIdOffset);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addSortId(builder, sortId);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addWeight(builder, weight);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addBloodPoint(builder, bloodPoint);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addBloodPointNormal(builder, bloodPointNormal);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addBloodPointHard(builder, bloodPointHard);
  clz_Torappu_ActAutoChessData_ActAutochessBossEntry.addIsHidingBoss(builder, isHidingBoss);
  return clz_Torappu_ActAutoChessData_ActAutochessBossEntry.endclz_Torappu_ActAutoChessData_ActAutochessBossEntry(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutochessBossEntryT {
  return new clz_Torappu_ActAutoChessData_ActAutochessBossEntryT(
    this.bossId(),
    this.sortId(),
    this.weight(),
    this.bloodPoint(),
    this.bloodPointNormal(),
    this.bloodPointHard(),
    this.isHidingBoss()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutochessBossEntryT): void {
  _o.bossId = this.bossId();
  _o.sortId = this.sortId();
  _o.weight = this.weight();
  _o.bloodPoint = this.bloodPoint();
  _o.bloodPointNormal = this.bloodPointNormal();
  _o.bloodPointHard = this.bloodPointHard();
  _o.isHidingBoss = this.isHidingBoss();
}
}

export class clz_Torappu_ActAutoChessData_ActAutochessBossEntryT implements flatbuffers.IGeneratedObject {
constructor(
  public bossId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public weight: number = 0,
  public bloodPoint: number = 0,
  public bloodPointNormal: number = 0,
  public bloodPointHard: number = 0,
  public isHidingBoss: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bossId = (this.bossId !== null ? builder.createString(this.bossId!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutochessBossEntry.createclz_Torappu_ActAutoChessData_ActAutochessBossEntry(builder,
    bossId,
    this.sortId,
    this.weight,
    this.bloodPoint,
    this.bloodPointNormal,
    this.bloodPointHard,
    this.isHidingBoss
  );
}
}
