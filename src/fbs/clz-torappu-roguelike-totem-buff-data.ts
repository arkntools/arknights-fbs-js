// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RoguelikeTotemLinkedNodeTypeData, clz_Torappu_RoguelikeTotemLinkedNodeTypeDataT } from './clz-torappu-roguelike-totem-linked-node-type-data.js';
import { enum__Torappu_RoguelikeTotemColorType } from './enum--torappu-roguelike-totem-color-type.js';
import { enum__Torappu_RoguelikeTotemPosType } from './enum--torappu-roguelike-totem-pos-type.js';


export class clz_Torappu_RoguelikeTotemBuffData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeTotemBuffDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeTotemBuffData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeTotemBuffData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeTotemBuffData):clz_Torappu_RoguelikeTotemBuffData {
  return (obj || new clz_Torappu_RoguelikeTotemBuffData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeTotemBuffData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeTotemBuffData):clz_Torappu_RoguelikeTotemBuffData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeTotemBuffData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

totemId():string|null
totemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
totemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

color():enum__Torappu_RoguelikeTotemColorType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeTotemColorType.NONE;
}

pos():enum__Torappu_RoguelikeTotemPosType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeTotemPosType.LOCATION;
}

rhythm():string|null
rhythm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rhythm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

normalDesc():string|null
normalDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
normalDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

synergyDesc():string|null
synergyDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
synergyDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

archiveDesc():string|null
archiveDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
archiveDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

combineGroupName():string|null
combineGroupName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
combineGroupName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bgIconId():string|null
bgIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bgIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isManual():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

linkedNodeTypeData(obj?:clz_Torappu_RoguelikeTotemLinkedNodeTypeData):clz_Torappu_RoguelikeTotemLinkedNodeTypeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new clz_Torappu_RoguelikeTotemLinkedNodeTypeData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

distanceMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

distanceMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

vertPassable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

expandLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

onlyForVert():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

portalLinkedNodeTypeData(obj?:clz_Torappu_RoguelikeTotemLinkedNodeTypeData):clz_Torappu_RoguelikeTotemLinkedNodeTypeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new clz_Torappu_RoguelikeTotemLinkedNodeTypeData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_RoguelikeTotemBuffData(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addTotemId(builder:flatbuffers.Builder, totemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, totemIdOffset, 0);
}

static addColor(builder:flatbuffers.Builder, color:enum__Torappu_RoguelikeTotemColorType) {
  builder.addFieldInt32(1, color, enum__Torappu_RoguelikeTotemColorType.NONE);
}

static addPos(builder:flatbuffers.Builder, pos:enum__Torappu_RoguelikeTotemPosType) {
  builder.addFieldInt32(2, pos, enum__Torappu_RoguelikeTotemPosType.LOCATION);
}

static addRhythm(builder:flatbuffers.Builder, rhythmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rhythmOffset, 0);
}

static addNormalDesc(builder:flatbuffers.Builder, normalDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, normalDescOffset, 0);
}

static addSynergyDesc(builder:flatbuffers.Builder, synergyDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, synergyDescOffset, 0);
}

static addArchiveDesc(builder:flatbuffers.Builder, archiveDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, archiveDescOffset, 0);
}

static addCombineGroupName(builder:flatbuffers.Builder, combineGroupNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, combineGroupNameOffset, 0);
}

static addBgIconId(builder:flatbuffers.Builder, bgIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, bgIconIdOffset, 0);
}

static addIsManual(builder:flatbuffers.Builder, isManual:boolean) {
  builder.addFieldInt8(9, +isManual, +false);
}

static addLinkedNodeTypeData(builder:flatbuffers.Builder, linkedNodeTypeDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, linkedNodeTypeDataOffset, 0);
}

static addDistanceMin(builder:flatbuffers.Builder, distanceMin:number) {
  builder.addFieldInt32(11, distanceMin, 0);
}

static addDistanceMax(builder:flatbuffers.Builder, distanceMax:number) {
  builder.addFieldInt32(12, distanceMax, 0);
}

static addVertPassable(builder:flatbuffers.Builder, vertPassable:boolean) {
  builder.addFieldInt8(13, +vertPassable, +false);
}

static addExpandLength(builder:flatbuffers.Builder, expandLength:number) {
  builder.addFieldInt32(14, expandLength, 0);
}

static addOnlyForVert(builder:flatbuffers.Builder, onlyForVert:boolean) {
  builder.addFieldInt8(15, +onlyForVert, +false);
}

static addPortalLinkedNodeTypeData(builder:flatbuffers.Builder, portalLinkedNodeTypeDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, portalLinkedNodeTypeDataOffset, 0);
}

static endclz_Torappu_RoguelikeTotemBuffData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_RoguelikeTotemBuffDataT {
  return new clz_Torappu_RoguelikeTotemBuffDataT(
    this.totemId(),
    this.color(),
    this.pos(),
    this.rhythm(),
    this.normalDesc(),
    this.synergyDesc(),
    this.archiveDesc(),
    this.combineGroupName(),
    this.bgIconId(),
    this.isManual(),
    (this.linkedNodeTypeData() !== null ? this.linkedNodeTypeData()!.unpack() : null),
    this.distanceMin(),
    this.distanceMax(),
    this.vertPassable(),
    this.expandLength(),
    this.onlyForVert(),
    (this.portalLinkedNodeTypeData() !== null ? this.portalLinkedNodeTypeData()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_RoguelikeTotemBuffDataT): void {
  _o.totemId = this.totemId();
  _o.color = this.color();
  _o.pos = this.pos();
  _o.rhythm = this.rhythm();
  _o.normalDesc = this.normalDesc();
  _o.synergyDesc = this.synergyDesc();
  _o.archiveDesc = this.archiveDesc();
  _o.combineGroupName = this.combineGroupName();
  _o.bgIconId = this.bgIconId();
  _o.isManual = this.isManual();
  _o.linkedNodeTypeData = (this.linkedNodeTypeData() !== null ? this.linkedNodeTypeData()!.unpack() : null);
  _o.distanceMin = this.distanceMin();
  _o.distanceMax = this.distanceMax();
  _o.vertPassable = this.vertPassable();
  _o.expandLength = this.expandLength();
  _o.onlyForVert = this.onlyForVert();
  _o.portalLinkedNodeTypeData = (this.portalLinkedNodeTypeData() !== null ? this.portalLinkedNodeTypeData()!.unpack() : null);
}
}

export class clz_Torappu_RoguelikeTotemBuffDataT implements flatbuffers.IGeneratedObject {
constructor(
  public totemId: string|Uint8Array|null = null,
  public color: enum__Torappu_RoguelikeTotemColorType = enum__Torappu_RoguelikeTotemColorType.NONE,
  public pos: enum__Torappu_RoguelikeTotemPosType = enum__Torappu_RoguelikeTotemPosType.LOCATION,
  public rhythm: string|Uint8Array|null = null,
  public normalDesc: string|Uint8Array|null = null,
  public synergyDesc: string|Uint8Array|null = null,
  public archiveDesc: string|Uint8Array|null = null,
  public combineGroupName: string|Uint8Array|null = null,
  public bgIconId: string|Uint8Array|null = null,
  public isManual: boolean = false,
  public linkedNodeTypeData: clz_Torappu_RoguelikeTotemLinkedNodeTypeDataT|null = null,
  public distanceMin: number = 0,
  public distanceMax: number = 0,
  public vertPassable: boolean = false,
  public expandLength: number = 0,
  public onlyForVert: boolean = false,
  public portalLinkedNodeTypeData: clz_Torappu_RoguelikeTotemLinkedNodeTypeDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const totemId = (this.totemId !== null ? builder.createString(this.totemId!) : 0);
  const rhythm = (this.rhythm !== null ? builder.createString(this.rhythm!) : 0);
  const normalDesc = (this.normalDesc !== null ? builder.createString(this.normalDesc!) : 0);
  const synergyDesc = (this.synergyDesc !== null ? builder.createString(this.synergyDesc!) : 0);
  const archiveDesc = (this.archiveDesc !== null ? builder.createString(this.archiveDesc!) : 0);
  const combineGroupName = (this.combineGroupName !== null ? builder.createString(this.combineGroupName!) : 0);
  const bgIconId = (this.bgIconId !== null ? builder.createString(this.bgIconId!) : 0);
  const linkedNodeTypeData = (this.linkedNodeTypeData !== null ? this.linkedNodeTypeData!.pack(builder) : 0);
  const portalLinkedNodeTypeData = (this.portalLinkedNodeTypeData !== null ? this.portalLinkedNodeTypeData!.pack(builder) : 0);

  clz_Torappu_RoguelikeTotemBuffData.startclz_Torappu_RoguelikeTotemBuffData(builder);
  clz_Torappu_RoguelikeTotemBuffData.addTotemId(builder, totemId);
  clz_Torappu_RoguelikeTotemBuffData.addColor(builder, this.color);
  clz_Torappu_RoguelikeTotemBuffData.addPos(builder, this.pos);
  clz_Torappu_RoguelikeTotemBuffData.addRhythm(builder, rhythm);
  clz_Torappu_RoguelikeTotemBuffData.addNormalDesc(builder, normalDesc);
  clz_Torappu_RoguelikeTotemBuffData.addSynergyDesc(builder, synergyDesc);
  clz_Torappu_RoguelikeTotemBuffData.addArchiveDesc(builder, archiveDesc);
  clz_Torappu_RoguelikeTotemBuffData.addCombineGroupName(builder, combineGroupName);
  clz_Torappu_RoguelikeTotemBuffData.addBgIconId(builder, bgIconId);
  clz_Torappu_RoguelikeTotemBuffData.addIsManual(builder, this.isManual);
  clz_Torappu_RoguelikeTotemBuffData.addLinkedNodeTypeData(builder, linkedNodeTypeData);
  clz_Torappu_RoguelikeTotemBuffData.addDistanceMin(builder, this.distanceMin);
  clz_Torappu_RoguelikeTotemBuffData.addDistanceMax(builder, this.distanceMax);
  clz_Torappu_RoguelikeTotemBuffData.addVertPassable(builder, this.vertPassable);
  clz_Torappu_RoguelikeTotemBuffData.addExpandLength(builder, this.expandLength);
  clz_Torappu_RoguelikeTotemBuffData.addOnlyForVert(builder, this.onlyForVert);
  clz_Torappu_RoguelikeTotemBuffData.addPortalLinkedNodeTypeData(builder, portalLinkedNodeTypeData);

  return clz_Torappu_RoguelikeTotemBuffData.endclz_Torappu_RoguelikeTotemBuffData(builder);
}
}
