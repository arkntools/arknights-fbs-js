// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData):clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData):clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enemyKey():string|null
enemyKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

extraEnemyIdentifier():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

extraEnemyKeyList(index: number):string
extraEnemyKeyList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
extraEnemyKeyList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

extraEnemyKeyListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isFlyEnemy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enemyBattleEffectivenessFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addEnemyKey(builder:flatbuffers.Builder, enemyKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, enemyKeyOffset, 0);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(1, level, 0);
}

static addExtraEnemyIdentifier(builder:flatbuffers.Builder, extraEnemyIdentifier:number) {
  builder.addFieldInt32(2, extraEnemyIdentifier, 0);
}

static addExtraEnemyKeyList(builder:flatbuffers.Builder, extraEnemyKeyListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, extraEnemyKeyListOffset, 0);
}

static createExtraEnemyKeyListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtraEnemyKeyListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsFlyEnemy(builder:flatbuffers.Builder, isFlyEnemy:boolean) {
  builder.addFieldInt8(4, +isFlyEnemy, +false);
}

static addEnemyBattleEffectivenessFactor(builder:flatbuffers.Builder, enemyBattleEffectivenessFactor:number) {
  builder.addFieldFloat32(5, enemyBattleEffectivenessFactor, 0.0);
}

static endclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(builder:flatbuffers.Builder, enemyKeyOffset:flatbuffers.Offset, level:number, extraEnemyIdentifier:number, extraEnemyKeyListOffset:flatbuffers.Offset, isFlyEnemy:boolean, enemyBattleEffectivenessFactor:number):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.startclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(builder);
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.addEnemyKey(builder, enemyKeyOffset);
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.addLevel(builder, level);
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.addExtraEnemyIdentifier(builder, extraEnemyIdentifier);
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.addExtraEnemyKeyList(builder, extraEnemyKeyListOffset);
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.addIsFlyEnemy(builder, isFlyEnemy);
  clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.addEnemyBattleEffectivenessFactor(builder, enemyBattleEffectivenessFactor);
  return clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.endclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT {
  return new clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT(
    this.enemyKey(),
    this.level(),
    this.extraEnemyIdentifier(),
    this.bb!.createScalarList<string>(this.extraEnemyKeyList.bind(this), this.extraEnemyKeyListLength()),
    this.isFlyEnemy(),
    this.enemyBattleEffectivenessFactor()
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT): void {
  _o.enemyKey = this.enemyKey();
  _o.level = this.level();
  _o.extraEnemyIdentifier = this.extraEnemyIdentifier();
  _o.extraEnemyKeyList = this.bb!.createScalarList<string>(this.extraEnemyKeyList.bind(this), this.extraEnemyKeyListLength());
  _o.isFlyEnemy = this.isFlyEnemy();
  _o.enemyBattleEffectivenessFactor = this.enemyBattleEffectivenessFactor();
}
}

export class clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public enemyKey: string|Uint8Array|null = null,
  public level: number = 0,
  public extraEnemyIdentifier: number = 0,
  public extraEnemyKeyList: (string)[] = [],
  public isFlyEnemy: boolean = false,
  public enemyBattleEffectivenessFactor: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const enemyKey = (this.enemyKey !== null ? builder.createString(this.enemyKey!) : 0);
  const extraEnemyKeyList = clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.createExtraEnemyKeyListVector(builder, builder.createObjectOffsetList(this.extraEnemyKeyList));

  return clz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData.createclz_Torappu_AutoChessData_AutoChessRandomEnemyAttributeData(builder,
    enemyKey,
    this.level,
    this.extraEnemyIdentifier,
    extraEnemyKeyList,
    this.isFlyEnemy,
    this.enemyBattleEffectivenessFactor
  );
}
}
