// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_Act1VAutoChessModeType } from './enum--torappu-act1-vauto-chess-mode-type.js';


export class clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData {
  return (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

modeId():string|null
modeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

preposedMode():string|null
preposedMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preposedMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockText():string|null
unlockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

effectDescList(index: number):string
effectDescList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
effectDescList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

effectDescListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

loadingPicId():string|null
loadingPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
loadingPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeType():enum__Torappu_Act1VAutoChessModeType {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_Act1VAutoChessModeType.TRAINING;
}

static startclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addModeId(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, modeIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, descOffset, 0);
}

static addPreposedMode(builder:flatbuffers.Builder, preposedModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, preposedModeOffset, 0);
}

static addUnlockText(builder:flatbuffers.Builder, unlockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, unlockTextOffset, 0);
}

static addEffectDescList(builder:flatbuffers.Builder, effectDescListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, effectDescListOffset, 0);
}

static createEffectDescListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectDescListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLoadingPicId(builder:flatbuffers.Builder, loadingPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, loadingPicIdOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, codeOffset, 0);
}

static addModeType(builder:flatbuffers.Builder, modeType:enum__Torappu_Act1VAutoChessModeType) {
  builder.addFieldInt32(9, modeType, enum__Torappu_Act1VAutoChessModeType.TRAINING);
}

static endclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset, sortId:number, nameOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, preposedModeOffset:flatbuffers.Offset, unlockTextOffset:flatbuffers.Offset, effectDescListOffset:flatbuffers.Offset, loadingPicIdOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset, modeType:enum__Torappu_Act1VAutoChessModeType):flatbuffers.Offset {
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.startclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(builder);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addModeId(builder, modeIdOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addSortId(builder, sortId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addName(builder, nameOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addDesc(builder, descOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addPreposedMode(builder, preposedModeOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addUnlockText(builder, unlockTextOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addEffectDescList(builder, effectDescListOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addLoadingPicId(builder, loadingPicIdOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addCode(builder, codeOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.addModeType(builder, modeType);
  return clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.endclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(builder);
}

unpack(): clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeDataT {
  return new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeDataT(
    this.modeId(),
    this.sortId(),
    this.name(),
    this.desc(),
    this.preposedMode(),
    this.unlockText(),
    this.bb!.createScalarList<string>(this.effectDescList.bind(this), this.effectDescListLength()),
    this.loadingPicId(),
    this.code(),
    this.modeType()
  );
}


unpackTo(_o: clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeDataT): void {
  _o.modeId = this.modeId();
  _o.sortId = this.sortId();
  _o.name = this.name();
  _o.desc = this.desc();
  _o.preposedMode = this.preposedMode();
  _o.unlockText = this.unlockText();
  _o.effectDescList = this.bb!.createScalarList<string>(this.effectDescList.bind(this), this.effectDescListLength());
  _o.loadingPicId = this.loadingPicId();
  _o.code = this.code();
  _o.modeType = this.modeType();
}
}

export class clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public modeId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public name: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public preposedMode: string|Uint8Array|null = null,
  public unlockText: string|Uint8Array|null = null,
  public effectDescList: (string)[] = [],
  public loadingPicId: string|Uint8Array|null = null,
  public code: string|Uint8Array|null = null,
  public modeType: enum__Torappu_Act1VAutoChessModeType = enum__Torappu_Act1VAutoChessModeType.TRAINING
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const modeId = (this.modeId !== null ? builder.createString(this.modeId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const preposedMode = (this.preposedMode !== null ? builder.createString(this.preposedMode!) : 0);
  const unlockText = (this.unlockText !== null ? builder.createString(this.unlockText!) : 0);
  const effectDescList = clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.createEffectDescListVector(builder, builder.createObjectOffsetList(this.effectDescList));
  const loadingPicId = (this.loadingPicId !== null ? builder.createString(this.loadingPicId!) : 0);
  const code = (this.code !== null ? builder.createString(this.code!) : 0);

  return clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData.createclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeData(builder,
    modeId,
    this.sortId,
    name,
    desc,
    preposedMode,
    unlockText,
    effectDescList,
    loadingPicId,
    code,
    this.modeType
  );
}
}
