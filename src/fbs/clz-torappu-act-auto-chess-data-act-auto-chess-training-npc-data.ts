// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData):clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData):clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

npcId():string|null
npcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
npcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charId():string|null
charId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nameCardSkinId():string|null
nameCardSkinId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nameCardSkinId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

medalCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bandId():string|null
bandId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bandId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addNpcId(builder:flatbuffers.Builder, npcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, npcIdOffset, 0);
}

static addCharId(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, charIdOffset, 0);
}

static addNameCardSkinId(builder:flatbuffers.Builder, nameCardSkinIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameCardSkinIdOffset, 0);
}

static addMedalCount(builder:flatbuffers.Builder, medalCount:number) {
  builder.addFieldInt32(3, medalCount, 0);
}

static addBandId(builder:flatbuffers.Builder, bandIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bandIdOffset, 0);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(builder:flatbuffers.Builder, npcIdOffset:flatbuffers.Offset, charIdOffset:flatbuffers.Offset, nameCardSkinIdOffset:flatbuffers.Offset, medalCount:number, bandIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.startclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.addNpcId(builder, npcIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.addCharId(builder, charIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.addNameCardSkinId(builder, nameCardSkinIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.addMedalCount(builder, medalCount);
  clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.addBandId(builder, bandIdOffset);
  return clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.endclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcDataT(
    this.npcId(),
    this.charId(),
    this.nameCardSkinId(),
    this.medalCount(),
    this.bandId()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcDataT): void {
  _o.npcId = this.npcId();
  _o.charId = this.charId();
  _o.nameCardSkinId = this.nameCardSkinId();
  _o.medalCount = this.medalCount();
  _o.bandId = this.bandId();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcDataT implements flatbuffers.IGeneratedObject {
constructor(
  public npcId: string|Uint8Array|null = null,
  public charId: string|Uint8Array|null = null,
  public nameCardSkinId: string|Uint8Array|null = null,
  public medalCount: number = 0,
  public bandId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const npcId = (this.npcId !== null ? builder.createString(this.npcId!) : 0);
  const charId = (this.charId !== null ? builder.createString(this.charId!) : 0);
  const nameCardSkinId = (this.nameCardSkinId !== null ? builder.createString(this.nameCardSkinId!) : 0);
  const bandId = (this.bandId !== null ? builder.createString(this.bandId!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData.createclz_Torappu_ActAutoChessData_ActAutoChessTrainingNpcData(builder,
    npcId,
    charId,
    nameCardSkinId,
    this.medalCount,
    bandId
  );
}
}
