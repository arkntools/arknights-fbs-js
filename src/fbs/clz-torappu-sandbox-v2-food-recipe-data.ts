// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_SandboxV2FoodRecipeData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2FoodRecipeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2FoodRecipeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2FoodRecipeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2FoodRecipeData):clz_Torappu_SandboxV2FoodRecipeData {
  return (obj || new clz_Torappu_SandboxV2FoodRecipeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2FoodRecipeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2FoodRecipeData):clz_Torappu_SandboxV2FoodRecipeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2FoodRecipeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

foodId():string|null
foodId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
foodId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mats(index: number):string
mats(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mats(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

matsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SandboxV2FoodRecipeData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFoodId(builder:flatbuffers.Builder, foodIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, foodIdOffset, 0);
}

static addMats(builder:flatbuffers.Builder, matsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, matsOffset, 0);
}

static createMatsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMatsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SandboxV2FoodRecipeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2FoodRecipeData(builder:flatbuffers.Builder, foodIdOffset:flatbuffers.Offset, matsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SandboxV2FoodRecipeData.startclz_Torappu_SandboxV2FoodRecipeData(builder);
  clz_Torappu_SandboxV2FoodRecipeData.addFoodId(builder, foodIdOffset);
  clz_Torappu_SandboxV2FoodRecipeData.addMats(builder, matsOffset);
  return clz_Torappu_SandboxV2FoodRecipeData.endclz_Torappu_SandboxV2FoodRecipeData(builder);
}

unpack(): clz_Torappu_SandboxV2FoodRecipeDataT {
  return new clz_Torappu_SandboxV2FoodRecipeDataT(
    this.foodId(),
    this.bb!.createScalarList<string>(this.mats.bind(this), this.matsLength())
  );
}


unpackTo(_o: clz_Torappu_SandboxV2FoodRecipeDataT): void {
  _o.foodId = this.foodId();
  _o.mats = this.bb!.createScalarList<string>(this.mats.bind(this), this.matsLength());
}
}

export class clz_Torappu_SandboxV2FoodRecipeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public foodId: string|Uint8Array|null = null,
  public mats: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const foodId = (this.foodId !== null ? builder.createString(this.foodId!) : 0);
  const mats = clz_Torappu_SandboxV2FoodRecipeData.createMatsVector(builder, builder.createObjectOffsetList(this.mats));

  return clz_Torappu_SandboxV2FoodRecipeData.createclz_Torappu_SandboxV2FoodRecipeData(builder,
    foodId,
    mats
  );
}
}
