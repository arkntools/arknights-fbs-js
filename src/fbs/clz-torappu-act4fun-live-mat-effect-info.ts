// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_Act4funLiveMatEffectInfo implements flatbuffers.IUnpackableObject<clz_Torappu_Act4funLiveMatEffectInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act4funLiveMatEffectInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act4funLiveMatEffectInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funLiveMatEffectInfo):clz_Torappu_Act4funLiveMatEffectInfo {
  return (obj || new clz_Torappu_Act4funLiveMatEffectInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act4funLiveMatEffectInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funLiveMatEffectInfo):clz_Torappu_Act4funLiveMatEffectInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act4funLiveMatEffectInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

liveMatEffectId():string|null
liveMatEffectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
liveMatEffectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

valueId():string|null
valueId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
valueId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

performGroup():string|null
performGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
performGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_Act4funLiveMatEffectInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addLiveMatEffectId(builder:flatbuffers.Builder, liveMatEffectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, liveMatEffectIdOffset, 0);
}

static addValueId(builder:flatbuffers.Builder, valueIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueIdOffset, 0);
}

static addPerformGroup(builder:flatbuffers.Builder, performGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, performGroupOffset, 0);
}

static endclz_Torappu_Act4funLiveMatEffectInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act4funLiveMatEffectInfo(builder:flatbuffers.Builder, liveMatEffectIdOffset:flatbuffers.Offset, valueIdOffset:flatbuffers.Offset, performGroupOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act4funLiveMatEffectInfo.startclz_Torappu_Act4funLiveMatEffectInfo(builder);
  clz_Torappu_Act4funLiveMatEffectInfo.addLiveMatEffectId(builder, liveMatEffectIdOffset);
  clz_Torappu_Act4funLiveMatEffectInfo.addValueId(builder, valueIdOffset);
  clz_Torappu_Act4funLiveMatEffectInfo.addPerformGroup(builder, performGroupOffset);
  return clz_Torappu_Act4funLiveMatEffectInfo.endclz_Torappu_Act4funLiveMatEffectInfo(builder);
}

unpack(): clz_Torappu_Act4funLiveMatEffectInfoT {
  return new clz_Torappu_Act4funLiveMatEffectInfoT(
    this.liveMatEffectId(),
    this.valueId(),
    this.performGroup()
  );
}


unpackTo(_o: clz_Torappu_Act4funLiveMatEffectInfoT): void {
  _o.liveMatEffectId = this.liveMatEffectId();
  _o.valueId = this.valueId();
  _o.performGroup = this.performGroup();
}
}

export class clz_Torappu_Act4funLiveMatEffectInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public liveMatEffectId: string|Uint8Array|null = null,
  public valueId: string|Uint8Array|null = null,
  public performGroup: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const liveMatEffectId = (this.liveMatEffectId !== null ? builder.createString(this.liveMatEffectId!) : 0);
  const valueId = (this.valueId !== null ? builder.createString(this.valueId!) : 0);
  const performGroup = (this.performGroup !== null ? builder.createString(this.performGroup!) : 0);

  return clz_Torappu_Act4funLiveMatEffectInfo.createclz_Torappu_Act4funLiveMatEffectInfo(builder,
    liveMatEffectId,
    valueId,
    performGroup
  );
}
}
