// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_EnemyDuelModeType } from './enum--torappu-enemy-duel-mode-type.js';


export class clz_Torappu_ActivityEnemyDuelModeData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityEnemyDuelModeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityEnemyDuelModeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityEnemyDuelModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelModeData):clz_Torappu_ActivityEnemyDuelModeData {
  return (obj || new clz_Torappu_ActivityEnemyDuelModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityEnemyDuelModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelModeData):clz_Torappu_ActivityEnemyDuelModeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityEnemyDuelModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

modeId():string|null
modeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isMultiPlayer():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRoom():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

modeType():enum__Torappu_EnemyDuelModeType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_EnemyDuelModeType.OPERATION;
}

stageIds(index: number):string
stageIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stageIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stageIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pageId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

innerSortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeName():string|null
modeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeShortName():string|null
modeShortName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeShortName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeEnName():string|null
modeEnName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeEnName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxPlayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

preposedMode():string|null
preposedMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preposedMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

startTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

entryPicId():string|null
entryPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

titlePics(index: number):string
titlePics(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
titlePics(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

titlePicsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

modeTarget():string|null
modeTarget(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeTarget(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeDesc():string|null
modeDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeRecordDesc():string|null
modeRecordDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeRecordDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

extraTag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

modeAvatarPicId():string|null
modeAvatarPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeAvatarPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeAvatarName():string|null
modeAvatarName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeAvatarName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeAvatarText():string|null
modeAvatarText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeAvatarText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hasUnlockToast():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_ActivityEnemyDuelModeData(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addModeId(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, modeIdOffset, 0);
}

static addIsMultiPlayer(builder:flatbuffers.Builder, isMultiPlayer:boolean) {
  builder.addFieldInt8(1, +isMultiPlayer, +false);
}

static addIsRoom(builder:flatbuffers.Builder, isRoom:boolean) {
  builder.addFieldInt8(2, +isRoom, +false);
}

static addModeType(builder:flatbuffers.Builder, modeType:enum__Torappu_EnemyDuelModeType) {
  builder.addFieldInt32(3, modeType, enum__Torappu_EnemyDuelModeType.OPERATION);
}

static addStageIds(builder:flatbuffers.Builder, stageIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, stageIdsOffset, 0);
}

static createStageIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStageIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPageId(builder:flatbuffers.Builder, pageId:number) {
  builder.addFieldInt32(5, pageId, 0);
}

static addInnerSortId(builder:flatbuffers.Builder, innerSortId:number) {
  builder.addFieldInt32(6, innerSortId, 0);
}

static addModeName(builder:flatbuffers.Builder, modeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, modeNameOffset, 0);
}

static addModeShortName(builder:flatbuffers.Builder, modeShortNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, modeShortNameOffset, 0);
}

static addModeEnName(builder:flatbuffers.Builder, modeEnNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, modeEnNameOffset, 0);
}

static addMaxPlayer(builder:flatbuffers.Builder, maxPlayer:number) {
  builder.addFieldInt32(10, maxPlayer, 0);
}

static addPreposedMode(builder:flatbuffers.Builder, preposedModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, preposedModeOffset, 0);
}

static addStartTs(builder:flatbuffers.Builder, startTs:bigint) {
  builder.addFieldInt64(12, startTs, BigInt('0'));
}

static addEndTs(builder:flatbuffers.Builder, endTs:bigint) {
  builder.addFieldInt64(13, endTs, BigInt('0'));
}

static addEntryPicId(builder:flatbuffers.Builder, entryPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, entryPicIdOffset, 0);
}

static addTitlePics(builder:flatbuffers.Builder, titlePicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, titlePicsOffset, 0);
}

static createTitlePicsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTitlePicsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addModeTarget(builder:flatbuffers.Builder, modeTargetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, modeTargetOffset, 0);
}

static addModeDesc(builder:flatbuffers.Builder, modeDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, modeDescOffset, 0);
}

static addModeRecordDesc(builder:flatbuffers.Builder, modeRecordDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, modeRecordDescOffset, 0);
}

static addExtraTag(builder:flatbuffers.Builder, extraTag:boolean) {
  builder.addFieldInt8(19, +extraTag, +false);
}

static addModeAvatarPicId(builder:flatbuffers.Builder, modeAvatarPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, modeAvatarPicIdOffset, 0);
}

static addModeAvatarName(builder:flatbuffers.Builder, modeAvatarNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, modeAvatarNameOffset, 0);
}

static addModeAvatarText(builder:flatbuffers.Builder, modeAvatarTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, modeAvatarTextOffset, 0);
}

static addHasUnlockToast(builder:flatbuffers.Builder, hasUnlockToast:boolean) {
  builder.addFieldInt8(23, +hasUnlockToast, +false);
}

static endclz_Torappu_ActivityEnemyDuelModeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityEnemyDuelModeData(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset, isMultiPlayer:boolean, isRoom:boolean, modeType:enum__Torappu_EnemyDuelModeType, stageIdsOffset:flatbuffers.Offset, pageId:number, innerSortId:number, modeNameOffset:flatbuffers.Offset, modeShortNameOffset:flatbuffers.Offset, modeEnNameOffset:flatbuffers.Offset, maxPlayer:number, preposedModeOffset:flatbuffers.Offset, startTs:bigint, endTs:bigint, entryPicIdOffset:flatbuffers.Offset, titlePicsOffset:flatbuffers.Offset, modeTargetOffset:flatbuffers.Offset, modeDescOffset:flatbuffers.Offset, modeRecordDescOffset:flatbuffers.Offset, extraTag:boolean, modeAvatarPicIdOffset:flatbuffers.Offset, modeAvatarNameOffset:flatbuffers.Offset, modeAvatarTextOffset:flatbuffers.Offset, hasUnlockToast:boolean):flatbuffers.Offset {
  clz_Torappu_ActivityEnemyDuelModeData.startclz_Torappu_ActivityEnemyDuelModeData(builder);
  clz_Torappu_ActivityEnemyDuelModeData.addModeId(builder, modeIdOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addIsMultiPlayer(builder, isMultiPlayer);
  clz_Torappu_ActivityEnemyDuelModeData.addIsRoom(builder, isRoom);
  clz_Torappu_ActivityEnemyDuelModeData.addModeType(builder, modeType);
  clz_Torappu_ActivityEnemyDuelModeData.addStageIds(builder, stageIdsOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addPageId(builder, pageId);
  clz_Torappu_ActivityEnemyDuelModeData.addInnerSortId(builder, innerSortId);
  clz_Torappu_ActivityEnemyDuelModeData.addModeName(builder, modeNameOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeShortName(builder, modeShortNameOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeEnName(builder, modeEnNameOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addMaxPlayer(builder, maxPlayer);
  clz_Torappu_ActivityEnemyDuelModeData.addPreposedMode(builder, preposedModeOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addStartTs(builder, startTs);
  clz_Torappu_ActivityEnemyDuelModeData.addEndTs(builder, endTs);
  clz_Torappu_ActivityEnemyDuelModeData.addEntryPicId(builder, entryPicIdOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addTitlePics(builder, titlePicsOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeTarget(builder, modeTargetOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeDesc(builder, modeDescOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeRecordDesc(builder, modeRecordDescOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addExtraTag(builder, extraTag);
  clz_Torappu_ActivityEnemyDuelModeData.addModeAvatarPicId(builder, modeAvatarPicIdOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeAvatarName(builder, modeAvatarNameOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addModeAvatarText(builder, modeAvatarTextOffset);
  clz_Torappu_ActivityEnemyDuelModeData.addHasUnlockToast(builder, hasUnlockToast);
  return clz_Torappu_ActivityEnemyDuelModeData.endclz_Torappu_ActivityEnemyDuelModeData(builder);
}

unpack(): clz_Torappu_ActivityEnemyDuelModeDataT {
  return new clz_Torappu_ActivityEnemyDuelModeDataT(
    this.modeId(),
    this.isMultiPlayer(),
    this.isRoom(),
    this.modeType(),
    this.bb!.createScalarList<string>(this.stageIds.bind(this), this.stageIdsLength()),
    this.pageId(),
    this.innerSortId(),
    this.modeName(),
    this.modeShortName(),
    this.modeEnName(),
    this.maxPlayer(),
    this.preposedMode(),
    this.startTs(),
    this.endTs(),
    this.entryPicId(),
    this.bb!.createScalarList<string>(this.titlePics.bind(this), this.titlePicsLength()),
    this.modeTarget(),
    this.modeDesc(),
    this.modeRecordDesc(),
    this.extraTag(),
    this.modeAvatarPicId(),
    this.modeAvatarName(),
    this.modeAvatarText(),
    this.hasUnlockToast()
  );
}


unpackTo(_o: clz_Torappu_ActivityEnemyDuelModeDataT): void {
  _o.modeId = this.modeId();
  _o.isMultiPlayer = this.isMultiPlayer();
  _o.isRoom = this.isRoom();
  _o.modeType = this.modeType();
  _o.stageIds = this.bb!.createScalarList<string>(this.stageIds.bind(this), this.stageIdsLength());
  _o.pageId = this.pageId();
  _o.innerSortId = this.innerSortId();
  _o.modeName = this.modeName();
  _o.modeShortName = this.modeShortName();
  _o.modeEnName = this.modeEnName();
  _o.maxPlayer = this.maxPlayer();
  _o.preposedMode = this.preposedMode();
  _o.startTs = this.startTs();
  _o.endTs = this.endTs();
  _o.entryPicId = this.entryPicId();
  _o.titlePics = this.bb!.createScalarList<string>(this.titlePics.bind(this), this.titlePicsLength());
  _o.modeTarget = this.modeTarget();
  _o.modeDesc = this.modeDesc();
  _o.modeRecordDesc = this.modeRecordDesc();
  _o.extraTag = this.extraTag();
  _o.modeAvatarPicId = this.modeAvatarPicId();
  _o.modeAvatarName = this.modeAvatarName();
  _o.modeAvatarText = this.modeAvatarText();
  _o.hasUnlockToast = this.hasUnlockToast();
}
}

export class clz_Torappu_ActivityEnemyDuelModeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public modeId: string|Uint8Array|null = null,
  public isMultiPlayer: boolean = false,
  public isRoom: boolean = false,
  public modeType: enum__Torappu_EnemyDuelModeType = enum__Torappu_EnemyDuelModeType.OPERATION,
  public stageIds: (string)[] = [],
  public pageId: number = 0,
  public innerSortId: number = 0,
  public modeName: string|Uint8Array|null = null,
  public modeShortName: string|Uint8Array|null = null,
  public modeEnName: string|Uint8Array|null = null,
  public maxPlayer: number = 0,
  public preposedMode: string|Uint8Array|null = null,
  public startTs: bigint = BigInt('0'),
  public endTs: bigint = BigInt('0'),
  public entryPicId: string|Uint8Array|null = null,
  public titlePics: (string)[] = [],
  public modeTarget: string|Uint8Array|null = null,
  public modeDesc: string|Uint8Array|null = null,
  public modeRecordDesc: string|Uint8Array|null = null,
  public extraTag: boolean = false,
  public modeAvatarPicId: string|Uint8Array|null = null,
  public modeAvatarName: string|Uint8Array|null = null,
  public modeAvatarText: string|Uint8Array|null = null,
  public hasUnlockToast: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const modeId = (this.modeId !== null ? builder.createString(this.modeId!) : 0);
  const stageIds = clz_Torappu_ActivityEnemyDuelModeData.createStageIdsVector(builder, builder.createObjectOffsetList(this.stageIds));
  const modeName = (this.modeName !== null ? builder.createString(this.modeName!) : 0);
  const modeShortName = (this.modeShortName !== null ? builder.createString(this.modeShortName!) : 0);
  const modeEnName = (this.modeEnName !== null ? builder.createString(this.modeEnName!) : 0);
  const preposedMode = (this.preposedMode !== null ? builder.createString(this.preposedMode!) : 0);
  const entryPicId = (this.entryPicId !== null ? builder.createString(this.entryPicId!) : 0);
  const titlePics = clz_Torappu_ActivityEnemyDuelModeData.createTitlePicsVector(builder, builder.createObjectOffsetList(this.titlePics));
  const modeTarget = (this.modeTarget !== null ? builder.createString(this.modeTarget!) : 0);
  const modeDesc = (this.modeDesc !== null ? builder.createString(this.modeDesc!) : 0);
  const modeRecordDesc = (this.modeRecordDesc !== null ? builder.createString(this.modeRecordDesc!) : 0);
  const modeAvatarPicId = (this.modeAvatarPicId !== null ? builder.createString(this.modeAvatarPicId!) : 0);
  const modeAvatarName = (this.modeAvatarName !== null ? builder.createString(this.modeAvatarName!) : 0);
  const modeAvatarText = (this.modeAvatarText !== null ? builder.createString(this.modeAvatarText!) : 0);

  return clz_Torappu_ActivityEnemyDuelModeData.createclz_Torappu_ActivityEnemyDuelModeData(builder,
    modeId,
    this.isMultiPlayer,
    this.isRoom,
    this.modeType,
    stageIds,
    this.pageId,
    this.innerSortId,
    modeName,
    modeShortName,
    modeEnName,
    this.maxPlayer,
    preposedMode,
    this.startTs,
    this.endTs,
    entryPicId,
    titlePics,
    modeTarget,
    modeDesc,
    modeRecordDesc,
    this.extraTag,
    modeAvatarPicId,
    modeAvatarName,
    modeAvatarText,
    this.hasUnlockToast
  );
}
}
