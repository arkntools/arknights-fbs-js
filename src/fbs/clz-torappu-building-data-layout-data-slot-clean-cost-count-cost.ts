// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost):clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost {
  return (obj || new clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost):clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

items(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

itemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addItems(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, itemsOffset, 0);
}

static createItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost.startclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(builder);
  clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost.addItems(builder, itemsOffset);
  return clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost.endclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(builder);
}

unpack(): clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostT {
  return new clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostT(
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.items.bind(this), this.itemsLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostT): void {
  _o.items = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.items.bind(this), this.itemsLength());
}
}

export class clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostT implements flatbuffers.IGeneratedObject {
constructor(
  public items: (clz_Torappu_ItemBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const items = clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost.createItemsVector(builder, builder.createObjectOffsetList(this.items));

  return clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost.createclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(builder,
    items
  );
}
}
