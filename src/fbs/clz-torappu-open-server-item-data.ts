// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_ItemType } from './enum--torappu-item-type.js';


export class clz_Torappu_OpenServerItemData implements flatbuffers.IUnpackableObject<clz_Torappu_OpenServerItemDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_OpenServerItemData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_OpenServerItemData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_OpenServerItemData):clz_Torappu_OpenServerItemData {
  return (obj || new clz_Torappu_OpenServerItemData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_OpenServerItemData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_OpenServerItemData):clz_Torappu_OpenServerItemData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_OpenServerItemData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

itemId():string|null
itemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

itemType():enum__Torappu_ItemType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ItemType.NONE;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_OpenServerItemData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addItemId(builder:flatbuffers.Builder, itemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, itemIdOffset, 0);
}

static addItemType(builder:flatbuffers.Builder, itemType:enum__Torappu_ItemType) {
  builder.addFieldInt32(1, itemType, enum__Torappu_ItemType.NONE);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(2, count, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static endclz_Torappu_OpenServerItemData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_OpenServerItemData(builder:flatbuffers.Builder, itemIdOffset:flatbuffers.Offset, itemType:enum__Torappu_ItemType, count:number, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_OpenServerItemData.startclz_Torappu_OpenServerItemData(builder);
  clz_Torappu_OpenServerItemData.addItemId(builder, itemIdOffset);
  clz_Torappu_OpenServerItemData.addItemType(builder, itemType);
  clz_Torappu_OpenServerItemData.addCount(builder, count);
  clz_Torappu_OpenServerItemData.addName(builder, nameOffset);
  return clz_Torappu_OpenServerItemData.endclz_Torappu_OpenServerItemData(builder);
}

unpack(): clz_Torappu_OpenServerItemDataT {
  return new clz_Torappu_OpenServerItemDataT(
    this.itemId(),
    this.itemType(),
    this.count(),
    this.name()
  );
}


unpackTo(_o: clz_Torappu_OpenServerItemDataT): void {
  _o.itemId = this.itemId();
  _o.itemType = this.itemType();
  _o.count = this.count();
  _o.name = this.name();
}
}

export class clz_Torappu_OpenServerItemDataT implements flatbuffers.IGeneratedObject {
constructor(
  public itemId: string|Uint8Array|null = null,
  public itemType: enum__Torappu_ItemType = enum__Torappu_ItemType.NONE,
  public count: number = 0,
  public name: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const itemId = (this.itemId !== null ? builder.createString(this.itemId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return clz_Torappu_OpenServerItemData.createclz_Torappu_OpenServerItemData(builder,
    itemId,
    this.itemType,
    this.count,
    name
  );
}
}
