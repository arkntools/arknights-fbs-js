// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData):clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData):clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

item(obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dailyMissionPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt32(0, round, 0);
}

static addItem(builder:flatbuffers.Builder, itemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, itemOffset, 0);
}

static addDailyMissionPoint(builder:flatbuffers.Builder, dailyMissionPoint:number) {
  builder.addFieldInt32(2, dailyMissionPoint, 0);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardDataT(
    this.round(),
    (this.item() !== null ? this.item()!.unpack() : null),
    this.dailyMissionPoint()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardDataT): void {
  _o.round = this.round();
  _o.item = (this.item() !== null ? this.item()!.unpack() : null);
  _o.dailyMissionPoint = this.dailyMissionPoint();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardDataT implements flatbuffers.IGeneratedObject {
constructor(
  public round: number = 0,
  public item: clz_Torappu_ItemBundleT|null = null,
  public dailyMissionPoint: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const item = (this.item !== null ? this.item!.pack(builder) : 0);

  clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData.startclz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData.addRound(builder, this.round);
  clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData.addItem(builder, item);
  clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData.addDailyMissionPoint(builder, this.dailyMissionPoint);

  return clz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData.endclz_Torappu_ActAutoChessData_ActAutoChessBaseRewardData(builder);
}
}
