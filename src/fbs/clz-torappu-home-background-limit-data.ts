// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_HomeBackgroundLimitInfoData, clz_Torappu_HomeBackgroundLimitInfoDataT } from './clz-torappu-home-background-limit-info-data.js';


export class clz_Torappu_HomeBackgroundLimitData implements flatbuffers.IUnpackableObject<clz_Torappu_HomeBackgroundLimitDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_HomeBackgroundLimitData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_HomeBackgroundLimitData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HomeBackgroundLimitData):clz_Torappu_HomeBackgroundLimitData {
  return (obj || new clz_Torappu_HomeBackgroundLimitData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_HomeBackgroundLimitData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HomeBackgroundLimitData):clz_Torappu_HomeBackgroundLimitData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_HomeBackgroundLimitData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bgId():string|null
bgId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bgId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

limitInfos(index: number, obj?:clz_Torappu_HomeBackgroundLimitInfoData):clz_Torappu_HomeBackgroundLimitInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_HomeBackgroundLimitInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

limitInfosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_HomeBackgroundLimitData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBgId(builder:flatbuffers.Builder, bgIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bgIdOffset, 0);
}

static addLimitInfos(builder:flatbuffers.Builder, limitInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, limitInfosOffset, 0);
}

static createLimitInfosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLimitInfosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_HomeBackgroundLimitData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_HomeBackgroundLimitData(builder:flatbuffers.Builder, bgIdOffset:flatbuffers.Offset, limitInfosOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_HomeBackgroundLimitData.startclz_Torappu_HomeBackgroundLimitData(builder);
  clz_Torappu_HomeBackgroundLimitData.addBgId(builder, bgIdOffset);
  clz_Torappu_HomeBackgroundLimitData.addLimitInfos(builder, limitInfosOffset);
  return clz_Torappu_HomeBackgroundLimitData.endclz_Torappu_HomeBackgroundLimitData(builder);
}

unpack(): clz_Torappu_HomeBackgroundLimitDataT {
  return new clz_Torappu_HomeBackgroundLimitDataT(
    this.bgId(),
    this.bb!.createObjList<clz_Torappu_HomeBackgroundLimitInfoData, clz_Torappu_HomeBackgroundLimitInfoDataT>(this.limitInfos.bind(this), this.limitInfosLength())
  );
}


unpackTo(_o: clz_Torappu_HomeBackgroundLimitDataT): void {
  _o.bgId = this.bgId();
  _o.limitInfos = this.bb!.createObjList<clz_Torappu_HomeBackgroundLimitInfoData, clz_Torappu_HomeBackgroundLimitInfoDataT>(this.limitInfos.bind(this), this.limitInfosLength());
}
}

export class clz_Torappu_HomeBackgroundLimitDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bgId: string|Uint8Array|null = null,
  public limitInfos: (clz_Torappu_HomeBackgroundLimitInfoDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bgId = (this.bgId !== null ? builder.createString(this.bgId!) : 0);
  const limitInfos = clz_Torappu_HomeBackgroundLimitData.createLimitInfosVector(builder, builder.createObjectOffsetList(this.limitInfos));

  return clz_Torappu_HomeBackgroundLimitData.createclz_Torappu_HomeBackgroundLimitData(builder,
    bgId,
    limitInfos
  );
}
}
