// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_SkillDataBundle_LevelData, clz_Torappu_SkillDataBundle_LevelDataT } from './clz-torappu-skill-data-bundle-level-data.js';


export class clz_Torappu_SkillDataBundle implements flatbuffers.IUnpackableObject<clz_Torappu_SkillDataBundleT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SkillDataBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SkillDataBundle(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SkillDataBundle):clz_Torappu_SkillDataBundle {
  return (obj || new clz_Torappu_SkillDataBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SkillDataBundle(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SkillDataBundle):clz_Torappu_SkillDataBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SkillDataBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

skillId():string|null
skillId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skillId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

iconId():string|null
iconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hidden():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

levels(index: number, obj?:clz_Torappu_SkillDataBundle_LevelData):clz_Torappu_SkillDataBundle_LevelData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_SkillDataBundle_LevelData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

levelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SkillDataBundle(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSkillId(builder:flatbuffers.Builder, skillIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, skillIdOffset, 0);
}

static addIconId(builder:flatbuffers.Builder, iconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, iconIdOffset, 0);
}

static addHidden(builder:flatbuffers.Builder, hidden:boolean) {
  builder.addFieldInt8(2, +hidden, +false);
}

static addLevels(builder:flatbuffers.Builder, levelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, levelsOffset, 0);
}

static createLevelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SkillDataBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SkillDataBundle(builder:flatbuffers.Builder, skillIdOffset:flatbuffers.Offset, iconIdOffset:flatbuffers.Offset, hidden:boolean, levelsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SkillDataBundle.startclz_Torappu_SkillDataBundle(builder);
  clz_Torappu_SkillDataBundle.addSkillId(builder, skillIdOffset);
  clz_Torappu_SkillDataBundle.addIconId(builder, iconIdOffset);
  clz_Torappu_SkillDataBundle.addHidden(builder, hidden);
  clz_Torappu_SkillDataBundle.addLevels(builder, levelsOffset);
  return clz_Torappu_SkillDataBundle.endclz_Torappu_SkillDataBundle(builder);
}

unpack(): clz_Torappu_SkillDataBundleT {
  return new clz_Torappu_SkillDataBundleT(
    this.skillId(),
    this.iconId(),
    this.hidden(),
    this.bb!.createObjList<clz_Torappu_SkillDataBundle_LevelData, clz_Torappu_SkillDataBundle_LevelDataT>(this.levels.bind(this), this.levelsLength())
  );
}


unpackTo(_o: clz_Torappu_SkillDataBundleT): void {
  _o.skillId = this.skillId();
  _o.iconId = this.iconId();
  _o.hidden = this.hidden();
  _o.levels = this.bb!.createObjList<clz_Torappu_SkillDataBundle_LevelData, clz_Torappu_SkillDataBundle_LevelDataT>(this.levels.bind(this), this.levelsLength());
}
}

export class clz_Torappu_SkillDataBundleT implements flatbuffers.IGeneratedObject {
constructor(
  public skillId: string|Uint8Array|null = null,
  public iconId: string|Uint8Array|null = null,
  public hidden: boolean = false,
  public levels: (clz_Torappu_SkillDataBundle_LevelDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const skillId = (this.skillId !== null ? builder.createString(this.skillId!) : 0);
  const iconId = (this.iconId !== null ? builder.createString(this.iconId!) : 0);
  const levels = clz_Torappu_SkillDataBundle.createLevelsVector(builder, builder.createObjectOffsetList(this.levels));

  return clz_Torappu_SkillDataBundle.createclz_Torappu_SkillDataBundle(builder,
    skillId,
    iconId,
    this.hidden,
    levels
  );
}
}
