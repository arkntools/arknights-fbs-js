// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_BuildingData_ObstaclePoint, clz_Torappu_BuildingData_ObstaclePointT } from './clz-torappu-building-data-obstacle-point.js';


export class clz_Torappu_BuildingData_ObstacleData implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_ObstacleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_ObstacleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_ObstacleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_ObstacleData):clz_Torappu_BuildingData_ObstacleData {
  return (obj || new clz_Torappu_BuildingData_ObstacleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_ObstacleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_ObstacleData):clz_Torappu_BuildingData_ObstacleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_ObstacleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

floorObstacles(index: number, obj?:clz_Torappu_BuildingData_ObstaclePoint):clz_Torappu_BuildingData_ObstaclePoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_BuildingData_ObstaclePoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

floorObstaclesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

backwallObstacles(index: number, obj?:clz_Torappu_BuildingData_ObstaclePoint):clz_Torappu_BuildingData_ObstaclePoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_BuildingData_ObstaclePoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

backwallObstaclesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_ObstacleData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFloorObstacles(builder:flatbuffers.Builder, floorObstaclesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, floorObstaclesOffset, 0);
}

static createFloorObstaclesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFloorObstaclesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBackwallObstacles(builder:flatbuffers.Builder, backwallObstaclesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, backwallObstaclesOffset, 0);
}

static createBackwallObstaclesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBackwallObstaclesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_ObstacleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BuildingData_ObstacleData(builder:flatbuffers.Builder, floorObstaclesOffset:flatbuffers.Offset, backwallObstaclesOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_BuildingData_ObstacleData.startclz_Torappu_BuildingData_ObstacleData(builder);
  clz_Torappu_BuildingData_ObstacleData.addFloorObstacles(builder, floorObstaclesOffset);
  clz_Torappu_BuildingData_ObstacleData.addBackwallObstacles(builder, backwallObstaclesOffset);
  return clz_Torappu_BuildingData_ObstacleData.endclz_Torappu_BuildingData_ObstacleData(builder);
}

unpack(): clz_Torappu_BuildingData_ObstacleDataT {
  return new clz_Torappu_BuildingData_ObstacleDataT(
    this.bb!.createObjList<clz_Torappu_BuildingData_ObstaclePoint, clz_Torappu_BuildingData_ObstaclePointT>(this.floorObstacles.bind(this), this.floorObstaclesLength()),
    this.bb!.createObjList<clz_Torappu_BuildingData_ObstaclePoint, clz_Torappu_BuildingData_ObstaclePointT>(this.backwallObstacles.bind(this), this.backwallObstaclesLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_ObstacleDataT): void {
  _o.floorObstacles = this.bb!.createObjList<clz_Torappu_BuildingData_ObstaclePoint, clz_Torappu_BuildingData_ObstaclePointT>(this.floorObstacles.bind(this), this.floorObstaclesLength());
  _o.backwallObstacles = this.bb!.createObjList<clz_Torappu_BuildingData_ObstaclePoint, clz_Torappu_BuildingData_ObstaclePointT>(this.backwallObstacles.bind(this), this.backwallObstaclesLength());
}
}

export class clz_Torappu_BuildingData_ObstacleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public floorObstacles: (clz_Torappu_BuildingData_ObstaclePointT)[] = [],
  public backwallObstacles: (clz_Torappu_BuildingData_ObstaclePointT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const floorObstacles = clz_Torappu_BuildingData_ObstacleData.createFloorObstaclesVector(builder, builder.createObjectOffsetList(this.floorObstacles));
  const backwallObstacles = clz_Torappu_BuildingData_ObstacleData.createBackwallObstaclesVector(builder, builder.createObjectOffsetList(this.backwallObstacles));

  return clz_Torappu_BuildingData_ObstacleData.createclz_Torappu_BuildingData_ObstacleData(builder,
    floorObstacles,
    backwallObstacles
  );
}
}
