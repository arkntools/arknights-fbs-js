// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_NewVoiceTimeData implements flatbuffers.IUnpackableObject<clz_Torappu_NewVoiceTimeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_NewVoiceTimeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_NewVoiceTimeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_NewVoiceTimeData):clz_Torappu_NewVoiceTimeData {
  return (obj || new clz_Torappu_NewVoiceTimeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_NewVoiceTimeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_NewVoiceTimeData):clz_Torappu_NewVoiceTimeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_NewVoiceTimeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

charSet(index: number):string
charSet(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
charSet(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

charSetLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_NewVoiceTimeData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(0, timestamp, BigInt('0'));
}

static addCharSet(builder:flatbuffers.Builder, charSetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, charSetOffset, 0);
}

static createCharSetVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharSetVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_NewVoiceTimeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_NewVoiceTimeData(builder:flatbuffers.Builder, timestamp:bigint, charSetOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_NewVoiceTimeData.startclz_Torappu_NewVoiceTimeData(builder);
  clz_Torappu_NewVoiceTimeData.addTimestamp(builder, timestamp);
  clz_Torappu_NewVoiceTimeData.addCharSet(builder, charSetOffset);
  return clz_Torappu_NewVoiceTimeData.endclz_Torappu_NewVoiceTimeData(builder);
}

unpack(): clz_Torappu_NewVoiceTimeDataT {
  return new clz_Torappu_NewVoiceTimeDataT(
    this.timestamp(),
    this.bb!.createScalarList<string>(this.charSet.bind(this), this.charSetLength())
  );
}


unpackTo(_o: clz_Torappu_NewVoiceTimeDataT): void {
  _o.timestamp = this.timestamp();
  _o.charSet = this.bb!.createScalarList<string>(this.charSet.bind(this), this.charSetLength());
}
}

export class clz_Torappu_NewVoiceTimeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public timestamp: bigint = BigInt('0'),
  public charSet: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const charSet = clz_Torappu_NewVoiceTimeData.createCharSetVector(builder, builder.createObjectOffsetList(this.charSet));

  return clz_Torappu_NewVoiceTimeData.createclz_Torappu_NewVoiceTimeData(builder,
    this.timestamp,
    charSet
  );
}
}
