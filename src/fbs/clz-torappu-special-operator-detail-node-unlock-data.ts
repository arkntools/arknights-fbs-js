// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_EvolvePhase } from './enum--torappu-evolve-phase.js';
import { enum__Torappu_SpecialOperatorConditionViewType } from './enum--torappu-special-operator-condition-view-type.js';
import { enum__Torappu_SpecialOperatorDetailNodeType } from './enum--torappu-special-operator-detail-node-type.js';


export class clz_Torappu_SpecialOperatorDetailNodeUnlockData implements flatbuffers.IUnpackableObject<clz_Torappu_SpecialOperatorDetailNodeUnlockDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SpecialOperatorDetailNodeUnlockData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SpecialOperatorDetailNodeUnlockData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SpecialOperatorDetailNodeUnlockData):clz_Torappu_SpecialOperatorDetailNodeUnlockData {
  return (obj || new clz_Torappu_SpecialOperatorDetailNodeUnlockData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SpecialOperatorDetailNodeUnlockData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SpecialOperatorDetailNodeUnlockData):clz_Torappu_SpecialOperatorDetailNodeUnlockData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SpecialOperatorDetailNodeUnlockData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nodeId():string|null
nodeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeType():enum__Torappu_SpecialOperatorDetailNodeType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SpecialOperatorDetailNodeType.NONE;
}

isInGameMechanics():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

unlockEvolvePhase():enum__Torappu_EvolvePhase {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_EvolvePhase.PHASE_0;
}

unlockLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlockTaskId():string|null
unlockTaskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockTaskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

frontNodeId():string|null
frontNodeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frontNodeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ifAutoUnlock():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

conditionViewType():enum__Torappu_SpecialOperatorConditionViewType {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_SpecialOperatorConditionViewType.TASK;
}

topoOrder():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SpecialOperatorDetailNodeUnlockData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addNodeId(builder:flatbuffers.Builder, nodeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nodeIdOffset, 0);
}

static addNodeType(builder:flatbuffers.Builder, nodeType:enum__Torappu_SpecialOperatorDetailNodeType) {
  builder.addFieldInt32(1, nodeType, enum__Torappu_SpecialOperatorDetailNodeType.NONE);
}

static addIsInGameMechanics(builder:flatbuffers.Builder, isInGameMechanics:boolean) {
  builder.addFieldInt8(2, +isInGameMechanics, +false);
}

static addUnlockEvolvePhase(builder:flatbuffers.Builder, unlockEvolvePhase:enum__Torappu_EvolvePhase) {
  builder.addFieldInt32(3, unlockEvolvePhase, enum__Torappu_EvolvePhase.PHASE_0);
}

static addUnlockLevel(builder:flatbuffers.Builder, unlockLevel:number) {
  builder.addFieldInt32(4, unlockLevel, 0);
}

static addUnlockTaskId(builder:flatbuffers.Builder, unlockTaskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, unlockTaskIdOffset, 0);
}

static addFrontNodeId(builder:flatbuffers.Builder, frontNodeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, frontNodeIdOffset, 0);
}

static addIfAutoUnlock(builder:flatbuffers.Builder, ifAutoUnlock:boolean) {
  builder.addFieldInt8(7, +ifAutoUnlock, +false);
}

static addConditionViewType(builder:flatbuffers.Builder, conditionViewType:enum__Torappu_SpecialOperatorConditionViewType) {
  builder.addFieldInt32(8, conditionViewType, enum__Torappu_SpecialOperatorConditionViewType.TASK);
}

static addTopoOrder(builder:flatbuffers.Builder, topoOrder:number) {
  builder.addFieldInt32(9, topoOrder, 0);
}

static endclz_Torappu_SpecialOperatorDetailNodeUnlockData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SpecialOperatorDetailNodeUnlockData(builder:flatbuffers.Builder, nodeIdOffset:flatbuffers.Offset, nodeType:enum__Torappu_SpecialOperatorDetailNodeType, isInGameMechanics:boolean, unlockEvolvePhase:enum__Torappu_EvolvePhase, unlockLevel:number, unlockTaskIdOffset:flatbuffers.Offset, frontNodeIdOffset:flatbuffers.Offset, ifAutoUnlock:boolean, conditionViewType:enum__Torappu_SpecialOperatorConditionViewType, topoOrder:number):flatbuffers.Offset {
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.startclz_Torappu_SpecialOperatorDetailNodeUnlockData(builder);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addNodeId(builder, nodeIdOffset);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addNodeType(builder, nodeType);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addIsInGameMechanics(builder, isInGameMechanics);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addUnlockEvolvePhase(builder, unlockEvolvePhase);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addUnlockLevel(builder, unlockLevel);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addUnlockTaskId(builder, unlockTaskIdOffset);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addFrontNodeId(builder, frontNodeIdOffset);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addIfAutoUnlock(builder, ifAutoUnlock);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addConditionViewType(builder, conditionViewType);
  clz_Torappu_SpecialOperatorDetailNodeUnlockData.addTopoOrder(builder, topoOrder);
  return clz_Torappu_SpecialOperatorDetailNodeUnlockData.endclz_Torappu_SpecialOperatorDetailNodeUnlockData(builder);
}

unpack(): clz_Torappu_SpecialOperatorDetailNodeUnlockDataT {
  return new clz_Torappu_SpecialOperatorDetailNodeUnlockDataT(
    this.nodeId(),
    this.nodeType(),
    this.isInGameMechanics(),
    this.unlockEvolvePhase(),
    this.unlockLevel(),
    this.unlockTaskId(),
    this.frontNodeId(),
    this.ifAutoUnlock(),
    this.conditionViewType(),
    this.topoOrder()
  );
}


unpackTo(_o: clz_Torappu_SpecialOperatorDetailNodeUnlockDataT): void {
  _o.nodeId = this.nodeId();
  _o.nodeType = this.nodeType();
  _o.isInGameMechanics = this.isInGameMechanics();
  _o.unlockEvolvePhase = this.unlockEvolvePhase();
  _o.unlockLevel = this.unlockLevel();
  _o.unlockTaskId = this.unlockTaskId();
  _o.frontNodeId = this.frontNodeId();
  _o.ifAutoUnlock = this.ifAutoUnlock();
  _o.conditionViewType = this.conditionViewType();
  _o.topoOrder = this.topoOrder();
}
}

export class clz_Torappu_SpecialOperatorDetailNodeUnlockDataT implements flatbuffers.IGeneratedObject {
constructor(
  public nodeId: string|Uint8Array|null = null,
  public nodeType: enum__Torappu_SpecialOperatorDetailNodeType = enum__Torappu_SpecialOperatorDetailNodeType.NONE,
  public isInGameMechanics: boolean = false,
  public unlockEvolvePhase: enum__Torappu_EvolvePhase = enum__Torappu_EvolvePhase.PHASE_0,
  public unlockLevel: number = 0,
  public unlockTaskId: string|Uint8Array|null = null,
  public frontNodeId: string|Uint8Array|null = null,
  public ifAutoUnlock: boolean = false,
  public conditionViewType: enum__Torappu_SpecialOperatorConditionViewType = enum__Torappu_SpecialOperatorConditionViewType.TASK,
  public topoOrder: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const nodeId = (this.nodeId !== null ? builder.createString(this.nodeId!) : 0);
  const unlockTaskId = (this.unlockTaskId !== null ? builder.createString(this.unlockTaskId!) : 0);
  const frontNodeId = (this.frontNodeId !== null ? builder.createString(this.frontNodeId!) : 0);

  return clz_Torappu_SpecialOperatorDetailNodeUnlockData.createclz_Torappu_SpecialOperatorDetailNodeUnlockData(builder,
    nodeId,
    this.nodeType,
    this.isInGameMechanics,
    this.unlockEvolvePhase,
    this.unlockLevel,
    unlockTaskId,
    frontNodeId,
    this.ifAutoUnlock,
    this.conditionViewType,
    this.topoOrder
  );
}
}
