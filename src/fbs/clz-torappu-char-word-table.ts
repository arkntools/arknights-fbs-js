// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData, dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataT } from './dict--enum--torappu-voice-lang-group-type--clz-torappu-voice-lang-group-data.js';
import { dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData, dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataT } from './dict--enum--torappu-voice-lang-type--clz-torappu-voice-lang-type-data.js';
import { dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData, dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataT } from './dict--enum--torappu-voice-lang-type--list-clz-torappu-new-voice-time-data.js';
import { dict__string__clz_Torappu_CharExtraWordData, dict__string__clz_Torappu_CharExtraWordDataT } from './dict--string--clz-torappu-char-extra-word-data.js';
import { dict__string__clz_Torappu_CharWordData, dict__string__clz_Torappu_CharWordDataT } from './dict--string--clz-torappu-char-word-data.js';
import { dict__string__clz_Torappu_ExtraVoiceConfigData, dict__string__clz_Torappu_ExtraVoiceConfigDataT } from './dict--string--clz-torappu-extra-voice-config-data.js';
import { dict__string__clz_Torappu_FestivalVoiceData, dict__string__clz_Torappu_FestivalVoiceDataT } from './dict--string--clz-torappu-festival-voice-data.js';
import { dict__string__clz_Torappu_FestivalVoiceWeightData, dict__string__clz_Torappu_FestivalVoiceWeightDataT } from './dict--string--clz-torappu-festival-voice-weight-data.js';
import { dict__string__clz_Torappu_VoiceLangData, dict__string__clz_Torappu_VoiceLangDataT } from './dict--string--clz-torappu-voice-lang-data.js';
import { dict__string__enum__Torappu_VoiceLangType, dict__string__enum__Torappu_VoiceLangTypeT } from './dict--string--enum--torappu-voice-lang-type.js';
import { enum__Torappu_CharWordShowType } from './enum--torappu-char-word-show-type.js';
import { enum__Torappu_VoiceLangGroupType } from './enum--torappu-voice-lang-group-type.js';
import { enum__Torappu_VoiceLangType } from './enum--torappu-voice-lang-type.js';


export class clz_Torappu_CharWordTable implements flatbuffers.IUnpackableObject<clz_Torappu_CharWordTableT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_CharWordTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_CharWordTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharWordTable):clz_Torappu_CharWordTable {
  return (obj || new clz_Torappu_CharWordTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_CharWordTable(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharWordTable):clz_Torappu_CharWordTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_CharWordTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

charWords(index: number, obj?:dict__string__clz_Torappu_CharWordData):dict__string__clz_Torappu_CharWordData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_CharWordData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

charWordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

charExtraWords(index: number, obj?:dict__string__clz_Torappu_CharExtraWordData):dict__string__clz_Torappu_CharExtraWordData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_CharExtraWordData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

charExtraWordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

voiceLangDict(index: number, obj?:dict__string__clz_Torappu_VoiceLangData):dict__string__clz_Torappu_VoiceLangData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_VoiceLangData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

voiceLangDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

defaultLangType():enum__Torappu_VoiceLangType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_VoiceLangType.NONE;
}

newTagList(index: number):string
newTagList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
newTagList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

newTagListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

voiceLangTypeDict(index: number, obj?:dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData):dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

voiceLangTypeDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

voiceLangGroupTypeDict(index: number, obj?:dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData):dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

voiceLangGroupTypeDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

charDefaultTypeDict(index: number, obj?:dict__string__enum__Torappu_VoiceLangType):dict__string__enum__Torappu_VoiceLangType|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new dict__string__enum__Torappu_VoiceLangType()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

charDefaultTypeDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

startTimeWithTypeDict(index: number, obj?:dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData):dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

startTimeWithTypeDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

displayGroupTypeList(index: number):enum__Torappu_VoiceLangGroupType|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

displayGroupTypeListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

displayGroupTypeListArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

displayTypeList(index: number):enum__Torappu_VoiceLangType|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

displayTypeListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

displayTypeListArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

playVoiceRange():enum__Torappu_CharWordShowType {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_CharWordShowType.HOME_SHOW;
}

fesVoiceData(index: number, obj?:dict__string__clz_Torappu_FestivalVoiceData):dict__string__clz_Torappu_FestivalVoiceData|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new dict__string__clz_Torappu_FestivalVoiceData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fesVoiceDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fesVoiceWeight(index: number, obj?:dict__string__clz_Torappu_FestivalVoiceWeightData):dict__string__clz_Torappu_FestivalVoiceWeightData|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new dict__string__clz_Torappu_FestivalVoiceWeightData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fesVoiceWeightLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

extraVoiceConfigData(index: number, obj?:dict__string__clz_Torappu_ExtraVoiceConfigData):dict__string__clz_Torappu_ExtraVoiceConfigData|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new dict__string__clz_Torappu_ExtraVoiceConfigData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

extraVoiceConfigDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_CharWordTable(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addCharWords(builder:flatbuffers.Builder, charWordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, charWordsOffset, 0);
}

static createCharWordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharWordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharExtraWords(builder:flatbuffers.Builder, charExtraWordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, charExtraWordsOffset, 0);
}

static createCharExtraWordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharExtraWordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVoiceLangDict(builder:flatbuffers.Builder, voiceLangDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, voiceLangDictOffset, 0);
}

static createVoiceLangDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVoiceLangDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDefaultLangType(builder:flatbuffers.Builder, defaultLangType:enum__Torappu_VoiceLangType) {
  builder.addFieldInt32(3, defaultLangType, enum__Torappu_VoiceLangType.NONE);
}

static addNewTagList(builder:flatbuffers.Builder, newTagListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, newTagListOffset, 0);
}

static createNewTagListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNewTagListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVoiceLangTypeDict(builder:flatbuffers.Builder, voiceLangTypeDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, voiceLangTypeDictOffset, 0);
}

static createVoiceLangTypeDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVoiceLangTypeDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVoiceLangGroupTypeDict(builder:flatbuffers.Builder, voiceLangGroupTypeDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, voiceLangGroupTypeDictOffset, 0);
}

static createVoiceLangGroupTypeDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVoiceLangGroupTypeDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharDefaultTypeDict(builder:flatbuffers.Builder, charDefaultTypeDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, charDefaultTypeDictOffset, 0);
}

static createCharDefaultTypeDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharDefaultTypeDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStartTimeWithTypeDict(builder:flatbuffers.Builder, startTimeWithTypeDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, startTimeWithTypeDictOffset, 0);
}

static createStartTimeWithTypeDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStartTimeWithTypeDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDisplayGroupTypeList(builder:flatbuffers.Builder, displayGroupTypeListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, displayGroupTypeListOffset, 0);
}

static createDisplayGroupTypeListVector(builder:flatbuffers.Builder, data:enum__Torappu_VoiceLangGroupType[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startDisplayGroupTypeListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDisplayTypeList(builder:flatbuffers.Builder, displayTypeListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, displayTypeListOffset, 0);
}

static createDisplayTypeListVector(builder:flatbuffers.Builder, data:enum__Torappu_VoiceLangType[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startDisplayTypeListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlayVoiceRange(builder:flatbuffers.Builder, playVoiceRange:enum__Torappu_CharWordShowType) {
  builder.addFieldInt32(11, playVoiceRange, enum__Torappu_CharWordShowType.HOME_SHOW);
}

static addFesVoiceData(builder:flatbuffers.Builder, fesVoiceDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, fesVoiceDataOffset, 0);
}

static createFesVoiceDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFesVoiceDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFesVoiceWeight(builder:flatbuffers.Builder, fesVoiceWeightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, fesVoiceWeightOffset, 0);
}

static createFesVoiceWeightVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFesVoiceWeightVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExtraVoiceConfigData(builder:flatbuffers.Builder, extraVoiceConfigDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, extraVoiceConfigDataOffset, 0);
}

static createExtraVoiceConfigDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExtraVoiceConfigDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_CharWordTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishclz_Torappu_CharWordTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedclz_Torappu_CharWordTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createclz_Torappu_CharWordTable(builder:flatbuffers.Builder, charWordsOffset:flatbuffers.Offset, charExtraWordsOffset:flatbuffers.Offset, voiceLangDictOffset:flatbuffers.Offset, defaultLangType:enum__Torappu_VoiceLangType, newTagListOffset:flatbuffers.Offset, voiceLangTypeDictOffset:flatbuffers.Offset, voiceLangGroupTypeDictOffset:flatbuffers.Offset, charDefaultTypeDictOffset:flatbuffers.Offset, startTimeWithTypeDictOffset:flatbuffers.Offset, displayGroupTypeListOffset:flatbuffers.Offset, displayTypeListOffset:flatbuffers.Offset, playVoiceRange:enum__Torappu_CharWordShowType, fesVoiceDataOffset:flatbuffers.Offset, fesVoiceWeightOffset:flatbuffers.Offset, extraVoiceConfigDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_CharWordTable.startclz_Torappu_CharWordTable(builder);
  clz_Torappu_CharWordTable.addCharWords(builder, charWordsOffset);
  clz_Torappu_CharWordTable.addCharExtraWords(builder, charExtraWordsOffset);
  clz_Torappu_CharWordTable.addVoiceLangDict(builder, voiceLangDictOffset);
  clz_Torappu_CharWordTable.addDefaultLangType(builder, defaultLangType);
  clz_Torappu_CharWordTable.addNewTagList(builder, newTagListOffset);
  clz_Torappu_CharWordTable.addVoiceLangTypeDict(builder, voiceLangTypeDictOffset);
  clz_Torappu_CharWordTable.addVoiceLangGroupTypeDict(builder, voiceLangGroupTypeDictOffset);
  clz_Torappu_CharWordTable.addCharDefaultTypeDict(builder, charDefaultTypeDictOffset);
  clz_Torappu_CharWordTable.addStartTimeWithTypeDict(builder, startTimeWithTypeDictOffset);
  clz_Torappu_CharWordTable.addDisplayGroupTypeList(builder, displayGroupTypeListOffset);
  clz_Torappu_CharWordTable.addDisplayTypeList(builder, displayTypeListOffset);
  clz_Torappu_CharWordTable.addPlayVoiceRange(builder, playVoiceRange);
  clz_Torappu_CharWordTable.addFesVoiceData(builder, fesVoiceDataOffset);
  clz_Torappu_CharWordTable.addFesVoiceWeight(builder, fesVoiceWeightOffset);
  clz_Torappu_CharWordTable.addExtraVoiceConfigData(builder, extraVoiceConfigDataOffset);
  return clz_Torappu_CharWordTable.endclz_Torappu_CharWordTable(builder);
}

unpack(): clz_Torappu_CharWordTableT {
  return new clz_Torappu_CharWordTableT(
    this.bb!.createObjList<dict__string__clz_Torappu_CharWordData, dict__string__clz_Torappu_CharWordDataT>(this.charWords.bind(this), this.charWordsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_CharExtraWordData, dict__string__clz_Torappu_CharExtraWordDataT>(this.charExtraWords.bind(this), this.charExtraWordsLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_VoiceLangData, dict__string__clz_Torappu_VoiceLangDataT>(this.voiceLangDict.bind(this), this.voiceLangDictLength()),
    this.defaultLangType(),
    this.bb!.createScalarList<string>(this.newTagList.bind(this), this.newTagListLength()),
    this.bb!.createObjList<dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData, dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataT>(this.voiceLangTypeDict.bind(this), this.voiceLangTypeDictLength()),
    this.bb!.createObjList<dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData, dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataT>(this.voiceLangGroupTypeDict.bind(this), this.voiceLangGroupTypeDictLength()),
    this.bb!.createObjList<dict__string__enum__Torappu_VoiceLangType, dict__string__enum__Torappu_VoiceLangTypeT>(this.charDefaultTypeDict.bind(this), this.charDefaultTypeDictLength()),
    this.bb!.createObjList<dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData, dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataT>(this.startTimeWithTypeDict.bind(this), this.startTimeWithTypeDictLength()),
    this.bb!.createScalarList<enum__Torappu_VoiceLangGroupType>(this.displayGroupTypeList.bind(this), this.displayGroupTypeListLength()),
    this.bb!.createScalarList<enum__Torappu_VoiceLangType>(this.displayTypeList.bind(this), this.displayTypeListLength()),
    this.playVoiceRange(),
    this.bb!.createObjList<dict__string__clz_Torappu_FestivalVoiceData, dict__string__clz_Torappu_FestivalVoiceDataT>(this.fesVoiceData.bind(this), this.fesVoiceDataLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_FestivalVoiceWeightData, dict__string__clz_Torappu_FestivalVoiceWeightDataT>(this.fesVoiceWeight.bind(this), this.fesVoiceWeightLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_ExtraVoiceConfigData, dict__string__clz_Torappu_ExtraVoiceConfigDataT>(this.extraVoiceConfigData.bind(this), this.extraVoiceConfigDataLength())
  );
}


unpackTo(_o: clz_Torappu_CharWordTableT): void {
  _o.charWords = this.bb!.createObjList<dict__string__clz_Torappu_CharWordData, dict__string__clz_Torappu_CharWordDataT>(this.charWords.bind(this), this.charWordsLength());
  _o.charExtraWords = this.bb!.createObjList<dict__string__clz_Torappu_CharExtraWordData, dict__string__clz_Torappu_CharExtraWordDataT>(this.charExtraWords.bind(this), this.charExtraWordsLength());
  _o.voiceLangDict = this.bb!.createObjList<dict__string__clz_Torappu_VoiceLangData, dict__string__clz_Torappu_VoiceLangDataT>(this.voiceLangDict.bind(this), this.voiceLangDictLength());
  _o.defaultLangType = this.defaultLangType();
  _o.newTagList = this.bb!.createScalarList<string>(this.newTagList.bind(this), this.newTagListLength());
  _o.voiceLangTypeDict = this.bb!.createObjList<dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData, dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataT>(this.voiceLangTypeDict.bind(this), this.voiceLangTypeDictLength());
  _o.voiceLangGroupTypeDict = this.bb!.createObjList<dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData, dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataT>(this.voiceLangGroupTypeDict.bind(this), this.voiceLangGroupTypeDictLength());
  _o.charDefaultTypeDict = this.bb!.createObjList<dict__string__enum__Torappu_VoiceLangType, dict__string__enum__Torappu_VoiceLangTypeT>(this.charDefaultTypeDict.bind(this), this.charDefaultTypeDictLength());
  _o.startTimeWithTypeDict = this.bb!.createObjList<dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData, dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataT>(this.startTimeWithTypeDict.bind(this), this.startTimeWithTypeDictLength());
  _o.displayGroupTypeList = this.bb!.createScalarList<enum__Torappu_VoiceLangGroupType>(this.displayGroupTypeList.bind(this), this.displayGroupTypeListLength());
  _o.displayTypeList = this.bb!.createScalarList<enum__Torappu_VoiceLangType>(this.displayTypeList.bind(this), this.displayTypeListLength());
  _o.playVoiceRange = this.playVoiceRange();
  _o.fesVoiceData = this.bb!.createObjList<dict__string__clz_Torappu_FestivalVoiceData, dict__string__clz_Torappu_FestivalVoiceDataT>(this.fesVoiceData.bind(this), this.fesVoiceDataLength());
  _o.fesVoiceWeight = this.bb!.createObjList<dict__string__clz_Torappu_FestivalVoiceWeightData, dict__string__clz_Torappu_FestivalVoiceWeightDataT>(this.fesVoiceWeight.bind(this), this.fesVoiceWeightLength());
  _o.extraVoiceConfigData = this.bb!.createObjList<dict__string__clz_Torappu_ExtraVoiceConfigData, dict__string__clz_Torappu_ExtraVoiceConfigDataT>(this.extraVoiceConfigData.bind(this), this.extraVoiceConfigDataLength());
}
}

export class clz_Torappu_CharWordTableT implements flatbuffers.IGeneratedObject {
constructor(
  public charWords: (dict__string__clz_Torappu_CharWordDataT)[] = [],
  public charExtraWords: (dict__string__clz_Torappu_CharExtraWordDataT)[] = [],
  public voiceLangDict: (dict__string__clz_Torappu_VoiceLangDataT)[] = [],
  public defaultLangType: enum__Torappu_VoiceLangType = enum__Torappu_VoiceLangType.NONE,
  public newTagList: (string)[] = [],
  public voiceLangTypeDict: (dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataT)[] = [],
  public voiceLangGroupTypeDict: (dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataT)[] = [],
  public charDefaultTypeDict: (dict__string__enum__Torappu_VoiceLangTypeT)[] = [],
  public startTimeWithTypeDict: (dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataT)[] = [],
  public displayGroupTypeList: (enum__Torappu_VoiceLangGroupType)[] = [],
  public displayTypeList: (enum__Torappu_VoiceLangType)[] = [],
  public playVoiceRange: enum__Torappu_CharWordShowType = enum__Torappu_CharWordShowType.HOME_SHOW,
  public fesVoiceData: (dict__string__clz_Torappu_FestivalVoiceDataT)[] = [],
  public fesVoiceWeight: (dict__string__clz_Torappu_FestivalVoiceWeightDataT)[] = [],
  public extraVoiceConfigData: (dict__string__clz_Torappu_ExtraVoiceConfigDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const charWords = clz_Torappu_CharWordTable.createCharWordsVector(builder, builder.createObjectOffsetList(this.charWords));
  const charExtraWords = clz_Torappu_CharWordTable.createCharExtraWordsVector(builder, builder.createObjectOffsetList(this.charExtraWords));
  const voiceLangDict = clz_Torappu_CharWordTable.createVoiceLangDictVector(builder, builder.createObjectOffsetList(this.voiceLangDict));
  const newTagList = clz_Torappu_CharWordTable.createNewTagListVector(builder, builder.createObjectOffsetList(this.newTagList));
  const voiceLangTypeDict = clz_Torappu_CharWordTable.createVoiceLangTypeDictVector(builder, builder.createObjectOffsetList(this.voiceLangTypeDict));
  const voiceLangGroupTypeDict = clz_Torappu_CharWordTable.createVoiceLangGroupTypeDictVector(builder, builder.createObjectOffsetList(this.voiceLangGroupTypeDict));
  const charDefaultTypeDict = clz_Torappu_CharWordTable.createCharDefaultTypeDictVector(builder, builder.createObjectOffsetList(this.charDefaultTypeDict));
  const startTimeWithTypeDict = clz_Torappu_CharWordTable.createStartTimeWithTypeDictVector(builder, builder.createObjectOffsetList(this.startTimeWithTypeDict));
  const displayGroupTypeList = clz_Torappu_CharWordTable.createDisplayGroupTypeListVector(builder, this.displayGroupTypeList);
  const displayTypeList = clz_Torappu_CharWordTable.createDisplayTypeListVector(builder, this.displayTypeList);
  const fesVoiceData = clz_Torappu_CharWordTable.createFesVoiceDataVector(builder, builder.createObjectOffsetList(this.fesVoiceData));
  const fesVoiceWeight = clz_Torappu_CharWordTable.createFesVoiceWeightVector(builder, builder.createObjectOffsetList(this.fesVoiceWeight));
  const extraVoiceConfigData = clz_Torappu_CharWordTable.createExtraVoiceConfigDataVector(builder, builder.createObjectOffsetList(this.extraVoiceConfigData));

  return clz_Torappu_CharWordTable.createclz_Torappu_CharWordTable(builder,
    charWords,
    charExtraWords,
    voiceLangDict,
    this.defaultLangType,
    newTagList,
    voiceLangTypeDict,
    voiceLangGroupTypeDict,
    charDefaultTypeDict,
    startTimeWithTypeDict,
    displayGroupTypeList,
    displayTypeList,
    this.playVoiceRange,
    fesVoiceData,
    fesVoiceWeight,
    extraVoiceConfigData
  );
}
}
