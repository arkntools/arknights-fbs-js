// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_StoryData_Condition_StageCondition, clz_Torappu_StoryData_Condition_StageConditionT } from './clz-torappu-story-data-condition-stage-condition.js';


export class clz_Torappu_StoryData_Condition implements flatbuffers.IUnpackableObject<clz_Torappu_StoryData_ConditionT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_StoryData_Condition {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_StoryData_Condition(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StoryData_Condition):clz_Torappu_StoryData_Condition {
  return (obj || new clz_Torappu_StoryData_Condition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_StoryData_Condition(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StoryData_Condition):clz_Torappu_StoryData_Condition {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_StoryData_Condition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

minProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

minPlayerLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

requiredFlags(index: number):string
requiredFlags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
requiredFlags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

requiredFlagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

excludedFlags(index: number):string
excludedFlags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
excludedFlags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

excludedFlagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

requiredStages(index: number, obj?:clz_Torappu_StoryData_Condition_StageCondition):clz_Torappu_StoryData_Condition_StageCondition|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_StoryData_Condition_StageCondition()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

requiredStagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_StoryData_Condition(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addMinProgress(builder:flatbuffers.Builder, minProgress:number) {
  builder.addFieldInt32(0, minProgress, 0);
}

static addMaxProgress(builder:flatbuffers.Builder, maxProgress:number) {
  builder.addFieldInt32(1, maxProgress, 0);
}

static addMinPlayerLevel(builder:flatbuffers.Builder, minPlayerLevel:number) {
  builder.addFieldInt32(2, minPlayerLevel, 0);
}

static addRequiredFlags(builder:flatbuffers.Builder, requiredFlagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, requiredFlagsOffset, 0);
}

static createRequiredFlagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequiredFlagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExcludedFlags(builder:flatbuffers.Builder, excludedFlagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, excludedFlagsOffset, 0);
}

static createExcludedFlagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExcludedFlagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRequiredStages(builder:flatbuffers.Builder, requiredStagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, requiredStagesOffset, 0);
}

static createRequiredStagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequiredStagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_StoryData_Condition(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_StoryData_Condition(builder:flatbuffers.Builder, minProgress:number, maxProgress:number, minPlayerLevel:number, requiredFlagsOffset:flatbuffers.Offset, excludedFlagsOffset:flatbuffers.Offset, requiredStagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_StoryData_Condition.startclz_Torappu_StoryData_Condition(builder);
  clz_Torappu_StoryData_Condition.addMinProgress(builder, minProgress);
  clz_Torappu_StoryData_Condition.addMaxProgress(builder, maxProgress);
  clz_Torappu_StoryData_Condition.addMinPlayerLevel(builder, minPlayerLevel);
  clz_Torappu_StoryData_Condition.addRequiredFlags(builder, requiredFlagsOffset);
  clz_Torappu_StoryData_Condition.addExcludedFlags(builder, excludedFlagsOffset);
  clz_Torappu_StoryData_Condition.addRequiredStages(builder, requiredStagesOffset);
  return clz_Torappu_StoryData_Condition.endclz_Torappu_StoryData_Condition(builder);
}

unpack(): clz_Torappu_StoryData_ConditionT {
  return new clz_Torappu_StoryData_ConditionT(
    this.minProgress(),
    this.maxProgress(),
    this.minPlayerLevel(),
    this.bb!.createScalarList<string>(this.requiredFlags.bind(this), this.requiredFlagsLength()),
    this.bb!.createScalarList<string>(this.excludedFlags.bind(this), this.excludedFlagsLength()),
    this.bb!.createObjList<clz_Torappu_StoryData_Condition_StageCondition, clz_Torappu_StoryData_Condition_StageConditionT>(this.requiredStages.bind(this), this.requiredStagesLength())
  );
}


unpackTo(_o: clz_Torappu_StoryData_ConditionT): void {
  _o.minProgress = this.minProgress();
  _o.maxProgress = this.maxProgress();
  _o.minPlayerLevel = this.minPlayerLevel();
  _o.requiredFlags = this.bb!.createScalarList<string>(this.requiredFlags.bind(this), this.requiredFlagsLength());
  _o.excludedFlags = this.bb!.createScalarList<string>(this.excludedFlags.bind(this), this.excludedFlagsLength());
  _o.requiredStages = this.bb!.createObjList<clz_Torappu_StoryData_Condition_StageCondition, clz_Torappu_StoryData_Condition_StageConditionT>(this.requiredStages.bind(this), this.requiredStagesLength());
}
}

export class clz_Torappu_StoryData_ConditionT implements flatbuffers.IGeneratedObject {
constructor(
  public minProgress: number = 0,
  public maxProgress: number = 0,
  public minPlayerLevel: number = 0,
  public requiredFlags: (string)[] = [],
  public excludedFlags: (string)[] = [],
  public requiredStages: (clz_Torappu_StoryData_Condition_StageConditionT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const requiredFlags = clz_Torappu_StoryData_Condition.createRequiredFlagsVector(builder, builder.createObjectOffsetList(this.requiredFlags));
  const excludedFlags = clz_Torappu_StoryData_Condition.createExcludedFlagsVector(builder, builder.createObjectOffsetList(this.excludedFlags));
  const requiredStages = clz_Torappu_StoryData_Condition.createRequiredStagesVector(builder, builder.createObjectOffsetList(this.requiredStages));

  return clz_Torappu_StoryData_Condition.createclz_Torappu_StoryData_Condition(builder,
    this.minProgress,
    this.maxProgress,
    this.minPlayerLevel,
    requiredFlags,
    excludedFlags,
    requiredStages
  );
}
}
