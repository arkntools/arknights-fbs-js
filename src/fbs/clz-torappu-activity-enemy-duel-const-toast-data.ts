// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActivityEnemyDuelConstToastData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityEnemyDuelConstToastDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityEnemyDuelConstToastData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityEnemyDuelConstToastData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelConstToastData):clz_Torappu_ActivityEnemyDuelConstToastData {
  return (obj || new clz_Torappu_ActivityEnemyDuelConstToastData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityEnemyDuelConstToastData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelConstToastData):clz_Torappu_ActivityEnemyDuelConstToastData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityEnemyDuelConstToastData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

createRoomAliveFailed():string|null
createRoomAliveFailed(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createRoomAliveFailed(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

joinRoomAliveFailed():string|null
joinRoomAliveFailed(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
joinRoomAliveFailed(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

roomIdFormatError():string|null
roomIdFormatError(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roomIdFormatError(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

emptyRoomId():string|null
emptyRoomId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
emptyRoomId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

noRoom():string|null
noRoom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
noRoom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

continuousClicks():string|null
continuousClicks(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
continuousClicks(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

matchAliveFailed():string|null
matchAliveFailed(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matchAliveFailed(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

serverOverloaded():string|null
serverOverloaded(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serverOverloaded(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

matchTimeout():string|null
matchTimeout(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matchTimeout(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockMultiMode():string|null
unlockMultiMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockMultiMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockRoomMode():string|null
unlockRoomMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockRoomMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

addFriendInRoom():string|null
addFriendInRoom(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
addFriendInRoom(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

roomIdCopySuccess():string|null
roomIdCopySuccess(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roomIdCopySuccess(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

entryModeLock():string|null
entryModeLock(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryModeLock(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActivityEnemyDuelConstToastData(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addCreateRoomAliveFailed(builder:flatbuffers.Builder, createRoomAliveFailedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, createRoomAliveFailedOffset, 0);
}

static addJoinRoomAliveFailed(builder:flatbuffers.Builder, joinRoomAliveFailedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, joinRoomAliveFailedOffset, 0);
}

static addRoomIdFormatError(builder:flatbuffers.Builder, roomIdFormatErrorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, roomIdFormatErrorOffset, 0);
}

static addEmptyRoomId(builder:flatbuffers.Builder, emptyRoomIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, emptyRoomIdOffset, 0);
}

static addNoRoom(builder:flatbuffers.Builder, noRoomOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, noRoomOffset, 0);
}

static addContinuousClicks(builder:flatbuffers.Builder, continuousClicksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, continuousClicksOffset, 0);
}

static addMatchAliveFailed(builder:flatbuffers.Builder, matchAliveFailedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, matchAliveFailedOffset, 0);
}

static addServerOverloaded(builder:flatbuffers.Builder, serverOverloadedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, serverOverloadedOffset, 0);
}

static addMatchTimeout(builder:flatbuffers.Builder, matchTimeoutOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, matchTimeoutOffset, 0);
}

static addUnlockMultiMode(builder:flatbuffers.Builder, unlockMultiModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, unlockMultiModeOffset, 0);
}

static addUnlockRoomMode(builder:flatbuffers.Builder, unlockRoomModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, unlockRoomModeOffset, 0);
}

static addAddFriendInRoom(builder:flatbuffers.Builder, addFriendInRoomOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, addFriendInRoomOffset, 0);
}

static addRoomIdCopySuccess(builder:flatbuffers.Builder, roomIdCopySuccessOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, roomIdCopySuccessOffset, 0);
}

static addEntryModeLock(builder:flatbuffers.Builder, entryModeLockOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, entryModeLockOffset, 0);
}

static endclz_Torappu_ActivityEnemyDuelConstToastData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityEnemyDuelConstToastData(builder:flatbuffers.Builder, createRoomAliveFailedOffset:flatbuffers.Offset, joinRoomAliveFailedOffset:flatbuffers.Offset, roomIdFormatErrorOffset:flatbuffers.Offset, emptyRoomIdOffset:flatbuffers.Offset, noRoomOffset:flatbuffers.Offset, continuousClicksOffset:flatbuffers.Offset, matchAliveFailedOffset:flatbuffers.Offset, serverOverloadedOffset:flatbuffers.Offset, matchTimeoutOffset:flatbuffers.Offset, unlockMultiModeOffset:flatbuffers.Offset, unlockRoomModeOffset:flatbuffers.Offset, addFriendInRoomOffset:flatbuffers.Offset, roomIdCopySuccessOffset:flatbuffers.Offset, entryModeLockOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActivityEnemyDuelConstToastData.startclz_Torappu_ActivityEnemyDuelConstToastData(builder);
  clz_Torappu_ActivityEnemyDuelConstToastData.addCreateRoomAliveFailed(builder, createRoomAliveFailedOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addJoinRoomAliveFailed(builder, joinRoomAliveFailedOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addRoomIdFormatError(builder, roomIdFormatErrorOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addEmptyRoomId(builder, emptyRoomIdOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addNoRoom(builder, noRoomOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addContinuousClicks(builder, continuousClicksOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addMatchAliveFailed(builder, matchAliveFailedOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addServerOverloaded(builder, serverOverloadedOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addMatchTimeout(builder, matchTimeoutOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addUnlockMultiMode(builder, unlockMultiModeOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addUnlockRoomMode(builder, unlockRoomModeOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addAddFriendInRoom(builder, addFriendInRoomOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addRoomIdCopySuccess(builder, roomIdCopySuccessOffset);
  clz_Torappu_ActivityEnemyDuelConstToastData.addEntryModeLock(builder, entryModeLockOffset);
  return clz_Torappu_ActivityEnemyDuelConstToastData.endclz_Torappu_ActivityEnemyDuelConstToastData(builder);
}

unpack(): clz_Torappu_ActivityEnemyDuelConstToastDataT {
  return new clz_Torappu_ActivityEnemyDuelConstToastDataT(
    this.createRoomAliveFailed(),
    this.joinRoomAliveFailed(),
    this.roomIdFormatError(),
    this.emptyRoomId(),
    this.noRoom(),
    this.continuousClicks(),
    this.matchAliveFailed(),
    this.serverOverloaded(),
    this.matchTimeout(),
    this.unlockMultiMode(),
    this.unlockRoomMode(),
    this.addFriendInRoom(),
    this.roomIdCopySuccess(),
    this.entryModeLock()
  );
}


unpackTo(_o: clz_Torappu_ActivityEnemyDuelConstToastDataT): void {
  _o.createRoomAliveFailed = this.createRoomAliveFailed();
  _o.joinRoomAliveFailed = this.joinRoomAliveFailed();
  _o.roomIdFormatError = this.roomIdFormatError();
  _o.emptyRoomId = this.emptyRoomId();
  _o.noRoom = this.noRoom();
  _o.continuousClicks = this.continuousClicks();
  _o.matchAliveFailed = this.matchAliveFailed();
  _o.serverOverloaded = this.serverOverloaded();
  _o.matchTimeout = this.matchTimeout();
  _o.unlockMultiMode = this.unlockMultiMode();
  _o.unlockRoomMode = this.unlockRoomMode();
  _o.addFriendInRoom = this.addFriendInRoom();
  _o.roomIdCopySuccess = this.roomIdCopySuccess();
  _o.entryModeLock = this.entryModeLock();
}
}

export class clz_Torappu_ActivityEnemyDuelConstToastDataT implements flatbuffers.IGeneratedObject {
constructor(
  public createRoomAliveFailed: string|Uint8Array|null = null,
  public joinRoomAliveFailed: string|Uint8Array|null = null,
  public roomIdFormatError: string|Uint8Array|null = null,
  public emptyRoomId: string|Uint8Array|null = null,
  public noRoom: string|Uint8Array|null = null,
  public continuousClicks: string|Uint8Array|null = null,
  public matchAliveFailed: string|Uint8Array|null = null,
  public serverOverloaded: string|Uint8Array|null = null,
  public matchTimeout: string|Uint8Array|null = null,
  public unlockMultiMode: string|Uint8Array|null = null,
  public unlockRoomMode: string|Uint8Array|null = null,
  public addFriendInRoom: string|Uint8Array|null = null,
  public roomIdCopySuccess: string|Uint8Array|null = null,
  public entryModeLock: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const createRoomAliveFailed = (this.createRoomAliveFailed !== null ? builder.createString(this.createRoomAliveFailed!) : 0);
  const joinRoomAliveFailed = (this.joinRoomAliveFailed !== null ? builder.createString(this.joinRoomAliveFailed!) : 0);
  const roomIdFormatError = (this.roomIdFormatError !== null ? builder.createString(this.roomIdFormatError!) : 0);
  const emptyRoomId = (this.emptyRoomId !== null ? builder.createString(this.emptyRoomId!) : 0);
  const noRoom = (this.noRoom !== null ? builder.createString(this.noRoom!) : 0);
  const continuousClicks = (this.continuousClicks !== null ? builder.createString(this.continuousClicks!) : 0);
  const matchAliveFailed = (this.matchAliveFailed !== null ? builder.createString(this.matchAliveFailed!) : 0);
  const serverOverloaded = (this.serverOverloaded !== null ? builder.createString(this.serverOverloaded!) : 0);
  const matchTimeout = (this.matchTimeout !== null ? builder.createString(this.matchTimeout!) : 0);
  const unlockMultiMode = (this.unlockMultiMode !== null ? builder.createString(this.unlockMultiMode!) : 0);
  const unlockRoomMode = (this.unlockRoomMode !== null ? builder.createString(this.unlockRoomMode!) : 0);
  const addFriendInRoom = (this.addFriendInRoom !== null ? builder.createString(this.addFriendInRoom!) : 0);
  const roomIdCopySuccess = (this.roomIdCopySuccess !== null ? builder.createString(this.roomIdCopySuccess!) : 0);
  const entryModeLock = (this.entryModeLock !== null ? builder.createString(this.entryModeLock!) : 0);

  return clz_Torappu_ActivityEnemyDuelConstToastData.createclz_Torappu_ActivityEnemyDuelConstToastData(builder,
    createRoomAliveFailed,
    joinRoomAliveFailed,
    roomIdFormatError,
    emptyRoomId,
    noRoom,
    continuousClicks,
    matchAliveFailed,
    serverOverloaded,
    matchTimeout,
    unlockMultiMode,
    unlockRoomMode,
    addFriendInRoom,
    roomIdCopySuccess,
    entryModeLock
  );
}
}
