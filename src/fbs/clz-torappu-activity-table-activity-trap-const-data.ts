// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActivityTable_ActivityTrapConstData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityTable_ActivityTrapConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityTable_ActivityTrapConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityTable_ActivityTrapConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityTable_ActivityTrapConstData):clz_Torappu_ActivityTable_ActivityTrapConstData {
  return (obj || new clz_Torappu_ActivityTable_ActivityTrapConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityTable_ActivityTrapConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityTable_ActivityTrapConstData):clz_Torappu_ActivityTable_ActivityTrapConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityTable_ActivityTrapConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stageUnlockTrapDesc():string|null
stageUnlockTrapDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageUnlockTrapDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trapMaximum():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stageCanNotUseTrap(index: number):string
stageCanNotUseTrap(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stageCanNotUseTrap(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stageCanNotUseTrapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActivityTable_ActivityTrapConstData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStageUnlockTrapDesc(builder:flatbuffers.Builder, stageUnlockTrapDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stageUnlockTrapDescOffset, 0);
}

static addTrapMaximum(builder:flatbuffers.Builder, trapMaximum:number) {
  builder.addFieldInt32(1, trapMaximum, 0);
}

static addStageCanNotUseTrap(builder:flatbuffers.Builder, stageCanNotUseTrapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stageCanNotUseTrapOffset, 0);
}

static createStageCanNotUseTrapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStageCanNotUseTrapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActivityTable_ActivityTrapConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityTable_ActivityTrapConstData(builder:flatbuffers.Builder, stageUnlockTrapDescOffset:flatbuffers.Offset, trapMaximum:number, stageCanNotUseTrapOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActivityTable_ActivityTrapConstData.startclz_Torappu_ActivityTable_ActivityTrapConstData(builder);
  clz_Torappu_ActivityTable_ActivityTrapConstData.addStageUnlockTrapDesc(builder, stageUnlockTrapDescOffset);
  clz_Torappu_ActivityTable_ActivityTrapConstData.addTrapMaximum(builder, trapMaximum);
  clz_Torappu_ActivityTable_ActivityTrapConstData.addStageCanNotUseTrap(builder, stageCanNotUseTrapOffset);
  return clz_Torappu_ActivityTable_ActivityTrapConstData.endclz_Torappu_ActivityTable_ActivityTrapConstData(builder);
}

unpack(): clz_Torappu_ActivityTable_ActivityTrapConstDataT {
  return new clz_Torappu_ActivityTable_ActivityTrapConstDataT(
    this.stageUnlockTrapDesc(),
    this.trapMaximum(),
    this.bb!.createScalarList<string>(this.stageCanNotUseTrap.bind(this), this.stageCanNotUseTrapLength())
  );
}


unpackTo(_o: clz_Torappu_ActivityTable_ActivityTrapConstDataT): void {
  _o.stageUnlockTrapDesc = this.stageUnlockTrapDesc();
  _o.trapMaximum = this.trapMaximum();
  _o.stageCanNotUseTrap = this.bb!.createScalarList<string>(this.stageCanNotUseTrap.bind(this), this.stageCanNotUseTrapLength());
}
}

export class clz_Torappu_ActivityTable_ActivityTrapConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public stageUnlockTrapDesc: string|Uint8Array|null = null,
  public trapMaximum: number = 0,
  public stageCanNotUseTrap: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const stageUnlockTrapDesc = (this.stageUnlockTrapDesc !== null ? builder.createString(this.stageUnlockTrapDesc!) : 0);
  const stageCanNotUseTrap = clz_Torappu_ActivityTable_ActivityTrapConstData.createStageCanNotUseTrapVector(builder, builder.createObjectOffsetList(this.stageCanNotUseTrap));

  return clz_Torappu_ActivityTable_ActivityTrapConstData.createclz_Torappu_ActivityTable_ActivityTrapConstData(builder,
    stageUnlockTrapDesc,
    this.trapMaximum,
    stageCanNotUseTrap
  );
}
}
