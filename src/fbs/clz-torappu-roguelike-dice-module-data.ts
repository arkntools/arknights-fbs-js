// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RoguelikeDicePredefineData, clz_Torappu_RoguelikeDicePredefineDataT } from './clz-torappu-roguelike-dice-predefine-data.js';
import { dict__string__clz_Torappu_RoguelikeDiceData, dict__string__clz_Torappu_RoguelikeDiceDataT } from './dict--string--clz-torappu-roguelike-dice-data.js';
import { dict__string__clz_Torappu_RoguelikeDiceRuleData, dict__string__clz_Torappu_RoguelikeDiceRuleDataT } from './dict--string--clz-torappu-roguelike-dice-rule-data.js';
import { dict__string__clz_Torappu_RoguelikeDiceRuleGroupData, dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataT } from './dict--string--clz-torappu-roguelike-dice-rule-group-data.js';
import { dict__string__string, dict__string__stringT } from './dict--string--string.js';


export class clz_Torappu_RoguelikeDiceModuleData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeDiceModuleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeDiceModuleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeDiceModuleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeDiceModuleData):clz_Torappu_RoguelikeDiceModuleData {
  return (obj || new clz_Torappu_RoguelikeDiceModuleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeDiceModuleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeDiceModuleData):clz_Torappu_RoguelikeDiceModuleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeDiceModuleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dice(index: number, obj?:dict__string__clz_Torappu_RoguelikeDiceData):dict__string__clz_Torappu_RoguelikeDiceData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new dict__string__clz_Torappu_RoguelikeDiceData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

diceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

diceEvents(index: number, obj?:dict__string__clz_Torappu_RoguelikeDiceRuleData):dict__string__clz_Torappu_RoguelikeDiceRuleData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_RoguelikeDiceRuleData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

diceEventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

diceChoices(index: number, obj?:dict__string__string):dict__string__string|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

diceChoicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

diceRuleGroups(index: number, obj?:dict__string__clz_Torappu_RoguelikeDiceRuleGroupData):dict__string__clz_Torappu_RoguelikeDiceRuleGroupData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new dict__string__clz_Torappu_RoguelikeDiceRuleGroupData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

diceRuleGroupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dicePredefines(index: number, obj?:clz_Torappu_RoguelikeDicePredefineData):clz_Torappu_RoguelikeDicePredefineData|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_RoguelikeDicePredefineData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dicePredefinesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RoguelikeDiceModuleData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addDice(builder:flatbuffers.Builder, diceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, diceOffset, 0);
}

static createDiceVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDiceEvents(builder:flatbuffers.Builder, diceEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, diceEventsOffset, 0);
}

static createDiceEventsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiceEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDiceChoices(builder:flatbuffers.Builder, diceChoicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, diceChoicesOffset, 0);
}

static createDiceChoicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiceChoicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDiceRuleGroups(builder:flatbuffers.Builder, diceRuleGroupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, diceRuleGroupsOffset, 0);
}

static createDiceRuleGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiceRuleGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDicePredefines(builder:flatbuffers.Builder, dicePredefinesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, dicePredefinesOffset, 0);
}

static createDicePredefinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDicePredefinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_RoguelikeDiceModuleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeDiceModuleData(builder:flatbuffers.Builder, diceOffset:flatbuffers.Offset, diceEventsOffset:flatbuffers.Offset, diceChoicesOffset:flatbuffers.Offset, diceRuleGroupsOffset:flatbuffers.Offset, dicePredefinesOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeDiceModuleData.startclz_Torappu_RoguelikeDiceModuleData(builder);
  clz_Torappu_RoguelikeDiceModuleData.addDice(builder, diceOffset);
  clz_Torappu_RoguelikeDiceModuleData.addDiceEvents(builder, diceEventsOffset);
  clz_Torappu_RoguelikeDiceModuleData.addDiceChoices(builder, diceChoicesOffset);
  clz_Torappu_RoguelikeDiceModuleData.addDiceRuleGroups(builder, diceRuleGroupsOffset);
  clz_Torappu_RoguelikeDiceModuleData.addDicePredefines(builder, dicePredefinesOffset);
  return clz_Torappu_RoguelikeDiceModuleData.endclz_Torappu_RoguelikeDiceModuleData(builder);
}

unpack(): clz_Torappu_RoguelikeDiceModuleDataT {
  return new clz_Torappu_RoguelikeDiceModuleDataT(
    this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeDiceData, dict__string__clz_Torappu_RoguelikeDiceDataT>(this.dice.bind(this), this.diceLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeDiceRuleData, dict__string__clz_Torappu_RoguelikeDiceRuleDataT>(this.diceEvents.bind(this), this.diceEventsLength()),
    this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.diceChoices.bind(this), this.diceChoicesLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeDiceRuleGroupData, dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataT>(this.diceRuleGroups.bind(this), this.diceRuleGroupsLength()),
    this.bb!.createObjList<clz_Torappu_RoguelikeDicePredefineData, clz_Torappu_RoguelikeDicePredefineDataT>(this.dicePredefines.bind(this), this.dicePredefinesLength())
  );
}


unpackTo(_o: clz_Torappu_RoguelikeDiceModuleDataT): void {
  _o.dice = this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeDiceData, dict__string__clz_Torappu_RoguelikeDiceDataT>(this.dice.bind(this), this.diceLength());
  _o.diceEvents = this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeDiceRuleData, dict__string__clz_Torappu_RoguelikeDiceRuleDataT>(this.diceEvents.bind(this), this.diceEventsLength());
  _o.diceChoices = this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.diceChoices.bind(this), this.diceChoicesLength());
  _o.diceRuleGroups = this.bb!.createObjList<dict__string__clz_Torappu_RoguelikeDiceRuleGroupData, dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataT>(this.diceRuleGroups.bind(this), this.diceRuleGroupsLength());
  _o.dicePredefines = this.bb!.createObjList<clz_Torappu_RoguelikeDicePredefineData, clz_Torappu_RoguelikeDicePredefineDataT>(this.dicePredefines.bind(this), this.dicePredefinesLength());
}
}

export class clz_Torappu_RoguelikeDiceModuleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public dice: (dict__string__clz_Torappu_RoguelikeDiceDataT)[] = [],
  public diceEvents: (dict__string__clz_Torappu_RoguelikeDiceRuleDataT)[] = [],
  public diceChoices: (dict__string__stringT)[] = [],
  public diceRuleGroups: (dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataT)[] = [],
  public dicePredefines: (clz_Torappu_RoguelikeDicePredefineDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dice = clz_Torappu_RoguelikeDiceModuleData.createDiceVector(builder, builder.createObjectOffsetList(this.dice));
  const diceEvents = clz_Torappu_RoguelikeDiceModuleData.createDiceEventsVector(builder, builder.createObjectOffsetList(this.diceEvents));
  const diceChoices = clz_Torappu_RoguelikeDiceModuleData.createDiceChoicesVector(builder, builder.createObjectOffsetList(this.diceChoices));
  const diceRuleGroups = clz_Torappu_RoguelikeDiceModuleData.createDiceRuleGroupsVector(builder, builder.createObjectOffsetList(this.diceRuleGroups));
  const dicePredefines = clz_Torappu_RoguelikeDiceModuleData.createDicePredefinesVector(builder, builder.createObjectOffsetList(this.dicePredefines));

  return clz_Torappu_RoguelikeDiceModuleData.createclz_Torappu_RoguelikeDiceModuleData(builder,
    dice,
    diceEvents,
    diceChoices,
    diceRuleGroups,
    dicePredefines
  );
}
}
