// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_RoguelikeChaosModuleConsts implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeChaosModuleConstsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeChaosModuleConsts {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeChaosModuleConsts(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeChaosModuleConsts):clz_Torappu_RoguelikeChaosModuleConsts {
  return (obj || new clz_Torappu_RoguelikeChaosModuleConsts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeChaosModuleConsts(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeChaosModuleConsts):clz_Torappu_RoguelikeChaosModuleConsts {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeChaosModuleConsts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxChaosLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxChaosSlot():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

chaosNotMaxDescription():string|null
chaosNotMaxDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chaosNotMaxDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

chaosMaxDescription():string|null
chaosMaxDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chaosMaxDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

chaosPredictDescription():string|null
chaosPredictDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chaosPredictDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_RoguelikeChaosModuleConsts(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addMaxChaosLevel(builder:flatbuffers.Builder, maxChaosLevel:number) {
  builder.addFieldInt32(0, maxChaosLevel, 0);
}

static addMaxChaosSlot(builder:flatbuffers.Builder, maxChaosSlot:number) {
  builder.addFieldInt32(1, maxChaosSlot, 0);
}

static addChaosNotMaxDescription(builder:flatbuffers.Builder, chaosNotMaxDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, chaosNotMaxDescriptionOffset, 0);
}

static addChaosMaxDescription(builder:flatbuffers.Builder, chaosMaxDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, chaosMaxDescriptionOffset, 0);
}

static addChaosPredictDescription(builder:flatbuffers.Builder, chaosPredictDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, chaosPredictDescriptionOffset, 0);
}

static endclz_Torappu_RoguelikeChaosModuleConsts(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeChaosModuleConsts(builder:flatbuffers.Builder, maxChaosLevel:number, maxChaosSlot:number, chaosNotMaxDescriptionOffset:flatbuffers.Offset, chaosMaxDescriptionOffset:flatbuffers.Offset, chaosPredictDescriptionOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeChaosModuleConsts.startclz_Torappu_RoguelikeChaosModuleConsts(builder);
  clz_Torappu_RoguelikeChaosModuleConsts.addMaxChaosLevel(builder, maxChaosLevel);
  clz_Torappu_RoguelikeChaosModuleConsts.addMaxChaosSlot(builder, maxChaosSlot);
  clz_Torappu_RoguelikeChaosModuleConsts.addChaosNotMaxDescription(builder, chaosNotMaxDescriptionOffset);
  clz_Torappu_RoguelikeChaosModuleConsts.addChaosMaxDescription(builder, chaosMaxDescriptionOffset);
  clz_Torappu_RoguelikeChaosModuleConsts.addChaosPredictDescription(builder, chaosPredictDescriptionOffset);
  return clz_Torappu_RoguelikeChaosModuleConsts.endclz_Torappu_RoguelikeChaosModuleConsts(builder);
}

unpack(): clz_Torappu_RoguelikeChaosModuleConstsT {
  return new clz_Torappu_RoguelikeChaosModuleConstsT(
    this.maxChaosLevel(),
    this.maxChaosSlot(),
    this.chaosNotMaxDescription(),
    this.chaosMaxDescription(),
    this.chaosPredictDescription()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeChaosModuleConstsT): void {
  _o.maxChaosLevel = this.maxChaosLevel();
  _o.maxChaosSlot = this.maxChaosSlot();
  _o.chaosNotMaxDescription = this.chaosNotMaxDescription();
  _o.chaosMaxDescription = this.chaosMaxDescription();
  _o.chaosPredictDescription = this.chaosPredictDescription();
}
}

export class clz_Torappu_RoguelikeChaosModuleConstsT implements flatbuffers.IGeneratedObject {
constructor(
  public maxChaosLevel: number = 0,
  public maxChaosSlot: number = 0,
  public chaosNotMaxDescription: string|Uint8Array|null = null,
  public chaosMaxDescription: string|Uint8Array|null = null,
  public chaosPredictDescription: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const chaosNotMaxDescription = (this.chaosNotMaxDescription !== null ? builder.createString(this.chaosNotMaxDescription!) : 0);
  const chaosMaxDescription = (this.chaosMaxDescription !== null ? builder.createString(this.chaosMaxDescription!) : 0);
  const chaosPredictDescription = (this.chaosPredictDescription !== null ? builder.createString(this.chaosPredictDescription!) : 0);

  return clz_Torappu_RoguelikeChaosModuleConsts.createclz_Torappu_RoguelikeChaosModuleConsts(builder,
    this.maxChaosLevel,
    this.maxChaosSlot,
    chaosNotMaxDescription,
    chaosMaxDescription,
    chaosPredictDescription
  );
}
}
