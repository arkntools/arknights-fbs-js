// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class dict__int__int implements flatbuffers.IUnpackableObject<dict__int__intT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):dict__int__int {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsdict__int__int(bb:flatbuffers.ByteBuffer, obj?:dict__int__int):dict__int__int {
  return (obj || new dict__int__int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsdict__int__int(bb:flatbuffers.ByteBuffer, obj?:dict__int__int):dict__int__int {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new dict__int__int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startdict__int__int(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:number) {
  builder.addFieldInt32(0, key, 0);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt32(1, value, 0);
}

static enddict__int__int(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createdict__int__int(builder:flatbuffers.Builder, key:number, value:number):flatbuffers.Offset {
  dict__int__int.startdict__int__int(builder);
  dict__int__int.addKey(builder, key);
  dict__int__int.addValue(builder, value);
  return dict__int__int.enddict__int__int(builder);
}

unpack(): dict__int__intT {
  return new dict__int__intT(
    this.key(),
    this.value()
  );
}


unpackTo(_o: dict__int__intT): void {
  _o.key = this.key();
  _o.value = this.value();
}
}

export class dict__int__intT implements flatbuffers.IGeneratedObject {
constructor(
  public key: number = 0,
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return dict__int__int.createdict__int__int(builder,
    this.key,
    this.value
  );
}
}
