// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActAutoChessData_ActAutoChessBandData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessBandDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessBandData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessBandData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBandData):clz_Torappu_ActAutoChessData_ActAutoChessBandData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBandData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessBandData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBandData):clz_Torappu_ActAutoChessData_ActAutoChessBandData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBandData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bandId():string|null
bandId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bandId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

modeTypeList(index: number):string
modeTypeList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
modeTypeList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

modeTypeListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bandDesc():string|null
bandDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bandDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

totalHp():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

effectId():string|null
effectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

victorCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bandRewardModulus():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessBandData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addBandId(builder:flatbuffers.Builder, bandIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bandIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addModeTypeList(builder:flatbuffers.Builder, modeTypeListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, modeTypeListOffset, 0);
}

static createModeTypeListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startModeTypeListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBandDesc(builder:flatbuffers.Builder, bandDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bandDescOffset, 0);
}

static addTotalHp(builder:flatbuffers.Builder, totalHp:number) {
  builder.addFieldInt32(4, totalHp, 0);
}

static addEffectId(builder:flatbuffers.Builder, effectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, effectIdOffset, 0);
}

static addVictorCount(builder:flatbuffers.Builder, victorCount:number) {
  builder.addFieldInt32(6, victorCount, 0);
}

static addBandRewardModulus(builder:flatbuffers.Builder, bandRewardModulus:number) {
  builder.addFieldFloat32(7, bandRewardModulus, 0.0);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessBandData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessBandData(builder:flatbuffers.Builder, bandIdOffset:flatbuffers.Offset, sortId:number, modeTypeListOffset:flatbuffers.Offset, bandDescOffset:flatbuffers.Offset, totalHp:number, effectIdOffset:flatbuffers.Offset, victorCount:number, bandRewardModulus:number):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.startclz_Torappu_ActAutoChessData_ActAutoChessBandData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addBandId(builder, bandIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addSortId(builder, sortId);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addModeTypeList(builder, modeTypeListOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addBandDesc(builder, bandDescOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addTotalHp(builder, totalHp);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addEffectId(builder, effectIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addVictorCount(builder, victorCount);
  clz_Torappu_ActAutoChessData_ActAutoChessBandData.addBandRewardModulus(builder, bandRewardModulus);
  return clz_Torappu_ActAutoChessData_ActAutoChessBandData.endclz_Torappu_ActAutoChessData_ActAutoChessBandData(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessBandDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessBandDataT(
    this.bandId(),
    this.sortId(),
    this.bb!.createScalarList<string>(this.modeTypeList.bind(this), this.modeTypeListLength()),
    this.bandDesc(),
    this.totalHp(),
    this.effectId(),
    this.victorCount(),
    this.bandRewardModulus()
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessBandDataT): void {
  _o.bandId = this.bandId();
  _o.sortId = this.sortId();
  _o.modeTypeList = this.bb!.createScalarList<string>(this.modeTypeList.bind(this), this.modeTypeListLength());
  _o.bandDesc = this.bandDesc();
  _o.totalHp = this.totalHp();
  _o.effectId = this.effectId();
  _o.victorCount = this.victorCount();
  _o.bandRewardModulus = this.bandRewardModulus();
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessBandDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bandId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public modeTypeList: (string)[] = [],
  public bandDesc: string|Uint8Array|null = null,
  public totalHp: number = 0,
  public effectId: string|Uint8Array|null = null,
  public victorCount: number = 0,
  public bandRewardModulus: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bandId = (this.bandId !== null ? builder.createString(this.bandId!) : 0);
  const modeTypeList = clz_Torappu_ActAutoChessData_ActAutoChessBandData.createModeTypeListVector(builder, builder.createObjectOffsetList(this.modeTypeList));
  const bandDesc = (this.bandDesc !== null ? builder.createString(this.bandDesc!) : 0);
  const effectId = (this.effectId !== null ? builder.createString(this.effectId!) : 0);

  return clz_Torappu_ActAutoChessData_ActAutoChessBandData.createclz_Torappu_ActAutoChessData_ActAutoChessBandData(builder,
    bandId,
    this.sortId,
    modeTypeList,
    bandDesc,
    this.totalHp,
    effectId,
    this.victorCount,
    this.bandRewardModulus
  );
}
}
