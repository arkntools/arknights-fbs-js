// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_SandboxV2DiffModeData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2DiffModeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2DiffModeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2DiffModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2DiffModeData):clz_Torappu_SandboxV2DiffModeData {
  return (obj || new clz_Torappu_SandboxV2DiffModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2DiffModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2DiffModeData):clz_Torappu_SandboxV2DiffModeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2DiffModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

buffList(index: number):string
buffList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
buffList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

buffListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

detailList():string|null
detailList(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
detailList(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SandboxV2DiffModeData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, titleOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descOffset, 0);
}

static addBuffList(builder:flatbuffers.Builder, buffListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, buffListOffset, 0);
}

static createBuffListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBuffListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDetailList(builder:flatbuffers.Builder, detailListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, detailListOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(4, sortId, 0);
}

static endclz_Torappu_SandboxV2DiffModeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2DiffModeData(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, buffListOffset:flatbuffers.Offset, detailListOffset:flatbuffers.Offset, sortId:number):flatbuffers.Offset {
  clz_Torappu_SandboxV2DiffModeData.startclz_Torappu_SandboxV2DiffModeData(builder);
  clz_Torappu_SandboxV2DiffModeData.addTitle(builder, titleOffset);
  clz_Torappu_SandboxV2DiffModeData.addDesc(builder, descOffset);
  clz_Torappu_SandboxV2DiffModeData.addBuffList(builder, buffListOffset);
  clz_Torappu_SandboxV2DiffModeData.addDetailList(builder, detailListOffset);
  clz_Torappu_SandboxV2DiffModeData.addSortId(builder, sortId);
  return clz_Torappu_SandboxV2DiffModeData.endclz_Torappu_SandboxV2DiffModeData(builder);
}

unpack(): clz_Torappu_SandboxV2DiffModeDataT {
  return new clz_Torappu_SandboxV2DiffModeDataT(
    this.title(),
    this.desc(),
    this.bb!.createScalarList<string>(this.buffList.bind(this), this.buffListLength()),
    this.detailList(),
    this.sortId()
  );
}


unpackTo(_o: clz_Torappu_SandboxV2DiffModeDataT): void {
  _o.title = this.title();
  _o.desc = this.desc();
  _o.buffList = this.bb!.createScalarList<string>(this.buffList.bind(this), this.buffListLength());
  _o.detailList = this.detailList();
  _o.sortId = this.sortId();
}
}

export class clz_Torappu_SandboxV2DiffModeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public title: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public buffList: (string)[] = [],
  public detailList: string|Uint8Array|null = null,
  public sortId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const title = (this.title !== null ? builder.createString(this.title!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const buffList = clz_Torappu_SandboxV2DiffModeData.createBuffListVector(builder, builder.createObjectOffsetList(this.buffList));
  const detailList = (this.detailList !== null ? builder.createString(this.detailList!) : 0);

  return clz_Torappu_SandboxV2DiffModeData.createclz_Torappu_SandboxV2DiffModeData(builder,
    title,
    desc,
    buffList,
    detailList,
    this.sortId
  );
}
}
