// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_CharacterData_PowerData implements flatbuffers.IUnpackableObject<clz_Torappu_CharacterData_PowerDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_CharacterData_PowerData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_CharacterData_PowerData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharacterData_PowerData):clz_Torappu_CharacterData_PowerData {
  return (obj || new clz_Torappu_CharacterData_PowerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_CharacterData_PowerData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharacterData_PowerData):clz_Torappu_CharacterData_PowerData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_CharacterData_PowerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nationId():string|null
nationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupId():string|null
groupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamId():string|null
teamId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_CharacterData_PowerData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addNationId(builder:flatbuffers.Builder, nationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nationIdOffset, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, groupIdOffset, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, teamIdOffset, 0);
}

static endclz_Torappu_CharacterData_PowerData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_CharacterData_PowerData(builder:flatbuffers.Builder, nationIdOffset:flatbuffers.Offset, groupIdOffset:flatbuffers.Offset, teamIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_CharacterData_PowerData.startclz_Torappu_CharacterData_PowerData(builder);
  clz_Torappu_CharacterData_PowerData.addNationId(builder, nationIdOffset);
  clz_Torappu_CharacterData_PowerData.addGroupId(builder, groupIdOffset);
  clz_Torappu_CharacterData_PowerData.addTeamId(builder, teamIdOffset);
  return clz_Torappu_CharacterData_PowerData.endclz_Torappu_CharacterData_PowerData(builder);
}

unpack(): clz_Torappu_CharacterData_PowerDataT {
  return new clz_Torappu_CharacterData_PowerDataT(
    this.nationId(),
    this.groupId(),
    this.teamId()
  );
}


unpackTo(_o: clz_Torappu_CharacterData_PowerDataT): void {
  _o.nationId = this.nationId();
  _o.groupId = this.groupId();
  _o.teamId = this.teamId();
}
}

export class clz_Torappu_CharacterData_PowerDataT implements flatbuffers.IGeneratedObject {
constructor(
  public nationId: string|Uint8Array|null = null,
  public groupId: string|Uint8Array|null = null,
  public teamId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const nationId = (this.nationId !== null ? builder.createString(this.nationId!) : 0);
  const groupId = (this.groupId !== null ? builder.createString(this.groupId!) : 0);
  const teamId = (this.teamId !== null ? builder.createString(this.teamId!) : 0);

  return clz_Torappu_CharacterData_PowerData.createclz_Torappu_CharacterData_PowerData(builder,
    nationId,
    groupId,
    teamId
  );
}
}
