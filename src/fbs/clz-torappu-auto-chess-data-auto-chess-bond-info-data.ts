// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_AutoChessBondType } from './enum--torappu-auto-chess-bond-type.js';


export class clz_Torappu_AutoChessData_AutoChessBondInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessBondInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessBondInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessBondInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessBondInfoData):clz_Torappu_AutoChessData_AutoChessBondInfoData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessBondInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessBondInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessBondInfoData):clz_Torappu_AutoChessData_AutoChessBondInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessBondInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bondId():string|null
bondId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bondId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bondType():enum__Torappu_AutoChessBondType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_AutoChessBondType.NONE;
}

powerIdList(index: number):string
powerIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
powerIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

powerIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

icon():string|null
icon(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
icon(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isPower():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bondOrder():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_AutoChessData_AutoChessBondInfoData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBondId(builder:flatbuffers.Builder, bondIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bondIdOffset, 0);
}

static addBondType(builder:flatbuffers.Builder, bondType:enum__Torappu_AutoChessBondType) {
  builder.addFieldInt32(1, bondType, enum__Torappu_AutoChessBondType.NONE);
}

static addPowerIdList(builder:flatbuffers.Builder, powerIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, powerIdListOffset, 0);
}

static createPowerIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPowerIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addIcon(builder:flatbuffers.Builder, iconOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, iconOffset, 0);
}

static addIsPower(builder:flatbuffers.Builder, isPower:boolean) {
  builder.addFieldInt8(5, +isPower, +false);
}

static addBondOrder(builder:flatbuffers.Builder, bondOrder:number) {
  builder.addFieldInt32(6, bondOrder, 0);
}

static endclz_Torappu_AutoChessData_AutoChessBondInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessBondInfoData(builder:flatbuffers.Builder, bondIdOffset:flatbuffers.Offset, bondType:enum__Torappu_AutoChessBondType, powerIdListOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, iconOffset:flatbuffers.Offset, isPower:boolean, bondOrder:number):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessBondInfoData.startclz_Torappu_AutoChessData_AutoChessBondInfoData(builder);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addBondId(builder, bondIdOffset);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addBondType(builder, bondType);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addPowerIdList(builder, powerIdListOffset);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addName(builder, nameOffset);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addIcon(builder, iconOffset);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addIsPower(builder, isPower);
  clz_Torappu_AutoChessData_AutoChessBondInfoData.addBondOrder(builder, bondOrder);
  return clz_Torappu_AutoChessData_AutoChessBondInfoData.endclz_Torappu_AutoChessData_AutoChessBondInfoData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessBondInfoDataT {
  return new clz_Torappu_AutoChessData_AutoChessBondInfoDataT(
    this.bondId(),
    this.bondType(),
    this.bb!.createScalarList<string>(this.powerIdList.bind(this), this.powerIdListLength()),
    this.name(),
    this.icon(),
    this.isPower(),
    this.bondOrder()
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessBondInfoDataT): void {
  _o.bondId = this.bondId();
  _o.bondType = this.bondType();
  _o.powerIdList = this.bb!.createScalarList<string>(this.powerIdList.bind(this), this.powerIdListLength());
  _o.name = this.name();
  _o.icon = this.icon();
  _o.isPower = this.isPower();
  _o.bondOrder = this.bondOrder();
}
}

export class clz_Torappu_AutoChessData_AutoChessBondInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bondId: string|Uint8Array|null = null,
  public bondType: enum__Torappu_AutoChessBondType = enum__Torappu_AutoChessBondType.NONE,
  public powerIdList: (string)[] = [],
  public name: string|Uint8Array|null = null,
  public icon: string|Uint8Array|null = null,
  public isPower: boolean = false,
  public bondOrder: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bondId = (this.bondId !== null ? builder.createString(this.bondId!) : 0);
  const powerIdList = clz_Torappu_AutoChessData_AutoChessBondInfoData.createPowerIdListVector(builder, builder.createObjectOffsetList(this.powerIdList));
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const icon = (this.icon !== null ? builder.createString(this.icon!) : 0);

  return clz_Torappu_AutoChessData_AutoChessBondInfoData.createclz_Torappu_AutoChessData_AutoChessBondInfoData(builder,
    bondId,
    this.bondType,
    powerIdList,
    name,
    icon,
    this.isPower,
    this.bondOrder
  );
}
}
