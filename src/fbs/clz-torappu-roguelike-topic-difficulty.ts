// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement, clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementT } from './clz-torappu-roguelike-topic-difficulty-rule-desc-replacement.js';
import { enum__Torappu_RoguelikeTopicDifficultyWarningType } from './enum--torappu-roguelike-topic-difficulty-warning-type.js';
import { enum__Torappu_RoguelikeTopicMode } from './enum--torappu-roguelike-topic-mode.js';


export class clz_Torappu_RoguelikeTopicDifficulty implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeTopicDifficultyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeTopicDifficulty {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeTopicDifficulty(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeTopicDifficulty):clz_Torappu_RoguelikeTopicDifficulty {
  return (obj || new clz_Torappu_RoguelikeTopicDifficulty()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeTopicDifficulty(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeTopicDifficulty):clz_Torappu_RoguelikeTopicDifficulty {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeTopicDifficulty()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

modeDifficulty():enum__Torappu_RoguelikeTopicMode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeTopicMode.NONE;
}

grade():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nameImage():string|null
nameImage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nameImage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subName():string|null
subName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enrollId():string|null
enrollId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enrollId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

haveInitialRelicIcon():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scoreFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

canUnlockItem():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

doMonthTask():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

ruleDesc():string|null
ruleDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ruleDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ruleDescReplacements(index: number, obj?:clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement):clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ruleDescReplacementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

failTitle():string|null
failTitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
failTitle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

failImageId():string|null
failImageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
failImageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

failForceDesc():string|null
failForceDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
failForceDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

equivalentGrade():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bpValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bossValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

addDesc():string|null
addDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
addDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

warningType():enum__Torappu_RoguelikeTopicDifficultyWarningType {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeTopicDifficultyWarningType.NONE;
}

unlockText():string|null
unlockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

displayIconId():string|null
displayIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hideEndingStory():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_RoguelikeTopicDifficulty(builder:flatbuffers.Builder) {
  builder.startObject(25);
}

static addModeDifficulty(builder:flatbuffers.Builder, modeDifficulty:enum__Torappu_RoguelikeTopicMode) {
  builder.addFieldInt32(0, modeDifficulty, enum__Torappu_RoguelikeTopicMode.NONE);
}

static addGrade(builder:flatbuffers.Builder, grade:number) {
  builder.addFieldInt32(1, grade, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addNameImage(builder:flatbuffers.Builder, nameImageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameImageOffset, 0);
}

static addSubName(builder:flatbuffers.Builder, subNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, subNameOffset, 0);
}

static addEnrollId(builder:flatbuffers.Builder, enrollIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, enrollIdOffset, 0);
}

static addHaveInitialRelicIcon(builder:flatbuffers.Builder, haveInitialRelicIcon:boolean) {
  builder.addFieldInt8(6, +haveInitialRelicIcon, +false);
}

static addScoreFactor(builder:flatbuffers.Builder, scoreFactor:number) {
  builder.addFieldFloat32(7, scoreFactor, 0.0);
}

static addCanUnlockItem(builder:flatbuffers.Builder, canUnlockItem:boolean) {
  builder.addFieldInt8(8, +canUnlockItem, +false);
}

static addDoMonthTask(builder:flatbuffers.Builder, doMonthTask:boolean) {
  builder.addFieldInt8(9, +doMonthTask, +false);
}

static addRuleDesc(builder:flatbuffers.Builder, ruleDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, ruleDescOffset, 0);
}

static addRuleDescReplacements(builder:flatbuffers.Builder, ruleDescReplacementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, ruleDescReplacementsOffset, 0);
}

static createRuleDescReplacementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRuleDescReplacementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFailTitle(builder:flatbuffers.Builder, failTitleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, failTitleOffset, 0);
}

static addFailImageId(builder:flatbuffers.Builder, failImageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, failImageIdOffset, 0);
}

static addFailForceDesc(builder:flatbuffers.Builder, failForceDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, failForceDescOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(15, sortId, 0);
}

static addEquivalentGrade(builder:flatbuffers.Builder, equivalentGrade:number) {
  builder.addFieldInt32(16, equivalentGrade, 0);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, colorOffset, 0);
}

static addBpValue(builder:flatbuffers.Builder, bpValue:number) {
  builder.addFieldInt32(18, bpValue, 0);
}

static addBossValue(builder:flatbuffers.Builder, bossValue:number) {
  builder.addFieldInt32(19, bossValue, 0);
}

static addAddDesc(builder:flatbuffers.Builder, addDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, addDescOffset, 0);
}

static addWarningType(builder:flatbuffers.Builder, warningType:enum__Torappu_RoguelikeTopicDifficultyWarningType) {
  builder.addFieldInt32(21, warningType, enum__Torappu_RoguelikeTopicDifficultyWarningType.NONE);
}

static addUnlockText(builder:flatbuffers.Builder, unlockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, unlockTextOffset, 0);
}

static addDisplayIconId(builder:flatbuffers.Builder, displayIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, displayIconIdOffset, 0);
}

static addHideEndingStory(builder:flatbuffers.Builder, hideEndingStory:boolean) {
  builder.addFieldInt8(24, +hideEndingStory, +false);
}

static endclz_Torappu_RoguelikeTopicDifficulty(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeTopicDifficulty(builder:flatbuffers.Builder, modeDifficulty:enum__Torappu_RoguelikeTopicMode, grade:number, nameOffset:flatbuffers.Offset, nameImageOffset:flatbuffers.Offset, subNameOffset:flatbuffers.Offset, enrollIdOffset:flatbuffers.Offset, haveInitialRelicIcon:boolean, scoreFactor:number, canUnlockItem:boolean, doMonthTask:boolean, ruleDescOffset:flatbuffers.Offset, ruleDescReplacementsOffset:flatbuffers.Offset, failTitleOffset:flatbuffers.Offset, failImageIdOffset:flatbuffers.Offset, failForceDescOffset:flatbuffers.Offset, sortId:number, equivalentGrade:number, colorOffset:flatbuffers.Offset, bpValue:number, bossValue:number, addDescOffset:flatbuffers.Offset, warningType:enum__Torappu_RoguelikeTopicDifficultyWarningType, unlockTextOffset:flatbuffers.Offset, displayIconIdOffset:flatbuffers.Offset, hideEndingStory:boolean):flatbuffers.Offset {
  clz_Torappu_RoguelikeTopicDifficulty.startclz_Torappu_RoguelikeTopicDifficulty(builder);
  clz_Torappu_RoguelikeTopicDifficulty.addModeDifficulty(builder, modeDifficulty);
  clz_Torappu_RoguelikeTopicDifficulty.addGrade(builder, grade);
  clz_Torappu_RoguelikeTopicDifficulty.addName(builder, nameOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addNameImage(builder, nameImageOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addSubName(builder, subNameOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addEnrollId(builder, enrollIdOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addHaveInitialRelicIcon(builder, haveInitialRelicIcon);
  clz_Torappu_RoguelikeTopicDifficulty.addScoreFactor(builder, scoreFactor);
  clz_Torappu_RoguelikeTopicDifficulty.addCanUnlockItem(builder, canUnlockItem);
  clz_Torappu_RoguelikeTopicDifficulty.addDoMonthTask(builder, doMonthTask);
  clz_Torappu_RoguelikeTopicDifficulty.addRuleDesc(builder, ruleDescOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addRuleDescReplacements(builder, ruleDescReplacementsOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addFailTitle(builder, failTitleOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addFailImageId(builder, failImageIdOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addFailForceDesc(builder, failForceDescOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addSortId(builder, sortId);
  clz_Torappu_RoguelikeTopicDifficulty.addEquivalentGrade(builder, equivalentGrade);
  clz_Torappu_RoguelikeTopicDifficulty.addColor(builder, colorOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addBpValue(builder, bpValue);
  clz_Torappu_RoguelikeTopicDifficulty.addBossValue(builder, bossValue);
  clz_Torappu_RoguelikeTopicDifficulty.addAddDesc(builder, addDescOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addWarningType(builder, warningType);
  clz_Torappu_RoguelikeTopicDifficulty.addUnlockText(builder, unlockTextOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addDisplayIconId(builder, displayIconIdOffset);
  clz_Torappu_RoguelikeTopicDifficulty.addHideEndingStory(builder, hideEndingStory);
  return clz_Torappu_RoguelikeTopicDifficulty.endclz_Torappu_RoguelikeTopicDifficulty(builder);
}

unpack(): clz_Torappu_RoguelikeTopicDifficultyT {
  return new clz_Torappu_RoguelikeTopicDifficultyT(
    this.modeDifficulty(),
    this.grade(),
    this.name(),
    this.nameImage(),
    this.subName(),
    this.enrollId(),
    this.haveInitialRelicIcon(),
    this.scoreFactor(),
    this.canUnlockItem(),
    this.doMonthTask(),
    this.ruleDesc(),
    this.bb!.createObjList<clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement, clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementT>(this.ruleDescReplacements.bind(this), this.ruleDescReplacementsLength()),
    this.failTitle(),
    this.failImageId(),
    this.failForceDesc(),
    this.sortId(),
    this.equivalentGrade(),
    this.color(),
    this.bpValue(),
    this.bossValue(),
    this.addDesc(),
    this.warningType(),
    this.unlockText(),
    this.displayIconId(),
    this.hideEndingStory()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeTopicDifficultyT): void {
  _o.modeDifficulty = this.modeDifficulty();
  _o.grade = this.grade();
  _o.name = this.name();
  _o.nameImage = this.nameImage();
  _o.subName = this.subName();
  _o.enrollId = this.enrollId();
  _o.haveInitialRelicIcon = this.haveInitialRelicIcon();
  _o.scoreFactor = this.scoreFactor();
  _o.canUnlockItem = this.canUnlockItem();
  _o.doMonthTask = this.doMonthTask();
  _o.ruleDesc = this.ruleDesc();
  _o.ruleDescReplacements = this.bb!.createObjList<clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement, clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementT>(this.ruleDescReplacements.bind(this), this.ruleDescReplacementsLength());
  _o.failTitle = this.failTitle();
  _o.failImageId = this.failImageId();
  _o.failForceDesc = this.failForceDesc();
  _o.sortId = this.sortId();
  _o.equivalentGrade = this.equivalentGrade();
  _o.color = this.color();
  _o.bpValue = this.bpValue();
  _o.bossValue = this.bossValue();
  _o.addDesc = this.addDesc();
  _o.warningType = this.warningType();
  _o.unlockText = this.unlockText();
  _o.displayIconId = this.displayIconId();
  _o.hideEndingStory = this.hideEndingStory();
}
}

export class clz_Torappu_RoguelikeTopicDifficultyT implements flatbuffers.IGeneratedObject {
constructor(
  public modeDifficulty: enum__Torappu_RoguelikeTopicMode = enum__Torappu_RoguelikeTopicMode.NONE,
  public grade: number = 0,
  public name: string|Uint8Array|null = null,
  public nameImage: string|Uint8Array|null = null,
  public subName: string|Uint8Array|null = null,
  public enrollId: string|Uint8Array|null = null,
  public haveInitialRelicIcon: boolean = false,
  public scoreFactor: number = 0.0,
  public canUnlockItem: boolean = false,
  public doMonthTask: boolean = false,
  public ruleDesc: string|Uint8Array|null = null,
  public ruleDescReplacements: (clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementT)[] = [],
  public failTitle: string|Uint8Array|null = null,
  public failImageId: string|Uint8Array|null = null,
  public failForceDesc: string|Uint8Array|null = null,
  public sortId: number = 0,
  public equivalentGrade: number = 0,
  public color: string|Uint8Array|null = null,
  public bpValue: number = 0,
  public bossValue: number = 0,
  public addDesc: string|Uint8Array|null = null,
  public warningType: enum__Torappu_RoguelikeTopicDifficultyWarningType = enum__Torappu_RoguelikeTopicDifficultyWarningType.NONE,
  public unlockText: string|Uint8Array|null = null,
  public displayIconId: string|Uint8Array|null = null,
  public hideEndingStory: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const nameImage = (this.nameImage !== null ? builder.createString(this.nameImage!) : 0);
  const subName = (this.subName !== null ? builder.createString(this.subName!) : 0);
  const enrollId = (this.enrollId !== null ? builder.createString(this.enrollId!) : 0);
  const ruleDesc = (this.ruleDesc !== null ? builder.createString(this.ruleDesc!) : 0);
  const ruleDescReplacements = clz_Torappu_RoguelikeTopicDifficulty.createRuleDescReplacementsVector(builder, builder.createObjectOffsetList(this.ruleDescReplacements));
  const failTitle = (this.failTitle !== null ? builder.createString(this.failTitle!) : 0);
  const failImageId = (this.failImageId !== null ? builder.createString(this.failImageId!) : 0);
  const failForceDesc = (this.failForceDesc !== null ? builder.createString(this.failForceDesc!) : 0);
  const color = (this.color !== null ? builder.createString(this.color!) : 0);
  const addDesc = (this.addDesc !== null ? builder.createString(this.addDesc!) : 0);
  const unlockText = (this.unlockText !== null ? builder.createString(this.unlockText!) : 0);
  const displayIconId = (this.displayIconId !== null ? builder.createString(this.displayIconId!) : 0);

  return clz_Torappu_RoguelikeTopicDifficulty.createclz_Torappu_RoguelikeTopicDifficulty(builder,
    this.modeDifficulty,
    this.grade,
    name,
    nameImage,
    subName,
    enrollId,
    this.haveInitialRelicIcon,
    this.scoreFactor,
    this.canUnlockItem,
    this.doMonthTask,
    ruleDesc,
    ruleDescReplacements,
    failTitle,
    failImageId,
    failForceDesc,
    this.sortId,
    this.equivalentGrade,
    color,
    this.bpValue,
    this.bossValue,
    addDesc,
    this.warningType,
    unlockText,
    displayIconId,
    this.hideEndingStory
  );
}
}
