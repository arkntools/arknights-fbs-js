// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierData, dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierDataT } from './dict--string--clz-torappu-act-arcade-data-arcade-badge-tier-data.js';
import { enum__Torappu_ActArcadeData_BadgeType } from './enum--torappu-act-arcade-data-badge-type.js';


export class clz_Torappu_ActArcadeData_ArcadeBadgeData implements flatbuffers.IUnpackableObject<clz_Torappu_ActArcadeData_ArcadeBadgeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActArcadeData_ArcadeBadgeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActArcadeData_ArcadeBadgeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActArcadeData_ArcadeBadgeData):clz_Torappu_ActArcadeData_ArcadeBadgeData {
  return (obj || new clz_Torappu_ActArcadeData_ArcadeBadgeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActArcadeData_ArcadeBadgeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActArcadeData_ArcadeBadgeData):clz_Torappu_ActArcadeData_ArcadeBadgeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActArcadeData_ArcadeBadgeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

badgeId():string|null
badgeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
badgeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

badgeType():enum__Torappu_ActArcadeData_BadgeType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActArcadeData_BadgeType.COMMON;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

badgeName():string|null
badgeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
badgeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

buffRangeDesc():string|null
buffRangeDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
buffRangeDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hasScore():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scoreZone():string|null
scoreZone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scoreZone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tiers(index: number, obj?:dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierData):dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierData|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tiersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActArcadeData_ArcadeBadgeData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addBadgeId(builder:flatbuffers.Builder, badgeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, badgeIdOffset, 0);
}

static addBadgeType(builder:flatbuffers.Builder, badgeType:enum__Torappu_ActArcadeData_BadgeType) {
  builder.addFieldInt32(1, badgeType, enum__Torappu_ActArcadeData_BadgeType.COMMON);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(2, sortId, 0);
}

static addBadgeName(builder:flatbuffers.Builder, badgeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, badgeNameOffset, 0);
}

static addBuffRangeDesc(builder:flatbuffers.Builder, buffRangeDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, buffRangeDescOffset, 0);
}

static addHasScore(builder:flatbuffers.Builder, hasScore:boolean) {
  builder.addFieldInt8(5, +hasScore, +false);
}

static addScoreZone(builder:flatbuffers.Builder, scoreZoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, scoreZoneOffset, 0);
}

static addTiers(builder:flatbuffers.Builder, tiersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, tiersOffset, 0);
}

static createTiersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTiersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActArcadeData_ArcadeBadgeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActArcadeData_ArcadeBadgeData(builder:flatbuffers.Builder, badgeIdOffset:flatbuffers.Offset, badgeType:enum__Torappu_ActArcadeData_BadgeType, sortId:number, badgeNameOffset:flatbuffers.Offset, buffRangeDescOffset:flatbuffers.Offset, hasScore:boolean, scoreZoneOffset:flatbuffers.Offset, tiersOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActArcadeData_ArcadeBadgeData.startclz_Torappu_ActArcadeData_ArcadeBadgeData(builder);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addBadgeId(builder, badgeIdOffset);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addBadgeType(builder, badgeType);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addSortId(builder, sortId);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addBadgeName(builder, badgeNameOffset);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addBuffRangeDesc(builder, buffRangeDescOffset);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addHasScore(builder, hasScore);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addScoreZone(builder, scoreZoneOffset);
  clz_Torappu_ActArcadeData_ArcadeBadgeData.addTiers(builder, tiersOffset);
  return clz_Torappu_ActArcadeData_ArcadeBadgeData.endclz_Torappu_ActArcadeData_ArcadeBadgeData(builder);
}

unpack(): clz_Torappu_ActArcadeData_ArcadeBadgeDataT {
  return new clz_Torappu_ActArcadeData_ArcadeBadgeDataT(
    this.badgeId(),
    this.badgeType(),
    this.sortId(),
    this.badgeName(),
    this.buffRangeDesc(),
    this.hasScore(),
    this.scoreZone(),
    this.bb!.createObjList<dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierData, dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierDataT>(this.tiers.bind(this), this.tiersLength())
  );
}


unpackTo(_o: clz_Torappu_ActArcadeData_ArcadeBadgeDataT): void {
  _o.badgeId = this.badgeId();
  _o.badgeType = this.badgeType();
  _o.sortId = this.sortId();
  _o.badgeName = this.badgeName();
  _o.buffRangeDesc = this.buffRangeDesc();
  _o.hasScore = this.hasScore();
  _o.scoreZone = this.scoreZone();
  _o.tiers = this.bb!.createObjList<dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierData, dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierDataT>(this.tiers.bind(this), this.tiersLength());
}
}

export class clz_Torappu_ActArcadeData_ArcadeBadgeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public badgeId: string|Uint8Array|null = null,
  public badgeType: enum__Torappu_ActArcadeData_BadgeType = enum__Torappu_ActArcadeData_BadgeType.COMMON,
  public sortId: number = 0,
  public badgeName: string|Uint8Array|null = null,
  public buffRangeDesc: string|Uint8Array|null = null,
  public hasScore: boolean = false,
  public scoreZone: string|Uint8Array|null = null,
  public tiers: (dict__string__clz_Torappu_ActArcadeData_ArcadeBadgeTierDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const badgeId = (this.badgeId !== null ? builder.createString(this.badgeId!) : 0);
  const badgeName = (this.badgeName !== null ? builder.createString(this.badgeName!) : 0);
  const buffRangeDesc = (this.buffRangeDesc !== null ? builder.createString(this.buffRangeDesc!) : 0);
  const scoreZone = (this.scoreZone !== null ? builder.createString(this.scoreZone!) : 0);
  const tiers = clz_Torappu_ActArcadeData_ArcadeBadgeData.createTiersVector(builder, builder.createObjectOffsetList(this.tiers));

  return clz_Torappu_ActArcadeData_ArcadeBadgeData.createclz_Torappu_ActArcadeData_ArcadeBadgeData(builder,
    badgeId,
    this.badgeType,
    this.sortId,
    badgeName,
    buffRangeDesc,
    this.hasScore,
    scoreZone,
    tiers
  );
}
}
