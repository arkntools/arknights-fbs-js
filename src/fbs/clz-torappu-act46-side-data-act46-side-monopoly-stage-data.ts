// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_Act46SideData_Act46SideMonopolyStageData implements flatbuffers.IUnpackableObject<clz_Torappu_Act46SideData_Act46SideMonopolyStageDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act46SideData_Act46SideMonopolyStageData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act46SideData_Act46SideMonopolyStageData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act46SideData_Act46SideMonopolyStageData):clz_Torappu_Act46SideData_Act46SideMonopolyStageData {
  return (obj || new clz_Torappu_Act46SideData_Act46SideMonopolyStageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act46SideData_Act46SideMonopolyStageData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act46SideData_Act46SideMonopolyStageData):clz_Torappu_Act46SideData_Act46SideMonopolyStageData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act46SideData_Act46SideMonopolyStageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stageId():string|null
stageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

startTs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

stageName():string|null
stageName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stageDesc():string|null
stageDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

taskRequiredAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rewardList(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rewardListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

buffIdList(index: number):string
buffIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
buffIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

buffIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bgSpriteId():string|null
bgSpriteId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bgSpriteId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxTurn():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

nodeIconStyleIndexList(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

nodeIconStyleIndexListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nodeIconStyleIndexListArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

validResourceIdList(index: number):string
validResourceIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
validResourceIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

validResourceIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act46SideData_Act46SideMonopolyStageData(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addStageId(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stageIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addStartTs(builder:flatbuffers.Builder, startTs:bigint) {
  builder.addFieldInt64(2, startTs, BigInt('0'));
}

static addStageName(builder:flatbuffers.Builder, stageNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stageNameOffset, 0);
}

static addStageDesc(builder:flatbuffers.Builder, stageDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, stageDescOffset, 0);
}

static addTaskRequiredAmount(builder:flatbuffers.Builder, taskRequiredAmount:number) {
  builder.addFieldInt32(5, taskRequiredAmount, 0);
}

static addRewardList(builder:flatbuffers.Builder, rewardListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, rewardListOffset, 0);
}

static createRewardListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRewardListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBuffIdList(builder:flatbuffers.Builder, buffIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, buffIdListOffset, 0);
}

static createBuffIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBuffIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBgSpriteId(builder:flatbuffers.Builder, bgSpriteIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, bgSpriteIdOffset, 0);
}

static addMaxTurn(builder:flatbuffers.Builder, maxTurn:number) {
  builder.addFieldInt32(9, maxTurn, 0);
}

static addNodeIconStyleIndexList(builder:flatbuffers.Builder, nodeIconStyleIndexListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, nodeIconStyleIndexListOffset, 0);
}

static createNodeIconStyleIndexListVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createNodeIconStyleIndexListVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createNodeIconStyleIndexListVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startNodeIconStyleIndexListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValidResourceIdList(builder:flatbuffers.Builder, validResourceIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, validResourceIdListOffset, 0);
}

static createValidResourceIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValidResourceIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act46SideData_Act46SideMonopolyStageData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act46SideData_Act46SideMonopolyStageData(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset, sortId:number, startTs:bigint, stageNameOffset:flatbuffers.Offset, stageDescOffset:flatbuffers.Offset, taskRequiredAmount:number, rewardListOffset:flatbuffers.Offset, buffIdListOffset:flatbuffers.Offset, bgSpriteIdOffset:flatbuffers.Offset, maxTurn:number, nodeIconStyleIndexListOffset:flatbuffers.Offset, validResourceIdListOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.startclz_Torappu_Act46SideData_Act46SideMonopolyStageData(builder);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addStageId(builder, stageIdOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addSortId(builder, sortId);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addStartTs(builder, startTs);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addStageName(builder, stageNameOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addStageDesc(builder, stageDescOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addTaskRequiredAmount(builder, taskRequiredAmount);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addRewardList(builder, rewardListOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addBuffIdList(builder, buffIdListOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addBgSpriteId(builder, bgSpriteIdOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addMaxTurn(builder, maxTurn);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addNodeIconStyleIndexList(builder, nodeIconStyleIndexListOffset);
  clz_Torappu_Act46SideData_Act46SideMonopolyStageData.addValidResourceIdList(builder, validResourceIdListOffset);
  return clz_Torappu_Act46SideData_Act46SideMonopolyStageData.endclz_Torappu_Act46SideData_Act46SideMonopolyStageData(builder);
}

unpack(): clz_Torappu_Act46SideData_Act46SideMonopolyStageDataT {
  return new clz_Torappu_Act46SideData_Act46SideMonopolyStageDataT(
    this.stageId(),
    this.sortId(),
    this.startTs(),
    this.stageName(),
    this.stageDesc(),
    this.taskRequiredAmount(),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.rewardList.bind(this), this.rewardListLength()),
    this.bb!.createScalarList<string>(this.buffIdList.bind(this), this.buffIdListLength()),
    this.bgSpriteId(),
    this.maxTurn(),
    this.bb!.createScalarList<number>(this.nodeIconStyleIndexList.bind(this), this.nodeIconStyleIndexListLength()),
    this.bb!.createScalarList<string>(this.validResourceIdList.bind(this), this.validResourceIdListLength())
  );
}


unpackTo(_o: clz_Torappu_Act46SideData_Act46SideMonopolyStageDataT): void {
  _o.stageId = this.stageId();
  _o.sortId = this.sortId();
  _o.startTs = this.startTs();
  _o.stageName = this.stageName();
  _o.stageDesc = this.stageDesc();
  _o.taskRequiredAmount = this.taskRequiredAmount();
  _o.rewardList = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.rewardList.bind(this), this.rewardListLength());
  _o.buffIdList = this.bb!.createScalarList<string>(this.buffIdList.bind(this), this.buffIdListLength());
  _o.bgSpriteId = this.bgSpriteId();
  _o.maxTurn = this.maxTurn();
  _o.nodeIconStyleIndexList = this.bb!.createScalarList<number>(this.nodeIconStyleIndexList.bind(this), this.nodeIconStyleIndexListLength());
  _o.validResourceIdList = this.bb!.createScalarList<string>(this.validResourceIdList.bind(this), this.validResourceIdListLength());
}
}

export class clz_Torappu_Act46SideData_Act46SideMonopolyStageDataT implements flatbuffers.IGeneratedObject {
constructor(
  public stageId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public startTs: bigint = BigInt('0'),
  public stageName: string|Uint8Array|null = null,
  public stageDesc: string|Uint8Array|null = null,
  public taskRequiredAmount: number = 0,
  public rewardList: (clz_Torappu_ItemBundleT)[] = [],
  public buffIdList: (string)[] = [],
  public bgSpriteId: string|Uint8Array|null = null,
  public maxTurn: number = 0,
  public nodeIconStyleIndexList: (number)[] = [],
  public validResourceIdList: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const stageId = (this.stageId !== null ? builder.createString(this.stageId!) : 0);
  const stageName = (this.stageName !== null ? builder.createString(this.stageName!) : 0);
  const stageDesc = (this.stageDesc !== null ? builder.createString(this.stageDesc!) : 0);
  const rewardList = clz_Torappu_Act46SideData_Act46SideMonopolyStageData.createRewardListVector(builder, builder.createObjectOffsetList(this.rewardList));
  const buffIdList = clz_Torappu_Act46SideData_Act46SideMonopolyStageData.createBuffIdListVector(builder, builder.createObjectOffsetList(this.buffIdList));
  const bgSpriteId = (this.bgSpriteId !== null ? builder.createString(this.bgSpriteId!) : 0);
  const nodeIconStyleIndexList = clz_Torappu_Act46SideData_Act46SideMonopolyStageData.createNodeIconStyleIndexListVector(builder, this.nodeIconStyleIndexList);
  const validResourceIdList = clz_Torappu_Act46SideData_Act46SideMonopolyStageData.createValidResourceIdListVector(builder, builder.createObjectOffsetList(this.validResourceIdList));

  return clz_Torappu_Act46SideData_Act46SideMonopolyStageData.createclz_Torappu_Act46SideData_Act46SideMonopolyStageData(builder,
    stageId,
    this.sortId,
    this.startTs,
    stageName,
    stageDesc,
    this.taskRequiredAmount,
    rewardList,
    buffIdList,
    bgSpriteId,
    this.maxTurn,
    nodeIconStyleIndexList,
    validResourceIdList
  );
}
}
