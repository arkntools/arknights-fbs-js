// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ExtraBattleLogDataKey implements flatbuffers.IUnpackableObject<clz_Torappu_ExtraBattleLogDataKeyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ExtraBattleLogDataKey {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ExtraBattleLogDataKey(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ExtraBattleLogDataKey):clz_Torappu_ExtraBattleLogDataKey {
  return (obj || new clz_Torappu_ExtraBattleLogDataKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ExtraBattleLogDataKey(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ExtraBattleLogDataKey):clz_Torappu_ExtraBattleLogDataKey {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ExtraBattleLogDataKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sourceId():string|null
sourceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sourceMode():string|null
sourceMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyId():string|null
enemyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyApplyWay():string|null
enemyApplyWay(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyApplyWay(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

projectileName():string|null
projectileName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
projectileName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

abilityName():string|null
abilityName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
abilityName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyLevelType():string|null
enemyLevelType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyLevelType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyTag(index: number):string
enemyTag(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
enemyTag(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

enemyTagLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

logAlias():string|null
logAlias(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logAlias(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ExtraBattleLogDataKey(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
}

static addSourceId(builder:flatbuffers.Builder, sourceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sourceIdOffset, 0);
}

static addSourceMode(builder:flatbuffers.Builder, sourceModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceModeOffset, 0);
}

static addEnemyId(builder:flatbuffers.Builder, enemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, enemyIdOffset, 0);
}

static addEnemyApplyWay(builder:flatbuffers.Builder, enemyApplyWayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, enemyApplyWayOffset, 0);
}

static addProjectileName(builder:flatbuffers.Builder, projectileNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, projectileNameOffset, 0);
}

static addAbilityName(builder:flatbuffers.Builder, abilityNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, abilityNameOffset, 0);
}

static addEnemyLevelType(builder:flatbuffers.Builder, enemyLevelTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, enemyLevelTypeOffset, 0);
}

static addEnemyTag(builder:flatbuffers.Builder, enemyTagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, enemyTagOffset, 0);
}

static createEnemyTagVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyTagVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLogAlias(builder:flatbuffers.Builder, logAliasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, logAliasOffset, 0);
}

static endclz_Torappu_ExtraBattleLogDataKey(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ExtraBattleLogDataKey(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset, sourceIdOffset:flatbuffers.Offset, sourceModeOffset:flatbuffers.Offset, enemyIdOffset:flatbuffers.Offset, enemyApplyWayOffset:flatbuffers.Offset, projectileNameOffset:flatbuffers.Offset, abilityNameOffset:flatbuffers.Offset, enemyLevelTypeOffset:flatbuffers.Offset, enemyTagOffset:flatbuffers.Offset, logAliasOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ExtraBattleLogDataKey.startclz_Torappu_ExtraBattleLogDataKey(builder);
  clz_Torappu_ExtraBattleLogDataKey.addDescription(builder, descriptionOffset);
  clz_Torappu_ExtraBattleLogDataKey.addSourceId(builder, sourceIdOffset);
  clz_Torappu_ExtraBattleLogDataKey.addSourceMode(builder, sourceModeOffset);
  clz_Torappu_ExtraBattleLogDataKey.addEnemyId(builder, enemyIdOffset);
  clz_Torappu_ExtraBattleLogDataKey.addEnemyApplyWay(builder, enemyApplyWayOffset);
  clz_Torappu_ExtraBattleLogDataKey.addProjectileName(builder, projectileNameOffset);
  clz_Torappu_ExtraBattleLogDataKey.addAbilityName(builder, abilityNameOffset);
  clz_Torappu_ExtraBattleLogDataKey.addEnemyLevelType(builder, enemyLevelTypeOffset);
  clz_Torappu_ExtraBattleLogDataKey.addEnemyTag(builder, enemyTagOffset);
  clz_Torappu_ExtraBattleLogDataKey.addLogAlias(builder, logAliasOffset);
  return clz_Torappu_ExtraBattleLogDataKey.endclz_Torappu_ExtraBattleLogDataKey(builder);
}

unpack(): clz_Torappu_ExtraBattleLogDataKeyT {
  return new clz_Torappu_ExtraBattleLogDataKeyT(
    this.description(),
    this.sourceId(),
    this.sourceMode(),
    this.enemyId(),
    this.enemyApplyWay(),
    this.projectileName(),
    this.abilityName(),
    this.enemyLevelType(),
    this.bb!.createScalarList<string>(this.enemyTag.bind(this), this.enemyTagLength()),
    this.logAlias()
  );
}


unpackTo(_o: clz_Torappu_ExtraBattleLogDataKeyT): void {
  _o.description = this.description();
  _o.sourceId = this.sourceId();
  _o.sourceMode = this.sourceMode();
  _o.enemyId = this.enemyId();
  _o.enemyApplyWay = this.enemyApplyWay();
  _o.projectileName = this.projectileName();
  _o.abilityName = this.abilityName();
  _o.enemyLevelType = this.enemyLevelType();
  _o.enemyTag = this.bb!.createScalarList<string>(this.enemyTag.bind(this), this.enemyTagLength());
  _o.logAlias = this.logAlias();
}
}

export class clz_Torappu_ExtraBattleLogDataKeyT implements flatbuffers.IGeneratedObject {
constructor(
  public description: string|Uint8Array|null = null,
  public sourceId: string|Uint8Array|null = null,
  public sourceMode: string|Uint8Array|null = null,
  public enemyId: string|Uint8Array|null = null,
  public enemyApplyWay: string|Uint8Array|null = null,
  public projectileName: string|Uint8Array|null = null,
  public abilityName: string|Uint8Array|null = null,
  public enemyLevelType: string|Uint8Array|null = null,
  public enemyTag: (string)[] = [],
  public logAlias: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const sourceId = (this.sourceId !== null ? builder.createString(this.sourceId!) : 0);
  const sourceMode = (this.sourceMode !== null ? builder.createString(this.sourceMode!) : 0);
  const enemyId = (this.enemyId !== null ? builder.createString(this.enemyId!) : 0);
  const enemyApplyWay = (this.enemyApplyWay !== null ? builder.createString(this.enemyApplyWay!) : 0);
  const projectileName = (this.projectileName !== null ? builder.createString(this.projectileName!) : 0);
  const abilityName = (this.abilityName !== null ? builder.createString(this.abilityName!) : 0);
  const enemyLevelType = (this.enemyLevelType !== null ? builder.createString(this.enemyLevelType!) : 0);
  const enemyTag = clz_Torappu_ExtraBattleLogDataKey.createEnemyTagVector(builder, builder.createObjectOffsetList(this.enemyTag));
  const logAlias = (this.logAlias !== null ? builder.createString(this.logAlias!) : 0);

  return clz_Torappu_ExtraBattleLogDataKey.createclz_Torappu_ExtraBattleLogDataKey(builder,
    description,
    sourceId,
    sourceMode,
    enemyId,
    enemyApplyWay,
    projectileName,
    abilityName,
    enemyLevelType,
    enemyTag,
    logAlias
  );
}
}
