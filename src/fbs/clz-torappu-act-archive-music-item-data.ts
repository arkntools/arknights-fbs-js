// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActArchiveMusicItemData implements flatbuffers.IUnpackableObject<clz_Torappu_ActArchiveMusicItemDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActArchiveMusicItemData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActArchiveMusicItemData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActArchiveMusicItemData):clz_Torappu_ActArchiveMusicItemData {
  return (obj || new clz_Torappu_ActArchiveMusicItemData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActArchiveMusicItemData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActArchiveMusicItemData):clz_Torappu_ActArchiveMusicItemData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActArchiveMusicItemData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

musicId():string|null
musicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
musicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

musicSortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActArchiveMusicItemData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMusicId(builder:flatbuffers.Builder, musicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, musicIdOffset, 0);
}

static addMusicSortId(builder:flatbuffers.Builder, musicSortId:number) {
  builder.addFieldInt32(1, musicSortId, 0);
}

static endclz_Torappu_ActArchiveMusicItemData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActArchiveMusicItemData(builder:flatbuffers.Builder, musicIdOffset:flatbuffers.Offset, musicSortId:number):flatbuffers.Offset {
  clz_Torappu_ActArchiveMusicItemData.startclz_Torappu_ActArchiveMusicItemData(builder);
  clz_Torappu_ActArchiveMusicItemData.addMusicId(builder, musicIdOffset);
  clz_Torappu_ActArchiveMusicItemData.addMusicSortId(builder, musicSortId);
  return clz_Torappu_ActArchiveMusicItemData.endclz_Torappu_ActArchiveMusicItemData(builder);
}

unpack(): clz_Torappu_ActArchiveMusicItemDataT {
  return new clz_Torappu_ActArchiveMusicItemDataT(
    this.musicId(),
    this.musicSortId()
  );
}


unpackTo(_o: clz_Torappu_ActArchiveMusicItemDataT): void {
  _o.musicId = this.musicId();
  _o.musicSortId = this.musicSortId();
}
}

export class clz_Torappu_ActArchiveMusicItemDataT implements flatbuffers.IGeneratedObject {
constructor(
  public musicId: string|Uint8Array|null = null,
  public musicSortId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const musicId = (this.musicId !== null ? builder.createString(this.musicId!) : 0);

  return clz_Torappu_ActArchiveMusicItemData.createclz_Torappu_ActArchiveMusicItemData(builder,
    musicId,
    this.musicSortId
  );
}
}
