// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Act4funPerformWordData, clz_Torappu_Act4funPerformWordDataT } from './clz-torappu-act4fun-perform-word-data.js';


export class clz_Torappu_Act4funPerformInfo implements flatbuffers.IUnpackableObject<clz_Torappu_Act4funPerformInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act4funPerformInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act4funPerformInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funPerformInfo):clz_Torappu_Act4funPerformInfo {
  return (obj || new clz_Torappu_Act4funPerformInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act4funPerformInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funPerformInfo):clz_Torappu_Act4funPerformInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act4funPerformInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

performId():string|null
performId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
performId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

performFinishedPicId():string|null
performFinishedPicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
performFinishedPicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fixedCmpGroup():string|null
fixedCmpGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fixedCmpGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cmpGroups(index: number):string
cmpGroups(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
cmpGroups(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

cmpGroupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

words(index: number, obj?:clz_Torappu_Act4funPerformWordData):clz_Torappu_Act4funPerformWordData|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_Act4funPerformWordData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

wordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act4funPerformInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addPerformId(builder:flatbuffers.Builder, performIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, performIdOffset, 0);
}

static addPerformFinishedPicId(builder:flatbuffers.Builder, performFinishedPicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, performFinishedPicIdOffset, 0);
}

static addFixedCmpGroup(builder:flatbuffers.Builder, fixedCmpGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fixedCmpGroupOffset, 0);
}

static addCmpGroups(builder:flatbuffers.Builder, cmpGroupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cmpGroupsOffset, 0);
}

static createCmpGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCmpGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWords(builder:flatbuffers.Builder, wordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, wordsOffset, 0);
}

static createWordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act4funPerformInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act4funPerformInfo(builder:flatbuffers.Builder, performIdOffset:flatbuffers.Offset, performFinishedPicIdOffset:flatbuffers.Offset, fixedCmpGroupOffset:flatbuffers.Offset, cmpGroupsOffset:flatbuffers.Offset, wordsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act4funPerformInfo.startclz_Torappu_Act4funPerformInfo(builder);
  clz_Torappu_Act4funPerformInfo.addPerformId(builder, performIdOffset);
  clz_Torappu_Act4funPerformInfo.addPerformFinishedPicId(builder, performFinishedPicIdOffset);
  clz_Torappu_Act4funPerformInfo.addFixedCmpGroup(builder, fixedCmpGroupOffset);
  clz_Torappu_Act4funPerformInfo.addCmpGroups(builder, cmpGroupsOffset);
  clz_Torappu_Act4funPerformInfo.addWords(builder, wordsOffset);
  return clz_Torappu_Act4funPerformInfo.endclz_Torappu_Act4funPerformInfo(builder);
}

unpack(): clz_Torappu_Act4funPerformInfoT {
  return new clz_Torappu_Act4funPerformInfoT(
    this.performId(),
    this.performFinishedPicId(),
    this.fixedCmpGroup(),
    this.bb!.createScalarList<string>(this.cmpGroups.bind(this), this.cmpGroupsLength()),
    this.bb!.createObjList<clz_Torappu_Act4funPerformWordData, clz_Torappu_Act4funPerformWordDataT>(this.words.bind(this), this.wordsLength())
  );
}


unpackTo(_o: clz_Torappu_Act4funPerformInfoT): void {
  _o.performId = this.performId();
  _o.performFinishedPicId = this.performFinishedPicId();
  _o.fixedCmpGroup = this.fixedCmpGroup();
  _o.cmpGroups = this.bb!.createScalarList<string>(this.cmpGroups.bind(this), this.cmpGroupsLength());
  _o.words = this.bb!.createObjList<clz_Torappu_Act4funPerformWordData, clz_Torappu_Act4funPerformWordDataT>(this.words.bind(this), this.wordsLength());
}
}

export class clz_Torappu_Act4funPerformInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public performId: string|Uint8Array|null = null,
  public performFinishedPicId: string|Uint8Array|null = null,
  public fixedCmpGroup: string|Uint8Array|null = null,
  public cmpGroups: (string)[] = [],
  public words: (clz_Torappu_Act4funPerformWordDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const performId = (this.performId !== null ? builder.createString(this.performId!) : 0);
  const performFinishedPicId = (this.performFinishedPicId !== null ? builder.createString(this.performFinishedPicId!) : 0);
  const fixedCmpGroup = (this.fixedCmpGroup !== null ? builder.createString(this.fixedCmpGroup!) : 0);
  const cmpGroups = clz_Torappu_Act4funPerformInfo.createCmpGroupsVector(builder, builder.createObjectOffsetList(this.cmpGroups));
  const words = clz_Torappu_Act4funPerformInfo.createWordsVector(builder, builder.createObjectOffsetList(this.words));

  return clz_Torappu_Act4funPerformInfo.createclz_Torappu_Act4funPerformInfo(builder,
    performId,
    performFinishedPicId,
    fixedCmpGroup,
    cmpGroups,
    words
  );
}
}
