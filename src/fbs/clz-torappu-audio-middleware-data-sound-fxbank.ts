// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX, clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT } from './clz-torappu-audio-middleware-data-sound-fxbank-sound-fx.js';
import { clz_Torappu_Audio_MixerDesc, clz_Torappu_Audio_MixerDescT } from './clz-torappu-audio-mixer-desc.js';


export class clz_Torappu_Audio_Middleware_Data_SoundFXBank implements flatbuffers.IUnpackableObject<clz_Torappu_Audio_Middleware_Data_SoundFXBankT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Audio_Middleware_Data_SoundFXBank {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Audio_Middleware_Data_SoundFXBank(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Audio_Middleware_Data_SoundFXBank):clz_Torappu_Audio_Middleware_Data_SoundFXBank {
  return (obj || new clz_Torappu_Audio_Middleware_Data_SoundFXBank()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Audio_Middleware_Data_SoundFXBank(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Audio_Middleware_Data_SoundFXBank):clz_Torappu_Audio_Middleware_Data_SoundFXBank {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Audio_Middleware_Data_SoundFXBank()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sounds(index: number, obj?:clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX):clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

soundsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

maxSoundAllowed():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

popOldest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

customMixerGroup():string|null
customMixerGroup(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
customMixerGroup(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

loop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mixerDesc(obj?:clz_Torappu_Audio_MixerDesc):clz_Torappu_Audio_MixerDesc|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new clz_Torappu_Audio_MixerDesc()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_Audio_Middleware_Data_SoundFXBank(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addSounds(builder:flatbuffers.Builder, soundsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, soundsOffset, 0);
}

static createSoundsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSoundsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMaxSoundAllowed(builder:flatbuffers.Builder, maxSoundAllowed:number) {
  builder.addFieldInt32(1, maxSoundAllowed, 0);
}

static addPopOldest(builder:flatbuffers.Builder, popOldest:boolean) {
  builder.addFieldInt8(2, +popOldest, +false);
}

static addCustomMixerGroup(builder:flatbuffers.Builder, customMixerGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, customMixerGroupOffset, 0);
}

static addLoop(builder:flatbuffers.Builder, loop:boolean) {
  builder.addFieldInt8(4, +loop, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, nameOffset, 0);
}

static addMixerDesc(builder:flatbuffers.Builder, mixerDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, mixerDescOffset, 0);
}

static endclz_Torappu_Audio_Middleware_Data_SoundFXBank(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_Audio_Middleware_Data_SoundFXBankT {
  return new clz_Torappu_Audio_Middleware_Data_SoundFXBankT(
    this.bb!.createObjList<clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX, clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT>(this.sounds.bind(this), this.soundsLength()),
    this.maxSoundAllowed(),
    this.popOldest(),
    this.customMixerGroup(),
    this.loop(),
    this.name(),
    (this.mixerDesc() !== null ? this.mixerDesc()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_Audio_Middleware_Data_SoundFXBankT): void {
  _o.sounds = this.bb!.createObjList<clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX, clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT>(this.sounds.bind(this), this.soundsLength());
  _o.maxSoundAllowed = this.maxSoundAllowed();
  _o.popOldest = this.popOldest();
  _o.customMixerGroup = this.customMixerGroup();
  _o.loop = this.loop();
  _o.name = this.name();
  _o.mixerDesc = (this.mixerDesc() !== null ? this.mixerDesc()!.unpack() : null);
}
}

export class clz_Torappu_Audio_Middleware_Data_SoundFXBankT implements flatbuffers.IGeneratedObject {
constructor(
  public sounds: (clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXT)[] = [],
  public maxSoundAllowed: number = 0,
  public popOldest: boolean = false,
  public customMixerGroup: string|Uint8Array|null = null,
  public loop: boolean = false,
  public name: string|Uint8Array|null = null,
  public mixerDesc: clz_Torappu_Audio_MixerDescT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sounds = clz_Torappu_Audio_Middleware_Data_SoundFXBank.createSoundsVector(builder, builder.createObjectOffsetList(this.sounds));
  const customMixerGroup = (this.customMixerGroup !== null ? builder.createString(this.customMixerGroup!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const mixerDesc = (this.mixerDesc !== null ? this.mixerDesc!.pack(builder) : 0);

  clz_Torappu_Audio_Middleware_Data_SoundFXBank.startclz_Torappu_Audio_Middleware_Data_SoundFXBank(builder);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addSounds(builder, sounds);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addMaxSoundAllowed(builder, this.maxSoundAllowed);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addPopOldest(builder, this.popOldest);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addCustomMixerGroup(builder, customMixerGroup);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addLoop(builder, this.loop);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addName(builder, name);
  clz_Torappu_Audio_Middleware_Data_SoundFXBank.addMixerDesc(builder, mixerDesc);

  return clz_Torappu_Audio_Middleware_Data_SoundFXBank.endclz_Torappu_Audio_Middleware_Data_SoundFXBank(builder);
}
}
