// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Act1VWeightedBattleItemPool, clz_Torappu_Act1VWeightedBattleItemPoolT } from './clz-torappu-act1-vweighted-battle-item-pool.js';


export class clz_Torappu_Act1VBattleItemDropSlot implements flatbuffers.IUnpackableObject<clz_Torappu_Act1VBattleItemDropSlotT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act1VBattleItemDropSlot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act1VBattleItemDropSlot(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act1VBattleItemDropSlot):clz_Torappu_Act1VBattleItemDropSlot {
  return (obj || new clz_Torappu_Act1VBattleItemDropSlot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act1VBattleItemDropSlot(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act1VBattleItemDropSlot):clz_Torappu_Act1VBattleItemDropSlot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act1VBattleItemDropSlot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prob():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

itemPools(index: number, obj?:clz_Torappu_Act1VWeightedBattleItemPool):clz_Torappu_Act1VWeightedBattleItemPool|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_Act1VWeightedBattleItemPool()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

itemPoolsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act1VBattleItemDropSlot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addProb(builder:flatbuffers.Builder, prob:number) {
  builder.addFieldFloat32(0, prob, 0.0);
}

static addItemPools(builder:flatbuffers.Builder, itemPoolsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, itemPoolsOffset, 0);
}

static createItemPoolsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemPoolsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act1VBattleItemDropSlot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act1VBattleItemDropSlot(builder:flatbuffers.Builder, prob:number, itemPoolsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act1VBattleItemDropSlot.startclz_Torappu_Act1VBattleItemDropSlot(builder);
  clz_Torappu_Act1VBattleItemDropSlot.addProb(builder, prob);
  clz_Torappu_Act1VBattleItemDropSlot.addItemPools(builder, itemPoolsOffset);
  return clz_Torappu_Act1VBattleItemDropSlot.endclz_Torappu_Act1VBattleItemDropSlot(builder);
}

unpack(): clz_Torappu_Act1VBattleItemDropSlotT {
  return new clz_Torappu_Act1VBattleItemDropSlotT(
    this.prob(),
    this.bb!.createObjList<clz_Torappu_Act1VWeightedBattleItemPool, clz_Torappu_Act1VWeightedBattleItemPoolT>(this.itemPools.bind(this), this.itemPoolsLength())
  );
}


unpackTo(_o: clz_Torappu_Act1VBattleItemDropSlotT): void {
  _o.prob = this.prob();
  _o.itemPools = this.bb!.createObjList<clz_Torappu_Act1VWeightedBattleItemPool, clz_Torappu_Act1VWeightedBattleItemPoolT>(this.itemPools.bind(this), this.itemPoolsLength());
}
}

export class clz_Torappu_Act1VBattleItemDropSlotT implements flatbuffers.IGeneratedObject {
constructor(
  public prob: number = 0.0,
  public itemPools: (clz_Torappu_Act1VWeightedBattleItemPoolT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const itemPools = clz_Torappu_Act1VBattleItemDropSlot.createItemPoolsVector(builder, builder.createObjectOffsetList(this.itemPools));

  return clz_Torappu_Act1VBattleItemDropSlot.createclz_Torappu_Act1VBattleItemDropSlot(builder,
    this.prob,
    itemPools
  );
}
}
