// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_DynEntrySwitchInfo implements flatbuffers.IUnpackableObject<clz_Torappu_DynEntrySwitchInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_DynEntrySwitchInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_DynEntrySwitchInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_DynEntrySwitchInfo):clz_Torappu_DynEntrySwitchInfo {
  return (obj || new clz_Torappu_DynEntrySwitchInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_DynEntrySwitchInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_DynEntrySwitchInfo):clz_Torappu_DynEntrySwitchInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_DynEntrySwitchInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

entryId():string|null
entryId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stageId():string|null
stageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

signalId():string|null
signalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
signalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_DynEntrySwitchInfo(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEntryId(builder:flatbuffers.Builder, entryIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, entryIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addStageId(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stageIdOffset, 0);
}

static addSignalId(builder:flatbuffers.Builder, signalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, signalIdOffset, 0);
}

static endclz_Torappu_DynEntrySwitchInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_DynEntrySwitchInfo(builder:flatbuffers.Builder, entryIdOffset:flatbuffers.Offset, sortId:number, stageIdOffset:flatbuffers.Offset, signalIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_DynEntrySwitchInfo.startclz_Torappu_DynEntrySwitchInfo(builder);
  clz_Torappu_DynEntrySwitchInfo.addEntryId(builder, entryIdOffset);
  clz_Torappu_DynEntrySwitchInfo.addSortId(builder, sortId);
  clz_Torappu_DynEntrySwitchInfo.addStageId(builder, stageIdOffset);
  clz_Torappu_DynEntrySwitchInfo.addSignalId(builder, signalIdOffset);
  return clz_Torappu_DynEntrySwitchInfo.endclz_Torappu_DynEntrySwitchInfo(builder);
}

unpack(): clz_Torappu_DynEntrySwitchInfoT {
  return new clz_Torappu_DynEntrySwitchInfoT(
    this.entryId(),
    this.sortId(),
    this.stageId(),
    this.signalId()
  );
}


unpackTo(_o: clz_Torappu_DynEntrySwitchInfoT): void {
  _o.entryId = this.entryId();
  _o.sortId = this.sortId();
  _o.stageId = this.stageId();
  _o.signalId = this.signalId();
}
}

export class clz_Torappu_DynEntrySwitchInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public entryId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public stageId: string|Uint8Array|null = null,
  public signalId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const entryId = (this.entryId !== null ? builder.createString(this.entryId!) : 0);
  const stageId = (this.stageId !== null ? builder.createString(this.stageId!) : 0);
  const signalId = (this.signalId !== null ? builder.createString(this.signalId!) : 0);

  return clz_Torappu_DynEntrySwitchInfo.createclz_Torappu_DynEntrySwitchInfo(builder,
    entryId,
    this.sortId,
    stageId,
    signalId
  );
}
}
