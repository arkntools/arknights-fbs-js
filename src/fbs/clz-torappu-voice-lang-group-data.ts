// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_VoiceLangType } from './enum--torappu-voice-lang-type.js';


export class clz_Torappu_VoiceLangGroupData implements flatbuffers.IUnpackableObject<clz_Torappu_VoiceLangGroupDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_VoiceLangGroupData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_VoiceLangGroupData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangGroupData):clz_Torappu_VoiceLangGroupData {
  return (obj || new clz_Torappu_VoiceLangGroupData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_VoiceLangGroupData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangGroupData):clz_Torappu_VoiceLangGroupData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_VoiceLangGroupData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

members(index: number):enum__Torappu_VoiceLangType|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

membersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

membersArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startclz_Torappu_VoiceLangGroupData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addMembers(builder:flatbuffers.Builder, membersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, membersOffset, 0);
}

static createMembersVector(builder:flatbuffers.Builder, data:enum__Torappu_VoiceLangType[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startMembersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_VoiceLangGroupData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_VoiceLangGroupData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, membersOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_VoiceLangGroupData.startclz_Torappu_VoiceLangGroupData(builder);
  clz_Torappu_VoiceLangGroupData.addName(builder, nameOffset);
  clz_Torappu_VoiceLangGroupData.addMembers(builder, membersOffset);
  return clz_Torappu_VoiceLangGroupData.endclz_Torappu_VoiceLangGroupData(builder);
}

unpack(): clz_Torappu_VoiceLangGroupDataT {
  return new clz_Torappu_VoiceLangGroupDataT(
    this.name(),
    this.bb!.createScalarList<enum__Torappu_VoiceLangType>(this.members.bind(this), this.membersLength())
  );
}


unpackTo(_o: clz_Torappu_VoiceLangGroupDataT): void {
  _o.name = this.name();
  _o.members = this.bb!.createScalarList<enum__Torappu_VoiceLangType>(this.members.bind(this), this.membersLength());
}
}

export class clz_Torappu_VoiceLangGroupDataT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public members: (enum__Torappu_VoiceLangType)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const members = clz_Torappu_VoiceLangGroupData.createMembersVector(builder, this.members);

  return clz_Torappu_VoiceLangGroupData.createclz_Torappu_VoiceLangGroupData(builder,
    name,
    members
  );
}
}
