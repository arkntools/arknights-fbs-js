// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT } from './clz-torappu-blackboard-data-pair.js';


export class clz_Torappu_AutoChessData_AutoChessPrepareStateData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessPrepareStateDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessPrepareStateData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessPrepareStateData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessPrepareStateData):clz_Torappu_AutoChessData_AutoChessPrepareStateData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessPrepareStateData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessPrepareStateData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessPrepareStateData):clz_Torappu_AutoChessData_AutoChessPrepareStateData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessPrepareStateData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

effectId():string|null
effectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

buff():string|null
buff(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
buff(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blackBoard(index: number, obj?:clz_Torappu_Blackboard_DataPair):clz_Torappu_Blackboard_DataPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_Blackboard_DataPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blackBoardLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_AutoChessData_AutoChessPrepareStateData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEffectId(builder:flatbuffers.Builder, effectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, effectIdOffset, 0);
}

static addBuff(builder:flatbuffers.Builder, buffOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, buffOffset, 0);
}

static addBlackBoard(builder:flatbuffers.Builder, blackBoardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, blackBoardOffset, 0);
}

static createBlackBoardVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlackBoardVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_AutoChessData_AutoChessPrepareStateData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessPrepareStateData(builder:flatbuffers.Builder, effectIdOffset:flatbuffers.Offset, buffOffset:flatbuffers.Offset, blackBoardOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessPrepareStateData.startclz_Torappu_AutoChessData_AutoChessPrepareStateData(builder);
  clz_Torappu_AutoChessData_AutoChessPrepareStateData.addEffectId(builder, effectIdOffset);
  clz_Torappu_AutoChessData_AutoChessPrepareStateData.addBuff(builder, buffOffset);
  clz_Torappu_AutoChessData_AutoChessPrepareStateData.addBlackBoard(builder, blackBoardOffset);
  return clz_Torappu_AutoChessData_AutoChessPrepareStateData.endclz_Torappu_AutoChessData_AutoChessPrepareStateData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessPrepareStateDataT {
  return new clz_Torappu_AutoChessData_AutoChessPrepareStateDataT(
    this.effectId(),
    this.buff(),
    this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackBoard.bind(this), this.blackBoardLength())
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessPrepareStateDataT): void {
  _o.effectId = this.effectId();
  _o.buff = this.buff();
  _o.blackBoard = this.bb!.createObjList<clz_Torappu_Blackboard_DataPair, clz_Torappu_Blackboard_DataPairT>(this.blackBoard.bind(this), this.blackBoardLength());
}
}

export class clz_Torappu_AutoChessData_AutoChessPrepareStateDataT implements flatbuffers.IGeneratedObject {
constructor(
  public effectId: string|Uint8Array|null = null,
  public buff: string|Uint8Array|null = null,
  public blackBoard: (clz_Torappu_Blackboard_DataPairT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const effectId = (this.effectId !== null ? builder.createString(this.effectId!) : 0);
  const buff = (this.buff !== null ? builder.createString(this.buff!) : 0);
  const blackBoard = clz_Torappu_AutoChessData_AutoChessPrepareStateData.createBlackBoardVector(builder, builder.createObjectOffsetList(this.blackBoard));

  return clz_Torappu_AutoChessData_AutoChessPrepareStateData.createclz_Torappu_AutoChessData_AutoChessPrepareStateData(builder,
    effectId,
    buff,
    blackBoard
  );
}
}
