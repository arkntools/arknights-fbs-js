// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_FireworkData_ConstData implements flatbuffers.IUnpackableObject<clz_Torappu_FireworkData_ConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_FireworkData_ConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_FireworkData_ConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_FireworkData_ConstData):clz_Torappu_FireworkData_ConstData {
  return (obj || new clz_Torappu_FireworkData_ConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_FireworkData_ConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_FireworkData_ConstData):clz_Torappu_FireworkData_ConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_FireworkData_ConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxFireworkNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxFireworkPlateRowCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlockStageCode():string|null
unlockStageCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockStageCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dontDisplayFireworkPluginStageList(index: number):string
dontDisplayFireworkPluginStageList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
dontDisplayFireworkPluginStageList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dontDisplayFireworkPluginStageListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_FireworkData_ConstData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMaxFireworkNum(builder:flatbuffers.Builder, maxFireworkNum:number) {
  builder.addFieldInt32(0, maxFireworkNum, 0);
}

static addMaxFireworkPlateRowCount(builder:flatbuffers.Builder, maxFireworkPlateRowCount:number) {
  builder.addFieldInt32(1, maxFireworkPlateRowCount, 0);
}

static addUnlockStageCode(builder:flatbuffers.Builder, unlockStageCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, unlockStageCodeOffset, 0);
}

static addDontDisplayFireworkPluginStageList(builder:flatbuffers.Builder, dontDisplayFireworkPluginStageListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dontDisplayFireworkPluginStageListOffset, 0);
}

static createDontDisplayFireworkPluginStageListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDontDisplayFireworkPluginStageListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_FireworkData_ConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_FireworkData_ConstData(builder:flatbuffers.Builder, maxFireworkNum:number, maxFireworkPlateRowCount:number, unlockStageCodeOffset:flatbuffers.Offset, dontDisplayFireworkPluginStageListOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_FireworkData_ConstData.startclz_Torappu_FireworkData_ConstData(builder);
  clz_Torappu_FireworkData_ConstData.addMaxFireworkNum(builder, maxFireworkNum);
  clz_Torappu_FireworkData_ConstData.addMaxFireworkPlateRowCount(builder, maxFireworkPlateRowCount);
  clz_Torappu_FireworkData_ConstData.addUnlockStageCode(builder, unlockStageCodeOffset);
  clz_Torappu_FireworkData_ConstData.addDontDisplayFireworkPluginStageList(builder, dontDisplayFireworkPluginStageListOffset);
  return clz_Torappu_FireworkData_ConstData.endclz_Torappu_FireworkData_ConstData(builder);
}

unpack(): clz_Torappu_FireworkData_ConstDataT {
  return new clz_Torappu_FireworkData_ConstDataT(
    this.maxFireworkNum(),
    this.maxFireworkPlateRowCount(),
    this.unlockStageCode(),
    this.bb!.createScalarList<string>(this.dontDisplayFireworkPluginStageList.bind(this), this.dontDisplayFireworkPluginStageListLength())
  );
}


unpackTo(_o: clz_Torappu_FireworkData_ConstDataT): void {
  _o.maxFireworkNum = this.maxFireworkNum();
  _o.maxFireworkPlateRowCount = this.maxFireworkPlateRowCount();
  _o.unlockStageCode = this.unlockStageCode();
  _o.dontDisplayFireworkPluginStageList = this.bb!.createScalarList<string>(this.dontDisplayFireworkPluginStageList.bind(this), this.dontDisplayFireworkPluginStageListLength());
}
}

export class clz_Torappu_FireworkData_ConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public maxFireworkNum: number = 0,
  public maxFireworkPlateRowCount: number = 0,
  public unlockStageCode: string|Uint8Array|null = null,
  public dontDisplayFireworkPluginStageList: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const unlockStageCode = (this.unlockStageCode !== null ? builder.createString(this.unlockStageCode!) : 0);
  const dontDisplayFireworkPluginStageList = clz_Torappu_FireworkData_ConstData.createDontDisplayFireworkPluginStageListVector(builder, builder.createObjectOffsetList(this.dontDisplayFireworkPluginStageList));

  return clz_Torappu_FireworkData_ConstData.createclz_Torappu_FireworkData_ConstData(builder,
    this.maxFireworkNum,
    this.maxFireworkPlateRowCount,
    unlockStageCode,
    dontDisplayFireworkPluginStageList
  );
}
}
