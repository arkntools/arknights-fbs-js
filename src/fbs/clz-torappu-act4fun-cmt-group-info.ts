// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Act4funCmtInfo, clz_Torappu_Act4funCmtInfoT } from './clz-torappu-act4fun-cmt-info.js';


export class clz_Torappu_Act4funCmtGroupInfo implements flatbuffers.IUnpackableObject<clz_Torappu_Act4funCmtGroupInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act4funCmtGroupInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act4funCmtGroupInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funCmtGroupInfo):clz_Torappu_Act4funCmtGroupInfo {
  return (obj || new clz_Torappu_Act4funCmtGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act4funCmtGroupInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funCmtGroupInfo):clz_Torappu_Act4funCmtGroupInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act4funCmtGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cmtGroupId():string|null
cmtGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cmtGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cmtList(index: number, obj?:clz_Torappu_Act4funCmtInfo):clz_Torappu_Act4funCmtInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_Act4funCmtInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cmtListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act4funCmtGroupInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCmtGroupId(builder:flatbuffers.Builder, cmtGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, cmtGroupIdOffset, 0);
}

static addCmtList(builder:flatbuffers.Builder, cmtListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cmtListOffset, 0);
}

static createCmtListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCmtListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act4funCmtGroupInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act4funCmtGroupInfo(builder:flatbuffers.Builder, cmtGroupIdOffset:flatbuffers.Offset, cmtListOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act4funCmtGroupInfo.startclz_Torappu_Act4funCmtGroupInfo(builder);
  clz_Torappu_Act4funCmtGroupInfo.addCmtGroupId(builder, cmtGroupIdOffset);
  clz_Torappu_Act4funCmtGroupInfo.addCmtList(builder, cmtListOffset);
  return clz_Torappu_Act4funCmtGroupInfo.endclz_Torappu_Act4funCmtGroupInfo(builder);
}

unpack(): clz_Torappu_Act4funCmtGroupInfoT {
  return new clz_Torappu_Act4funCmtGroupInfoT(
    this.cmtGroupId(),
    this.bb!.createObjList<clz_Torappu_Act4funCmtInfo, clz_Torappu_Act4funCmtInfoT>(this.cmtList.bind(this), this.cmtListLength())
  );
}


unpackTo(_o: clz_Torappu_Act4funCmtGroupInfoT): void {
  _o.cmtGroupId = this.cmtGroupId();
  _o.cmtList = this.bb!.createObjList<clz_Torappu_Act4funCmtInfo, clz_Torappu_Act4funCmtInfoT>(this.cmtList.bind(this), this.cmtListLength());
}
}

export class clz_Torappu_Act4funCmtGroupInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public cmtGroupId: string|Uint8Array|null = null,
  public cmtList: (clz_Torappu_Act4funCmtInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cmtGroupId = (this.cmtGroupId !== null ? builder.createString(this.cmtGroupId!) : 0);
  const cmtList = clz_Torappu_Act4funCmtGroupInfo.createCmtListVector(builder, builder.createObjectOffsetList(this.cmtList));

  return clz_Torappu_Act4funCmtGroupInfo.createclz_Torappu_Act4funCmtGroupInfo(builder,
    cmtGroupId,
    cmtList
  );
}
}
