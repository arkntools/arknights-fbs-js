// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_GridPosition, clz_Torappu_GridPositionT } from './clz-torappu-grid-position.js';


export class clz_Torappu_BuildingData_PrefabInfo implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_PrefabInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_PrefabInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_PrefabInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_PrefabInfo):clz_Torappu_BuildingData_PrefabInfo {
  return (obj || new clz_Torappu_BuildingData_PrefabInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_PrefabInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_PrefabInfo):clz_Torappu_BuildingData_PrefabInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_PrefabInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blueprintRoomOverrideId():string|null
blueprintRoomOverrideId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
blueprintRoomOverrideId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

size(obj?:clz_Torappu_GridPosition):clz_Torappu_GridPosition|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_GridPosition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

floorGridSize(obj?:clz_Torappu_GridPosition):clz_Torappu_GridPosition|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_GridPosition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

backWallGridSize(obj?:clz_Torappu_GridPosition):clz_Torappu_GridPosition|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_GridPosition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

obstacleId():string|null
obstacleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obstacleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_BuildingData_PrefabInfo(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addBlueprintRoomOverrideId(builder:flatbuffers.Builder, blueprintRoomOverrideIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, blueprintRoomOverrideIdOffset, 0);
}

static addSize(builder:flatbuffers.Builder, sizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sizeOffset, 0);
}

static addFloorGridSize(builder:flatbuffers.Builder, floorGridSizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, floorGridSizeOffset, 0);
}

static addBackWallGridSize(builder:flatbuffers.Builder, backWallGridSizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, backWallGridSizeOffset, 0);
}

static addObstacleId(builder:flatbuffers.Builder, obstacleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, obstacleIdOffset, 0);
}

static endclz_Torappu_BuildingData_PrefabInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_BuildingData_PrefabInfoT {
  return new clz_Torappu_BuildingData_PrefabInfoT(
    this.id(),
    this.blueprintRoomOverrideId(),
    (this.size() !== null ? this.size()!.unpack() : null),
    (this.floorGridSize() !== null ? this.floorGridSize()!.unpack() : null),
    (this.backWallGridSize() !== null ? this.backWallGridSize()!.unpack() : null),
    this.obstacleId()
  );
}


unpackTo(_o: clz_Torappu_BuildingData_PrefabInfoT): void {
  _o.id = this.id();
  _o.blueprintRoomOverrideId = this.blueprintRoomOverrideId();
  _o.size = (this.size() !== null ? this.size()!.unpack() : null);
  _o.floorGridSize = (this.floorGridSize() !== null ? this.floorGridSize()!.unpack() : null);
  _o.backWallGridSize = (this.backWallGridSize() !== null ? this.backWallGridSize()!.unpack() : null);
  _o.obstacleId = this.obstacleId();
}
}

export class clz_Torappu_BuildingData_PrefabInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public blueprintRoomOverrideId: string|Uint8Array|null = null,
  public size: clz_Torappu_GridPositionT|null = null,
  public floorGridSize: clz_Torappu_GridPositionT|null = null,
  public backWallGridSize: clz_Torappu_GridPositionT|null = null,
  public obstacleId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const blueprintRoomOverrideId = (this.blueprintRoomOverrideId !== null ? builder.createString(this.blueprintRoomOverrideId!) : 0);
  const size = (this.size !== null ? this.size!.pack(builder) : 0);
  const floorGridSize = (this.floorGridSize !== null ? this.floorGridSize!.pack(builder) : 0);
  const backWallGridSize = (this.backWallGridSize !== null ? this.backWallGridSize!.pack(builder) : 0);
  const obstacleId = (this.obstacleId !== null ? builder.createString(this.obstacleId!) : 0);

  clz_Torappu_BuildingData_PrefabInfo.startclz_Torappu_BuildingData_PrefabInfo(builder);
  clz_Torappu_BuildingData_PrefabInfo.addId(builder, id);
  clz_Torappu_BuildingData_PrefabInfo.addBlueprintRoomOverrideId(builder, blueprintRoomOverrideId);
  clz_Torappu_BuildingData_PrefabInfo.addSize(builder, size);
  clz_Torappu_BuildingData_PrefabInfo.addFloorGridSize(builder, floorGridSize);
  clz_Torappu_BuildingData_PrefabInfo.addBackWallGridSize(builder, backWallGridSize);
  clz_Torappu_BuildingData_PrefabInfo.addObstacleId(builder, obstacleId);

  return clz_Torappu_BuildingData_PrefabInfo.endclz_Torappu_BuildingData_PrefabInfo(builder);
}
}
