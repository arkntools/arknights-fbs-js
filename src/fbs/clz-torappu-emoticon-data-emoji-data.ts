// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_EmojiSceneType } from './enum--torappu-emoji-scene-type.js';


export class clz_Torappu_EmoticonData_EmojiData implements flatbuffers.IUnpackableObject<clz_Torappu_EmoticonData_EmojiDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_EmoticonData_EmojiData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_EmoticonData_EmojiData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_EmoticonData_EmojiData):clz_Torappu_EmoticonData_EmojiData {
  return (obj || new clz_Torappu_EmoticonData_EmojiData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_EmoticonData_EmojiData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_EmoticonData_EmojiData):clz_Torappu_EmoticonData_EmojiData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_EmoticonData_EmojiData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():enum__Torappu_EmojiSceneType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_EmojiSceneType.NONE;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

picId():string|null
picId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
picId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_EmoticonData_EmojiData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:enum__Torappu_EmojiSceneType) {
  builder.addFieldInt32(1, type, enum__Torappu_EmojiSceneType.NONE);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(2, sortId, 0);
}

static addPicId(builder:flatbuffers.Builder, picIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, picIdOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descOffset, 0);
}

static endclz_Torappu_EmoticonData_EmojiData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_EmoticonData_EmojiData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, type:enum__Torappu_EmojiSceneType, sortId:number, picIdOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_EmoticonData_EmojiData.startclz_Torappu_EmoticonData_EmojiData(builder);
  clz_Torappu_EmoticonData_EmojiData.addId(builder, idOffset);
  clz_Torappu_EmoticonData_EmojiData.addType(builder, type);
  clz_Torappu_EmoticonData_EmojiData.addSortId(builder, sortId);
  clz_Torappu_EmoticonData_EmojiData.addPicId(builder, picIdOffset);
  clz_Torappu_EmoticonData_EmojiData.addDesc(builder, descOffset);
  return clz_Torappu_EmoticonData_EmojiData.endclz_Torappu_EmoticonData_EmojiData(builder);
}

unpack(): clz_Torappu_EmoticonData_EmojiDataT {
  return new clz_Torappu_EmoticonData_EmojiDataT(
    this.id(),
    this.type(),
    this.sortId(),
    this.picId(),
    this.desc()
  );
}


unpackTo(_o: clz_Torappu_EmoticonData_EmojiDataT): void {
  _o.id = this.id();
  _o.type = this.type();
  _o.sortId = this.sortId();
  _o.picId = this.picId();
  _o.desc = this.desc();
}
}

export class clz_Torappu_EmoticonData_EmojiDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public type: enum__Torappu_EmojiSceneType = enum__Torappu_EmojiSceneType.NONE,
  public sortId: number = 0,
  public picId: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const picId = (this.picId !== null ? builder.createString(this.picId!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);

  return clz_Torappu_EmoticonData_EmojiData.createclz_Torappu_EmoticonData_EmojiData(builder,
    id,
    this.type,
    this.sortId,
    picId,
    desc
  );
}
}
