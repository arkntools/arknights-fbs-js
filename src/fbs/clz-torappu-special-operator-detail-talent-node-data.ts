// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_SpecialOperatorDetailTalentNodeData implements flatbuffers.IUnpackableObject<clz_Torappu_SpecialOperatorDetailTalentNodeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SpecialOperatorDetailTalentNodeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SpecialOperatorDetailTalentNodeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SpecialOperatorDetailTalentNodeData):clz_Torappu_SpecialOperatorDetailTalentNodeData {
  return (obj || new clz_Torappu_SpecialOperatorDetailTalentNodeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SpecialOperatorDetailTalentNodeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SpecialOperatorDetailTalentNodeData):clz_Torappu_SpecialOperatorDetailTalentNodeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SpecialOperatorDetailTalentNodeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nodeId():string|null
nodeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nodeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

talentIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

updateCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SpecialOperatorDetailTalentNodeData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addNodeId(builder:flatbuffers.Builder, nodeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nodeIdOffset, 0);
}

static addTalentIndex(builder:flatbuffers.Builder, talentIndex:number) {
  builder.addFieldInt32(1, talentIndex, 0);
}

static addUpdateCount(builder:flatbuffers.Builder, updateCount:number) {
  builder.addFieldInt32(2, updateCount, 0);
}

static endclz_Torappu_SpecialOperatorDetailTalentNodeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SpecialOperatorDetailTalentNodeData(builder:flatbuffers.Builder, nodeIdOffset:flatbuffers.Offset, talentIndex:number, updateCount:number):flatbuffers.Offset {
  clz_Torappu_SpecialOperatorDetailTalentNodeData.startclz_Torappu_SpecialOperatorDetailTalentNodeData(builder);
  clz_Torappu_SpecialOperatorDetailTalentNodeData.addNodeId(builder, nodeIdOffset);
  clz_Torappu_SpecialOperatorDetailTalentNodeData.addTalentIndex(builder, talentIndex);
  clz_Torappu_SpecialOperatorDetailTalentNodeData.addUpdateCount(builder, updateCount);
  return clz_Torappu_SpecialOperatorDetailTalentNodeData.endclz_Torappu_SpecialOperatorDetailTalentNodeData(builder);
}

unpack(): clz_Torappu_SpecialOperatorDetailTalentNodeDataT {
  return new clz_Torappu_SpecialOperatorDetailTalentNodeDataT(
    this.nodeId(),
    this.talentIndex(),
    this.updateCount()
  );
}


unpackTo(_o: clz_Torappu_SpecialOperatorDetailTalentNodeDataT): void {
  _o.nodeId = this.nodeId();
  _o.talentIndex = this.talentIndex();
  _o.updateCount = this.updateCount();
}
}

export class clz_Torappu_SpecialOperatorDetailTalentNodeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public nodeId: string|Uint8Array|null = null,
  public talentIndex: number = 0,
  public updateCount: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const nodeId = (this.nodeId !== null ? builder.createString(this.nodeId!) : 0);

  return clz_Torappu_SpecialOperatorDetailTalentNodeData.createclz_Torappu_SpecialOperatorDetailTalentNodeData(builder,
    nodeId,
    this.talentIndex,
    this.updateCount
  );
}
}
