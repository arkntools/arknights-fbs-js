// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_UnityEngine_Vector2, clz_UnityEngine_Vector2T } from './clz-unity-engine-vector2.js';
import { list_int, list_intT } from './list-int.js';


export class clz_Torappu_SandboxV2MapZoneData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2MapZoneDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2MapZoneData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2MapZoneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2MapZoneData):clz_Torappu_SandboxV2MapZoneData {
  return (obj || new clz_Torappu_SandboxV2MapZoneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2MapZoneData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2MapZoneData):clz_Torappu_SandboxV2MapZoneData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2MapZoneData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

zoneId():string|null
zoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
zoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

center(obj?:clz_UnityEngine_Vector2):clz_UnityEngine_Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_UnityEngine_Vector2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

vertices(index: number, obj?:clz_UnityEngine_Vector2):clz_UnityEngine_Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_UnityEngine_Vector2()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

verticesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

triangles(index: number, obj?:list_int):list_int|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new list_int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trianglesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hasBorder():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_SandboxV2MapZoneData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addZoneId(builder:flatbuffers.Builder, zoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, zoneIdOffset, 0);
}

static addCenter(builder:flatbuffers.Builder, centerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, centerOffset, 0);
}

static addVertices(builder:flatbuffers.Builder, verticesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, verticesOffset, 0);
}

static createVerticesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVerticesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTriangles(builder:flatbuffers.Builder, trianglesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, trianglesOffset, 0);
}

static createTrianglesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrianglesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHasBorder(builder:flatbuffers.Builder, hasBorder:boolean) {
  builder.addFieldInt8(4, +hasBorder, +false);
}

static endclz_Torappu_SandboxV2MapZoneData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_SandboxV2MapZoneDataT {
  return new clz_Torappu_SandboxV2MapZoneDataT(
    this.zoneId(),
    (this.center() !== null ? this.center()!.unpack() : null),
    this.bb!.createObjList<clz_UnityEngine_Vector2, clz_UnityEngine_Vector2T>(this.vertices.bind(this), this.verticesLength()),
    this.bb!.createObjList<list_int, list_intT>(this.triangles.bind(this), this.trianglesLength()),
    this.hasBorder()
  );
}


unpackTo(_o: clz_Torappu_SandboxV2MapZoneDataT): void {
  _o.zoneId = this.zoneId();
  _o.center = (this.center() !== null ? this.center()!.unpack() : null);
  _o.vertices = this.bb!.createObjList<clz_UnityEngine_Vector2, clz_UnityEngine_Vector2T>(this.vertices.bind(this), this.verticesLength());
  _o.triangles = this.bb!.createObjList<list_int, list_intT>(this.triangles.bind(this), this.trianglesLength());
  _o.hasBorder = this.hasBorder();
}
}

export class clz_Torappu_SandboxV2MapZoneDataT implements flatbuffers.IGeneratedObject {
constructor(
  public zoneId: string|Uint8Array|null = null,
  public center: clz_UnityEngine_Vector2T|null = null,
  public vertices: (clz_UnityEngine_Vector2T)[] = [],
  public triangles: (list_intT)[] = [],
  public hasBorder: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const zoneId = (this.zoneId !== null ? builder.createString(this.zoneId!) : 0);
  const center = (this.center !== null ? this.center!.pack(builder) : 0);
  const vertices = clz_Torappu_SandboxV2MapZoneData.createVerticesVector(builder, builder.createObjectOffsetList(this.vertices));
  const triangles = clz_Torappu_SandboxV2MapZoneData.createTrianglesVector(builder, builder.createObjectOffsetList(this.triangles));

  clz_Torappu_SandboxV2MapZoneData.startclz_Torappu_SandboxV2MapZoneData(builder);
  clz_Torappu_SandboxV2MapZoneData.addZoneId(builder, zoneId);
  clz_Torappu_SandboxV2MapZoneData.addCenter(builder, center);
  clz_Torappu_SandboxV2MapZoneData.addVertices(builder, vertices);
  clz_Torappu_SandboxV2MapZoneData.addTriangles(builder, triangles);
  clz_Torappu_SandboxV2MapZoneData.addHasBorder(builder, this.hasBorder);

  return clz_Torappu_SandboxV2MapZoneData.endclz_Torappu_SandboxV2MapZoneData(builder);
}
}
