// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_AutoChessData_AutoChessEnemyTypeData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessEnemyTypeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessEnemyTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessEnemyTypeData):clz_Torappu_AutoChessData_AutoChessEnemyTypeData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessEnemyTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessEnemyTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessEnemyTypeData):clz_Torappu_AutoChessData_AutoChessEnemyTypeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessEnemyTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

icon():string|null
icon(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
icon(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

typeIdentifier():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

involveRandom():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_AutoChessData_AutoChessEnemyTypeData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, descriptionOffset, 0);
}

static addIcon(builder:flatbuffers.Builder, iconOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, iconOffset, 0);
}

static addTypeIdentifier(builder:flatbuffers.Builder, typeIdentifier:number) {
  builder.addFieldInt32(5, typeIdentifier, 0);
}

static addInvolveRandom(builder:flatbuffers.Builder, involveRandom:boolean) {
  builder.addFieldInt8(6, +involveRandom, +false);
}

static endclz_Torappu_AutoChessData_AutoChessEnemyTypeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessEnemyTypeData(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, sortId:number, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, iconOffset:flatbuffers.Offset, typeIdentifier:number, involveRandom:boolean):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.startclz_Torappu_AutoChessData_AutoChessEnemyTypeData(builder);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addType(builder, typeOffset);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addSortId(builder, sortId);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addName(builder, nameOffset);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addDescription(builder, descriptionOffset);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addIcon(builder, iconOffset);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addTypeIdentifier(builder, typeIdentifier);
  clz_Torappu_AutoChessData_AutoChessEnemyTypeData.addInvolveRandom(builder, involveRandom);
  return clz_Torappu_AutoChessData_AutoChessEnemyTypeData.endclz_Torappu_AutoChessData_AutoChessEnemyTypeData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT {
  return new clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT(
    this.type(),
    this.sortId(),
    this.name(),
    this.description(),
    this.icon(),
    this.typeIdentifier(),
    this.involveRandom()
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT): void {
  _o.type = this.type();
  _o.sortId = this.sortId();
  _o.name = this.name();
  _o.description = this.description();
  _o.icon = this.icon();
  _o.typeIdentifier = this.typeIdentifier();
  _o.involveRandom = this.involveRandom();
}
}

export class clz_Torappu_AutoChessData_AutoChessEnemyTypeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public sortId: number = 0,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public icon: string|Uint8Array|null = null,
  public typeIdentifier: number = 0,
  public involveRandom: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const icon = (this.icon !== null ? builder.createString(this.icon!) : 0);

  return clz_Torappu_AutoChessData_AutoChessEnemyTypeData.createclz_Torappu_AutoChessData_AutoChessEnemyTypeData(builder,
    type,
    this.sortId,
    name,
    description,
    icon,
    this.typeIdentifier,
    this.involveRandom
  );
}
}
