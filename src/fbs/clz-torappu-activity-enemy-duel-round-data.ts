// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActivityEnemyDuelRoundData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityEnemyDuelRoundDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityEnemyDuelRoundData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityEnemyDuelRoundData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelRoundData):clz_Torappu_ActivityEnemyDuelRoundData {
  return (obj || new clz_Torappu_ActivityEnemyDuelRoundData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityEnemyDuelRoundData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityEnemyDuelRoundData):clz_Torappu_ActivityEnemyDuelRoundData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityEnemyDuelRoundData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

roundId():string|null
roundId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roundId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeId():string|null
modeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemyPredefined():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

roundScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemyScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

enemyScoreRandom():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

enemySideMinLeft():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemySideMaxLeft():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemySideMinRight():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemySideMaxRight():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

enemyPoolLeft():string|null
enemyPoolLeft(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyPoolLeft(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enemyPoolRight():string|null
enemyPoolRight(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
enemyPoolRight(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canSkip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canAllIn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_ActivityEnemyDuelRoundData(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addRoundId(builder:flatbuffers.Builder, roundIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, roundIdOffset, 0);
}

static addModeId(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, modeIdOffset, 0);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt32(2, round, 0);
}

static addEnemyPredefined(builder:flatbuffers.Builder, enemyPredefined:boolean) {
  builder.addFieldInt8(3, +enemyPredefined, +false);
}

static addRoundScore(builder:flatbuffers.Builder, roundScore:number) {
  builder.addFieldInt32(4, roundScore, 0);
}

static addEnemyScore(builder:flatbuffers.Builder, enemyScore:number) {
  builder.addFieldFloat32(5, enemyScore, 0.0);
}

static addEnemyScoreRandom(builder:flatbuffers.Builder, enemyScoreRandom:number) {
  builder.addFieldFloat32(6, enemyScoreRandom, 0.0);
}

static addEnemySideMinLeft(builder:flatbuffers.Builder, enemySideMinLeft:number) {
  builder.addFieldInt32(7, enemySideMinLeft, 0);
}

static addEnemySideMaxLeft(builder:flatbuffers.Builder, enemySideMaxLeft:number) {
  builder.addFieldInt32(8, enemySideMaxLeft, 0);
}

static addEnemySideMinRight(builder:flatbuffers.Builder, enemySideMinRight:number) {
  builder.addFieldInt32(9, enemySideMinRight, 0);
}

static addEnemySideMaxRight(builder:flatbuffers.Builder, enemySideMaxRight:number) {
  builder.addFieldInt32(10, enemySideMaxRight, 0);
}

static addEnemyPoolLeft(builder:flatbuffers.Builder, enemyPoolLeftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, enemyPoolLeftOffset, 0);
}

static addEnemyPoolRight(builder:flatbuffers.Builder, enemyPoolRightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, enemyPoolRightOffset, 0);
}

static addCanSkip(builder:flatbuffers.Builder, canSkip:boolean) {
  builder.addFieldInt8(13, +canSkip, +false);
}

static addCanAllIn(builder:flatbuffers.Builder, canAllIn:boolean) {
  builder.addFieldInt8(14, +canAllIn, +false);
}

static endclz_Torappu_ActivityEnemyDuelRoundData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityEnemyDuelRoundData(builder:flatbuffers.Builder, roundIdOffset:flatbuffers.Offset, modeIdOffset:flatbuffers.Offset, round:number, enemyPredefined:boolean, roundScore:number, enemyScore:number, enemyScoreRandom:number, enemySideMinLeft:number, enemySideMaxLeft:number, enemySideMinRight:number, enemySideMaxRight:number, enemyPoolLeftOffset:flatbuffers.Offset, enemyPoolRightOffset:flatbuffers.Offset, canSkip:boolean, canAllIn:boolean):flatbuffers.Offset {
  clz_Torappu_ActivityEnemyDuelRoundData.startclz_Torappu_ActivityEnemyDuelRoundData(builder);
  clz_Torappu_ActivityEnemyDuelRoundData.addRoundId(builder, roundIdOffset);
  clz_Torappu_ActivityEnemyDuelRoundData.addModeId(builder, modeIdOffset);
  clz_Torappu_ActivityEnemyDuelRoundData.addRound(builder, round);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemyPredefined(builder, enemyPredefined);
  clz_Torappu_ActivityEnemyDuelRoundData.addRoundScore(builder, roundScore);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemyScore(builder, enemyScore);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemyScoreRandom(builder, enemyScoreRandom);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemySideMinLeft(builder, enemySideMinLeft);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemySideMaxLeft(builder, enemySideMaxLeft);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemySideMinRight(builder, enemySideMinRight);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemySideMaxRight(builder, enemySideMaxRight);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemyPoolLeft(builder, enemyPoolLeftOffset);
  clz_Torappu_ActivityEnemyDuelRoundData.addEnemyPoolRight(builder, enemyPoolRightOffset);
  clz_Torappu_ActivityEnemyDuelRoundData.addCanSkip(builder, canSkip);
  clz_Torappu_ActivityEnemyDuelRoundData.addCanAllIn(builder, canAllIn);
  return clz_Torappu_ActivityEnemyDuelRoundData.endclz_Torappu_ActivityEnemyDuelRoundData(builder);
}

unpack(): clz_Torappu_ActivityEnemyDuelRoundDataT {
  return new clz_Torappu_ActivityEnemyDuelRoundDataT(
    this.roundId(),
    this.modeId(),
    this.round(),
    this.enemyPredefined(),
    this.roundScore(),
    this.enemyScore(),
    this.enemyScoreRandom(),
    this.enemySideMinLeft(),
    this.enemySideMaxLeft(),
    this.enemySideMinRight(),
    this.enemySideMaxRight(),
    this.enemyPoolLeft(),
    this.enemyPoolRight(),
    this.canSkip(),
    this.canAllIn()
  );
}


unpackTo(_o: clz_Torappu_ActivityEnemyDuelRoundDataT): void {
  _o.roundId = this.roundId();
  _o.modeId = this.modeId();
  _o.round = this.round();
  _o.enemyPredefined = this.enemyPredefined();
  _o.roundScore = this.roundScore();
  _o.enemyScore = this.enemyScore();
  _o.enemyScoreRandom = this.enemyScoreRandom();
  _o.enemySideMinLeft = this.enemySideMinLeft();
  _o.enemySideMaxLeft = this.enemySideMaxLeft();
  _o.enemySideMinRight = this.enemySideMinRight();
  _o.enemySideMaxRight = this.enemySideMaxRight();
  _o.enemyPoolLeft = this.enemyPoolLeft();
  _o.enemyPoolRight = this.enemyPoolRight();
  _o.canSkip = this.canSkip();
  _o.canAllIn = this.canAllIn();
}
}

export class clz_Torappu_ActivityEnemyDuelRoundDataT implements flatbuffers.IGeneratedObject {
constructor(
  public roundId: string|Uint8Array|null = null,
  public modeId: string|Uint8Array|null = null,
  public round: number = 0,
  public enemyPredefined: boolean = false,
  public roundScore: number = 0,
  public enemyScore: number = 0.0,
  public enemyScoreRandom: number = 0.0,
  public enemySideMinLeft: number = 0,
  public enemySideMaxLeft: number = 0,
  public enemySideMinRight: number = 0,
  public enemySideMaxRight: number = 0,
  public enemyPoolLeft: string|Uint8Array|null = null,
  public enemyPoolRight: string|Uint8Array|null = null,
  public canSkip: boolean = false,
  public canAllIn: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const roundId = (this.roundId !== null ? builder.createString(this.roundId!) : 0);
  const modeId = (this.modeId !== null ? builder.createString(this.modeId!) : 0);
  const enemyPoolLeft = (this.enemyPoolLeft !== null ? builder.createString(this.enemyPoolLeft!) : 0);
  const enemyPoolRight = (this.enemyPoolRight !== null ? builder.createString(this.enemyPoolRight!) : 0);

  return clz_Torappu_ActivityEnemyDuelRoundData.createclz_Torappu_ActivityEnemyDuelRoundData(builder,
    roundId,
    modeId,
    this.round,
    this.enemyPredefined,
    this.roundScore,
    this.enemyScore,
    this.enemyScoreRandom,
    this.enemySideMinLeft,
    this.enemySideMaxLeft,
    this.enemySideMinRight,
    this.enemySideMaxRight,
    enemyPoolLeft,
    enemyPoolRight,
    this.canSkip,
    this.canAllIn
  );
}
}
