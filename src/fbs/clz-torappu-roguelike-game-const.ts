// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string, dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringT } from './dict--enum--torappu-roguelike-reward-ex-drop-tag-src-type--string.js';
import { enum__Torappu_RoguelikeBankRewardCountType } from './enum--torappu-roguelike-bank-reward-count-type.js';
import { enum__Torappu_RoguelikeEventType } from './enum--torappu-roguelike-event-type.js';


export class clz_Torappu_RoguelikeGameConst implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeGameConstT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeGameConst {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeGameConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeGameConst):clz_Torappu_RoguelikeGameConst {
  return (obj || new clz_Torappu_RoguelikeGameConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeGameConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeGameConst):clz_Torappu_RoguelikeGameConst {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeGameConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

initSceneName():string|null
initSceneName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
initSceneName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

failSceneName():string|null
failSceneName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
failSceneName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hpItemId():string|null
hpItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hpItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

goldItemId():string|null
goldItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
goldItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

populationItemId():string|null
populationItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
populationItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

squadCapacityItemId():string|null
squadCapacityItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
squadCapacityItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expItemId():string|null
expItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

initialBandShowGradeFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bankMaxGold():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bankCostId():string|null
bankCostId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bankCostId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bankDrawCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bankDrawLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bankRewardCountType():enum__Torappu_RoguelikeBankRewardCountType {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RoguelikeBankRewardCountType.HIGHEST_RECORD;
}

spZoneShopBgmSignal():string|null
spZoneShopBgmSignal(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spZoneShopBgmSignal(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mimicEnemyIds(index: number):string
mimicEnemyIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mimicEnemyIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mimicEnemyIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bossIds(index: number):string
bossIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
bossIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

bossIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

goldChestTrapId():string|null
goldChestTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
goldChestTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

normBoxTrapId():string|null
normBoxTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
normBoxTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rareBoxTrapId():string|null
rareBoxTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rareBoxTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

badBoxTrapId():string|null
badBoxTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
badBoxTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxHpItemId():string|null
maxHpItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
maxHpItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

shieldItemId():string|null
shieldItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shieldItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

keyItemId():string|null
keyItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
keyItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

divinationKitItemId():string|null
divinationKitItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
divinationKitItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

chestKeyCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

chestKeyItemId():string|null
chestKeyItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chestKeyItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

keyColorId():string|null
keyColorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
keyColorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

onceNodeTypeList(index: number):enum__Torappu_RoguelikeEventType|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

onceNodeTypeListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

onceNodeTypeListArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

vertNodeCostDialogUseItemIconType():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

gpScoreRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

overflowUsageSquadBuff():string|null
overflowUsageSquadBuff(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
overflowUsageSquadBuff(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

specialTrapId():string|null
specialTrapId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialTrapId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trapRewardRelicId():string|null
trapRewardRelicId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trapRewardRelicId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockRouteItemId():string|null
unlockRouteItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockRouteItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unlockRouteItemCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hideBattleNodeName():string|null
hideBattleNodeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hideBattleNodeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hideBattleNodeDescription():string|null
hideBattleNodeDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hideBattleNodeDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hideNonBattleNodeName():string|null
hideNonBattleNodeName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hideNonBattleNodeName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hideNonBattleNodeDescription():string|null
hideNonBattleNodeDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hideNonBattleNodeDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charSelectExpeditionConflictToast():string|null
charSelectExpeditionConflictToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charSelectExpeditionConflictToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charSelectNoUpgradeConflictToast():string|null
charSelectNoUpgradeConflictToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charSelectNoUpgradeConflictToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

itemDropTagDict(index: number, obj?:dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string):dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? (obj || new dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

itemDropTagDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shopRefreshCostId():string|null
shopRefreshCostId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shopRefreshCostId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionLeaveToastFormat():string|null
expeditionLeaveToastFormat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionLeaveToastFormat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionReturnDescCureUpgrade():string|null
expeditionReturnDescCureUpgrade(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionReturnDescCureUpgrade(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionReturnDescUpgrade():string|null
expeditionReturnDescUpgrade(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionReturnDescUpgrade(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionReturnDescCure():string|null
expeditionReturnDescCure(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionReturnDescCure(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionReturnDesc():string|null
expeditionReturnDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionReturnDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionSelectDescFormat():string|null
expeditionSelectDescFormat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionSelectDescFormat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionReturnDescItem():string|null
expeditionReturnDescItem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
expeditionReturnDescItem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

expeditionReturnRewardBlackList(index: number):string
expeditionReturnRewardBlackList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
expeditionReturnRewardBlackList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

expeditionReturnRewardBlackListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

travelLeaveToastFormat():string|null
travelLeaveToastFormat(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
travelLeaveToastFormat(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charSelectTravelConflictToast():string|null
charSelectTravelConflictToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charSelectTravelConflictToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

travelReturnDescUpgrade():string|null
travelReturnDescUpgrade(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
travelReturnDescUpgrade(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

travelReturnDesc():string|null
travelReturnDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
travelReturnDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

travelReturnDescItem():string|null
travelReturnDescItem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
travelReturnDescItem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

traderReturnTitle():string|null
traderReturnTitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
traderReturnTitle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

traderReturnDesc():string|null
traderReturnDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
traderReturnDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

candleReturnDescCandleUpgrade():string|null
candleReturnDescCandleUpgrade(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
candleReturnDescCandleUpgrade(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

candleReturnDescCandle():string|null
candleReturnDescCandle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
candleReturnDescCandle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charSelectCandleConflictToast():string|null
charSelectCandleConflictToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charSelectCandleConflictToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charSelectGuidedConflictToast():string|null
charSelectGuidedConflictToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charSelectGuidedConflictToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

charSelectNonGuidedConflictToast():string|null
charSelectNonGuidedConflictToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charSelectNonGuidedConflictToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gainBuffDiffGrade():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dsPredictTips():string|null
dsPredictTips(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dsPredictTips(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dsBuffActiveTips():string|null
dsBuffActiveTips(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dsBuffActiveTips(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

totemDesc():string|null
totemDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
totemDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

copperGildDesc():string|null
copperGildDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
copperGildDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

relicDesc():string|null
relicDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
relicDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

buffDesc():string|null
buffDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
buffDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

refreshNodeItemId():string|null
refreshNodeItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refreshNodeItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

storingRecruitDesc():string|null
storingRecruitDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
storingRecruitDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

storingRecruitSucceedToast():string|null
storingRecruitSucceedToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
storingRecruitSucceedToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

specialRecruitReductionDesc():string|null
specialRecruitReductionDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialRecruitReductionDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

specialRecruitFuncDesc():string|null
specialRecruitFuncDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialRecruitFuncDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

specialRecruitDetailDesc():string|null
specialRecruitDetailDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialRecruitDetailDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

portalZones(index: number):string
portalZones(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
portalZones(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

portalZonesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

diffDisplayZoneId():string|null
diffDisplayZoneId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diffDisplayZoneId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

exploreExpOnKill():string|null
exploreExpOnKill(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
exploreExpOnKill(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fusionName():string|null
fusionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fusionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fusionNotifyToast():string|null
fusionNotifyToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fusionNotifyToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

haveSpZone():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

gotCharCandleBuffToast():string|null
gotCharCandleBuffToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gotCharCandleBuffToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gotCharsCandleBuffToast():string|null
gotCharsCandleBuffToast(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gotCharsCandleBuffToast(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stashedRecruitNodeDescription():string|null
stashedRecruitNodeDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stashedRecruitNodeDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stashedRecruitEmptyNodeDescription():string|null
stashedRecruitEmptyNodeDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stashedRecruitEmptyNodeDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

recruitStashMaxNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

recruitStashMinNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hasTopicCharSelectMenuButton():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_RoguelikeGameConst(builder:flatbuffers.Builder) {
  builder.startObject(89);
}

static addInitSceneName(builder:flatbuffers.Builder, initSceneNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, initSceneNameOffset, 0);
}

static addFailSceneName(builder:flatbuffers.Builder, failSceneNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, failSceneNameOffset, 0);
}

static addHpItemId(builder:flatbuffers.Builder, hpItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, hpItemIdOffset, 0);
}

static addGoldItemId(builder:flatbuffers.Builder, goldItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, goldItemIdOffset, 0);
}

static addPopulationItemId(builder:flatbuffers.Builder, populationItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, populationItemIdOffset, 0);
}

static addSquadCapacityItemId(builder:flatbuffers.Builder, squadCapacityItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, squadCapacityItemIdOffset, 0);
}

static addExpItemId(builder:flatbuffers.Builder, expItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, expItemIdOffset, 0);
}

static addInitialBandShowGradeFlag(builder:flatbuffers.Builder, initialBandShowGradeFlag:boolean) {
  builder.addFieldInt8(7, +initialBandShowGradeFlag, +false);
}

static addBankMaxGold(builder:flatbuffers.Builder, bankMaxGold:number) {
  builder.addFieldInt32(8, bankMaxGold, 0);
}

static addBankCostId(builder:flatbuffers.Builder, bankCostIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, bankCostIdOffset, 0);
}

static addBankDrawCount(builder:flatbuffers.Builder, bankDrawCount:number) {
  builder.addFieldInt32(10, bankDrawCount, 0);
}

static addBankDrawLimit(builder:flatbuffers.Builder, bankDrawLimit:number) {
  builder.addFieldInt32(11, bankDrawLimit, 0);
}

static addBankRewardCountType(builder:flatbuffers.Builder, bankRewardCountType:enum__Torappu_RoguelikeBankRewardCountType) {
  builder.addFieldInt32(12, bankRewardCountType, enum__Torappu_RoguelikeBankRewardCountType.HIGHEST_RECORD);
}

static addSpZoneShopBgmSignal(builder:flatbuffers.Builder, spZoneShopBgmSignalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, spZoneShopBgmSignalOffset, 0);
}

static addMimicEnemyIds(builder:flatbuffers.Builder, mimicEnemyIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, mimicEnemyIdsOffset, 0);
}

static createMimicEnemyIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMimicEnemyIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBossIds(builder:flatbuffers.Builder, bossIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, bossIdsOffset, 0);
}

static createBossIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBossIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGoldChestTrapId(builder:flatbuffers.Builder, goldChestTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, goldChestTrapIdOffset, 0);
}

static addNormBoxTrapId(builder:flatbuffers.Builder, normBoxTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, normBoxTrapIdOffset, 0);
}

static addRareBoxTrapId(builder:flatbuffers.Builder, rareBoxTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, rareBoxTrapIdOffset, 0);
}

static addBadBoxTrapId(builder:flatbuffers.Builder, badBoxTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, badBoxTrapIdOffset, 0);
}

static addMaxHpItemId(builder:flatbuffers.Builder, maxHpItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, maxHpItemIdOffset, 0);
}

static addShieldItemId(builder:flatbuffers.Builder, shieldItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, shieldItemIdOffset, 0);
}

static addKeyItemId(builder:flatbuffers.Builder, keyItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, keyItemIdOffset, 0);
}

static addDivinationKitItemId(builder:flatbuffers.Builder, divinationKitItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, divinationKitItemIdOffset, 0);
}

static addChestKeyCnt(builder:flatbuffers.Builder, chestKeyCnt:number) {
  builder.addFieldInt32(24, chestKeyCnt, 0);
}

static addChestKeyItemId(builder:flatbuffers.Builder, chestKeyItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, chestKeyItemIdOffset, 0);
}

static addKeyColorId(builder:flatbuffers.Builder, keyColorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, keyColorIdOffset, 0);
}

static addOnceNodeTypeList(builder:flatbuffers.Builder, onceNodeTypeListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, onceNodeTypeListOffset, 0);
}

static createOnceNodeTypeListVector(builder:flatbuffers.Builder, data:enum__Torappu_RoguelikeEventType[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startOnceNodeTypeListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVertNodeCostDialogUseItemIconType(builder:flatbuffers.Builder, vertNodeCostDialogUseItemIconType:boolean) {
  builder.addFieldInt8(28, +vertNodeCostDialogUseItemIconType, +false);
}

static addGpScoreRatio(builder:flatbuffers.Builder, gpScoreRatio:number) {
  builder.addFieldInt32(29, gpScoreRatio, 0);
}

static addOverflowUsageSquadBuff(builder:flatbuffers.Builder, overflowUsageSquadBuffOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, overflowUsageSquadBuffOffset, 0);
}

static addSpecialTrapId(builder:flatbuffers.Builder, specialTrapIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, specialTrapIdOffset, 0);
}

static addTrapRewardRelicId(builder:flatbuffers.Builder, trapRewardRelicIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, trapRewardRelicIdOffset, 0);
}

static addUnlockRouteItemId(builder:flatbuffers.Builder, unlockRouteItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, unlockRouteItemIdOffset, 0);
}

static addUnlockRouteItemCount(builder:flatbuffers.Builder, unlockRouteItemCount:number) {
  builder.addFieldInt32(34, unlockRouteItemCount, 0);
}

static addHideBattleNodeName(builder:flatbuffers.Builder, hideBattleNodeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, hideBattleNodeNameOffset, 0);
}

static addHideBattleNodeDescription(builder:flatbuffers.Builder, hideBattleNodeDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, hideBattleNodeDescriptionOffset, 0);
}

static addHideNonBattleNodeName(builder:flatbuffers.Builder, hideNonBattleNodeNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, hideNonBattleNodeNameOffset, 0);
}

static addHideNonBattleNodeDescription(builder:flatbuffers.Builder, hideNonBattleNodeDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, hideNonBattleNodeDescriptionOffset, 0);
}

static addCharSelectExpeditionConflictToast(builder:flatbuffers.Builder, charSelectExpeditionConflictToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, charSelectExpeditionConflictToastOffset, 0);
}

static addCharSelectNoUpgradeConflictToast(builder:flatbuffers.Builder, charSelectNoUpgradeConflictToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, charSelectNoUpgradeConflictToastOffset, 0);
}

static addItemDropTagDict(builder:flatbuffers.Builder, itemDropTagDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, itemDropTagDictOffset, 0);
}

static createItemDropTagDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemDropTagDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShopRefreshCostId(builder:flatbuffers.Builder, shopRefreshCostIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, shopRefreshCostIdOffset, 0);
}

static addExpeditionLeaveToastFormat(builder:flatbuffers.Builder, expeditionLeaveToastFormatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, expeditionLeaveToastFormatOffset, 0);
}

static addExpeditionReturnDescCureUpgrade(builder:flatbuffers.Builder, expeditionReturnDescCureUpgradeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, expeditionReturnDescCureUpgradeOffset, 0);
}

static addExpeditionReturnDescUpgrade(builder:flatbuffers.Builder, expeditionReturnDescUpgradeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, expeditionReturnDescUpgradeOffset, 0);
}

static addExpeditionReturnDescCure(builder:flatbuffers.Builder, expeditionReturnDescCureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, expeditionReturnDescCureOffset, 0);
}

static addExpeditionReturnDesc(builder:flatbuffers.Builder, expeditionReturnDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, expeditionReturnDescOffset, 0);
}

static addExpeditionSelectDescFormat(builder:flatbuffers.Builder, expeditionSelectDescFormatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, expeditionSelectDescFormatOffset, 0);
}

static addExpeditionReturnDescItem(builder:flatbuffers.Builder, expeditionReturnDescItemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, expeditionReturnDescItemOffset, 0);
}

static addExpeditionReturnRewardBlackList(builder:flatbuffers.Builder, expeditionReturnRewardBlackListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, expeditionReturnRewardBlackListOffset, 0);
}

static createExpeditionReturnRewardBlackListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExpeditionReturnRewardBlackListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTravelLeaveToastFormat(builder:flatbuffers.Builder, travelLeaveToastFormatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, travelLeaveToastFormatOffset, 0);
}

static addCharSelectTravelConflictToast(builder:flatbuffers.Builder, charSelectTravelConflictToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, charSelectTravelConflictToastOffset, 0);
}

static addTravelReturnDescUpgrade(builder:flatbuffers.Builder, travelReturnDescUpgradeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, travelReturnDescUpgradeOffset, 0);
}

static addTravelReturnDesc(builder:flatbuffers.Builder, travelReturnDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, travelReturnDescOffset, 0);
}

static addTravelReturnDescItem(builder:flatbuffers.Builder, travelReturnDescItemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, travelReturnDescItemOffset, 0);
}

static addTraderReturnTitle(builder:flatbuffers.Builder, traderReturnTitleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, traderReturnTitleOffset, 0);
}

static addTraderReturnDesc(builder:flatbuffers.Builder, traderReturnDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, traderReturnDescOffset, 0);
}

static addCandleReturnDescCandleUpgrade(builder:flatbuffers.Builder, candleReturnDescCandleUpgradeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, candleReturnDescCandleUpgradeOffset, 0);
}

static addCandleReturnDescCandle(builder:flatbuffers.Builder, candleReturnDescCandleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, candleReturnDescCandleOffset, 0);
}

static addCharSelectCandleConflictToast(builder:flatbuffers.Builder, charSelectCandleConflictToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, charSelectCandleConflictToastOffset, 0);
}

static addCharSelectGuidedConflictToast(builder:flatbuffers.Builder, charSelectGuidedConflictToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, charSelectGuidedConflictToastOffset, 0);
}

static addCharSelectNonGuidedConflictToast(builder:flatbuffers.Builder, charSelectNonGuidedConflictToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, charSelectNonGuidedConflictToastOffset, 0);
}

static addGainBuffDiffGrade(builder:flatbuffers.Builder, gainBuffDiffGrade:number) {
  builder.addFieldInt32(63, gainBuffDiffGrade, 0);
}

static addDsPredictTips(builder:flatbuffers.Builder, dsPredictTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, dsPredictTipsOffset, 0);
}

static addDsBuffActiveTips(builder:flatbuffers.Builder, dsBuffActiveTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, dsBuffActiveTipsOffset, 0);
}

static addTotemDesc(builder:flatbuffers.Builder, totemDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, totemDescOffset, 0);
}

static addCopperGildDesc(builder:flatbuffers.Builder, copperGildDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, copperGildDescOffset, 0);
}

static addRelicDesc(builder:flatbuffers.Builder, relicDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(68, relicDescOffset, 0);
}

static addBuffDesc(builder:flatbuffers.Builder, buffDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, buffDescOffset, 0);
}

static addRefreshNodeItemId(builder:flatbuffers.Builder, refreshNodeItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(70, refreshNodeItemIdOffset, 0);
}

static addStoringRecruitDesc(builder:flatbuffers.Builder, storingRecruitDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, storingRecruitDescOffset, 0);
}

static addStoringRecruitSucceedToast(builder:flatbuffers.Builder, storingRecruitSucceedToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, storingRecruitSucceedToastOffset, 0);
}

static addSpecialRecruitReductionDesc(builder:flatbuffers.Builder, specialRecruitReductionDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, specialRecruitReductionDescOffset, 0);
}

static addSpecialRecruitFuncDesc(builder:flatbuffers.Builder, specialRecruitFuncDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, specialRecruitFuncDescOffset, 0);
}

static addSpecialRecruitDetailDesc(builder:flatbuffers.Builder, specialRecruitDetailDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, specialRecruitDetailDescOffset, 0);
}

static addPortalZones(builder:flatbuffers.Builder, portalZonesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, portalZonesOffset, 0);
}

static createPortalZonesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPortalZonesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDiffDisplayZoneId(builder:flatbuffers.Builder, diffDisplayZoneIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, diffDisplayZoneIdOffset, 0);
}

static addExploreExpOnKill(builder:flatbuffers.Builder, exploreExpOnKillOffset:flatbuffers.Offset) {
  builder.addFieldOffset(78, exploreExpOnKillOffset, 0);
}

static addFusionName(builder:flatbuffers.Builder, fusionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, fusionNameOffset, 0);
}

static addFusionNotifyToast(builder:flatbuffers.Builder, fusionNotifyToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(80, fusionNotifyToastOffset, 0);
}

static addHaveSpZone(builder:flatbuffers.Builder, haveSpZone:boolean) {
  builder.addFieldInt8(81, +haveSpZone, +false);
}

static addGotCharCandleBuffToast(builder:flatbuffers.Builder, gotCharCandleBuffToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, gotCharCandleBuffToastOffset, 0);
}

static addGotCharsCandleBuffToast(builder:flatbuffers.Builder, gotCharsCandleBuffToastOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, gotCharsCandleBuffToastOffset, 0);
}

static addStashedRecruitNodeDescription(builder:flatbuffers.Builder, stashedRecruitNodeDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, stashedRecruitNodeDescriptionOffset, 0);
}

static addStashedRecruitEmptyNodeDescription(builder:flatbuffers.Builder, stashedRecruitEmptyNodeDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, stashedRecruitEmptyNodeDescriptionOffset, 0);
}

static addRecruitStashMaxNum(builder:flatbuffers.Builder, recruitStashMaxNum:number) {
  builder.addFieldInt32(86, recruitStashMaxNum, 0);
}

static addRecruitStashMinNum(builder:flatbuffers.Builder, recruitStashMinNum:number) {
  builder.addFieldInt32(87, recruitStashMinNum, 0);
}

static addHasTopicCharSelectMenuButton(builder:flatbuffers.Builder, hasTopicCharSelectMenuButton:boolean) {
  builder.addFieldInt8(88, +hasTopicCharSelectMenuButton, +false);
}

static endclz_Torappu_RoguelikeGameConst(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeGameConst(builder:flatbuffers.Builder, initSceneNameOffset:flatbuffers.Offset, failSceneNameOffset:flatbuffers.Offset, hpItemIdOffset:flatbuffers.Offset, goldItemIdOffset:flatbuffers.Offset, populationItemIdOffset:flatbuffers.Offset, squadCapacityItemIdOffset:flatbuffers.Offset, expItemIdOffset:flatbuffers.Offset, initialBandShowGradeFlag:boolean, bankMaxGold:number, bankCostIdOffset:flatbuffers.Offset, bankDrawCount:number, bankDrawLimit:number, bankRewardCountType:enum__Torappu_RoguelikeBankRewardCountType, spZoneShopBgmSignalOffset:flatbuffers.Offset, mimicEnemyIdsOffset:flatbuffers.Offset, bossIdsOffset:flatbuffers.Offset, goldChestTrapIdOffset:flatbuffers.Offset, normBoxTrapIdOffset:flatbuffers.Offset, rareBoxTrapIdOffset:flatbuffers.Offset, badBoxTrapIdOffset:flatbuffers.Offset, maxHpItemIdOffset:flatbuffers.Offset, shieldItemIdOffset:flatbuffers.Offset, keyItemIdOffset:flatbuffers.Offset, divinationKitItemIdOffset:flatbuffers.Offset, chestKeyCnt:number, chestKeyItemIdOffset:flatbuffers.Offset, keyColorIdOffset:flatbuffers.Offset, onceNodeTypeListOffset:flatbuffers.Offset, vertNodeCostDialogUseItemIconType:boolean, gpScoreRatio:number, overflowUsageSquadBuffOffset:flatbuffers.Offset, specialTrapIdOffset:flatbuffers.Offset, trapRewardRelicIdOffset:flatbuffers.Offset, unlockRouteItemIdOffset:flatbuffers.Offset, unlockRouteItemCount:number, hideBattleNodeNameOffset:flatbuffers.Offset, hideBattleNodeDescriptionOffset:flatbuffers.Offset, hideNonBattleNodeNameOffset:flatbuffers.Offset, hideNonBattleNodeDescriptionOffset:flatbuffers.Offset, charSelectExpeditionConflictToastOffset:flatbuffers.Offset, charSelectNoUpgradeConflictToastOffset:flatbuffers.Offset, itemDropTagDictOffset:flatbuffers.Offset, shopRefreshCostIdOffset:flatbuffers.Offset, expeditionLeaveToastFormatOffset:flatbuffers.Offset, expeditionReturnDescCureUpgradeOffset:flatbuffers.Offset, expeditionReturnDescUpgradeOffset:flatbuffers.Offset, expeditionReturnDescCureOffset:flatbuffers.Offset, expeditionReturnDescOffset:flatbuffers.Offset, expeditionSelectDescFormatOffset:flatbuffers.Offset, expeditionReturnDescItemOffset:flatbuffers.Offset, expeditionReturnRewardBlackListOffset:flatbuffers.Offset, travelLeaveToastFormatOffset:flatbuffers.Offset, charSelectTravelConflictToastOffset:flatbuffers.Offset, travelReturnDescUpgradeOffset:flatbuffers.Offset, travelReturnDescOffset:flatbuffers.Offset, travelReturnDescItemOffset:flatbuffers.Offset, traderReturnTitleOffset:flatbuffers.Offset, traderReturnDescOffset:flatbuffers.Offset, candleReturnDescCandleUpgradeOffset:flatbuffers.Offset, candleReturnDescCandleOffset:flatbuffers.Offset, charSelectCandleConflictToastOffset:flatbuffers.Offset, charSelectGuidedConflictToastOffset:flatbuffers.Offset, charSelectNonGuidedConflictToastOffset:flatbuffers.Offset, gainBuffDiffGrade:number, dsPredictTipsOffset:flatbuffers.Offset, dsBuffActiveTipsOffset:flatbuffers.Offset, totemDescOffset:flatbuffers.Offset, copperGildDescOffset:flatbuffers.Offset, relicDescOffset:flatbuffers.Offset, buffDescOffset:flatbuffers.Offset, refreshNodeItemIdOffset:flatbuffers.Offset, storingRecruitDescOffset:flatbuffers.Offset, storingRecruitSucceedToastOffset:flatbuffers.Offset, specialRecruitReductionDescOffset:flatbuffers.Offset, specialRecruitFuncDescOffset:flatbuffers.Offset, specialRecruitDetailDescOffset:flatbuffers.Offset, portalZonesOffset:flatbuffers.Offset, diffDisplayZoneIdOffset:flatbuffers.Offset, exploreExpOnKillOffset:flatbuffers.Offset, fusionNameOffset:flatbuffers.Offset, fusionNotifyToastOffset:flatbuffers.Offset, haveSpZone:boolean, gotCharCandleBuffToastOffset:flatbuffers.Offset, gotCharsCandleBuffToastOffset:flatbuffers.Offset, stashedRecruitNodeDescriptionOffset:flatbuffers.Offset, stashedRecruitEmptyNodeDescriptionOffset:flatbuffers.Offset, recruitStashMaxNum:number, recruitStashMinNum:number, hasTopicCharSelectMenuButton:boolean):flatbuffers.Offset {
  clz_Torappu_RoguelikeGameConst.startclz_Torappu_RoguelikeGameConst(builder);
  clz_Torappu_RoguelikeGameConst.addInitSceneName(builder, initSceneNameOffset);
  clz_Torappu_RoguelikeGameConst.addFailSceneName(builder, failSceneNameOffset);
  clz_Torappu_RoguelikeGameConst.addHpItemId(builder, hpItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addGoldItemId(builder, goldItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addPopulationItemId(builder, populationItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addSquadCapacityItemId(builder, squadCapacityItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addExpItemId(builder, expItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addInitialBandShowGradeFlag(builder, initialBandShowGradeFlag);
  clz_Torappu_RoguelikeGameConst.addBankMaxGold(builder, bankMaxGold);
  clz_Torappu_RoguelikeGameConst.addBankCostId(builder, bankCostIdOffset);
  clz_Torappu_RoguelikeGameConst.addBankDrawCount(builder, bankDrawCount);
  clz_Torappu_RoguelikeGameConst.addBankDrawLimit(builder, bankDrawLimit);
  clz_Torappu_RoguelikeGameConst.addBankRewardCountType(builder, bankRewardCountType);
  clz_Torappu_RoguelikeGameConst.addSpZoneShopBgmSignal(builder, spZoneShopBgmSignalOffset);
  clz_Torappu_RoguelikeGameConst.addMimicEnemyIds(builder, mimicEnemyIdsOffset);
  clz_Torappu_RoguelikeGameConst.addBossIds(builder, bossIdsOffset);
  clz_Torappu_RoguelikeGameConst.addGoldChestTrapId(builder, goldChestTrapIdOffset);
  clz_Torappu_RoguelikeGameConst.addNormBoxTrapId(builder, normBoxTrapIdOffset);
  clz_Torappu_RoguelikeGameConst.addRareBoxTrapId(builder, rareBoxTrapIdOffset);
  clz_Torappu_RoguelikeGameConst.addBadBoxTrapId(builder, badBoxTrapIdOffset);
  clz_Torappu_RoguelikeGameConst.addMaxHpItemId(builder, maxHpItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addShieldItemId(builder, shieldItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addKeyItemId(builder, keyItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addDivinationKitItemId(builder, divinationKitItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addChestKeyCnt(builder, chestKeyCnt);
  clz_Torappu_RoguelikeGameConst.addChestKeyItemId(builder, chestKeyItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addKeyColorId(builder, keyColorIdOffset);
  clz_Torappu_RoguelikeGameConst.addOnceNodeTypeList(builder, onceNodeTypeListOffset);
  clz_Torappu_RoguelikeGameConst.addVertNodeCostDialogUseItemIconType(builder, vertNodeCostDialogUseItemIconType);
  clz_Torappu_RoguelikeGameConst.addGpScoreRatio(builder, gpScoreRatio);
  clz_Torappu_RoguelikeGameConst.addOverflowUsageSquadBuff(builder, overflowUsageSquadBuffOffset);
  clz_Torappu_RoguelikeGameConst.addSpecialTrapId(builder, specialTrapIdOffset);
  clz_Torappu_RoguelikeGameConst.addTrapRewardRelicId(builder, trapRewardRelicIdOffset);
  clz_Torappu_RoguelikeGameConst.addUnlockRouteItemId(builder, unlockRouteItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addUnlockRouteItemCount(builder, unlockRouteItemCount);
  clz_Torappu_RoguelikeGameConst.addHideBattleNodeName(builder, hideBattleNodeNameOffset);
  clz_Torappu_RoguelikeGameConst.addHideBattleNodeDescription(builder, hideBattleNodeDescriptionOffset);
  clz_Torappu_RoguelikeGameConst.addHideNonBattleNodeName(builder, hideNonBattleNodeNameOffset);
  clz_Torappu_RoguelikeGameConst.addHideNonBattleNodeDescription(builder, hideNonBattleNodeDescriptionOffset);
  clz_Torappu_RoguelikeGameConst.addCharSelectExpeditionConflictToast(builder, charSelectExpeditionConflictToastOffset);
  clz_Torappu_RoguelikeGameConst.addCharSelectNoUpgradeConflictToast(builder, charSelectNoUpgradeConflictToastOffset);
  clz_Torappu_RoguelikeGameConst.addItemDropTagDict(builder, itemDropTagDictOffset);
  clz_Torappu_RoguelikeGameConst.addShopRefreshCostId(builder, shopRefreshCostIdOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionLeaveToastFormat(builder, expeditionLeaveToastFormatOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionReturnDescCureUpgrade(builder, expeditionReturnDescCureUpgradeOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionReturnDescUpgrade(builder, expeditionReturnDescUpgradeOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionReturnDescCure(builder, expeditionReturnDescCureOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionReturnDesc(builder, expeditionReturnDescOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionSelectDescFormat(builder, expeditionSelectDescFormatOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionReturnDescItem(builder, expeditionReturnDescItemOffset);
  clz_Torappu_RoguelikeGameConst.addExpeditionReturnRewardBlackList(builder, expeditionReturnRewardBlackListOffset);
  clz_Torappu_RoguelikeGameConst.addTravelLeaveToastFormat(builder, travelLeaveToastFormatOffset);
  clz_Torappu_RoguelikeGameConst.addCharSelectTravelConflictToast(builder, charSelectTravelConflictToastOffset);
  clz_Torappu_RoguelikeGameConst.addTravelReturnDescUpgrade(builder, travelReturnDescUpgradeOffset);
  clz_Torappu_RoguelikeGameConst.addTravelReturnDesc(builder, travelReturnDescOffset);
  clz_Torappu_RoguelikeGameConst.addTravelReturnDescItem(builder, travelReturnDescItemOffset);
  clz_Torappu_RoguelikeGameConst.addTraderReturnTitle(builder, traderReturnTitleOffset);
  clz_Torappu_RoguelikeGameConst.addTraderReturnDesc(builder, traderReturnDescOffset);
  clz_Torappu_RoguelikeGameConst.addCandleReturnDescCandleUpgrade(builder, candleReturnDescCandleUpgradeOffset);
  clz_Torappu_RoguelikeGameConst.addCandleReturnDescCandle(builder, candleReturnDescCandleOffset);
  clz_Torappu_RoguelikeGameConst.addCharSelectCandleConflictToast(builder, charSelectCandleConflictToastOffset);
  clz_Torappu_RoguelikeGameConst.addCharSelectGuidedConflictToast(builder, charSelectGuidedConflictToastOffset);
  clz_Torappu_RoguelikeGameConst.addCharSelectNonGuidedConflictToast(builder, charSelectNonGuidedConflictToastOffset);
  clz_Torappu_RoguelikeGameConst.addGainBuffDiffGrade(builder, gainBuffDiffGrade);
  clz_Torappu_RoguelikeGameConst.addDsPredictTips(builder, dsPredictTipsOffset);
  clz_Torappu_RoguelikeGameConst.addDsBuffActiveTips(builder, dsBuffActiveTipsOffset);
  clz_Torappu_RoguelikeGameConst.addTotemDesc(builder, totemDescOffset);
  clz_Torappu_RoguelikeGameConst.addCopperGildDesc(builder, copperGildDescOffset);
  clz_Torappu_RoguelikeGameConst.addRelicDesc(builder, relicDescOffset);
  clz_Torappu_RoguelikeGameConst.addBuffDesc(builder, buffDescOffset);
  clz_Torappu_RoguelikeGameConst.addRefreshNodeItemId(builder, refreshNodeItemIdOffset);
  clz_Torappu_RoguelikeGameConst.addStoringRecruitDesc(builder, storingRecruitDescOffset);
  clz_Torappu_RoguelikeGameConst.addStoringRecruitSucceedToast(builder, storingRecruitSucceedToastOffset);
  clz_Torappu_RoguelikeGameConst.addSpecialRecruitReductionDesc(builder, specialRecruitReductionDescOffset);
  clz_Torappu_RoguelikeGameConst.addSpecialRecruitFuncDesc(builder, specialRecruitFuncDescOffset);
  clz_Torappu_RoguelikeGameConst.addSpecialRecruitDetailDesc(builder, specialRecruitDetailDescOffset);
  clz_Torappu_RoguelikeGameConst.addPortalZones(builder, portalZonesOffset);
  clz_Torappu_RoguelikeGameConst.addDiffDisplayZoneId(builder, diffDisplayZoneIdOffset);
  clz_Torappu_RoguelikeGameConst.addExploreExpOnKill(builder, exploreExpOnKillOffset);
  clz_Torappu_RoguelikeGameConst.addFusionName(builder, fusionNameOffset);
  clz_Torappu_RoguelikeGameConst.addFusionNotifyToast(builder, fusionNotifyToastOffset);
  clz_Torappu_RoguelikeGameConst.addHaveSpZone(builder, haveSpZone);
  clz_Torappu_RoguelikeGameConst.addGotCharCandleBuffToast(builder, gotCharCandleBuffToastOffset);
  clz_Torappu_RoguelikeGameConst.addGotCharsCandleBuffToast(builder, gotCharsCandleBuffToastOffset);
  clz_Torappu_RoguelikeGameConst.addStashedRecruitNodeDescription(builder, stashedRecruitNodeDescriptionOffset);
  clz_Torappu_RoguelikeGameConst.addStashedRecruitEmptyNodeDescription(builder, stashedRecruitEmptyNodeDescriptionOffset);
  clz_Torappu_RoguelikeGameConst.addRecruitStashMaxNum(builder, recruitStashMaxNum);
  clz_Torappu_RoguelikeGameConst.addRecruitStashMinNum(builder, recruitStashMinNum);
  clz_Torappu_RoguelikeGameConst.addHasTopicCharSelectMenuButton(builder, hasTopicCharSelectMenuButton);
  return clz_Torappu_RoguelikeGameConst.endclz_Torappu_RoguelikeGameConst(builder);
}

unpack(): clz_Torappu_RoguelikeGameConstT {
  return new clz_Torappu_RoguelikeGameConstT(
    this.initSceneName(),
    this.failSceneName(),
    this.hpItemId(),
    this.goldItemId(),
    this.populationItemId(),
    this.squadCapacityItemId(),
    this.expItemId(),
    this.initialBandShowGradeFlag(),
    this.bankMaxGold(),
    this.bankCostId(),
    this.bankDrawCount(),
    this.bankDrawLimit(),
    this.bankRewardCountType(),
    this.spZoneShopBgmSignal(),
    this.bb!.createScalarList<string>(this.mimicEnemyIds.bind(this), this.mimicEnemyIdsLength()),
    this.bb!.createScalarList<string>(this.bossIds.bind(this), this.bossIdsLength()),
    this.goldChestTrapId(),
    this.normBoxTrapId(),
    this.rareBoxTrapId(),
    this.badBoxTrapId(),
    this.maxHpItemId(),
    this.shieldItemId(),
    this.keyItemId(),
    this.divinationKitItemId(),
    this.chestKeyCnt(),
    this.chestKeyItemId(),
    this.keyColorId(),
    this.bb!.createScalarList<enum__Torappu_RoguelikeEventType>(this.onceNodeTypeList.bind(this), this.onceNodeTypeListLength()),
    this.vertNodeCostDialogUseItemIconType(),
    this.gpScoreRatio(),
    this.overflowUsageSquadBuff(),
    this.specialTrapId(),
    this.trapRewardRelicId(),
    this.unlockRouteItemId(),
    this.unlockRouteItemCount(),
    this.hideBattleNodeName(),
    this.hideBattleNodeDescription(),
    this.hideNonBattleNodeName(),
    this.hideNonBattleNodeDescription(),
    this.charSelectExpeditionConflictToast(),
    this.charSelectNoUpgradeConflictToast(),
    this.bb!.createObjList<dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string, dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringT>(this.itemDropTagDict.bind(this), this.itemDropTagDictLength()),
    this.shopRefreshCostId(),
    this.expeditionLeaveToastFormat(),
    this.expeditionReturnDescCureUpgrade(),
    this.expeditionReturnDescUpgrade(),
    this.expeditionReturnDescCure(),
    this.expeditionReturnDesc(),
    this.expeditionSelectDescFormat(),
    this.expeditionReturnDescItem(),
    this.bb!.createScalarList<string>(this.expeditionReturnRewardBlackList.bind(this), this.expeditionReturnRewardBlackListLength()),
    this.travelLeaveToastFormat(),
    this.charSelectTravelConflictToast(),
    this.travelReturnDescUpgrade(),
    this.travelReturnDesc(),
    this.travelReturnDescItem(),
    this.traderReturnTitle(),
    this.traderReturnDesc(),
    this.candleReturnDescCandleUpgrade(),
    this.candleReturnDescCandle(),
    this.charSelectCandleConflictToast(),
    this.charSelectGuidedConflictToast(),
    this.charSelectNonGuidedConflictToast(),
    this.gainBuffDiffGrade(),
    this.dsPredictTips(),
    this.dsBuffActiveTips(),
    this.totemDesc(),
    this.copperGildDesc(),
    this.relicDesc(),
    this.buffDesc(),
    this.refreshNodeItemId(),
    this.storingRecruitDesc(),
    this.storingRecruitSucceedToast(),
    this.specialRecruitReductionDesc(),
    this.specialRecruitFuncDesc(),
    this.specialRecruitDetailDesc(),
    this.bb!.createScalarList<string>(this.portalZones.bind(this), this.portalZonesLength()),
    this.diffDisplayZoneId(),
    this.exploreExpOnKill(),
    this.fusionName(),
    this.fusionNotifyToast(),
    this.haveSpZone(),
    this.gotCharCandleBuffToast(),
    this.gotCharsCandleBuffToast(),
    this.stashedRecruitNodeDescription(),
    this.stashedRecruitEmptyNodeDescription(),
    this.recruitStashMaxNum(),
    this.recruitStashMinNum(),
    this.hasTopicCharSelectMenuButton()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeGameConstT): void {
  _o.initSceneName = this.initSceneName();
  _o.failSceneName = this.failSceneName();
  _o.hpItemId = this.hpItemId();
  _o.goldItemId = this.goldItemId();
  _o.populationItemId = this.populationItemId();
  _o.squadCapacityItemId = this.squadCapacityItemId();
  _o.expItemId = this.expItemId();
  _o.initialBandShowGradeFlag = this.initialBandShowGradeFlag();
  _o.bankMaxGold = this.bankMaxGold();
  _o.bankCostId = this.bankCostId();
  _o.bankDrawCount = this.bankDrawCount();
  _o.bankDrawLimit = this.bankDrawLimit();
  _o.bankRewardCountType = this.bankRewardCountType();
  _o.spZoneShopBgmSignal = this.spZoneShopBgmSignal();
  _o.mimicEnemyIds = this.bb!.createScalarList<string>(this.mimicEnemyIds.bind(this), this.mimicEnemyIdsLength());
  _o.bossIds = this.bb!.createScalarList<string>(this.bossIds.bind(this), this.bossIdsLength());
  _o.goldChestTrapId = this.goldChestTrapId();
  _o.normBoxTrapId = this.normBoxTrapId();
  _o.rareBoxTrapId = this.rareBoxTrapId();
  _o.badBoxTrapId = this.badBoxTrapId();
  _o.maxHpItemId = this.maxHpItemId();
  _o.shieldItemId = this.shieldItemId();
  _o.keyItemId = this.keyItemId();
  _o.divinationKitItemId = this.divinationKitItemId();
  _o.chestKeyCnt = this.chestKeyCnt();
  _o.chestKeyItemId = this.chestKeyItemId();
  _o.keyColorId = this.keyColorId();
  _o.onceNodeTypeList = this.bb!.createScalarList<enum__Torappu_RoguelikeEventType>(this.onceNodeTypeList.bind(this), this.onceNodeTypeListLength());
  _o.vertNodeCostDialogUseItemIconType = this.vertNodeCostDialogUseItemIconType();
  _o.gpScoreRatio = this.gpScoreRatio();
  _o.overflowUsageSquadBuff = this.overflowUsageSquadBuff();
  _o.specialTrapId = this.specialTrapId();
  _o.trapRewardRelicId = this.trapRewardRelicId();
  _o.unlockRouteItemId = this.unlockRouteItemId();
  _o.unlockRouteItemCount = this.unlockRouteItemCount();
  _o.hideBattleNodeName = this.hideBattleNodeName();
  _o.hideBattleNodeDescription = this.hideBattleNodeDescription();
  _o.hideNonBattleNodeName = this.hideNonBattleNodeName();
  _o.hideNonBattleNodeDescription = this.hideNonBattleNodeDescription();
  _o.charSelectExpeditionConflictToast = this.charSelectExpeditionConflictToast();
  _o.charSelectNoUpgradeConflictToast = this.charSelectNoUpgradeConflictToast();
  _o.itemDropTagDict = this.bb!.createObjList<dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string, dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringT>(this.itemDropTagDict.bind(this), this.itemDropTagDictLength());
  _o.shopRefreshCostId = this.shopRefreshCostId();
  _o.expeditionLeaveToastFormat = this.expeditionLeaveToastFormat();
  _o.expeditionReturnDescCureUpgrade = this.expeditionReturnDescCureUpgrade();
  _o.expeditionReturnDescUpgrade = this.expeditionReturnDescUpgrade();
  _o.expeditionReturnDescCure = this.expeditionReturnDescCure();
  _o.expeditionReturnDesc = this.expeditionReturnDesc();
  _o.expeditionSelectDescFormat = this.expeditionSelectDescFormat();
  _o.expeditionReturnDescItem = this.expeditionReturnDescItem();
  _o.expeditionReturnRewardBlackList = this.bb!.createScalarList<string>(this.expeditionReturnRewardBlackList.bind(this), this.expeditionReturnRewardBlackListLength());
  _o.travelLeaveToastFormat = this.travelLeaveToastFormat();
  _o.charSelectTravelConflictToast = this.charSelectTravelConflictToast();
  _o.travelReturnDescUpgrade = this.travelReturnDescUpgrade();
  _o.travelReturnDesc = this.travelReturnDesc();
  _o.travelReturnDescItem = this.travelReturnDescItem();
  _o.traderReturnTitle = this.traderReturnTitle();
  _o.traderReturnDesc = this.traderReturnDesc();
  _o.candleReturnDescCandleUpgrade = this.candleReturnDescCandleUpgrade();
  _o.candleReturnDescCandle = this.candleReturnDescCandle();
  _o.charSelectCandleConflictToast = this.charSelectCandleConflictToast();
  _o.charSelectGuidedConflictToast = this.charSelectGuidedConflictToast();
  _o.charSelectNonGuidedConflictToast = this.charSelectNonGuidedConflictToast();
  _o.gainBuffDiffGrade = this.gainBuffDiffGrade();
  _o.dsPredictTips = this.dsPredictTips();
  _o.dsBuffActiveTips = this.dsBuffActiveTips();
  _o.totemDesc = this.totemDesc();
  _o.copperGildDesc = this.copperGildDesc();
  _o.relicDesc = this.relicDesc();
  _o.buffDesc = this.buffDesc();
  _o.refreshNodeItemId = this.refreshNodeItemId();
  _o.storingRecruitDesc = this.storingRecruitDesc();
  _o.storingRecruitSucceedToast = this.storingRecruitSucceedToast();
  _o.specialRecruitReductionDesc = this.specialRecruitReductionDesc();
  _o.specialRecruitFuncDesc = this.specialRecruitFuncDesc();
  _o.specialRecruitDetailDesc = this.specialRecruitDetailDesc();
  _o.portalZones = this.bb!.createScalarList<string>(this.portalZones.bind(this), this.portalZonesLength());
  _o.diffDisplayZoneId = this.diffDisplayZoneId();
  _o.exploreExpOnKill = this.exploreExpOnKill();
  _o.fusionName = this.fusionName();
  _o.fusionNotifyToast = this.fusionNotifyToast();
  _o.haveSpZone = this.haveSpZone();
  _o.gotCharCandleBuffToast = this.gotCharCandleBuffToast();
  _o.gotCharsCandleBuffToast = this.gotCharsCandleBuffToast();
  _o.stashedRecruitNodeDescription = this.stashedRecruitNodeDescription();
  _o.stashedRecruitEmptyNodeDescription = this.stashedRecruitEmptyNodeDescription();
  _o.recruitStashMaxNum = this.recruitStashMaxNum();
  _o.recruitStashMinNum = this.recruitStashMinNum();
  _o.hasTopicCharSelectMenuButton = this.hasTopicCharSelectMenuButton();
}
}

export class clz_Torappu_RoguelikeGameConstT implements flatbuffers.IGeneratedObject {
constructor(
  public initSceneName: string|Uint8Array|null = null,
  public failSceneName: string|Uint8Array|null = null,
  public hpItemId: string|Uint8Array|null = null,
  public goldItemId: string|Uint8Array|null = null,
  public populationItemId: string|Uint8Array|null = null,
  public squadCapacityItemId: string|Uint8Array|null = null,
  public expItemId: string|Uint8Array|null = null,
  public initialBandShowGradeFlag: boolean = false,
  public bankMaxGold: number = 0,
  public bankCostId: string|Uint8Array|null = null,
  public bankDrawCount: number = 0,
  public bankDrawLimit: number = 0,
  public bankRewardCountType: enum__Torappu_RoguelikeBankRewardCountType = enum__Torappu_RoguelikeBankRewardCountType.HIGHEST_RECORD,
  public spZoneShopBgmSignal: string|Uint8Array|null = null,
  public mimicEnemyIds: (string)[] = [],
  public bossIds: (string)[] = [],
  public goldChestTrapId: string|Uint8Array|null = null,
  public normBoxTrapId: string|Uint8Array|null = null,
  public rareBoxTrapId: string|Uint8Array|null = null,
  public badBoxTrapId: string|Uint8Array|null = null,
  public maxHpItemId: string|Uint8Array|null = null,
  public shieldItemId: string|Uint8Array|null = null,
  public keyItemId: string|Uint8Array|null = null,
  public divinationKitItemId: string|Uint8Array|null = null,
  public chestKeyCnt: number = 0,
  public chestKeyItemId: string|Uint8Array|null = null,
  public keyColorId: string|Uint8Array|null = null,
  public onceNodeTypeList: (enum__Torappu_RoguelikeEventType)[] = [],
  public vertNodeCostDialogUseItemIconType: boolean = false,
  public gpScoreRatio: number = 0,
  public overflowUsageSquadBuff: string|Uint8Array|null = null,
  public specialTrapId: string|Uint8Array|null = null,
  public trapRewardRelicId: string|Uint8Array|null = null,
  public unlockRouteItemId: string|Uint8Array|null = null,
  public unlockRouteItemCount: number = 0,
  public hideBattleNodeName: string|Uint8Array|null = null,
  public hideBattleNodeDescription: string|Uint8Array|null = null,
  public hideNonBattleNodeName: string|Uint8Array|null = null,
  public hideNonBattleNodeDescription: string|Uint8Array|null = null,
  public charSelectExpeditionConflictToast: string|Uint8Array|null = null,
  public charSelectNoUpgradeConflictToast: string|Uint8Array|null = null,
  public itemDropTagDict: (dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringT)[] = [],
  public shopRefreshCostId: string|Uint8Array|null = null,
  public expeditionLeaveToastFormat: string|Uint8Array|null = null,
  public expeditionReturnDescCureUpgrade: string|Uint8Array|null = null,
  public expeditionReturnDescUpgrade: string|Uint8Array|null = null,
  public expeditionReturnDescCure: string|Uint8Array|null = null,
  public expeditionReturnDesc: string|Uint8Array|null = null,
  public expeditionSelectDescFormat: string|Uint8Array|null = null,
  public expeditionReturnDescItem: string|Uint8Array|null = null,
  public expeditionReturnRewardBlackList: (string)[] = [],
  public travelLeaveToastFormat: string|Uint8Array|null = null,
  public charSelectTravelConflictToast: string|Uint8Array|null = null,
  public travelReturnDescUpgrade: string|Uint8Array|null = null,
  public travelReturnDesc: string|Uint8Array|null = null,
  public travelReturnDescItem: string|Uint8Array|null = null,
  public traderReturnTitle: string|Uint8Array|null = null,
  public traderReturnDesc: string|Uint8Array|null = null,
  public candleReturnDescCandleUpgrade: string|Uint8Array|null = null,
  public candleReturnDescCandle: string|Uint8Array|null = null,
  public charSelectCandleConflictToast: string|Uint8Array|null = null,
  public charSelectGuidedConflictToast: string|Uint8Array|null = null,
  public charSelectNonGuidedConflictToast: string|Uint8Array|null = null,
  public gainBuffDiffGrade: number = 0,
  public dsPredictTips: string|Uint8Array|null = null,
  public dsBuffActiveTips: string|Uint8Array|null = null,
  public totemDesc: string|Uint8Array|null = null,
  public copperGildDesc: string|Uint8Array|null = null,
  public relicDesc: string|Uint8Array|null = null,
  public buffDesc: string|Uint8Array|null = null,
  public refreshNodeItemId: string|Uint8Array|null = null,
  public storingRecruitDesc: string|Uint8Array|null = null,
  public storingRecruitSucceedToast: string|Uint8Array|null = null,
  public specialRecruitReductionDesc: string|Uint8Array|null = null,
  public specialRecruitFuncDesc: string|Uint8Array|null = null,
  public specialRecruitDetailDesc: string|Uint8Array|null = null,
  public portalZones: (string)[] = [],
  public diffDisplayZoneId: string|Uint8Array|null = null,
  public exploreExpOnKill: string|Uint8Array|null = null,
  public fusionName: string|Uint8Array|null = null,
  public fusionNotifyToast: string|Uint8Array|null = null,
  public haveSpZone: boolean = false,
  public gotCharCandleBuffToast: string|Uint8Array|null = null,
  public gotCharsCandleBuffToast: string|Uint8Array|null = null,
  public stashedRecruitNodeDescription: string|Uint8Array|null = null,
  public stashedRecruitEmptyNodeDescription: string|Uint8Array|null = null,
  public recruitStashMaxNum: number = 0,
  public recruitStashMinNum: number = 0,
  public hasTopicCharSelectMenuButton: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const initSceneName = (this.initSceneName !== null ? builder.createString(this.initSceneName!) : 0);
  const failSceneName = (this.failSceneName !== null ? builder.createString(this.failSceneName!) : 0);
  const hpItemId = (this.hpItemId !== null ? builder.createString(this.hpItemId!) : 0);
  const goldItemId = (this.goldItemId !== null ? builder.createString(this.goldItemId!) : 0);
  const populationItemId = (this.populationItemId !== null ? builder.createString(this.populationItemId!) : 0);
  const squadCapacityItemId = (this.squadCapacityItemId !== null ? builder.createString(this.squadCapacityItemId!) : 0);
  const expItemId = (this.expItemId !== null ? builder.createString(this.expItemId!) : 0);
  const bankCostId = (this.bankCostId !== null ? builder.createString(this.bankCostId!) : 0);
  const spZoneShopBgmSignal = (this.spZoneShopBgmSignal !== null ? builder.createString(this.spZoneShopBgmSignal!) : 0);
  const mimicEnemyIds = clz_Torappu_RoguelikeGameConst.createMimicEnemyIdsVector(builder, builder.createObjectOffsetList(this.mimicEnemyIds));
  const bossIds = clz_Torappu_RoguelikeGameConst.createBossIdsVector(builder, builder.createObjectOffsetList(this.bossIds));
  const goldChestTrapId = (this.goldChestTrapId !== null ? builder.createString(this.goldChestTrapId!) : 0);
  const normBoxTrapId = (this.normBoxTrapId !== null ? builder.createString(this.normBoxTrapId!) : 0);
  const rareBoxTrapId = (this.rareBoxTrapId !== null ? builder.createString(this.rareBoxTrapId!) : 0);
  const badBoxTrapId = (this.badBoxTrapId !== null ? builder.createString(this.badBoxTrapId!) : 0);
  const maxHpItemId = (this.maxHpItemId !== null ? builder.createString(this.maxHpItemId!) : 0);
  const shieldItemId = (this.shieldItemId !== null ? builder.createString(this.shieldItemId!) : 0);
  const keyItemId = (this.keyItemId !== null ? builder.createString(this.keyItemId!) : 0);
  const divinationKitItemId = (this.divinationKitItemId !== null ? builder.createString(this.divinationKitItemId!) : 0);
  const chestKeyItemId = (this.chestKeyItemId !== null ? builder.createString(this.chestKeyItemId!) : 0);
  const keyColorId = (this.keyColorId !== null ? builder.createString(this.keyColorId!) : 0);
  const onceNodeTypeList = clz_Torappu_RoguelikeGameConst.createOnceNodeTypeListVector(builder, this.onceNodeTypeList);
  const overflowUsageSquadBuff = (this.overflowUsageSquadBuff !== null ? builder.createString(this.overflowUsageSquadBuff!) : 0);
  const specialTrapId = (this.specialTrapId !== null ? builder.createString(this.specialTrapId!) : 0);
  const trapRewardRelicId = (this.trapRewardRelicId !== null ? builder.createString(this.trapRewardRelicId!) : 0);
  const unlockRouteItemId = (this.unlockRouteItemId !== null ? builder.createString(this.unlockRouteItemId!) : 0);
  const hideBattleNodeName = (this.hideBattleNodeName !== null ? builder.createString(this.hideBattleNodeName!) : 0);
  const hideBattleNodeDescription = (this.hideBattleNodeDescription !== null ? builder.createString(this.hideBattleNodeDescription!) : 0);
  const hideNonBattleNodeName = (this.hideNonBattleNodeName !== null ? builder.createString(this.hideNonBattleNodeName!) : 0);
  const hideNonBattleNodeDescription = (this.hideNonBattleNodeDescription !== null ? builder.createString(this.hideNonBattleNodeDescription!) : 0);
  const charSelectExpeditionConflictToast = (this.charSelectExpeditionConflictToast !== null ? builder.createString(this.charSelectExpeditionConflictToast!) : 0);
  const charSelectNoUpgradeConflictToast = (this.charSelectNoUpgradeConflictToast !== null ? builder.createString(this.charSelectNoUpgradeConflictToast!) : 0);
  const itemDropTagDict = clz_Torappu_RoguelikeGameConst.createItemDropTagDictVector(builder, builder.createObjectOffsetList(this.itemDropTagDict));
  const shopRefreshCostId = (this.shopRefreshCostId !== null ? builder.createString(this.shopRefreshCostId!) : 0);
  const expeditionLeaveToastFormat = (this.expeditionLeaveToastFormat !== null ? builder.createString(this.expeditionLeaveToastFormat!) : 0);
  const expeditionReturnDescCureUpgrade = (this.expeditionReturnDescCureUpgrade !== null ? builder.createString(this.expeditionReturnDescCureUpgrade!) : 0);
  const expeditionReturnDescUpgrade = (this.expeditionReturnDescUpgrade !== null ? builder.createString(this.expeditionReturnDescUpgrade!) : 0);
  const expeditionReturnDescCure = (this.expeditionReturnDescCure !== null ? builder.createString(this.expeditionReturnDescCure!) : 0);
  const expeditionReturnDesc = (this.expeditionReturnDesc !== null ? builder.createString(this.expeditionReturnDesc!) : 0);
  const expeditionSelectDescFormat = (this.expeditionSelectDescFormat !== null ? builder.createString(this.expeditionSelectDescFormat!) : 0);
  const expeditionReturnDescItem = (this.expeditionReturnDescItem !== null ? builder.createString(this.expeditionReturnDescItem!) : 0);
  const expeditionReturnRewardBlackList = clz_Torappu_RoguelikeGameConst.createExpeditionReturnRewardBlackListVector(builder, builder.createObjectOffsetList(this.expeditionReturnRewardBlackList));
  const travelLeaveToastFormat = (this.travelLeaveToastFormat !== null ? builder.createString(this.travelLeaveToastFormat!) : 0);
  const charSelectTravelConflictToast = (this.charSelectTravelConflictToast !== null ? builder.createString(this.charSelectTravelConflictToast!) : 0);
  const travelReturnDescUpgrade = (this.travelReturnDescUpgrade !== null ? builder.createString(this.travelReturnDescUpgrade!) : 0);
  const travelReturnDesc = (this.travelReturnDesc !== null ? builder.createString(this.travelReturnDesc!) : 0);
  const travelReturnDescItem = (this.travelReturnDescItem !== null ? builder.createString(this.travelReturnDescItem!) : 0);
  const traderReturnTitle = (this.traderReturnTitle !== null ? builder.createString(this.traderReturnTitle!) : 0);
  const traderReturnDesc = (this.traderReturnDesc !== null ? builder.createString(this.traderReturnDesc!) : 0);
  const candleReturnDescCandleUpgrade = (this.candleReturnDescCandleUpgrade !== null ? builder.createString(this.candleReturnDescCandleUpgrade!) : 0);
  const candleReturnDescCandle = (this.candleReturnDescCandle !== null ? builder.createString(this.candleReturnDescCandle!) : 0);
  const charSelectCandleConflictToast = (this.charSelectCandleConflictToast !== null ? builder.createString(this.charSelectCandleConflictToast!) : 0);
  const charSelectGuidedConflictToast = (this.charSelectGuidedConflictToast !== null ? builder.createString(this.charSelectGuidedConflictToast!) : 0);
  const charSelectNonGuidedConflictToast = (this.charSelectNonGuidedConflictToast !== null ? builder.createString(this.charSelectNonGuidedConflictToast!) : 0);
  const dsPredictTips = (this.dsPredictTips !== null ? builder.createString(this.dsPredictTips!) : 0);
  const dsBuffActiveTips = (this.dsBuffActiveTips !== null ? builder.createString(this.dsBuffActiveTips!) : 0);
  const totemDesc = (this.totemDesc !== null ? builder.createString(this.totemDesc!) : 0);
  const copperGildDesc = (this.copperGildDesc !== null ? builder.createString(this.copperGildDesc!) : 0);
  const relicDesc = (this.relicDesc !== null ? builder.createString(this.relicDesc!) : 0);
  const buffDesc = (this.buffDesc !== null ? builder.createString(this.buffDesc!) : 0);
  const refreshNodeItemId = (this.refreshNodeItemId !== null ? builder.createString(this.refreshNodeItemId!) : 0);
  const storingRecruitDesc = (this.storingRecruitDesc !== null ? builder.createString(this.storingRecruitDesc!) : 0);
  const storingRecruitSucceedToast = (this.storingRecruitSucceedToast !== null ? builder.createString(this.storingRecruitSucceedToast!) : 0);
  const specialRecruitReductionDesc = (this.specialRecruitReductionDesc !== null ? builder.createString(this.specialRecruitReductionDesc!) : 0);
  const specialRecruitFuncDesc = (this.specialRecruitFuncDesc !== null ? builder.createString(this.specialRecruitFuncDesc!) : 0);
  const specialRecruitDetailDesc = (this.specialRecruitDetailDesc !== null ? builder.createString(this.specialRecruitDetailDesc!) : 0);
  const portalZones = clz_Torappu_RoguelikeGameConst.createPortalZonesVector(builder, builder.createObjectOffsetList(this.portalZones));
  const diffDisplayZoneId = (this.diffDisplayZoneId !== null ? builder.createString(this.diffDisplayZoneId!) : 0);
  const exploreExpOnKill = (this.exploreExpOnKill !== null ? builder.createString(this.exploreExpOnKill!) : 0);
  const fusionName = (this.fusionName !== null ? builder.createString(this.fusionName!) : 0);
  const fusionNotifyToast = (this.fusionNotifyToast !== null ? builder.createString(this.fusionNotifyToast!) : 0);
  const gotCharCandleBuffToast = (this.gotCharCandleBuffToast !== null ? builder.createString(this.gotCharCandleBuffToast!) : 0);
  const gotCharsCandleBuffToast = (this.gotCharsCandleBuffToast !== null ? builder.createString(this.gotCharsCandleBuffToast!) : 0);
  const stashedRecruitNodeDescription = (this.stashedRecruitNodeDescription !== null ? builder.createString(this.stashedRecruitNodeDescription!) : 0);
  const stashedRecruitEmptyNodeDescription = (this.stashedRecruitEmptyNodeDescription !== null ? builder.createString(this.stashedRecruitEmptyNodeDescription!) : 0);

  return clz_Torappu_RoguelikeGameConst.createclz_Torappu_RoguelikeGameConst(builder,
    initSceneName,
    failSceneName,
    hpItemId,
    goldItemId,
    populationItemId,
    squadCapacityItemId,
    expItemId,
    this.initialBandShowGradeFlag,
    this.bankMaxGold,
    bankCostId,
    this.bankDrawCount,
    this.bankDrawLimit,
    this.bankRewardCountType,
    spZoneShopBgmSignal,
    mimicEnemyIds,
    bossIds,
    goldChestTrapId,
    normBoxTrapId,
    rareBoxTrapId,
    badBoxTrapId,
    maxHpItemId,
    shieldItemId,
    keyItemId,
    divinationKitItemId,
    this.chestKeyCnt,
    chestKeyItemId,
    keyColorId,
    onceNodeTypeList,
    this.vertNodeCostDialogUseItemIconType,
    this.gpScoreRatio,
    overflowUsageSquadBuff,
    specialTrapId,
    trapRewardRelicId,
    unlockRouteItemId,
    this.unlockRouteItemCount,
    hideBattleNodeName,
    hideBattleNodeDescription,
    hideNonBattleNodeName,
    hideNonBattleNodeDescription,
    charSelectExpeditionConflictToast,
    charSelectNoUpgradeConflictToast,
    itemDropTagDict,
    shopRefreshCostId,
    expeditionLeaveToastFormat,
    expeditionReturnDescCureUpgrade,
    expeditionReturnDescUpgrade,
    expeditionReturnDescCure,
    expeditionReturnDesc,
    expeditionSelectDescFormat,
    expeditionReturnDescItem,
    expeditionReturnRewardBlackList,
    travelLeaveToastFormat,
    charSelectTravelConflictToast,
    travelReturnDescUpgrade,
    travelReturnDesc,
    travelReturnDescItem,
    traderReturnTitle,
    traderReturnDesc,
    candleReturnDescCandleUpgrade,
    candleReturnDescCandle,
    charSelectCandleConflictToast,
    charSelectGuidedConflictToast,
    charSelectNonGuidedConflictToast,
    this.gainBuffDiffGrade,
    dsPredictTips,
    dsBuffActiveTips,
    totemDesc,
    copperGildDesc,
    relicDesc,
    buffDesc,
    refreshNodeItemId,
    storingRecruitDesc,
    storingRecruitSucceedToast,
    specialRecruitReductionDesc,
    specialRecruitFuncDesc,
    specialRecruitDetailDesc,
    portalZones,
    diffDisplayZoneId,
    exploreExpOnKill,
    fusionName,
    fusionNotifyToast,
    this.haveSpZone,
    gotCharCandleBuffToast,
    gotCharsCandleBuffToast,
    stashedRecruitNodeDescription,
    stashedRecruitEmptyNodeDescription,
    this.recruitStashMaxNum,
    this.recruitStashMinNum,
    this.hasTopicCharSelectMenuButton
  );
}
}
