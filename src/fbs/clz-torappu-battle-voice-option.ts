// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_BattleVoiceOption_BattleVoiceType } from './enum--torappu-battle-voice-option-battle-voice-type.js';


export class clz_Torappu_BattleVoiceOption implements flatbuffers.IUnpackableObject<clz_Torappu_BattleVoiceOptionT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BattleVoiceOption {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BattleVoiceOption(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BattleVoiceOption):clz_Torappu_BattleVoiceOption {
  return (obj || new clz_Torappu_BattleVoiceOption()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BattleVoiceOption(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BattleVoiceOption):clz_Torappu_BattleVoiceOption {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BattleVoiceOption()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

voiceType():enum__Torappu_BattleVoiceOption_BattleVoiceType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BattleVoiceOption_BattleVoiceType.BATTLE_START;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

overlapIfSamePriority():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

cooldown():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

delay():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_BattleVoiceOption(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addVoiceType(builder:flatbuffers.Builder, voiceType:enum__Torappu_BattleVoiceOption_BattleVoiceType) {
  builder.addFieldInt32(0, voiceType, enum__Torappu_BattleVoiceOption_BattleVoiceType.BATTLE_START);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt32(1, priority, 0);
}

static addOverlapIfSamePriority(builder:flatbuffers.Builder, overlapIfSamePriority:boolean) {
  builder.addFieldInt8(2, +overlapIfSamePriority, +false);
}

static addCooldown(builder:flatbuffers.Builder, cooldown:number) {
  builder.addFieldFloat32(3, cooldown, 0.0);
}

static addDelay(builder:flatbuffers.Builder, delay:number) {
  builder.addFieldFloat32(4, delay, 0.0);
}

static endclz_Torappu_BattleVoiceOption(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_BattleVoiceOption(builder:flatbuffers.Builder, voiceType:enum__Torappu_BattleVoiceOption_BattleVoiceType, priority:number, overlapIfSamePriority:boolean, cooldown:number, delay:number):flatbuffers.Offset {
  clz_Torappu_BattleVoiceOption.startclz_Torappu_BattleVoiceOption(builder);
  clz_Torappu_BattleVoiceOption.addVoiceType(builder, voiceType);
  clz_Torappu_BattleVoiceOption.addPriority(builder, priority);
  clz_Torappu_BattleVoiceOption.addOverlapIfSamePriority(builder, overlapIfSamePriority);
  clz_Torappu_BattleVoiceOption.addCooldown(builder, cooldown);
  clz_Torappu_BattleVoiceOption.addDelay(builder, delay);
  return clz_Torappu_BattleVoiceOption.endclz_Torappu_BattleVoiceOption(builder);
}

unpack(): clz_Torappu_BattleVoiceOptionT {
  return new clz_Torappu_BattleVoiceOptionT(
    this.voiceType(),
    this.priority(),
    this.overlapIfSamePriority(),
    this.cooldown(),
    this.delay()
  );
}


unpackTo(_o: clz_Torappu_BattleVoiceOptionT): void {
  _o.voiceType = this.voiceType();
  _o.priority = this.priority();
  _o.overlapIfSamePriority = this.overlapIfSamePriority();
  _o.cooldown = this.cooldown();
  _o.delay = this.delay();
}
}

export class clz_Torappu_BattleVoiceOptionT implements flatbuffers.IGeneratedObject {
constructor(
  public voiceType: enum__Torappu_BattleVoiceOption_BattleVoiceType = enum__Torappu_BattleVoiceOption_BattleVoiceType.BATTLE_START,
  public priority: number = 0,
  public overlapIfSamePriority: boolean = false,
  public cooldown: number = 0.0,
  public delay: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return clz_Torappu_BattleVoiceOption.createclz_Torappu_BattleVoiceOption(builder,
    this.voiceType,
    this.priority,
    this.overlapIfSamePriority,
    this.cooldown,
    this.delay
  );
}
}
