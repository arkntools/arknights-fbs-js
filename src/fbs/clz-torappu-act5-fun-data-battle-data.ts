// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Act5FunNpcSelectorData, clz_Torappu_Act5FunNpcSelectorDataT } from './clz-torappu-act5-fun-npc-selector-data.js';
import { clz_Torappu_Act5funConst, clz_Torappu_Act5funConstT } from './clz-torappu-act5fun-const.js';
import { dict__string__clz_Torappu_Act5FunChoiceRewardData, dict__string__clz_Torappu_Act5FunChoiceRewardDataT } from './dict--string--clz-torappu-act5-fun-choice-reward-data.js';
import { dict__string__clz_Torappu_Act5FunEnemyIdMappingData, dict__string__clz_Torappu_Act5FunEnemyIdMappingDataT } from './dict--string--clz-torappu-act5-fun-enemy-id-mapping-data.js';
import { dict__string__clz_Torappu_Act5FunNpcData, dict__string__clz_Torappu_Act5FunNpcDataT } from './dict--string--clz-torappu-act5-fun-npc-data.js';
import { dict__string__clz_Torappu_Act5FunRoundData, dict__string__clz_Torappu_Act5FunRoundDataT } from './dict--string--clz-torappu-act5-fun-round-data.js';


export class clz_Torappu_Act5FunData_BattleData implements flatbuffers.IUnpackableObject<clz_Torappu_Act5FunData_BattleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act5FunData_BattleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act5FunData_BattleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act5FunData_BattleData):clz_Torappu_Act5FunData_BattleData {
  return (obj || new clz_Torappu_Act5FunData_BattleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act5FunData_BattleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act5FunData_BattleData):clz_Torappu_Act5FunData_BattleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act5FunData_BattleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

battleConstData(obj?:clz_Torappu_Act5funConst):clz_Torappu_Act5funConst|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_Act5funConst()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

roundData(index: number, obj?:dict__string__clz_Torappu_Act5FunRoundData):dict__string__clz_Torappu_Act5FunRoundData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_Act5FunRoundData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

roundDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

npcData(index: number, obj?:dict__string__clz_Torappu_Act5FunNpcData):dict__string__clz_Torappu_Act5FunNpcData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_Act5FunNpcData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

npcDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

npcSelectorData(index: number, obj?:clz_Torappu_Act5FunNpcSelectorData):clz_Torappu_Act5FunNpcSelectorData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_Act5FunNpcSelectorData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

npcSelectorDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

choiceRewardData(index: number, obj?:dict__string__clz_Torappu_Act5FunChoiceRewardData):dict__string__clz_Torappu_Act5FunChoiceRewardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new dict__string__clz_Torappu_Act5FunChoiceRewardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

choiceRewardDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enemyIdMappingData(index: number, obj?:dict__string__clz_Torappu_Act5FunEnemyIdMappingData):dict__string__clz_Torappu_Act5FunEnemyIdMappingData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new dict__string__clz_Torappu_Act5FunEnemyIdMappingData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

enemyIdMappingDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

battleStreak(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

battleStreakLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

battleStreakArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startclz_Torappu_Act5FunData_BattleData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBattleConstData(builder:flatbuffers.Builder, battleConstDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, battleConstDataOffset, 0);
}

static addRoundData(builder:flatbuffers.Builder, roundDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, roundDataOffset, 0);
}

static createRoundDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoundDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNpcData(builder:flatbuffers.Builder, npcDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, npcDataOffset, 0);
}

static createNpcDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNpcDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNpcSelectorData(builder:flatbuffers.Builder, npcSelectorDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, npcSelectorDataOffset, 0);
}

static createNpcSelectorDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNpcSelectorDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChoiceRewardData(builder:flatbuffers.Builder, choiceRewardDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, choiceRewardDataOffset, 0);
}

static createChoiceRewardDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChoiceRewardDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnemyIdMappingData(builder:flatbuffers.Builder, enemyIdMappingDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, enemyIdMappingDataOffset, 0);
}

static createEnemyIdMappingDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnemyIdMappingDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBattleStreak(builder:flatbuffers.Builder, battleStreakOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, battleStreakOffset, 0);
}

static createBattleStreakVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createBattleStreakVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createBattleStreakVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startBattleStreakVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act5FunData_BattleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act5FunData_BattleData(builder:flatbuffers.Builder, battleConstDataOffset:flatbuffers.Offset, roundDataOffset:flatbuffers.Offset, npcDataOffset:flatbuffers.Offset, npcSelectorDataOffset:flatbuffers.Offset, choiceRewardDataOffset:flatbuffers.Offset, enemyIdMappingDataOffset:flatbuffers.Offset, battleStreakOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act5FunData_BattleData.startclz_Torappu_Act5FunData_BattleData(builder);
  clz_Torappu_Act5FunData_BattleData.addBattleConstData(builder, battleConstDataOffset);
  clz_Torappu_Act5FunData_BattleData.addRoundData(builder, roundDataOffset);
  clz_Torappu_Act5FunData_BattleData.addNpcData(builder, npcDataOffset);
  clz_Torappu_Act5FunData_BattleData.addNpcSelectorData(builder, npcSelectorDataOffset);
  clz_Torappu_Act5FunData_BattleData.addChoiceRewardData(builder, choiceRewardDataOffset);
  clz_Torappu_Act5FunData_BattleData.addEnemyIdMappingData(builder, enemyIdMappingDataOffset);
  clz_Torappu_Act5FunData_BattleData.addBattleStreak(builder, battleStreakOffset);
  return clz_Torappu_Act5FunData_BattleData.endclz_Torappu_Act5FunData_BattleData(builder);
}

unpack(): clz_Torappu_Act5FunData_BattleDataT {
  return new clz_Torappu_Act5FunData_BattleDataT(
    (this.battleConstData() !== null ? this.battleConstData()!.unpack() : null),
    this.bb!.createObjList<dict__string__clz_Torappu_Act5FunRoundData, dict__string__clz_Torappu_Act5FunRoundDataT>(this.roundData.bind(this), this.roundDataLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_Act5FunNpcData, dict__string__clz_Torappu_Act5FunNpcDataT>(this.npcData.bind(this), this.npcDataLength()),
    this.bb!.createObjList<clz_Torappu_Act5FunNpcSelectorData, clz_Torappu_Act5FunNpcSelectorDataT>(this.npcSelectorData.bind(this), this.npcSelectorDataLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_Act5FunChoiceRewardData, dict__string__clz_Torappu_Act5FunChoiceRewardDataT>(this.choiceRewardData.bind(this), this.choiceRewardDataLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_Act5FunEnemyIdMappingData, dict__string__clz_Torappu_Act5FunEnemyIdMappingDataT>(this.enemyIdMappingData.bind(this), this.enemyIdMappingDataLength()),
    this.bb!.createScalarList<number>(this.battleStreak.bind(this), this.battleStreakLength())
  );
}


unpackTo(_o: clz_Torappu_Act5FunData_BattleDataT): void {
  _o.battleConstData = (this.battleConstData() !== null ? this.battleConstData()!.unpack() : null);
  _o.roundData = this.bb!.createObjList<dict__string__clz_Torappu_Act5FunRoundData, dict__string__clz_Torappu_Act5FunRoundDataT>(this.roundData.bind(this), this.roundDataLength());
  _o.npcData = this.bb!.createObjList<dict__string__clz_Torappu_Act5FunNpcData, dict__string__clz_Torappu_Act5FunNpcDataT>(this.npcData.bind(this), this.npcDataLength());
  _o.npcSelectorData = this.bb!.createObjList<clz_Torappu_Act5FunNpcSelectorData, clz_Torappu_Act5FunNpcSelectorDataT>(this.npcSelectorData.bind(this), this.npcSelectorDataLength());
  _o.choiceRewardData = this.bb!.createObjList<dict__string__clz_Torappu_Act5FunChoiceRewardData, dict__string__clz_Torappu_Act5FunChoiceRewardDataT>(this.choiceRewardData.bind(this), this.choiceRewardDataLength());
  _o.enemyIdMappingData = this.bb!.createObjList<dict__string__clz_Torappu_Act5FunEnemyIdMappingData, dict__string__clz_Torappu_Act5FunEnemyIdMappingDataT>(this.enemyIdMappingData.bind(this), this.enemyIdMappingDataLength());
  _o.battleStreak = this.bb!.createScalarList<number>(this.battleStreak.bind(this), this.battleStreakLength());
}
}

export class clz_Torappu_Act5FunData_BattleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public battleConstData: clz_Torappu_Act5funConstT|null = null,
  public roundData: (dict__string__clz_Torappu_Act5FunRoundDataT)[] = [],
  public npcData: (dict__string__clz_Torappu_Act5FunNpcDataT)[] = [],
  public npcSelectorData: (clz_Torappu_Act5FunNpcSelectorDataT)[] = [],
  public choiceRewardData: (dict__string__clz_Torappu_Act5FunChoiceRewardDataT)[] = [],
  public enemyIdMappingData: (dict__string__clz_Torappu_Act5FunEnemyIdMappingDataT)[] = [],
  public battleStreak: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const battleConstData = (this.battleConstData !== null ? this.battleConstData!.pack(builder) : 0);
  const roundData = clz_Torappu_Act5FunData_BattleData.createRoundDataVector(builder, builder.createObjectOffsetList(this.roundData));
  const npcData = clz_Torappu_Act5FunData_BattleData.createNpcDataVector(builder, builder.createObjectOffsetList(this.npcData));
  const npcSelectorData = clz_Torappu_Act5FunData_BattleData.createNpcSelectorDataVector(builder, builder.createObjectOffsetList(this.npcSelectorData));
  const choiceRewardData = clz_Torappu_Act5FunData_BattleData.createChoiceRewardDataVector(builder, builder.createObjectOffsetList(this.choiceRewardData));
  const enemyIdMappingData = clz_Torappu_Act5FunData_BattleData.createEnemyIdMappingDataVector(builder, builder.createObjectOffsetList(this.enemyIdMappingData));
  const battleStreak = clz_Torappu_Act5FunData_BattleData.createBattleStreakVector(builder, this.battleStreak);

  return clz_Torappu_Act5FunData_BattleData.createclz_Torappu_Act5FunData_BattleData(builder,
    battleConstData,
    roundData,
    npcData,
    npcSelectorData,
    choiceRewardData,
    enemyIdMappingData,
    battleStreak
  );
}
}
