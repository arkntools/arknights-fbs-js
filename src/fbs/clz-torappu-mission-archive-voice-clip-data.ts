// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_MissionArchiveVoiceClipData implements flatbuffers.IUnpackableObject<clz_Torappu_MissionArchiveVoiceClipDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_MissionArchiveVoiceClipData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_MissionArchiveVoiceClipData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MissionArchiveVoiceClipData):clz_Torappu_MissionArchiveVoiceClipData {
  return (obj || new clz_Torappu_MissionArchiveVoiceClipData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_MissionArchiveVoiceClipData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_MissionArchiveVoiceClipData):clz_Torappu_MissionArchiveVoiceClipData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_MissionArchiveVoiceClipData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

charId():string|null
charId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

voiceId():string|null
voiceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
voiceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_MissionArchiveVoiceClipData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCharId(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, charIdOffset, 0);
}

static addVoiceId(builder:flatbuffers.Builder, voiceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, voiceIdOffset, 0);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(2, index, 0);
}

static endclz_Torappu_MissionArchiveVoiceClipData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_MissionArchiveVoiceClipData(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset, voiceIdOffset:flatbuffers.Offset, index:number):flatbuffers.Offset {
  clz_Torappu_MissionArchiveVoiceClipData.startclz_Torappu_MissionArchiveVoiceClipData(builder);
  clz_Torappu_MissionArchiveVoiceClipData.addCharId(builder, charIdOffset);
  clz_Torappu_MissionArchiveVoiceClipData.addVoiceId(builder, voiceIdOffset);
  clz_Torappu_MissionArchiveVoiceClipData.addIndex(builder, index);
  return clz_Torappu_MissionArchiveVoiceClipData.endclz_Torappu_MissionArchiveVoiceClipData(builder);
}

unpack(): clz_Torappu_MissionArchiveVoiceClipDataT {
  return new clz_Torappu_MissionArchiveVoiceClipDataT(
    this.charId(),
    this.voiceId(),
    this.index()
  );
}


unpackTo(_o: clz_Torappu_MissionArchiveVoiceClipDataT): void {
  _o.charId = this.charId();
  _o.voiceId = this.voiceId();
  _o.index = this.index();
}
}

export class clz_Torappu_MissionArchiveVoiceClipDataT implements flatbuffers.IGeneratedObject {
constructor(
  public charId: string|Uint8Array|null = null,
  public voiceId: string|Uint8Array|null = null,
  public index: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const charId = (this.charId !== null ? builder.createString(this.charId!) : 0);
  const voiceId = (this.voiceId !== null ? builder.createString(this.voiceId!) : 0);

  return clz_Torappu_MissionArchiveVoiceClipData.createclz_Torappu_MissionArchiveVoiceClipData(builder,
    charId,
    voiceId,
    this.index
  );
}
}
