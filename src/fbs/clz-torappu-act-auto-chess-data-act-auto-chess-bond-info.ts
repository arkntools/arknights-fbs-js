// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_ActAutoChessBondActiveType } from './enum--torappu-act-auto-chess-bond-active-type.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessBondInfo implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessBondInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessBondInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBondInfo):clz_Torappu_ActAutoChessData_ActAutoChessBondInfo {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBondInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessBondInfo):clz_Torappu_ActAutoChessData_ActAutoChessBondInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessBondInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bondId():string|null
bondId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bondId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

iconId():string|null
iconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

activeCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

effectId():string|null
effectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

activeType():enum__Torappu_ActAutoChessBondActiveType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActAutoChessBondActiveType.BATTLE;
}

identifier():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isActiveInDeck():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

descParamBaseList(index: number):string
descParamBaseList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
descParamBaseList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

descParamBaseListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

descParamPerStackList(index: number):string
descParamPerStackList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
descParamPerStackList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

descParamPerStackListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

noStack():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

chessIdList(index: number):string
chessIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
chessIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

chessIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addBondId(builder:flatbuffers.Builder, bondIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bondIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, descOffset, 0);
}

static addIconId(builder:flatbuffers.Builder, iconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, iconIdOffset, 0);
}

static addActiveCount(builder:flatbuffers.Builder, activeCount:number) {
  builder.addFieldInt32(4, activeCount, 0);
}

static addEffectId(builder:flatbuffers.Builder, effectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, effectIdOffset, 0);
}

static addActiveType(builder:flatbuffers.Builder, activeType:enum__Torappu_ActAutoChessBondActiveType) {
  builder.addFieldInt32(6, activeType, enum__Torappu_ActAutoChessBondActiveType.BATTLE);
}

static addIdentifier(builder:flatbuffers.Builder, identifier:number) {
  builder.addFieldInt32(7, identifier, 0);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldInt32(8, weight, 0);
}

static addIsActiveInDeck(builder:flatbuffers.Builder, isActiveInDeck:boolean) {
  builder.addFieldInt8(9, +isActiveInDeck, +false);
}

static addDescParamBaseList(builder:flatbuffers.Builder, descParamBaseListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, descParamBaseListOffset, 0);
}

static createDescParamBaseListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDescParamBaseListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDescParamPerStackList(builder:flatbuffers.Builder, descParamPerStackListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, descParamPerStackListOffset, 0);
}

static createDescParamPerStackListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDescParamPerStackListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNoStack(builder:flatbuffers.Builder, noStack:boolean) {
  builder.addFieldInt8(12, +noStack, +false);
}

static addChessIdList(builder:flatbuffers.Builder, chessIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, chessIdListOffset, 0);
}

static createChessIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChessIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(builder:flatbuffers.Builder, bondIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, iconIdOffset:flatbuffers.Offset, activeCount:number, effectIdOffset:flatbuffers.Offset, activeType:enum__Torappu_ActAutoChessBondActiveType, identifier:number, weight:number, isActiveInDeck:boolean, descParamBaseListOffset:flatbuffers.Offset, descParamPerStackListOffset:flatbuffers.Offset, noStack:boolean, chessIdListOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.startclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addBondId(builder, bondIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addName(builder, nameOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addDesc(builder, descOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addIconId(builder, iconIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addActiveCount(builder, activeCount);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addEffectId(builder, effectIdOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addActiveType(builder, activeType);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addIdentifier(builder, identifier);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addWeight(builder, weight);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addIsActiveInDeck(builder, isActiveInDeck);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addDescParamBaseList(builder, descParamBaseListOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addDescParamPerStackList(builder, descParamPerStackListOffset);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addNoStack(builder, noStack);
  clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.addChessIdList(builder, chessIdListOffset);
  return clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.endclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(builder);
}

unpack(): clz_Torappu_ActAutoChessData_ActAutoChessBondInfoT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessBondInfoT(
    this.bondId(),
    this.name(),
    this.desc(),
    this.iconId(),
    this.activeCount(),
    this.effectId(),
    this.activeType(),
    this.identifier(),
    this.weight(),
    this.isActiveInDeck(),
    this.bb!.createScalarList<string>(this.descParamBaseList.bind(this), this.descParamBaseListLength()),
    this.bb!.createScalarList<string>(this.descParamPerStackList.bind(this), this.descParamPerStackListLength()),
    this.noStack(),
    this.bb!.createScalarList<string>(this.chessIdList.bind(this), this.chessIdListLength())
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessBondInfoT): void {
  _o.bondId = this.bondId();
  _o.name = this.name();
  _o.desc = this.desc();
  _o.iconId = this.iconId();
  _o.activeCount = this.activeCount();
  _o.effectId = this.effectId();
  _o.activeType = this.activeType();
  _o.identifier = this.identifier();
  _o.weight = this.weight();
  _o.isActiveInDeck = this.isActiveInDeck();
  _o.descParamBaseList = this.bb!.createScalarList<string>(this.descParamBaseList.bind(this), this.descParamBaseListLength());
  _o.descParamPerStackList = this.bb!.createScalarList<string>(this.descParamPerStackList.bind(this), this.descParamPerStackListLength());
  _o.noStack = this.noStack();
  _o.chessIdList = this.bb!.createScalarList<string>(this.chessIdList.bind(this), this.chessIdListLength());
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessBondInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public bondId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public iconId: string|Uint8Array|null = null,
  public activeCount: number = 0,
  public effectId: string|Uint8Array|null = null,
  public activeType: enum__Torappu_ActAutoChessBondActiveType = enum__Torappu_ActAutoChessBondActiveType.BATTLE,
  public identifier: number = 0,
  public weight: number = 0,
  public isActiveInDeck: boolean = false,
  public descParamBaseList: (string)[] = [],
  public descParamPerStackList: (string)[] = [],
  public noStack: boolean = false,
  public chessIdList: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bondId = (this.bondId !== null ? builder.createString(this.bondId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const iconId = (this.iconId !== null ? builder.createString(this.iconId!) : 0);
  const effectId = (this.effectId !== null ? builder.createString(this.effectId!) : 0);
  const descParamBaseList = clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.createDescParamBaseListVector(builder, builder.createObjectOffsetList(this.descParamBaseList));
  const descParamPerStackList = clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.createDescParamPerStackListVector(builder, builder.createObjectOffsetList(this.descParamPerStackList));
  const chessIdList = clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.createChessIdListVector(builder, builder.createObjectOffsetList(this.chessIdList));

  return clz_Torappu_ActAutoChessData_ActAutoChessBondInfo.createclz_Torappu_ActAutoChessData_ActAutoChessBondInfo(builder,
    bondId,
    name,
    desc,
    iconId,
    this.activeCount,
    effectId,
    this.activeType,
    this.identifier,
    this.weight,
    this.isActiveInDeck,
    descParamBaseList,
    descParamPerStackList,
    this.noStack,
    chessIdList
  );
}
}
