// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_Audio_Middleware_Data_DuckingData implements flatbuffers.IUnpackableObject<clz_Torappu_Audio_Middleware_Data_DuckingDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Audio_Middleware_Data_DuckingData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Audio_Middleware_Data_DuckingData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Audio_Middleware_Data_DuckingData):clz_Torappu_Audio_Middleware_Data_DuckingData {
  return (obj || new clz_Torappu_Audio_Middleware_Data_DuckingData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Audio_Middleware_Data_DuckingData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Audio_Middleware_Data_DuckingData):clz_Torappu_Audio_Middleware_Data_DuckingData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Audio_Middleware_Data_DuckingData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bank():string|null
bank(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bank(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

volume():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fadeTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

delay():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fadeStyleId():string|null
fadeStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fadeStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_Audio_Middleware_Data_DuckingData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addBank(builder:flatbuffers.Builder, bankOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, bankOffset, 0);
}

static addVolume(builder:flatbuffers.Builder, volume:number) {
  builder.addFieldFloat32(1, volume, 0.0);
}

static addFadeTime(builder:flatbuffers.Builder, fadeTime:number) {
  builder.addFieldFloat32(2, fadeTime, 0.0);
}

static addDelay(builder:flatbuffers.Builder, delay:number) {
  builder.addFieldFloat32(3, delay, 0.0);
}

static addFadeStyleId(builder:flatbuffers.Builder, fadeStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, fadeStyleIdOffset, 0);
}

static endclz_Torappu_Audio_Middleware_Data_DuckingData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Audio_Middleware_Data_DuckingData(builder:flatbuffers.Builder, bankOffset:flatbuffers.Offset, volume:number, fadeTime:number, delay:number, fadeStyleIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Audio_Middleware_Data_DuckingData.startclz_Torappu_Audio_Middleware_Data_DuckingData(builder);
  clz_Torappu_Audio_Middleware_Data_DuckingData.addBank(builder, bankOffset);
  clz_Torappu_Audio_Middleware_Data_DuckingData.addVolume(builder, volume);
  clz_Torappu_Audio_Middleware_Data_DuckingData.addFadeTime(builder, fadeTime);
  clz_Torappu_Audio_Middleware_Data_DuckingData.addDelay(builder, delay);
  clz_Torappu_Audio_Middleware_Data_DuckingData.addFadeStyleId(builder, fadeStyleIdOffset);
  return clz_Torappu_Audio_Middleware_Data_DuckingData.endclz_Torappu_Audio_Middleware_Data_DuckingData(builder);
}

unpack(): clz_Torappu_Audio_Middleware_Data_DuckingDataT {
  return new clz_Torappu_Audio_Middleware_Data_DuckingDataT(
    this.bank(),
    this.volume(),
    this.fadeTime(),
    this.delay(),
    this.fadeStyleId()
  );
}


unpackTo(_o: clz_Torappu_Audio_Middleware_Data_DuckingDataT): void {
  _o.bank = this.bank();
  _o.volume = this.volume();
  _o.fadeTime = this.fadeTime();
  _o.delay = this.delay();
  _o.fadeStyleId = this.fadeStyleId();
}
}

export class clz_Torappu_Audio_Middleware_Data_DuckingDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bank: string|Uint8Array|null = null,
  public volume: number = 0.0,
  public fadeTime: number = 0.0,
  public delay: number = 0.0,
  public fadeStyleId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bank = (this.bank !== null ? builder.createString(this.bank!) : 0);
  const fadeStyleId = (this.fadeStyleId !== null ? builder.createString(this.fadeStyleId!) : 0);

  return clz_Torappu_Audio_Middleware_Data_DuckingData.createclz_Torappu_Audio_Middleware_Data_DuckingData(builder,
    bank,
    this.volume,
    this.fadeTime,
    this.delay,
    fadeStyleId
  );
}
}
