// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_TileAppendInfo implements flatbuffers.IUnpackableObject<clz_Torappu_TileAppendInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_TileAppendInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_TileAppendInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TileAppendInfo):clz_Torappu_TileAppendInfo {
  return (obj || new clz_Torappu_TileAppendInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_TileAppendInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TileAppendInfo):clz_Torappu_TileAppendInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_TileAppendInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tileKey():string|null
tileKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tileKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isFunctional():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_TileAppendInfo(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTileKey(builder:flatbuffers.Builder, tileKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tileKeyOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, descriptionOffset, 0);
}

static addIsFunctional(builder:flatbuffers.Builder, isFunctional:boolean) {
  builder.addFieldInt8(3, +isFunctional, +false);
}

static endclz_Torappu_TileAppendInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_TileAppendInfo(builder:flatbuffers.Builder, tileKeyOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, isFunctional:boolean):flatbuffers.Offset {
  clz_Torappu_TileAppendInfo.startclz_Torappu_TileAppendInfo(builder);
  clz_Torappu_TileAppendInfo.addTileKey(builder, tileKeyOffset);
  clz_Torappu_TileAppendInfo.addName(builder, nameOffset);
  clz_Torappu_TileAppendInfo.addDescription(builder, descriptionOffset);
  clz_Torappu_TileAppendInfo.addIsFunctional(builder, isFunctional);
  return clz_Torappu_TileAppendInfo.endclz_Torappu_TileAppendInfo(builder);
}

unpack(): clz_Torappu_TileAppendInfoT {
  return new clz_Torappu_TileAppendInfoT(
    this.tileKey(),
    this.name(),
    this.description(),
    this.isFunctional()
  );
}


unpackTo(_o: clz_Torappu_TileAppendInfoT): void {
  _o.tileKey = this.tileKey();
  _o.name = this.name();
  _o.description = this.description();
  _o.isFunctional = this.isFunctional();
}
}

export class clz_Torappu_TileAppendInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public tileKey: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public isFunctional: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const tileKey = (this.tileKey !== null ? builder.createString(this.tileKey!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);

  return clz_Torappu_TileAppendInfo.createclz_Torappu_TileAppendInfo(builder,
    tileKey,
    name,
    description,
    this.isFunctional
  );
}
}
