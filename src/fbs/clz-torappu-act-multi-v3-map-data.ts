// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_ActMultiV3MapData implements flatbuffers.IUnpackableObject<clz_Torappu_ActMultiV3MapDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActMultiV3MapData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActMultiV3MapData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActMultiV3MapData):clz_Torappu_ActMultiV3MapData {
  return (obj || new clz_Torappu_ActMultiV3MapData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActMultiV3MapData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActMultiV3MapData):clz_Torappu_ActMultiV3MapData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActMultiV3MapData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stageId():string|null
stageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeId():string|null
modeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

missionIdList(index: number):string
missionIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
missionIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

missionIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

displayEnemyIdList(index: number):string
displayEnemyIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
displayEnemyIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

displayEnemyIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

previewIconId():string|null
previewIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
previewIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActMultiV3MapData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addStageId(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stageIdOffset, 0);
}

static addModeId(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, modeIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(2, sortId, 0);
}

static addMissionIdList(builder:flatbuffers.Builder, missionIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, missionIdListOffset, 0);
}

static createMissionIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMissionIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDisplayEnemyIdList(builder:flatbuffers.Builder, displayEnemyIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, displayEnemyIdListOffset, 0);
}

static createDisplayEnemyIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDisplayEnemyIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreviewIconId(builder:flatbuffers.Builder, previewIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, previewIconIdOffset, 0);
}

static endclz_Torappu_ActMultiV3MapData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActMultiV3MapData(builder:flatbuffers.Builder, stageIdOffset:flatbuffers.Offset, modeIdOffset:flatbuffers.Offset, sortId:number, missionIdListOffset:flatbuffers.Offset, displayEnemyIdListOffset:flatbuffers.Offset, previewIconIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActMultiV3MapData.startclz_Torappu_ActMultiV3MapData(builder);
  clz_Torappu_ActMultiV3MapData.addStageId(builder, stageIdOffset);
  clz_Torappu_ActMultiV3MapData.addModeId(builder, modeIdOffset);
  clz_Torappu_ActMultiV3MapData.addSortId(builder, sortId);
  clz_Torappu_ActMultiV3MapData.addMissionIdList(builder, missionIdListOffset);
  clz_Torappu_ActMultiV3MapData.addDisplayEnemyIdList(builder, displayEnemyIdListOffset);
  clz_Torappu_ActMultiV3MapData.addPreviewIconId(builder, previewIconIdOffset);
  return clz_Torappu_ActMultiV3MapData.endclz_Torappu_ActMultiV3MapData(builder);
}

unpack(): clz_Torappu_ActMultiV3MapDataT {
  return new clz_Torappu_ActMultiV3MapDataT(
    this.stageId(),
    this.modeId(),
    this.sortId(),
    this.bb!.createScalarList<string>(this.missionIdList.bind(this), this.missionIdListLength()),
    this.bb!.createScalarList<string>(this.displayEnemyIdList.bind(this), this.displayEnemyIdListLength()),
    this.previewIconId()
  );
}


unpackTo(_o: clz_Torappu_ActMultiV3MapDataT): void {
  _o.stageId = this.stageId();
  _o.modeId = this.modeId();
  _o.sortId = this.sortId();
  _o.missionIdList = this.bb!.createScalarList<string>(this.missionIdList.bind(this), this.missionIdListLength());
  _o.displayEnemyIdList = this.bb!.createScalarList<string>(this.displayEnemyIdList.bind(this), this.displayEnemyIdListLength());
  _o.previewIconId = this.previewIconId();
}
}

export class clz_Torappu_ActMultiV3MapDataT implements flatbuffers.IGeneratedObject {
constructor(
  public stageId: string|Uint8Array|null = null,
  public modeId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public missionIdList: (string)[] = [],
  public displayEnemyIdList: (string)[] = [],
  public previewIconId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const stageId = (this.stageId !== null ? builder.createString(this.stageId!) : 0);
  const modeId = (this.modeId !== null ? builder.createString(this.modeId!) : 0);
  const missionIdList = clz_Torappu_ActMultiV3MapData.createMissionIdListVector(builder, builder.createObjectOffsetList(this.missionIdList));
  const displayEnemyIdList = clz_Torappu_ActMultiV3MapData.createDisplayEnemyIdListVector(builder, builder.createObjectOffsetList(this.displayEnemyIdList));
  const previewIconId = (this.previewIconId !== null ? builder.createString(this.previewIconId!) : 0);

  return clz_Torappu_ActMultiV3MapData.createclz_Torappu_ActMultiV3MapData(builder,
    stageId,
    modeId,
    this.sortId,
    missionIdList,
    displayEnemyIdList,
    previewIconId
  );
}
}
