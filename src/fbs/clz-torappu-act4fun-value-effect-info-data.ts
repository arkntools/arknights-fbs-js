// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__string__int, dict__string__intT } from './dict--string--int.js';


export class clz_Torappu_Act4funValueEffectInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_Act4funValueEffectInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act4funValueEffectInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act4funValueEffectInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funValueEffectInfoData):clz_Torappu_Act4funValueEffectInfoData {
  return (obj || new clz_Torappu_Act4funValueEffectInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act4funValueEffectInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funValueEffectInfoData):clz_Torappu_Act4funValueEffectInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act4funValueEffectInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

valueEffectId():string|null
valueEffectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
valueEffectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

effectParams(index: number, obj?:dict__string__int):dict__string__int|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__int()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

effectParamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act4funValueEffectInfoData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValueEffectId(builder:flatbuffers.Builder, valueEffectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valueEffectIdOffset, 0);
}

static addEffectParams(builder:flatbuffers.Builder, effectParamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, effectParamsOffset, 0);
}

static createEffectParamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectParamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act4funValueEffectInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act4funValueEffectInfoData(builder:flatbuffers.Builder, valueEffectIdOffset:flatbuffers.Offset, effectParamsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act4funValueEffectInfoData.startclz_Torappu_Act4funValueEffectInfoData(builder);
  clz_Torappu_Act4funValueEffectInfoData.addValueEffectId(builder, valueEffectIdOffset);
  clz_Torappu_Act4funValueEffectInfoData.addEffectParams(builder, effectParamsOffset);
  return clz_Torappu_Act4funValueEffectInfoData.endclz_Torappu_Act4funValueEffectInfoData(builder);
}

unpack(): clz_Torappu_Act4funValueEffectInfoDataT {
  return new clz_Torappu_Act4funValueEffectInfoDataT(
    this.valueEffectId(),
    this.bb!.createObjList<dict__string__int, dict__string__intT>(this.effectParams.bind(this), this.effectParamsLength())
  );
}


unpackTo(_o: clz_Torappu_Act4funValueEffectInfoDataT): void {
  _o.valueEffectId = this.valueEffectId();
  _o.effectParams = this.bb!.createObjList<dict__string__int, dict__string__intT>(this.effectParams.bind(this), this.effectParamsLength());
}
}

export class clz_Torappu_Act4funValueEffectInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public valueEffectId: string|Uint8Array|null = null,
  public effectParams: (dict__string__intT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const valueEffectId = (this.valueEffectId !== null ? builder.createString(this.valueEffectId!) : 0);
  const effectParams = clz_Torappu_Act4funValueEffectInfoData.createEffectParamsVector(builder, builder.createObjectOffsetList(this.effectParams));

  return clz_Torappu_Act4funValueEffectInfoData.createclz_Torappu_Act4funValueEffectInfoData(builder,
    valueEffectId,
    effectParams
  );
}
}
