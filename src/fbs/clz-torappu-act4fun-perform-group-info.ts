// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_Act4funPerformGroupInfo implements flatbuffers.IUnpackableObject<clz_Torappu_Act4funPerformGroupInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act4funPerformGroupInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act4funPerformGroupInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funPerformGroupInfo):clz_Torappu_Act4funPerformGroupInfo {
  return (obj || new clz_Torappu_Act4funPerformGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act4funPerformGroupInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act4funPerformGroupInfo):clz_Torappu_Act4funPerformGroupInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act4funPerformGroupInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

performGroupId():string|null
performGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
performGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

performIds(index: number):string
performIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
performIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

performIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act4funPerformGroupInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPerformGroupId(builder:flatbuffers.Builder, performGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, performGroupIdOffset, 0);
}

static addPerformIds(builder:flatbuffers.Builder, performIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, performIdsOffset, 0);
}

static createPerformIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPerformIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_Act4funPerformGroupInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act4funPerformGroupInfo(builder:flatbuffers.Builder, performGroupIdOffset:flatbuffers.Offset, performIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act4funPerformGroupInfo.startclz_Torappu_Act4funPerformGroupInfo(builder);
  clz_Torappu_Act4funPerformGroupInfo.addPerformGroupId(builder, performGroupIdOffset);
  clz_Torappu_Act4funPerformGroupInfo.addPerformIds(builder, performIdsOffset);
  return clz_Torappu_Act4funPerformGroupInfo.endclz_Torappu_Act4funPerformGroupInfo(builder);
}

unpack(): clz_Torappu_Act4funPerformGroupInfoT {
  return new clz_Torappu_Act4funPerformGroupInfoT(
    this.performGroupId(),
    this.bb!.createScalarList<string>(this.performIds.bind(this), this.performIdsLength())
  );
}


unpackTo(_o: clz_Torappu_Act4funPerformGroupInfoT): void {
  _o.performGroupId = this.performGroupId();
  _o.performIds = this.bb!.createScalarList<string>(this.performIds.bind(this), this.performIdsLength());
}
}

export class clz_Torappu_Act4funPerformGroupInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public performGroupId: string|Uint8Array|null = null,
  public performIds: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const performGroupId = (this.performGroupId !== null ? builder.createString(this.performGroupId!) : 0);
  const performIds = clz_Torappu_Act4funPerformGroupInfo.createPerformIdsVector(builder, builder.createObjectOffsetList(this.performIds));

  return clz_Torappu_Act4funPerformGroupInfo.createclz_Torappu_Act4funPerformGroupInfo(builder,
    performGroupId,
    performIds
  );
}
}
