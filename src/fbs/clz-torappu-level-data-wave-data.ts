// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_LevelData_WaveData_FragmentData, clz_Torappu_LevelData_WaveData_FragmentDataT } from './clz-torappu-level-data-wave-data-fragment-data.js';


export class clz_Torappu_LevelData_WaveData implements flatbuffers.IUnpackableObject<clz_Torappu_LevelData_WaveDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_LevelData_WaveData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_LevelData_WaveData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_WaveData):clz_Torappu_LevelData_WaveData {
  return (obj || new clz_Torappu_LevelData_WaveData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_LevelData_WaveData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_LevelData_WaveData):clz_Torappu_LevelData_WaveData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_LevelData_WaveData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

preDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

postDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxTimeWaitingForNextWave():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fragments(index: number, obj?:clz_Torappu_LevelData_WaveData_FragmentData):clz_Torappu_LevelData_WaveData_FragmentData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_LevelData_WaveData_FragmentData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fragmentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

advancedWaveTag():string|null
advancedWaveTag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
advancedWaveTag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_LevelData_WaveData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addPreDelay(builder:flatbuffers.Builder, preDelay:number) {
  builder.addFieldFloat32(0, preDelay, 0.0);
}

static addPostDelay(builder:flatbuffers.Builder, postDelay:number) {
  builder.addFieldFloat32(1, postDelay, 0.0);
}

static addMaxTimeWaitingForNextWave(builder:flatbuffers.Builder, maxTimeWaitingForNextWave:number) {
  builder.addFieldFloat32(2, maxTimeWaitingForNextWave, 0.0);
}

static addFragments(builder:flatbuffers.Builder, fragmentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fragmentsOffset, 0);
}

static createFragmentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFragmentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAdvancedWaveTag(builder:flatbuffers.Builder, advancedWaveTagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, advancedWaveTagOffset, 0);
}

static endclz_Torappu_LevelData_WaveData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_LevelData_WaveData(builder:flatbuffers.Builder, preDelay:number, postDelay:number, maxTimeWaitingForNextWave:number, fragmentsOffset:flatbuffers.Offset, advancedWaveTagOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_LevelData_WaveData.startclz_Torappu_LevelData_WaveData(builder);
  clz_Torappu_LevelData_WaveData.addPreDelay(builder, preDelay);
  clz_Torappu_LevelData_WaveData.addPostDelay(builder, postDelay);
  clz_Torappu_LevelData_WaveData.addMaxTimeWaitingForNextWave(builder, maxTimeWaitingForNextWave);
  clz_Torappu_LevelData_WaveData.addFragments(builder, fragmentsOffset);
  clz_Torappu_LevelData_WaveData.addAdvancedWaveTag(builder, advancedWaveTagOffset);
  return clz_Torappu_LevelData_WaveData.endclz_Torappu_LevelData_WaveData(builder);
}

unpack(): clz_Torappu_LevelData_WaveDataT {
  return new clz_Torappu_LevelData_WaveDataT(
    this.preDelay(),
    this.postDelay(),
    this.maxTimeWaitingForNextWave(),
    this.bb!.createObjList<clz_Torappu_LevelData_WaveData_FragmentData, clz_Torappu_LevelData_WaveData_FragmentDataT>(this.fragments.bind(this), this.fragmentsLength()),
    this.advancedWaveTag()
  );
}


unpackTo(_o: clz_Torappu_LevelData_WaveDataT): void {
  _o.preDelay = this.preDelay();
  _o.postDelay = this.postDelay();
  _o.maxTimeWaitingForNextWave = this.maxTimeWaitingForNextWave();
  _o.fragments = this.bb!.createObjList<clz_Torappu_LevelData_WaveData_FragmentData, clz_Torappu_LevelData_WaveData_FragmentDataT>(this.fragments.bind(this), this.fragmentsLength());
  _o.advancedWaveTag = this.advancedWaveTag();
}
}

export class clz_Torappu_LevelData_WaveDataT implements flatbuffers.IGeneratedObject {
constructor(
  public preDelay: number = 0.0,
  public postDelay: number = 0.0,
  public maxTimeWaitingForNextWave: number = 0.0,
  public fragments: (clz_Torappu_LevelData_WaveData_FragmentDataT)[] = [],
  public advancedWaveTag: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fragments = clz_Torappu_LevelData_WaveData.createFragmentsVector(builder, builder.createObjectOffsetList(this.fragments));
  const advancedWaveTag = (this.advancedWaveTag !== null ? builder.createString(this.advancedWaveTag!) : 0);

  return clz_Torappu_LevelData_WaveData.createclz_Torappu_LevelData_WaveData(builder,
    this.preDelay,
    this.postDelay,
    this.maxTimeWaitingForNextWave,
    fragments,
    advancedWaveTag
  );
}
}
