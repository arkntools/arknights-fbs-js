// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RL03DevDifficultyNodePairInfo, clz_Torappu_RL03DevDifficultyNodePairInfoT } from './clz-torappu-rl03-dev-difficulty-node-pair-info.js';


export class clz_Torappu_RL03DevDifficultyNodeInfo implements flatbuffers.IUnpackableObject<clz_Torappu_RL03DevDifficultyNodeInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RL03DevDifficultyNodeInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RL03DevDifficultyNodeInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RL03DevDifficultyNodeInfo):clz_Torappu_RL03DevDifficultyNodeInfo {
  return (obj || new clz_Torappu_RL03DevDifficultyNodeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RL03DevDifficultyNodeInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RL03DevDifficultyNodeInfo):clz_Torappu_RL03DevDifficultyNodeInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RL03DevDifficultyNodeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

buffId():string|null
buffId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
buffId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nodeMap(index: number, obj?:clz_Torappu_RL03DevDifficultyNodePairInfo):clz_Torappu_RL03DevDifficultyNodePairInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_RL03DevDifficultyNodePairInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

nodeMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enableGrade():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RL03DevDifficultyNodeInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBuffId(builder:flatbuffers.Builder, buffIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, buffIdOffset, 0);
}

static addNodeMap(builder:flatbuffers.Builder, nodeMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nodeMapOffset, 0);
}

static createNodeMapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNodeMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnableGrade(builder:flatbuffers.Builder, enableGrade:number) {
  builder.addFieldInt32(2, enableGrade, 0);
}

static endclz_Torappu_RL03DevDifficultyNodeInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RL03DevDifficultyNodeInfo(builder:flatbuffers.Builder, buffIdOffset:flatbuffers.Offset, nodeMapOffset:flatbuffers.Offset, enableGrade:number):flatbuffers.Offset {
  clz_Torappu_RL03DevDifficultyNodeInfo.startclz_Torappu_RL03DevDifficultyNodeInfo(builder);
  clz_Torappu_RL03DevDifficultyNodeInfo.addBuffId(builder, buffIdOffset);
  clz_Torappu_RL03DevDifficultyNodeInfo.addNodeMap(builder, nodeMapOffset);
  clz_Torappu_RL03DevDifficultyNodeInfo.addEnableGrade(builder, enableGrade);
  return clz_Torappu_RL03DevDifficultyNodeInfo.endclz_Torappu_RL03DevDifficultyNodeInfo(builder);
}

unpack(): clz_Torappu_RL03DevDifficultyNodeInfoT {
  return new clz_Torappu_RL03DevDifficultyNodeInfoT(
    this.buffId(),
    this.bb!.createObjList<clz_Torappu_RL03DevDifficultyNodePairInfo, clz_Torappu_RL03DevDifficultyNodePairInfoT>(this.nodeMap.bind(this), this.nodeMapLength()),
    this.enableGrade()
  );
}


unpackTo(_o: clz_Torappu_RL03DevDifficultyNodeInfoT): void {
  _o.buffId = this.buffId();
  _o.nodeMap = this.bb!.createObjList<clz_Torappu_RL03DevDifficultyNodePairInfo, clz_Torappu_RL03DevDifficultyNodePairInfoT>(this.nodeMap.bind(this), this.nodeMapLength());
  _o.enableGrade = this.enableGrade();
}
}

export class clz_Torappu_RL03DevDifficultyNodeInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public buffId: string|Uint8Array|null = null,
  public nodeMap: (clz_Torappu_RL03DevDifficultyNodePairInfoT)[] = [],
  public enableGrade: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const buffId = (this.buffId !== null ? builder.createString(this.buffId!) : 0);
  const nodeMap = clz_Torappu_RL03DevDifficultyNodeInfo.createNodeMapVector(builder, builder.createObjectOffsetList(this.nodeMap));

  return clz_Torappu_RL03DevDifficultyNodeInfo.createclz_Torappu_RL03DevDifficultyNodeInfo(builder,
    buffId,
    nodeMap,
    this.enableGrade
  );
}
}
