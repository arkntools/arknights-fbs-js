// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_RuneTable_PackedRuneData, clz_Torappu_RuneTable_PackedRuneDataT } from './clz-torappu-rune-table-packed-rune-data.js';


export class clz_Torappu_ClimbTowerSubCardData implements flatbuffers.IUnpackableObject<clz_Torappu_ClimbTowerSubCardDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ClimbTowerSubCardData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ClimbTowerSubCardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerSubCardData):clz_Torappu_ClimbTowerSubCardData {
  return (obj || new clz_Torappu_ClimbTowerSubCardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ClimbTowerSubCardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerSubCardData):clz_Torappu_ClimbTowerSubCardData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ClimbTowerSubCardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainCardId():string|null
mainCardId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainCardId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

runeData(obj?:clz_Torappu_RuneTable_PackedRuneData):clz_Torappu_RuneTable_PackedRuneData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new clz_Torappu_RuneTable_PackedRuneData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trapIds(index: number):string
trapIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trapIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trapIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ClimbTowerSubCardData(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addMainCardId(builder:flatbuffers.Builder, mainCardIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mainCardIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(2, sortId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descOffset, 0);
}

static addRuneData(builder:flatbuffers.Builder, runeDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, runeDataOffset, 0);
}

static addTrapIds(builder:flatbuffers.Builder, trapIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, trapIdsOffset, 0);
}

static createTrapIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrapIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ClimbTowerSubCardData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ClimbTowerSubCardDataT {
  return new clz_Torappu_ClimbTowerSubCardDataT(
    this.id(),
    this.mainCardId(),
    this.sortId(),
    this.name(),
    this.desc(),
    (this.runeData() !== null ? this.runeData()!.unpack() : null),
    this.bb!.createScalarList<string>(this.trapIds.bind(this), this.trapIdsLength())
  );
}


unpackTo(_o: clz_Torappu_ClimbTowerSubCardDataT): void {
  _o.id = this.id();
  _o.mainCardId = this.mainCardId();
  _o.sortId = this.sortId();
  _o.name = this.name();
  _o.desc = this.desc();
  _o.runeData = (this.runeData() !== null ? this.runeData()!.unpack() : null);
  _o.trapIds = this.bb!.createScalarList<string>(this.trapIds.bind(this), this.trapIdsLength());
}
}

export class clz_Torappu_ClimbTowerSubCardDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public mainCardId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public name: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public runeData: clz_Torappu_RuneTable_PackedRuneDataT|null = null,
  public trapIds: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const mainCardId = (this.mainCardId !== null ? builder.createString(this.mainCardId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const runeData = (this.runeData !== null ? this.runeData!.pack(builder) : 0);
  const trapIds = clz_Torappu_ClimbTowerSubCardData.createTrapIdsVector(builder, builder.createObjectOffsetList(this.trapIds));

  clz_Torappu_ClimbTowerSubCardData.startclz_Torappu_ClimbTowerSubCardData(builder);
  clz_Torappu_ClimbTowerSubCardData.addId(builder, id);
  clz_Torappu_ClimbTowerSubCardData.addMainCardId(builder, mainCardId);
  clz_Torappu_ClimbTowerSubCardData.addSortId(builder, this.sortId);
  clz_Torappu_ClimbTowerSubCardData.addName(builder, name);
  clz_Torappu_ClimbTowerSubCardData.addDesc(builder, desc);
  clz_Torappu_ClimbTowerSubCardData.addRuneData(builder, runeData);
  clz_Torappu_ClimbTowerSubCardData.addTrapIds(builder, trapIds);

  return clz_Torappu_ClimbTowerSubCardData.endclz_Torappu_ClimbTowerSubCardData(builder);
}
}
