// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_ActivityType } from './enum--torappu-activity-type.js';
import { enum__Torappu_RetroType } from './enum--torappu-retro-type.js';


export class clz_Torappu_RetroActData implements flatbuffers.IUnpackableObject<clz_Torappu_RetroActDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RetroActData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RetroActData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RetroActData):clz_Torappu_RetroActData {
  return (obj || new clz_Torappu_RetroActData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RetroActData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RetroActData):clz_Torappu_RetroActData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RetroActData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

retroId():string|null
retroId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
retroId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():enum__Torappu_RetroType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_RetroType.SIDESTORY;
}

linkedActId(index: number):string
linkedActId(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
linkedActId(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

linkedActIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

startTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

trailStartTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

haveTrail():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

customActId():string|null
customActId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
customActId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

customActType():enum__Torappu_ActivityType {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActivityType.DEFAULT;
}

static startclz_Torappu_RetroActData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addRetroId(builder:flatbuffers.Builder, retroIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, retroIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:enum__Torappu_RetroType) {
  builder.addFieldInt32(1, type, enum__Torappu_RetroType.SIDESTORY);
}

static addLinkedActId(builder:flatbuffers.Builder, linkedActIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, linkedActIdOffset, 0);
}

static createLinkedActIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinkedActIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStartTime(builder:flatbuffers.Builder, startTime:bigint) {
  builder.addFieldInt64(3, startTime, BigInt('0'));
}

static addTrailStartTime(builder:flatbuffers.Builder, trailStartTime:bigint) {
  builder.addFieldInt64(4, trailStartTime, BigInt('0'));
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(5, index, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nameOffset, 0);
}

static addHaveTrail(builder:flatbuffers.Builder, haveTrail:boolean) {
  builder.addFieldInt8(7, +haveTrail, +false);
}

static addCustomActId(builder:flatbuffers.Builder, customActIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, customActIdOffset, 0);
}

static addCustomActType(builder:flatbuffers.Builder, customActType:enum__Torappu_ActivityType) {
  builder.addFieldInt32(9, customActType, enum__Torappu_ActivityType.DEFAULT);
}

static endclz_Torappu_RetroActData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RetroActData(builder:flatbuffers.Builder, retroIdOffset:flatbuffers.Offset, type:enum__Torappu_RetroType, linkedActIdOffset:flatbuffers.Offset, startTime:bigint, trailStartTime:bigint, index:number, nameOffset:flatbuffers.Offset, haveTrail:boolean, customActIdOffset:flatbuffers.Offset, customActType:enum__Torappu_ActivityType):flatbuffers.Offset {
  clz_Torappu_RetroActData.startclz_Torappu_RetroActData(builder);
  clz_Torappu_RetroActData.addRetroId(builder, retroIdOffset);
  clz_Torappu_RetroActData.addType(builder, type);
  clz_Torappu_RetroActData.addLinkedActId(builder, linkedActIdOffset);
  clz_Torappu_RetroActData.addStartTime(builder, startTime);
  clz_Torappu_RetroActData.addTrailStartTime(builder, trailStartTime);
  clz_Torappu_RetroActData.addIndex(builder, index);
  clz_Torappu_RetroActData.addName(builder, nameOffset);
  clz_Torappu_RetroActData.addHaveTrail(builder, haveTrail);
  clz_Torappu_RetroActData.addCustomActId(builder, customActIdOffset);
  clz_Torappu_RetroActData.addCustomActType(builder, customActType);
  return clz_Torappu_RetroActData.endclz_Torappu_RetroActData(builder);
}

unpack(): clz_Torappu_RetroActDataT {
  return new clz_Torappu_RetroActDataT(
    this.retroId(),
    this.type(),
    this.bb!.createScalarList<string>(this.linkedActId.bind(this), this.linkedActIdLength()),
    this.startTime(),
    this.trailStartTime(),
    this.index(),
    this.name(),
    this.haveTrail(),
    this.customActId(),
    this.customActType()
  );
}


unpackTo(_o: clz_Torappu_RetroActDataT): void {
  _o.retroId = this.retroId();
  _o.type = this.type();
  _o.linkedActId = this.bb!.createScalarList<string>(this.linkedActId.bind(this), this.linkedActIdLength());
  _o.startTime = this.startTime();
  _o.trailStartTime = this.trailStartTime();
  _o.index = this.index();
  _o.name = this.name();
  _o.haveTrail = this.haveTrail();
  _o.customActId = this.customActId();
  _o.customActType = this.customActType();
}
}

export class clz_Torappu_RetroActDataT implements flatbuffers.IGeneratedObject {
constructor(
  public retroId: string|Uint8Array|null = null,
  public type: enum__Torappu_RetroType = enum__Torappu_RetroType.SIDESTORY,
  public linkedActId: (string)[] = [],
  public startTime: bigint = BigInt('0'),
  public trailStartTime: bigint = BigInt('0'),
  public index: number = 0,
  public name: string|Uint8Array|null = null,
  public haveTrail: boolean = false,
  public customActId: string|Uint8Array|null = null,
  public customActType: enum__Torappu_ActivityType = enum__Torappu_ActivityType.DEFAULT
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const retroId = (this.retroId !== null ? builder.createString(this.retroId!) : 0);
  const linkedActId = clz_Torappu_RetroActData.createLinkedActIdVector(builder, builder.createObjectOffsetList(this.linkedActId));
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const customActId = (this.customActId !== null ? builder.createString(this.customActId!) : 0);

  return clz_Torappu_RetroActData.createclz_Torappu_RetroActData(builder,
    retroId,
    this.type,
    linkedActId,
    this.startTime,
    this.trailStartTime,
    this.index,
    name,
    this.haveTrail,
    customActId,
    this.customActType
  );
}
}
