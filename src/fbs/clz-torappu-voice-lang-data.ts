// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData, dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataT } from './dict--enum--torappu-voice-lang-type--clz-torappu-voice-lang-info-data.js';


export class clz_Torappu_VoiceLangData implements flatbuffers.IUnpackableObject<clz_Torappu_VoiceLangDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_VoiceLangData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_VoiceLangData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangData):clz_Torappu_VoiceLangData {
  return (obj || new clz_Torappu_VoiceLangData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_VoiceLangData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_VoiceLangData):clz_Torappu_VoiceLangData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_VoiceLangData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

wordkeys(index: number):string
wordkeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
wordkeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

wordkeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

charId():string|null
charId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
charId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dict(index: number, obj?:dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData):dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_VoiceLangData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addWordkeys(builder:flatbuffers.Builder, wordkeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, wordkeysOffset, 0);
}

static createWordkeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWordkeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCharId(builder:flatbuffers.Builder, charIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, charIdOffset, 0);
}

static addDict(builder:flatbuffers.Builder, dictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dictOffset, 0);
}

static createDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_VoiceLangData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_VoiceLangData(builder:flatbuffers.Builder, wordkeysOffset:flatbuffers.Offset, charIdOffset:flatbuffers.Offset, dictOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_VoiceLangData.startclz_Torappu_VoiceLangData(builder);
  clz_Torappu_VoiceLangData.addWordkeys(builder, wordkeysOffset);
  clz_Torappu_VoiceLangData.addCharId(builder, charIdOffset);
  clz_Torappu_VoiceLangData.addDict(builder, dictOffset);
  return clz_Torappu_VoiceLangData.endclz_Torappu_VoiceLangData(builder);
}

unpack(): clz_Torappu_VoiceLangDataT {
  return new clz_Torappu_VoiceLangDataT(
    this.bb!.createScalarList<string>(this.wordkeys.bind(this), this.wordkeysLength()),
    this.charId(),
    this.bb!.createObjList<dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData, dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataT>(this.dict.bind(this), this.dictLength())
  );
}


unpackTo(_o: clz_Torappu_VoiceLangDataT): void {
  _o.wordkeys = this.bb!.createScalarList<string>(this.wordkeys.bind(this), this.wordkeysLength());
  _o.charId = this.charId();
  _o.dict = this.bb!.createObjList<dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData, dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataT>(this.dict.bind(this), this.dictLength());
}
}

export class clz_Torappu_VoiceLangDataT implements flatbuffers.IGeneratedObject {
constructor(
  public wordkeys: (string)[] = [],
  public charId: string|Uint8Array|null = null,
  public dict: (dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const wordkeys = clz_Torappu_VoiceLangData.createWordkeysVector(builder, builder.createObjectOffsetList(this.wordkeys));
  const charId = (this.charId !== null ? builder.createString(this.charId!) : 0);
  const dict = clz_Torappu_VoiceLangData.createDictVector(builder, builder.createObjectOffsetList(this.dict));

  return clz_Torappu_VoiceLangData.createclz_Torappu_VoiceLangData(builder,
    wordkeys,
    charId,
    dict
  );
}
}
