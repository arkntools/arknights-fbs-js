// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_SandboxV2RacingConstData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2RacingConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2RacingConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2RacingConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2RacingConstData):clz_Torappu_SandboxV2RacingConstData {
  return (obj || new clz_Torappu_SandboxV2RacingConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2RacingConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2RacingConstData):clz_Torappu_SandboxV2RacingConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2RacingConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

attributeNameList(index: number):string
attributeNameList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
attributeNameList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

attributeNameListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

racerMaxValue(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

racerMaxValueLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

racerMaxValueArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

bagFullHintPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tempBagFullHintPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

bagName():string|null
bagName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bagName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tempBagName():string|null
tempBagName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tempBagName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bagEmptyLeftDesc():string|null
bagEmptyLeftDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bagEmptyLeftDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bagEmptyRightDesc():string|null
bagEmptyRightDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bagEmptyRightDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tempBagEmptyLeftDesc():string|null
tempBagEmptyLeftDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tempBagEmptyLeftDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tempBagEmptyRightDesc():string|null
tempBagEmptyRightDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tempBagEmptyRightDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bornTalentIconId():string|null
bornTalentIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bornTalentIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bornTalentTitle():string|null
bornTalentTitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bornTalentTitle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

learnedTalentIconId():string|null
learnedTalentIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
learnedTalentIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

learnedTalentTitle():string|null
learnedTalentTitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
learnedTalentTitle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

talentEmptyDesc():string|null
talentEmptyDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
talentEmptyDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

slugItemId():string|null
slugItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
slugItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

racingHpFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

racingSpeedFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

racingAccelerationFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

recoverMoveSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

recoverHpFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

bleedingFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxSteeringFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

steeringMassLevelFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

steeringMoveSpeedFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

safeAngleCos():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

safeCollisionForceLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tileCollisionFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

collisionForceSector(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

collisionForceSectorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

collisionForceSectorArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

collisionForceLevel(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

collisionForceLevelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

collisionForceLevelArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

collisionSpeedLoss(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

collisionSpeedLossLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

collisionSpeedLossArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

collisionHpLoss(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

collisionHpLossLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

collisionHpLossArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tileCollisionSpeedLoss(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

tileCollisionSpeedLossLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tileCollisionSpeedLossArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

tileCollisionHpLoss(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

tileCollisionHpLossLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tileCollisionHpLossArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

autoUseItemTimeRange(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

autoUseItemTimeRangeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

autoUseItemTimeRangeArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

recoverAcceleration():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startclz_Torappu_SandboxV2RacingConstData(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static addAttributeNameList(builder:flatbuffers.Builder, attributeNameListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, attributeNameListOffset, 0);
}

static createAttributeNameListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttributeNameListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRacerMaxValue(builder:flatbuffers.Builder, racerMaxValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, racerMaxValueOffset, 0);
}

static createRacerMaxValueVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRacerMaxValueVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRacerMaxValueVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startRacerMaxValueVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBagFullHintPercent(builder:flatbuffers.Builder, bagFullHintPercent:number) {
  builder.addFieldFloat32(2, bagFullHintPercent, 0.0);
}

static addTempBagFullHintPercent(builder:flatbuffers.Builder, tempBagFullHintPercent:number) {
  builder.addFieldFloat32(3, tempBagFullHintPercent, 0.0);
}

static addBagName(builder:flatbuffers.Builder, bagNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bagNameOffset, 0);
}

static addTempBagName(builder:flatbuffers.Builder, tempBagNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tempBagNameOffset, 0);
}

static addBagEmptyLeftDesc(builder:flatbuffers.Builder, bagEmptyLeftDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, bagEmptyLeftDescOffset, 0);
}

static addBagEmptyRightDesc(builder:flatbuffers.Builder, bagEmptyRightDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, bagEmptyRightDescOffset, 0);
}

static addTempBagEmptyLeftDesc(builder:flatbuffers.Builder, tempBagEmptyLeftDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, tempBagEmptyLeftDescOffset, 0);
}

static addTempBagEmptyRightDesc(builder:flatbuffers.Builder, tempBagEmptyRightDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, tempBagEmptyRightDescOffset, 0);
}

static addBornTalentIconId(builder:flatbuffers.Builder, bornTalentIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, bornTalentIconIdOffset, 0);
}

static addBornTalentTitle(builder:flatbuffers.Builder, bornTalentTitleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, bornTalentTitleOffset, 0);
}

static addLearnedTalentIconId(builder:flatbuffers.Builder, learnedTalentIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, learnedTalentIconIdOffset, 0);
}

static addLearnedTalentTitle(builder:flatbuffers.Builder, learnedTalentTitleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, learnedTalentTitleOffset, 0);
}

static addTalentEmptyDesc(builder:flatbuffers.Builder, talentEmptyDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, talentEmptyDescOffset, 0);
}

static addSlugItemId(builder:flatbuffers.Builder, slugItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, slugItemIdOffset, 0);
}

static addRacingHpFactor(builder:flatbuffers.Builder, racingHpFactor:number) {
  builder.addFieldFloat32(16, racingHpFactor, 0.0);
}

static addRacingSpeedFactor(builder:flatbuffers.Builder, racingSpeedFactor:number) {
  builder.addFieldFloat32(17, racingSpeedFactor, 0.0);
}

static addRacingAccelerationFactor(builder:flatbuffers.Builder, racingAccelerationFactor:number) {
  builder.addFieldFloat32(18, racingAccelerationFactor, 0.0);
}

static addRecoverMoveSpeed(builder:flatbuffers.Builder, recoverMoveSpeed:number) {
  builder.addFieldFloat32(19, recoverMoveSpeed, 0.0);
}

static addRecoverHpFactor(builder:flatbuffers.Builder, recoverHpFactor:number) {
  builder.addFieldFloat32(20, recoverHpFactor, 0.0);
}

static addBleedingFactor(builder:flatbuffers.Builder, bleedingFactor:number) {
  builder.addFieldFloat32(21, bleedingFactor, 0.0);
}

static addMaxSteeringFactor(builder:flatbuffers.Builder, maxSteeringFactor:number) {
  builder.addFieldFloat32(22, maxSteeringFactor, 0.0);
}

static addSteeringMassLevelFactor(builder:flatbuffers.Builder, steeringMassLevelFactor:number) {
  builder.addFieldFloat32(23, steeringMassLevelFactor, 0.0);
}

static addSteeringMoveSpeedFactor(builder:flatbuffers.Builder, steeringMoveSpeedFactor:number) {
  builder.addFieldFloat32(24, steeringMoveSpeedFactor, 0.0);
}

static addSafeAngleCos(builder:flatbuffers.Builder, safeAngleCos:number) {
  builder.addFieldFloat32(25, safeAngleCos, 0.0);
}

static addSafeCollisionForceLevel(builder:flatbuffers.Builder, safeCollisionForceLevel:number) {
  builder.addFieldFloat32(26, safeCollisionForceLevel, 0.0);
}

static addTileCollisionFactor(builder:flatbuffers.Builder, tileCollisionFactor:number) {
  builder.addFieldFloat32(27, tileCollisionFactor, 0.0);
}

static addCollisionForceSector(builder:flatbuffers.Builder, collisionForceSectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, collisionForceSectorOffset, 0);
}

static createCollisionForceSectorVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCollisionForceSectorVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCollisionForceSectorVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCollisionForceSectorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCollisionForceLevel(builder:flatbuffers.Builder, collisionForceLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, collisionForceLevelOffset, 0);
}

static createCollisionForceLevelVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCollisionForceLevelVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCollisionForceLevelVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCollisionForceLevelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCollisionSpeedLoss(builder:flatbuffers.Builder, collisionSpeedLossOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, collisionSpeedLossOffset, 0);
}

static createCollisionSpeedLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCollisionSpeedLossVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCollisionSpeedLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCollisionSpeedLossVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCollisionHpLoss(builder:flatbuffers.Builder, collisionHpLossOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, collisionHpLossOffset, 0);
}

static createCollisionHpLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCollisionHpLossVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCollisionHpLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCollisionHpLossVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTileCollisionSpeedLoss(builder:flatbuffers.Builder, tileCollisionSpeedLossOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, tileCollisionSpeedLossOffset, 0);
}

static createTileCollisionSpeedLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTileCollisionSpeedLossVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTileCollisionSpeedLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startTileCollisionSpeedLossVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTileCollisionHpLoss(builder:flatbuffers.Builder, tileCollisionHpLossOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, tileCollisionHpLossOffset, 0);
}

static createTileCollisionHpLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTileCollisionHpLossVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTileCollisionHpLossVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startTileCollisionHpLossVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAutoUseItemTimeRange(builder:flatbuffers.Builder, autoUseItemTimeRangeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, autoUseItemTimeRangeOffset, 0);
}

static createAutoUseItemTimeRangeVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAutoUseItemTimeRangeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAutoUseItemTimeRangeVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startAutoUseItemTimeRangeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRecoverAcceleration(builder:flatbuffers.Builder, recoverAcceleration:number) {
  builder.addFieldFloat32(35, recoverAcceleration, 0.0);
}

static endclz_Torappu_SandboxV2RacingConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2RacingConstData(builder:flatbuffers.Builder, attributeNameListOffset:flatbuffers.Offset, racerMaxValueOffset:flatbuffers.Offset, bagFullHintPercent:number, tempBagFullHintPercent:number, bagNameOffset:flatbuffers.Offset, tempBagNameOffset:flatbuffers.Offset, bagEmptyLeftDescOffset:flatbuffers.Offset, bagEmptyRightDescOffset:flatbuffers.Offset, tempBagEmptyLeftDescOffset:flatbuffers.Offset, tempBagEmptyRightDescOffset:flatbuffers.Offset, bornTalentIconIdOffset:flatbuffers.Offset, bornTalentTitleOffset:flatbuffers.Offset, learnedTalentIconIdOffset:flatbuffers.Offset, learnedTalentTitleOffset:flatbuffers.Offset, talentEmptyDescOffset:flatbuffers.Offset, slugItemIdOffset:flatbuffers.Offset, racingHpFactor:number, racingSpeedFactor:number, racingAccelerationFactor:number, recoverMoveSpeed:number, recoverHpFactor:number, bleedingFactor:number, maxSteeringFactor:number, steeringMassLevelFactor:number, steeringMoveSpeedFactor:number, safeAngleCos:number, safeCollisionForceLevel:number, tileCollisionFactor:number, collisionForceSectorOffset:flatbuffers.Offset, collisionForceLevelOffset:flatbuffers.Offset, collisionSpeedLossOffset:flatbuffers.Offset, collisionHpLossOffset:flatbuffers.Offset, tileCollisionSpeedLossOffset:flatbuffers.Offset, tileCollisionHpLossOffset:flatbuffers.Offset, autoUseItemTimeRangeOffset:flatbuffers.Offset, recoverAcceleration:number):flatbuffers.Offset {
  clz_Torappu_SandboxV2RacingConstData.startclz_Torappu_SandboxV2RacingConstData(builder);
  clz_Torappu_SandboxV2RacingConstData.addAttributeNameList(builder, attributeNameListOffset);
  clz_Torappu_SandboxV2RacingConstData.addRacerMaxValue(builder, racerMaxValueOffset);
  clz_Torappu_SandboxV2RacingConstData.addBagFullHintPercent(builder, bagFullHintPercent);
  clz_Torappu_SandboxV2RacingConstData.addTempBagFullHintPercent(builder, tempBagFullHintPercent);
  clz_Torappu_SandboxV2RacingConstData.addBagName(builder, bagNameOffset);
  clz_Torappu_SandboxV2RacingConstData.addTempBagName(builder, tempBagNameOffset);
  clz_Torappu_SandboxV2RacingConstData.addBagEmptyLeftDesc(builder, bagEmptyLeftDescOffset);
  clz_Torappu_SandboxV2RacingConstData.addBagEmptyRightDesc(builder, bagEmptyRightDescOffset);
  clz_Torappu_SandboxV2RacingConstData.addTempBagEmptyLeftDesc(builder, tempBagEmptyLeftDescOffset);
  clz_Torappu_SandboxV2RacingConstData.addTempBagEmptyRightDesc(builder, tempBagEmptyRightDescOffset);
  clz_Torappu_SandboxV2RacingConstData.addBornTalentIconId(builder, bornTalentIconIdOffset);
  clz_Torappu_SandboxV2RacingConstData.addBornTalentTitle(builder, bornTalentTitleOffset);
  clz_Torappu_SandboxV2RacingConstData.addLearnedTalentIconId(builder, learnedTalentIconIdOffset);
  clz_Torappu_SandboxV2RacingConstData.addLearnedTalentTitle(builder, learnedTalentTitleOffset);
  clz_Torappu_SandboxV2RacingConstData.addTalentEmptyDesc(builder, talentEmptyDescOffset);
  clz_Torappu_SandboxV2RacingConstData.addSlugItemId(builder, slugItemIdOffset);
  clz_Torappu_SandboxV2RacingConstData.addRacingHpFactor(builder, racingHpFactor);
  clz_Torappu_SandboxV2RacingConstData.addRacingSpeedFactor(builder, racingSpeedFactor);
  clz_Torappu_SandboxV2RacingConstData.addRacingAccelerationFactor(builder, racingAccelerationFactor);
  clz_Torappu_SandboxV2RacingConstData.addRecoverMoveSpeed(builder, recoverMoveSpeed);
  clz_Torappu_SandboxV2RacingConstData.addRecoverHpFactor(builder, recoverHpFactor);
  clz_Torappu_SandboxV2RacingConstData.addBleedingFactor(builder, bleedingFactor);
  clz_Torappu_SandboxV2RacingConstData.addMaxSteeringFactor(builder, maxSteeringFactor);
  clz_Torappu_SandboxV2RacingConstData.addSteeringMassLevelFactor(builder, steeringMassLevelFactor);
  clz_Torappu_SandboxV2RacingConstData.addSteeringMoveSpeedFactor(builder, steeringMoveSpeedFactor);
  clz_Torappu_SandboxV2RacingConstData.addSafeAngleCos(builder, safeAngleCos);
  clz_Torappu_SandboxV2RacingConstData.addSafeCollisionForceLevel(builder, safeCollisionForceLevel);
  clz_Torappu_SandboxV2RacingConstData.addTileCollisionFactor(builder, tileCollisionFactor);
  clz_Torappu_SandboxV2RacingConstData.addCollisionForceSector(builder, collisionForceSectorOffset);
  clz_Torappu_SandboxV2RacingConstData.addCollisionForceLevel(builder, collisionForceLevelOffset);
  clz_Torappu_SandboxV2RacingConstData.addCollisionSpeedLoss(builder, collisionSpeedLossOffset);
  clz_Torappu_SandboxV2RacingConstData.addCollisionHpLoss(builder, collisionHpLossOffset);
  clz_Torappu_SandboxV2RacingConstData.addTileCollisionSpeedLoss(builder, tileCollisionSpeedLossOffset);
  clz_Torappu_SandboxV2RacingConstData.addTileCollisionHpLoss(builder, tileCollisionHpLossOffset);
  clz_Torappu_SandboxV2RacingConstData.addAutoUseItemTimeRange(builder, autoUseItemTimeRangeOffset);
  clz_Torappu_SandboxV2RacingConstData.addRecoverAcceleration(builder, recoverAcceleration);
  return clz_Torappu_SandboxV2RacingConstData.endclz_Torappu_SandboxV2RacingConstData(builder);
}

unpack(): clz_Torappu_SandboxV2RacingConstDataT {
  return new clz_Torappu_SandboxV2RacingConstDataT(
    this.bb!.createScalarList<string>(this.attributeNameList.bind(this), this.attributeNameListLength()),
    this.bb!.createScalarList<number>(this.racerMaxValue.bind(this), this.racerMaxValueLength()),
    this.bagFullHintPercent(),
    this.tempBagFullHintPercent(),
    this.bagName(),
    this.tempBagName(),
    this.bagEmptyLeftDesc(),
    this.bagEmptyRightDesc(),
    this.tempBagEmptyLeftDesc(),
    this.tempBagEmptyRightDesc(),
    this.bornTalentIconId(),
    this.bornTalentTitle(),
    this.learnedTalentIconId(),
    this.learnedTalentTitle(),
    this.talentEmptyDesc(),
    this.slugItemId(),
    this.racingHpFactor(),
    this.racingSpeedFactor(),
    this.racingAccelerationFactor(),
    this.recoverMoveSpeed(),
    this.recoverHpFactor(),
    this.bleedingFactor(),
    this.maxSteeringFactor(),
    this.steeringMassLevelFactor(),
    this.steeringMoveSpeedFactor(),
    this.safeAngleCos(),
    this.safeCollisionForceLevel(),
    this.tileCollisionFactor(),
    this.bb!.createScalarList<number>(this.collisionForceSector.bind(this), this.collisionForceSectorLength()),
    this.bb!.createScalarList<number>(this.collisionForceLevel.bind(this), this.collisionForceLevelLength()),
    this.bb!.createScalarList<number>(this.collisionSpeedLoss.bind(this), this.collisionSpeedLossLength()),
    this.bb!.createScalarList<number>(this.collisionHpLoss.bind(this), this.collisionHpLossLength()),
    this.bb!.createScalarList<number>(this.tileCollisionSpeedLoss.bind(this), this.tileCollisionSpeedLossLength()),
    this.bb!.createScalarList<number>(this.tileCollisionHpLoss.bind(this), this.tileCollisionHpLossLength()),
    this.bb!.createScalarList<number>(this.autoUseItemTimeRange.bind(this), this.autoUseItemTimeRangeLength()),
    this.recoverAcceleration()
  );
}


unpackTo(_o: clz_Torappu_SandboxV2RacingConstDataT): void {
  _o.attributeNameList = this.bb!.createScalarList<string>(this.attributeNameList.bind(this), this.attributeNameListLength());
  _o.racerMaxValue = this.bb!.createScalarList<number>(this.racerMaxValue.bind(this), this.racerMaxValueLength());
  _o.bagFullHintPercent = this.bagFullHintPercent();
  _o.tempBagFullHintPercent = this.tempBagFullHintPercent();
  _o.bagName = this.bagName();
  _o.tempBagName = this.tempBagName();
  _o.bagEmptyLeftDesc = this.bagEmptyLeftDesc();
  _o.bagEmptyRightDesc = this.bagEmptyRightDesc();
  _o.tempBagEmptyLeftDesc = this.tempBagEmptyLeftDesc();
  _o.tempBagEmptyRightDesc = this.tempBagEmptyRightDesc();
  _o.bornTalentIconId = this.bornTalentIconId();
  _o.bornTalentTitle = this.bornTalentTitle();
  _o.learnedTalentIconId = this.learnedTalentIconId();
  _o.learnedTalentTitle = this.learnedTalentTitle();
  _o.talentEmptyDesc = this.talentEmptyDesc();
  _o.slugItemId = this.slugItemId();
  _o.racingHpFactor = this.racingHpFactor();
  _o.racingSpeedFactor = this.racingSpeedFactor();
  _o.racingAccelerationFactor = this.racingAccelerationFactor();
  _o.recoverMoveSpeed = this.recoverMoveSpeed();
  _o.recoverHpFactor = this.recoverHpFactor();
  _o.bleedingFactor = this.bleedingFactor();
  _o.maxSteeringFactor = this.maxSteeringFactor();
  _o.steeringMassLevelFactor = this.steeringMassLevelFactor();
  _o.steeringMoveSpeedFactor = this.steeringMoveSpeedFactor();
  _o.safeAngleCos = this.safeAngleCos();
  _o.safeCollisionForceLevel = this.safeCollisionForceLevel();
  _o.tileCollisionFactor = this.tileCollisionFactor();
  _o.collisionForceSector = this.bb!.createScalarList<number>(this.collisionForceSector.bind(this), this.collisionForceSectorLength());
  _o.collisionForceLevel = this.bb!.createScalarList<number>(this.collisionForceLevel.bind(this), this.collisionForceLevelLength());
  _o.collisionSpeedLoss = this.bb!.createScalarList<number>(this.collisionSpeedLoss.bind(this), this.collisionSpeedLossLength());
  _o.collisionHpLoss = this.bb!.createScalarList<number>(this.collisionHpLoss.bind(this), this.collisionHpLossLength());
  _o.tileCollisionSpeedLoss = this.bb!.createScalarList<number>(this.tileCollisionSpeedLoss.bind(this), this.tileCollisionSpeedLossLength());
  _o.tileCollisionHpLoss = this.bb!.createScalarList<number>(this.tileCollisionHpLoss.bind(this), this.tileCollisionHpLossLength());
  _o.autoUseItemTimeRange = this.bb!.createScalarList<number>(this.autoUseItemTimeRange.bind(this), this.autoUseItemTimeRangeLength());
  _o.recoverAcceleration = this.recoverAcceleration();
}
}

export class clz_Torappu_SandboxV2RacingConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public attributeNameList: (string)[] = [],
  public racerMaxValue: (number)[] = [],
  public bagFullHintPercent: number = 0.0,
  public tempBagFullHintPercent: number = 0.0,
  public bagName: string|Uint8Array|null = null,
  public tempBagName: string|Uint8Array|null = null,
  public bagEmptyLeftDesc: string|Uint8Array|null = null,
  public bagEmptyRightDesc: string|Uint8Array|null = null,
  public tempBagEmptyLeftDesc: string|Uint8Array|null = null,
  public tempBagEmptyRightDesc: string|Uint8Array|null = null,
  public bornTalentIconId: string|Uint8Array|null = null,
  public bornTalentTitle: string|Uint8Array|null = null,
  public learnedTalentIconId: string|Uint8Array|null = null,
  public learnedTalentTitle: string|Uint8Array|null = null,
  public talentEmptyDesc: string|Uint8Array|null = null,
  public slugItemId: string|Uint8Array|null = null,
  public racingHpFactor: number = 0.0,
  public racingSpeedFactor: number = 0.0,
  public racingAccelerationFactor: number = 0.0,
  public recoverMoveSpeed: number = 0.0,
  public recoverHpFactor: number = 0.0,
  public bleedingFactor: number = 0.0,
  public maxSteeringFactor: number = 0.0,
  public steeringMassLevelFactor: number = 0.0,
  public steeringMoveSpeedFactor: number = 0.0,
  public safeAngleCos: number = 0.0,
  public safeCollisionForceLevel: number = 0.0,
  public tileCollisionFactor: number = 0.0,
  public collisionForceSector: (number)[] = [],
  public collisionForceLevel: (number)[] = [],
  public collisionSpeedLoss: (number)[] = [],
  public collisionHpLoss: (number)[] = [],
  public tileCollisionSpeedLoss: (number)[] = [],
  public tileCollisionHpLoss: (number)[] = [],
  public autoUseItemTimeRange: (number)[] = [],
  public recoverAcceleration: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const attributeNameList = clz_Torappu_SandboxV2RacingConstData.createAttributeNameListVector(builder, builder.createObjectOffsetList(this.attributeNameList));
  const racerMaxValue = clz_Torappu_SandboxV2RacingConstData.createRacerMaxValueVector(builder, this.racerMaxValue);
  const bagName = (this.bagName !== null ? builder.createString(this.bagName!) : 0);
  const tempBagName = (this.tempBagName !== null ? builder.createString(this.tempBagName!) : 0);
  const bagEmptyLeftDesc = (this.bagEmptyLeftDesc !== null ? builder.createString(this.bagEmptyLeftDesc!) : 0);
  const bagEmptyRightDesc = (this.bagEmptyRightDesc !== null ? builder.createString(this.bagEmptyRightDesc!) : 0);
  const tempBagEmptyLeftDesc = (this.tempBagEmptyLeftDesc !== null ? builder.createString(this.tempBagEmptyLeftDesc!) : 0);
  const tempBagEmptyRightDesc = (this.tempBagEmptyRightDesc !== null ? builder.createString(this.tempBagEmptyRightDesc!) : 0);
  const bornTalentIconId = (this.bornTalentIconId !== null ? builder.createString(this.bornTalentIconId!) : 0);
  const bornTalentTitle = (this.bornTalentTitle !== null ? builder.createString(this.bornTalentTitle!) : 0);
  const learnedTalentIconId = (this.learnedTalentIconId !== null ? builder.createString(this.learnedTalentIconId!) : 0);
  const learnedTalentTitle = (this.learnedTalentTitle !== null ? builder.createString(this.learnedTalentTitle!) : 0);
  const talentEmptyDesc = (this.talentEmptyDesc !== null ? builder.createString(this.talentEmptyDesc!) : 0);
  const slugItemId = (this.slugItemId !== null ? builder.createString(this.slugItemId!) : 0);
  const collisionForceSector = clz_Torappu_SandboxV2RacingConstData.createCollisionForceSectorVector(builder, this.collisionForceSector);
  const collisionForceLevel = clz_Torappu_SandboxV2RacingConstData.createCollisionForceLevelVector(builder, this.collisionForceLevel);
  const collisionSpeedLoss = clz_Torappu_SandboxV2RacingConstData.createCollisionSpeedLossVector(builder, this.collisionSpeedLoss);
  const collisionHpLoss = clz_Torappu_SandboxV2RacingConstData.createCollisionHpLossVector(builder, this.collisionHpLoss);
  const tileCollisionSpeedLoss = clz_Torappu_SandboxV2RacingConstData.createTileCollisionSpeedLossVector(builder, this.tileCollisionSpeedLoss);
  const tileCollisionHpLoss = clz_Torappu_SandboxV2RacingConstData.createTileCollisionHpLossVector(builder, this.tileCollisionHpLoss);
  const autoUseItemTimeRange = clz_Torappu_SandboxV2RacingConstData.createAutoUseItemTimeRangeVector(builder, this.autoUseItemTimeRange);

  return clz_Torappu_SandboxV2RacingConstData.createclz_Torappu_SandboxV2RacingConstData(builder,
    attributeNameList,
    racerMaxValue,
    this.bagFullHintPercent,
    this.tempBagFullHintPercent,
    bagName,
    tempBagName,
    bagEmptyLeftDesc,
    bagEmptyRightDesc,
    tempBagEmptyLeftDesc,
    tempBagEmptyRightDesc,
    bornTalentIconId,
    bornTalentTitle,
    learnedTalentIconId,
    learnedTalentTitle,
    talentEmptyDesc,
    slugItemId,
    this.racingHpFactor,
    this.racingSpeedFactor,
    this.racingAccelerationFactor,
    this.recoverMoveSpeed,
    this.recoverHpFactor,
    this.bleedingFactor,
    this.maxSteeringFactor,
    this.steeringMassLevelFactor,
    this.steeringMoveSpeedFactor,
    this.safeAngleCos,
    this.safeCollisionForceLevel,
    this.tileCollisionFactor,
    collisionForceSector,
    collisionForceLevel,
    collisionSpeedLoss,
    collisionHpLoss,
    tileCollisionSpeedLoss,
    tileCollisionHpLoss,
    autoUseItemTimeRange,
    this.recoverAcceleration
  );
}
}
