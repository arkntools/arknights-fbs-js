// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { dict__string__clz_Torappu_NPCUnlock, dict__string__clz_Torappu_NPCUnlockT } from './dict--string--clz-torappu-npcunlock.js';
import { enum__Torappu_IllustNPCResType } from './enum--torappu-illust-npcres-type.js';
import { enum__Torappu_ProfessionCategory } from './enum--torappu-profession-category.js';


export class clz_Torappu_NPCData implements flatbuffers.IUnpackableObject<clz_Torappu_NPCDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_NPCData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_NPCData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_NPCData):clz_Torappu_NPCData {
  return (obj || new clz_Torappu_NPCData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_NPCData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_NPCData):clz_Torappu_NPCData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_NPCData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

npcId():string|null
npcId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
npcId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

appellation():string|null
appellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

profession():enum__Torappu_ProfessionCategory {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ProfessionCategory.NONE;
}

illustList(index: number):string
illustList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
illustList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

illustListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

designerList(index: number):string
designerList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
designerList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

designerListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cv():string|null
cv(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cv(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

displayNumber():string|null
displayNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nationId():string|null
nationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupId():string|null
groupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

teamId():string|null
teamId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
teamId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

resType():enum__Torappu_IllustNPCResType {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_IllustNPCResType.NONE;
}

npcShowAudioInfoFlag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

unlockDict(index: number, obj?:dict__string__clz_Torappu_NPCUnlock):dict__string__clz_Torappu_NPCUnlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new dict__string__clz_Torappu_NPCUnlock()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

unlockDictLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_NPCData(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addNpcId(builder:flatbuffers.Builder, npcIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, npcIdOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addAppellation(builder:flatbuffers.Builder, appellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, appellationOffset, 0);
}

static addProfession(builder:flatbuffers.Builder, profession:enum__Torappu_ProfessionCategory) {
  builder.addFieldInt32(3, profession, enum__Torappu_ProfessionCategory.NONE);
}

static addIllustList(builder:flatbuffers.Builder, illustListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, illustListOffset, 0);
}

static createIllustListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIllustListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDesignerList(builder:flatbuffers.Builder, designerListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, designerListOffset, 0);
}

static createDesignerListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDesignerListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCv(builder:flatbuffers.Builder, cvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, cvOffset, 0);
}

static addDisplayNumber(builder:flatbuffers.Builder, displayNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, displayNumberOffset, 0);
}

static addNationId(builder:flatbuffers.Builder, nationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, nationIdOffset, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, groupIdOffset, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, teamIdOffset, 0);
}

static addResType(builder:flatbuffers.Builder, resType:enum__Torappu_IllustNPCResType) {
  builder.addFieldInt32(11, resType, enum__Torappu_IllustNPCResType.NONE);
}

static addNpcShowAudioInfoFlag(builder:flatbuffers.Builder, npcShowAudioInfoFlag:boolean) {
  builder.addFieldInt8(12, +npcShowAudioInfoFlag, +false);
}

static addUnlockDict(builder:flatbuffers.Builder, unlockDictOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, unlockDictOffset, 0);
}

static createUnlockDictVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUnlockDictVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_NPCData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_NPCData(builder:flatbuffers.Builder, npcIdOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, appellationOffset:flatbuffers.Offset, profession:enum__Torappu_ProfessionCategory, illustListOffset:flatbuffers.Offset, designerListOffset:flatbuffers.Offset, cvOffset:flatbuffers.Offset, displayNumberOffset:flatbuffers.Offset, nationIdOffset:flatbuffers.Offset, groupIdOffset:flatbuffers.Offset, teamIdOffset:flatbuffers.Offset, resType:enum__Torappu_IllustNPCResType, npcShowAudioInfoFlag:boolean, unlockDictOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_NPCData.startclz_Torappu_NPCData(builder);
  clz_Torappu_NPCData.addNpcId(builder, npcIdOffset);
  clz_Torappu_NPCData.addName(builder, nameOffset);
  clz_Torappu_NPCData.addAppellation(builder, appellationOffset);
  clz_Torappu_NPCData.addProfession(builder, profession);
  clz_Torappu_NPCData.addIllustList(builder, illustListOffset);
  clz_Torappu_NPCData.addDesignerList(builder, designerListOffset);
  clz_Torappu_NPCData.addCv(builder, cvOffset);
  clz_Torappu_NPCData.addDisplayNumber(builder, displayNumberOffset);
  clz_Torappu_NPCData.addNationId(builder, nationIdOffset);
  clz_Torappu_NPCData.addGroupId(builder, groupIdOffset);
  clz_Torappu_NPCData.addTeamId(builder, teamIdOffset);
  clz_Torappu_NPCData.addResType(builder, resType);
  clz_Torappu_NPCData.addNpcShowAudioInfoFlag(builder, npcShowAudioInfoFlag);
  clz_Torappu_NPCData.addUnlockDict(builder, unlockDictOffset);
  return clz_Torappu_NPCData.endclz_Torappu_NPCData(builder);
}

unpack(): clz_Torappu_NPCDataT {
  return new clz_Torappu_NPCDataT(
    this.npcId(),
    this.name(),
    this.appellation(),
    this.profession(),
    this.bb!.createScalarList<string>(this.illustList.bind(this), this.illustListLength()),
    this.bb!.createScalarList<string>(this.designerList.bind(this), this.designerListLength()),
    this.cv(),
    this.displayNumber(),
    this.nationId(),
    this.groupId(),
    this.teamId(),
    this.resType(),
    this.npcShowAudioInfoFlag(),
    this.bb!.createObjList<dict__string__clz_Torappu_NPCUnlock, dict__string__clz_Torappu_NPCUnlockT>(this.unlockDict.bind(this), this.unlockDictLength())
  );
}


unpackTo(_o: clz_Torappu_NPCDataT): void {
  _o.npcId = this.npcId();
  _o.name = this.name();
  _o.appellation = this.appellation();
  _o.profession = this.profession();
  _o.illustList = this.bb!.createScalarList<string>(this.illustList.bind(this), this.illustListLength());
  _o.designerList = this.bb!.createScalarList<string>(this.designerList.bind(this), this.designerListLength());
  _o.cv = this.cv();
  _o.displayNumber = this.displayNumber();
  _o.nationId = this.nationId();
  _o.groupId = this.groupId();
  _o.teamId = this.teamId();
  _o.resType = this.resType();
  _o.npcShowAudioInfoFlag = this.npcShowAudioInfoFlag();
  _o.unlockDict = this.bb!.createObjList<dict__string__clz_Torappu_NPCUnlock, dict__string__clz_Torappu_NPCUnlockT>(this.unlockDict.bind(this), this.unlockDictLength());
}
}

export class clz_Torappu_NPCDataT implements flatbuffers.IGeneratedObject {
constructor(
  public npcId: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public appellation: string|Uint8Array|null = null,
  public profession: enum__Torappu_ProfessionCategory = enum__Torappu_ProfessionCategory.NONE,
  public illustList: (string)[] = [],
  public designerList: (string)[] = [],
  public cv: string|Uint8Array|null = null,
  public displayNumber: string|Uint8Array|null = null,
  public nationId: string|Uint8Array|null = null,
  public groupId: string|Uint8Array|null = null,
  public teamId: string|Uint8Array|null = null,
  public resType: enum__Torappu_IllustNPCResType = enum__Torappu_IllustNPCResType.NONE,
  public npcShowAudioInfoFlag: boolean = false,
  public unlockDict: (dict__string__clz_Torappu_NPCUnlockT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const npcId = (this.npcId !== null ? builder.createString(this.npcId!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const appellation = (this.appellation !== null ? builder.createString(this.appellation!) : 0);
  const illustList = clz_Torappu_NPCData.createIllustListVector(builder, builder.createObjectOffsetList(this.illustList));
  const designerList = clz_Torappu_NPCData.createDesignerListVector(builder, builder.createObjectOffsetList(this.designerList));
  const cv = (this.cv !== null ? builder.createString(this.cv!) : 0);
  const displayNumber = (this.displayNumber !== null ? builder.createString(this.displayNumber!) : 0);
  const nationId = (this.nationId !== null ? builder.createString(this.nationId!) : 0);
  const groupId = (this.groupId !== null ? builder.createString(this.groupId!) : 0);
  const teamId = (this.teamId !== null ? builder.createString(this.teamId!) : 0);
  const unlockDict = clz_Torappu_NPCData.createUnlockDictVector(builder, builder.createObjectOffsetList(this.unlockDict));

  return clz_Torappu_NPCData.createclz_Torappu_NPCData(builder,
    npcId,
    name,
    appellation,
    this.profession,
    illustList,
    designerList,
    cv,
    displayNumber,
    nationId,
    groupId,
    teamId,
    this.resType,
    this.npcShowAudioInfoFlag,
    unlockDict
  );
}
}
