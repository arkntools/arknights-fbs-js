// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_RoguelikeDiceData implements flatbuffers.IUnpackableObject<clz_Torappu_RoguelikeDiceDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RoguelikeDiceData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RoguelikeDiceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeDiceData):clz_Torappu_RoguelikeDiceData {
  return (obj || new clz_Torappu_RoguelikeDiceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RoguelikeDiceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RoguelikeDiceData):clz_Torappu_RoguelikeDiceData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RoguelikeDiceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

diceId():string|null
diceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
diceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isUpgradeDice():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

upgradeDiceId():string|null
upgradeDiceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
upgradeDiceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

diceFaceCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

battleDiceId():string|null
battleDiceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleDiceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_RoguelikeDiceData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addDiceId(builder:flatbuffers.Builder, diceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, diceIdOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descriptionOffset, 0);
}

static addIsUpgradeDice(builder:flatbuffers.Builder, isUpgradeDice:number) {
  builder.addFieldInt32(2, isUpgradeDice, 0);
}

static addUpgradeDiceId(builder:flatbuffers.Builder, upgradeDiceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, upgradeDiceIdOffset, 0);
}

static addDiceFaceCount(builder:flatbuffers.Builder, diceFaceCount:number) {
  builder.addFieldInt32(4, diceFaceCount, 0);
}

static addBattleDiceId(builder:flatbuffers.Builder, battleDiceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, battleDiceIdOffset, 0);
}

static endclz_Torappu_RoguelikeDiceData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RoguelikeDiceData(builder:flatbuffers.Builder, diceIdOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, isUpgradeDice:number, upgradeDiceIdOffset:flatbuffers.Offset, diceFaceCount:number, battleDiceIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_RoguelikeDiceData.startclz_Torappu_RoguelikeDiceData(builder);
  clz_Torappu_RoguelikeDiceData.addDiceId(builder, diceIdOffset);
  clz_Torappu_RoguelikeDiceData.addDescription(builder, descriptionOffset);
  clz_Torappu_RoguelikeDiceData.addIsUpgradeDice(builder, isUpgradeDice);
  clz_Torappu_RoguelikeDiceData.addUpgradeDiceId(builder, upgradeDiceIdOffset);
  clz_Torappu_RoguelikeDiceData.addDiceFaceCount(builder, diceFaceCount);
  clz_Torappu_RoguelikeDiceData.addBattleDiceId(builder, battleDiceIdOffset);
  return clz_Torappu_RoguelikeDiceData.endclz_Torappu_RoguelikeDiceData(builder);
}

unpack(): clz_Torappu_RoguelikeDiceDataT {
  return new clz_Torappu_RoguelikeDiceDataT(
    this.diceId(),
    this.description(),
    this.isUpgradeDice(),
    this.upgradeDiceId(),
    this.diceFaceCount(),
    this.battleDiceId()
  );
}


unpackTo(_o: clz_Torappu_RoguelikeDiceDataT): void {
  _o.diceId = this.diceId();
  _o.description = this.description();
  _o.isUpgradeDice = this.isUpgradeDice();
  _o.upgradeDiceId = this.upgradeDiceId();
  _o.diceFaceCount = this.diceFaceCount();
  _o.battleDiceId = this.battleDiceId();
}
}

export class clz_Torappu_RoguelikeDiceDataT implements flatbuffers.IGeneratedObject {
constructor(
  public diceId: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public isUpgradeDice: number = 0,
  public upgradeDiceId: string|Uint8Array|null = null,
  public diceFaceCount: number = 0,
  public battleDiceId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const diceId = (this.diceId !== null ? builder.createString(this.diceId!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const upgradeDiceId = (this.upgradeDiceId !== null ? builder.createString(this.upgradeDiceId!) : 0);
  const battleDiceId = (this.battleDiceId !== null ? builder.createString(this.battleDiceId!) : 0);

  return clz_Torappu_RoguelikeDiceData.createclz_Torappu_RoguelikeDiceData(builder,
    diceId,
    description,
    this.isUpgradeDice,
    upgradeDiceId,
    this.diceFaceCount,
    battleDiceId
  );
}
}
