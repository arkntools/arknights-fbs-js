// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpData, clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpDataT } from './clz-torappu-activity-auto-chess-verify1-data-act1-vauto-chess-mode-boss-hp-data.js';


export class clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData {
  return (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

forceId():string|null
forceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

forceName():string|null
forceName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forceName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

forceIconId():string|null
forceIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forceIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

forceDesc():string|null
forceDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forceDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

leaderEnemyId():string|null
leaderEnemyId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
leaderEnemyId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

leaderName():string|null
leaderName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
leaderName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeHpDatas(index: number, obj?:clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpData):clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpData|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

modeHpDatasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addForceId(builder:flatbuffers.Builder, forceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, forceIdOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addForceName(builder:flatbuffers.Builder, forceNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, forceNameOffset, 0);
}

static addForceIconId(builder:flatbuffers.Builder, forceIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, forceIconIdOffset, 0);
}

static addForceDesc(builder:flatbuffers.Builder, forceDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, forceDescOffset, 0);
}

static addLeaderEnemyId(builder:flatbuffers.Builder, leaderEnemyIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, leaderEnemyIdOffset, 0);
}

static addLeaderName(builder:flatbuffers.Builder, leaderNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, leaderNameOffset, 0);
}

static addModeHpDatas(builder:flatbuffers.Builder, modeHpDatasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, modeHpDatasOffset, 0);
}

static createModeHpDatasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startModeHpDatasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(builder:flatbuffers.Builder, forceIdOffset:flatbuffers.Offset, sortId:number, forceNameOffset:flatbuffers.Offset, forceIconIdOffset:flatbuffers.Offset, forceDescOffset:flatbuffers.Offset, leaderEnemyIdOffset:flatbuffers.Offset, leaderNameOffset:flatbuffers.Offset, modeHpDatasOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.startclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(builder);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addForceId(builder, forceIdOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addSortId(builder, sortId);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addForceName(builder, forceNameOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addForceIconId(builder, forceIconIdOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addForceDesc(builder, forceDescOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addLeaderEnemyId(builder, leaderEnemyIdOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addLeaderName(builder, leaderNameOffset);
  clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.addModeHpDatas(builder, modeHpDatasOffset);
  return clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.endclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(builder);
}

unpack(): clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceDataT {
  return new clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceDataT(
    this.forceId(),
    this.sortId(),
    this.forceName(),
    this.forceIconId(),
    this.forceDesc(),
    this.leaderEnemyId(),
    this.leaderName(),
    this.bb!.createObjList<clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpData, clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpDataT>(this.modeHpDatas.bind(this), this.modeHpDatasLength())
  );
}


unpackTo(_o: clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceDataT): void {
  _o.forceId = this.forceId();
  _o.sortId = this.sortId();
  _o.forceName = this.forceName();
  _o.forceIconId = this.forceIconId();
  _o.forceDesc = this.forceDesc();
  _o.leaderEnemyId = this.leaderEnemyId();
  _o.leaderName = this.leaderName();
  _o.modeHpDatas = this.bb!.createObjList<clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpData, clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpDataT>(this.modeHpDatas.bind(this), this.modeHpDatasLength());
}
}

export class clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceDataT implements flatbuffers.IGeneratedObject {
constructor(
  public forceId: string|Uint8Array|null = null,
  public sortId: number = 0,
  public forceName: string|Uint8Array|null = null,
  public forceIconId: string|Uint8Array|null = null,
  public forceDesc: string|Uint8Array|null = null,
  public leaderEnemyId: string|Uint8Array|null = null,
  public leaderName: string|Uint8Array|null = null,
  public modeHpDatas: (clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessModeBossHpDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const forceId = (this.forceId !== null ? builder.createString(this.forceId!) : 0);
  const forceName = (this.forceName !== null ? builder.createString(this.forceName!) : 0);
  const forceIconId = (this.forceIconId !== null ? builder.createString(this.forceIconId!) : 0);
  const forceDesc = (this.forceDesc !== null ? builder.createString(this.forceDesc!) : 0);
  const leaderEnemyId = (this.leaderEnemyId !== null ? builder.createString(this.leaderEnemyId!) : 0);
  const leaderName = (this.leaderName !== null ? builder.createString(this.leaderName!) : 0);
  const modeHpDatas = clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.createModeHpDatasVector(builder, builder.createObjectOffsetList(this.modeHpDatas));

  return clz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData.createclz_Torappu_ActivityAutoChessVerify1Data_Act1VAutoChessForceData(builder,
    forceId,
    this.sortId,
    forceName,
    forceIconId,
    forceDesc,
    leaderEnemyId,
    leaderName,
    modeHpDatas
  );
}
}
