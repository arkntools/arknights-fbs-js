// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActivityTable_PicGroup, clz_Torappu_ActivityTable_PicGroupT } from './clz-torappu-activity-table-pic-group.js';
import { enum__Torappu_ActivityCompleteType } from './enum--torappu-activity-complete-type.js';
import { enum__Torappu_ActivityDisplayType } from './enum--torappu-activity-display-type.js';
import { enum__Torappu_ActivityType } from './enum--torappu-activity-type.js';


export class clz_Torappu_ActivityTable_BasicData implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityTable_BasicDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityTable_BasicData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityTable_BasicData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityTable_BasicData):clz_Torappu_ActivityTable_BasicData {
  return (obj || new clz_Torappu_ActivityTable_BasicData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityTable_BasicData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityTable_BasicData):clz_Torappu_ActivityTable_BasicData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityTable_BasicData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():enum__Torappu_ActivityType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActivityType.DEFAULT;
}

displayType():enum__Torappu_ActivityDisplayType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActivityDisplayType.NONE;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

startTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

rewardEndTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

displayOnHome():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hasStage():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

templateShopId():string|null
templateShopId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
templateShopId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

medalGroupId():string|null
medalGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
medalGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ungroupedMedalIds(index: number):string
ungroupedMedalIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ungroupedMedalIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ungroupedMedalIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isReplicate():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

needFixedSync():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

trapDomainId():string|null
trapDomainId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trapDomainId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

recType():enum__Torappu_ActivityCompleteType {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActivityCompleteType.SPECIAL;
}

isPageEntry():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isMagnify():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

picGroup(index: number, obj?:clz_Torappu_ActivityTable_PicGroup):clz_Torappu_ActivityTable_PicGroup|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new clz_Torappu_ActivityTable_PicGroup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

picGroupLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

usePicGroup():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_ActivityTable_BasicData(builder:flatbuffers.Builder) {
  builder.startObject(20);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:enum__Torappu_ActivityType) {
  builder.addFieldInt32(1, type, enum__Torappu_ActivityType.DEFAULT);
}

static addDisplayType(builder:flatbuffers.Builder, displayType:enum__Torappu_ActivityDisplayType) {
  builder.addFieldInt32(2, displayType, enum__Torappu_ActivityDisplayType.NONE);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTime:bigint) {
  builder.addFieldInt64(4, startTime, BigInt('0'));
}

static addEndTime(builder:flatbuffers.Builder, endTime:bigint) {
  builder.addFieldInt64(5, endTime, BigInt('0'));
}

static addRewardEndTime(builder:flatbuffers.Builder, rewardEndTime:bigint) {
  builder.addFieldInt64(6, rewardEndTime, BigInt('0'));
}

static addDisplayOnHome(builder:flatbuffers.Builder, displayOnHome:boolean) {
  builder.addFieldInt8(7, +displayOnHome, +false);
}

static addHasStage(builder:flatbuffers.Builder, hasStage:boolean) {
  builder.addFieldInt8(8, +hasStage, +false);
}

static addTemplateShopId(builder:flatbuffers.Builder, templateShopIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, templateShopIdOffset, 0);
}

static addMedalGroupId(builder:flatbuffers.Builder, medalGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, medalGroupIdOffset, 0);
}

static addUngroupedMedalIds(builder:flatbuffers.Builder, ungroupedMedalIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, ungroupedMedalIdsOffset, 0);
}

static createUngroupedMedalIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUngroupedMedalIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsReplicate(builder:flatbuffers.Builder, isReplicate:boolean) {
  builder.addFieldInt8(12, +isReplicate, +false);
}

static addNeedFixedSync(builder:flatbuffers.Builder, needFixedSync:boolean) {
  builder.addFieldInt8(13, +needFixedSync, +false);
}

static addTrapDomainId(builder:flatbuffers.Builder, trapDomainIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, trapDomainIdOffset, 0);
}

static addRecType(builder:flatbuffers.Builder, recType:enum__Torappu_ActivityCompleteType) {
  builder.addFieldInt32(15, recType, enum__Torappu_ActivityCompleteType.SPECIAL);
}

static addIsPageEntry(builder:flatbuffers.Builder, isPageEntry:boolean) {
  builder.addFieldInt8(16, +isPageEntry, +false);
}

static addIsMagnify(builder:flatbuffers.Builder, isMagnify:boolean) {
  builder.addFieldInt8(17, +isMagnify, +false);
}

static addPicGroup(builder:flatbuffers.Builder, picGroupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, picGroupOffset, 0);
}

static createPicGroupVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPicGroupVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUsePicGroup(builder:flatbuffers.Builder, usePicGroup:boolean) {
  builder.addFieldInt8(19, +usePicGroup, +false);
}

static endclz_Torappu_ActivityTable_BasicData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityTable_BasicData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, type:enum__Torappu_ActivityType, displayType:enum__Torappu_ActivityDisplayType, nameOffset:flatbuffers.Offset, startTime:bigint, endTime:bigint, rewardEndTime:bigint, displayOnHome:boolean, hasStage:boolean, templateShopIdOffset:flatbuffers.Offset, medalGroupIdOffset:flatbuffers.Offset, ungroupedMedalIdsOffset:flatbuffers.Offset, isReplicate:boolean, needFixedSync:boolean, trapDomainIdOffset:flatbuffers.Offset, recType:enum__Torappu_ActivityCompleteType, isPageEntry:boolean, isMagnify:boolean, picGroupOffset:flatbuffers.Offset, usePicGroup:boolean):flatbuffers.Offset {
  clz_Torappu_ActivityTable_BasicData.startclz_Torappu_ActivityTable_BasicData(builder);
  clz_Torappu_ActivityTable_BasicData.addId(builder, idOffset);
  clz_Torappu_ActivityTable_BasicData.addType(builder, type);
  clz_Torappu_ActivityTable_BasicData.addDisplayType(builder, displayType);
  clz_Torappu_ActivityTable_BasicData.addName(builder, nameOffset);
  clz_Torappu_ActivityTable_BasicData.addStartTime(builder, startTime);
  clz_Torappu_ActivityTable_BasicData.addEndTime(builder, endTime);
  clz_Torappu_ActivityTable_BasicData.addRewardEndTime(builder, rewardEndTime);
  clz_Torappu_ActivityTable_BasicData.addDisplayOnHome(builder, displayOnHome);
  clz_Torappu_ActivityTable_BasicData.addHasStage(builder, hasStage);
  clz_Torappu_ActivityTable_BasicData.addTemplateShopId(builder, templateShopIdOffset);
  clz_Torappu_ActivityTable_BasicData.addMedalGroupId(builder, medalGroupIdOffset);
  clz_Torappu_ActivityTable_BasicData.addUngroupedMedalIds(builder, ungroupedMedalIdsOffset);
  clz_Torappu_ActivityTable_BasicData.addIsReplicate(builder, isReplicate);
  clz_Torappu_ActivityTable_BasicData.addNeedFixedSync(builder, needFixedSync);
  clz_Torappu_ActivityTable_BasicData.addTrapDomainId(builder, trapDomainIdOffset);
  clz_Torappu_ActivityTable_BasicData.addRecType(builder, recType);
  clz_Torappu_ActivityTable_BasicData.addIsPageEntry(builder, isPageEntry);
  clz_Torappu_ActivityTable_BasicData.addIsMagnify(builder, isMagnify);
  clz_Torappu_ActivityTable_BasicData.addPicGroup(builder, picGroupOffset);
  clz_Torappu_ActivityTable_BasicData.addUsePicGroup(builder, usePicGroup);
  return clz_Torappu_ActivityTable_BasicData.endclz_Torappu_ActivityTable_BasicData(builder);
}

unpack(): clz_Torappu_ActivityTable_BasicDataT {
  return new clz_Torappu_ActivityTable_BasicDataT(
    this.id(),
    this.type(),
    this.displayType(),
    this.name(),
    this.startTime(),
    this.endTime(),
    this.rewardEndTime(),
    this.displayOnHome(),
    this.hasStage(),
    this.templateShopId(),
    this.medalGroupId(),
    this.bb!.createScalarList<string>(this.ungroupedMedalIds.bind(this), this.ungroupedMedalIdsLength()),
    this.isReplicate(),
    this.needFixedSync(),
    this.trapDomainId(),
    this.recType(),
    this.isPageEntry(),
    this.isMagnify(),
    this.bb!.createObjList<clz_Torappu_ActivityTable_PicGroup, clz_Torappu_ActivityTable_PicGroupT>(this.picGroup.bind(this), this.picGroupLength()),
    this.usePicGroup()
  );
}


unpackTo(_o: clz_Torappu_ActivityTable_BasicDataT): void {
  _o.id = this.id();
  _o.type = this.type();
  _o.displayType = this.displayType();
  _o.name = this.name();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.rewardEndTime = this.rewardEndTime();
  _o.displayOnHome = this.displayOnHome();
  _o.hasStage = this.hasStage();
  _o.templateShopId = this.templateShopId();
  _o.medalGroupId = this.medalGroupId();
  _o.ungroupedMedalIds = this.bb!.createScalarList<string>(this.ungroupedMedalIds.bind(this), this.ungroupedMedalIdsLength());
  _o.isReplicate = this.isReplicate();
  _o.needFixedSync = this.needFixedSync();
  _o.trapDomainId = this.trapDomainId();
  _o.recType = this.recType();
  _o.isPageEntry = this.isPageEntry();
  _o.isMagnify = this.isMagnify();
  _o.picGroup = this.bb!.createObjList<clz_Torappu_ActivityTable_PicGroup, clz_Torappu_ActivityTable_PicGroupT>(this.picGroup.bind(this), this.picGroupLength());
  _o.usePicGroup = this.usePicGroup();
}
}

export class clz_Torappu_ActivityTable_BasicDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public type: enum__Torappu_ActivityType = enum__Torappu_ActivityType.DEFAULT,
  public displayType: enum__Torappu_ActivityDisplayType = enum__Torappu_ActivityDisplayType.NONE,
  public name: string|Uint8Array|null = null,
  public startTime: bigint = BigInt('0'),
  public endTime: bigint = BigInt('0'),
  public rewardEndTime: bigint = BigInt('0'),
  public displayOnHome: boolean = false,
  public hasStage: boolean = false,
  public templateShopId: string|Uint8Array|null = null,
  public medalGroupId: string|Uint8Array|null = null,
  public ungroupedMedalIds: (string)[] = [],
  public isReplicate: boolean = false,
  public needFixedSync: boolean = false,
  public trapDomainId: string|Uint8Array|null = null,
  public recType: enum__Torappu_ActivityCompleteType = enum__Torappu_ActivityCompleteType.SPECIAL,
  public isPageEntry: boolean = false,
  public isMagnify: boolean = false,
  public picGroup: (clz_Torappu_ActivityTable_PicGroupT)[] = [],
  public usePicGroup: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const templateShopId = (this.templateShopId !== null ? builder.createString(this.templateShopId!) : 0);
  const medalGroupId = (this.medalGroupId !== null ? builder.createString(this.medalGroupId!) : 0);
  const ungroupedMedalIds = clz_Torappu_ActivityTable_BasicData.createUngroupedMedalIdsVector(builder, builder.createObjectOffsetList(this.ungroupedMedalIds));
  const trapDomainId = (this.trapDomainId !== null ? builder.createString(this.trapDomainId!) : 0);
  const picGroup = clz_Torappu_ActivityTable_BasicData.createPicGroupVector(builder, builder.createObjectOffsetList(this.picGroup));

  return clz_Torappu_ActivityTable_BasicData.createclz_Torappu_ActivityTable_BasicData(builder,
    id,
    this.type,
    this.displayType,
    name,
    this.startTime,
    this.endTime,
    this.rewardEndTime,
    this.displayOnHome,
    this.hasStage,
    templateShopId,
    medalGroupId,
    ungroupedMedalIds,
    this.isReplicate,
    this.needFixedSync,
    trapDomainId,
    this.recType,
    this.isPageEntry,
    this.isMagnify,
    picGroup,
    this.usePicGroup
  );
}
}
