// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_ActMultiV3MapDiffType } from './enum--torappu-act-multi-v3-map-diff-type.js';
import { enum__Torappu_ActMultiV3MapModeType } from './enum--torappu-act-multi-v3-map-mode-type.js';


export class clz_Torappu_ActMultiV3MapTypeData implements flatbuffers.IUnpackableObject<clz_Torappu_ActMultiV3MapTypeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActMultiV3MapTypeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActMultiV3MapTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActMultiV3MapTypeData):clz_Torappu_ActMultiV3MapTypeData {
  return (obj || new clz_Torappu_ActMultiV3MapTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActMultiV3MapTypeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActMultiV3MapTypeData):clz_Torappu_ActMultiV3MapTypeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActMultiV3MapTypeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

modeId():string|null
modeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mode():enum__Torappu_ActMultiV3MapModeType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActMultiV3MapModeType.NONE;
}

difficulty():enum__Torappu_ActMultiV3MapDiffType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ActMultiV3MapDiffType.NONE;
}

isDefaultSelectInQuickMatch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

squadMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

matchUnlockModeId():string|null
matchUnlockModeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
matchUnlockModeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

matchUnlockParam():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stageIdInModeList(index: number):string
stageIdInModeList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stageIdInModeList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stageIdInModeListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unlockHint():string|null
unlockHint(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockHint(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ActMultiV3MapTypeData(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addModeId(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, modeIdOffset, 0);
}

static addMode(builder:flatbuffers.Builder, mode:enum__Torappu_ActMultiV3MapModeType) {
  builder.addFieldInt32(1, mode, enum__Torappu_ActMultiV3MapModeType.NONE);
}

static addDifficulty(builder:flatbuffers.Builder, difficulty:enum__Torappu_ActMultiV3MapDiffType) {
  builder.addFieldInt32(2, difficulty, enum__Torappu_ActMultiV3MapDiffType.NONE);
}

static addIsDefaultSelectInQuickMatch(builder:flatbuffers.Builder, isDefaultSelectInQuickMatch:boolean) {
  builder.addFieldInt8(3, +isDefaultSelectInQuickMatch, +false);
}

static addSquadMax(builder:flatbuffers.Builder, squadMax:number) {
  builder.addFieldInt32(4, squadMax, 0);
}

static addMatchUnlockModeId(builder:flatbuffers.Builder, matchUnlockModeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, matchUnlockModeIdOffset, 0);
}

static addMatchUnlockParam(builder:flatbuffers.Builder, matchUnlockParam:number) {
  builder.addFieldInt32(6, matchUnlockParam, 0);
}

static addStageIdInModeList(builder:flatbuffers.Builder, stageIdInModeListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, stageIdInModeListOffset, 0);
}

static createStageIdInModeListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStageIdInModeListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnlockHint(builder:flatbuffers.Builder, unlockHintOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, unlockHintOffset, 0);
}

static endclz_Torappu_ActMultiV3MapTypeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActMultiV3MapTypeData(builder:flatbuffers.Builder, modeIdOffset:flatbuffers.Offset, mode:enum__Torappu_ActMultiV3MapModeType, difficulty:enum__Torappu_ActMultiV3MapDiffType, isDefaultSelectInQuickMatch:boolean, squadMax:number, matchUnlockModeIdOffset:flatbuffers.Offset, matchUnlockParam:number, stageIdInModeListOffset:flatbuffers.Offset, unlockHintOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActMultiV3MapTypeData.startclz_Torappu_ActMultiV3MapTypeData(builder);
  clz_Torappu_ActMultiV3MapTypeData.addModeId(builder, modeIdOffset);
  clz_Torappu_ActMultiV3MapTypeData.addMode(builder, mode);
  clz_Torappu_ActMultiV3MapTypeData.addDifficulty(builder, difficulty);
  clz_Torappu_ActMultiV3MapTypeData.addIsDefaultSelectInQuickMatch(builder, isDefaultSelectInQuickMatch);
  clz_Torappu_ActMultiV3MapTypeData.addSquadMax(builder, squadMax);
  clz_Torappu_ActMultiV3MapTypeData.addMatchUnlockModeId(builder, matchUnlockModeIdOffset);
  clz_Torappu_ActMultiV3MapTypeData.addMatchUnlockParam(builder, matchUnlockParam);
  clz_Torappu_ActMultiV3MapTypeData.addStageIdInModeList(builder, stageIdInModeListOffset);
  clz_Torappu_ActMultiV3MapTypeData.addUnlockHint(builder, unlockHintOffset);
  return clz_Torappu_ActMultiV3MapTypeData.endclz_Torappu_ActMultiV3MapTypeData(builder);
}

unpack(): clz_Torappu_ActMultiV3MapTypeDataT {
  return new clz_Torappu_ActMultiV3MapTypeDataT(
    this.modeId(),
    this.mode(),
    this.difficulty(),
    this.isDefaultSelectInQuickMatch(),
    this.squadMax(),
    this.matchUnlockModeId(),
    this.matchUnlockParam(),
    this.bb!.createScalarList<string>(this.stageIdInModeList.bind(this), this.stageIdInModeListLength()),
    this.unlockHint()
  );
}


unpackTo(_o: clz_Torappu_ActMultiV3MapTypeDataT): void {
  _o.modeId = this.modeId();
  _o.mode = this.mode();
  _o.difficulty = this.difficulty();
  _o.isDefaultSelectInQuickMatch = this.isDefaultSelectInQuickMatch();
  _o.squadMax = this.squadMax();
  _o.matchUnlockModeId = this.matchUnlockModeId();
  _o.matchUnlockParam = this.matchUnlockParam();
  _o.stageIdInModeList = this.bb!.createScalarList<string>(this.stageIdInModeList.bind(this), this.stageIdInModeListLength());
  _o.unlockHint = this.unlockHint();
}
}

export class clz_Torappu_ActMultiV3MapTypeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public modeId: string|Uint8Array|null = null,
  public mode: enum__Torappu_ActMultiV3MapModeType = enum__Torappu_ActMultiV3MapModeType.NONE,
  public difficulty: enum__Torappu_ActMultiV3MapDiffType = enum__Torappu_ActMultiV3MapDiffType.NONE,
  public isDefaultSelectInQuickMatch: boolean = false,
  public squadMax: number = 0,
  public matchUnlockModeId: string|Uint8Array|null = null,
  public matchUnlockParam: number = 0,
  public stageIdInModeList: (string)[] = [],
  public unlockHint: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const modeId = (this.modeId !== null ? builder.createString(this.modeId!) : 0);
  const matchUnlockModeId = (this.matchUnlockModeId !== null ? builder.createString(this.matchUnlockModeId!) : 0);
  const stageIdInModeList = clz_Torappu_ActMultiV3MapTypeData.createStageIdInModeListVector(builder, builder.createObjectOffsetList(this.stageIdInModeList));
  const unlockHint = (this.unlockHint !== null ? builder.createString(this.unlockHint!) : 0);

  return clz_Torappu_ActMultiV3MapTypeData.createclz_Torappu_ActMultiV3MapTypeData(builder,
    modeId,
    this.mode,
    this.difficulty,
    this.isDefaultSelectInQuickMatch,
    this.squadMax,
    matchUnlockModeId,
    this.matchUnlockParam,
    stageIdInModeList,
    unlockHint
  );
}
}
