// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData, clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataT } from './clz-torappu-climb-tower-single-tower-data-climb-tower-task-reward-data.js';
import { enum__Torappu_ClimbTowerTowerType } from './enum--torappu-climb-tower-tower-type.js';


export class clz_Torappu_ClimbTowerSingleTowerData implements flatbuffers.IUnpackableObject<clz_Torappu_ClimbTowerSingleTowerDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ClimbTowerSingleTowerData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ClimbTowerSingleTowerData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerSingleTowerData):clz_Torappu_ClimbTowerSingleTowerData {
  return (obj || new clz_Torappu_ClimbTowerSingleTowerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ClimbTowerSingleTowerData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ClimbTowerSingleTowerData):clz_Torappu_ClimbTowerSingleTowerData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ClimbTowerSingleTowerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stageNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subName():string|null
subName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

desc():string|null
desc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
desc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

towerType():enum__Torappu_ClimbTowerTowerType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_ClimbTowerTowerType.TRAINING;
}

levels(index: number):string
levels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
levels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

levelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hardLevels(index: number):string
hardLevels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
hardLevels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

hardLevelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

taskInfo(index: number, obj?:clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData):clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

taskInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

preTowerId():string|null
preTowerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
preTowerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

medalId():string|null
medalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
medalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hiddenMedalId():string|null
hiddenMedalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hiddenMedalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hardModeMedalId():string|null
hardModeMedalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hardModeMedalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bossId():string|null
bossId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bossId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cardId():string|null
cardId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cardId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

curseCardIds(index: number):string
curseCardIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
curseCardIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

curseCardIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dangerDesc():string|null
dangerDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dangerDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hardModeDesc():string|null
hardModeDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hardModeDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_ClimbTowerSingleTowerData(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addStageNum(builder:flatbuffers.Builder, stageNum:number) {
  builder.addFieldInt32(2, stageNum, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addSubName(builder:flatbuffers.Builder, subNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, subNameOffset, 0);
}

static addDesc(builder:flatbuffers.Builder, descOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, descOffset, 0);
}

static addTowerType(builder:flatbuffers.Builder, towerType:enum__Torappu_ClimbTowerTowerType) {
  builder.addFieldInt32(6, towerType, enum__Torappu_ClimbTowerTowerType.TRAINING);
}

static addLevels(builder:flatbuffers.Builder, levelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, levelsOffset, 0);
}

static createLevelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHardLevels(builder:flatbuffers.Builder, hardLevelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, hardLevelsOffset, 0);
}

static createHardLevelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHardLevelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTaskInfo(builder:flatbuffers.Builder, taskInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, taskInfoOffset, 0);
}

static createTaskInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTaskInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreTowerId(builder:flatbuffers.Builder, preTowerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, preTowerIdOffset, 0);
}

static addMedalId(builder:flatbuffers.Builder, medalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, medalIdOffset, 0);
}

static addHiddenMedalId(builder:flatbuffers.Builder, hiddenMedalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, hiddenMedalIdOffset, 0);
}

static addHardModeMedalId(builder:flatbuffers.Builder, hardModeMedalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, hardModeMedalIdOffset, 0);
}

static addBossId(builder:flatbuffers.Builder, bossIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, bossIdOffset, 0);
}

static addCardId(builder:flatbuffers.Builder, cardIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, cardIdOffset, 0);
}

static addCurseCardIds(builder:flatbuffers.Builder, curseCardIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, curseCardIdsOffset, 0);
}

static createCurseCardIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCurseCardIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDangerDesc(builder:flatbuffers.Builder, dangerDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, dangerDescOffset, 0);
}

static addHardModeDesc(builder:flatbuffers.Builder, hardModeDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, hardModeDescOffset, 0);
}

static endclz_Torappu_ClimbTowerSingleTowerData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ClimbTowerSingleTowerData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, sortId:number, stageNum:number, nameOffset:flatbuffers.Offset, subNameOffset:flatbuffers.Offset, descOffset:flatbuffers.Offset, towerType:enum__Torappu_ClimbTowerTowerType, levelsOffset:flatbuffers.Offset, hardLevelsOffset:flatbuffers.Offset, taskInfoOffset:flatbuffers.Offset, preTowerIdOffset:flatbuffers.Offset, medalIdOffset:flatbuffers.Offset, hiddenMedalIdOffset:flatbuffers.Offset, hardModeMedalIdOffset:flatbuffers.Offset, bossIdOffset:flatbuffers.Offset, cardIdOffset:flatbuffers.Offset, curseCardIdsOffset:flatbuffers.Offset, dangerDescOffset:flatbuffers.Offset, hardModeDescOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ClimbTowerSingleTowerData.startclz_Torappu_ClimbTowerSingleTowerData(builder);
  clz_Torappu_ClimbTowerSingleTowerData.addId(builder, idOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addSortId(builder, sortId);
  clz_Torappu_ClimbTowerSingleTowerData.addStageNum(builder, stageNum);
  clz_Torappu_ClimbTowerSingleTowerData.addName(builder, nameOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addSubName(builder, subNameOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addDesc(builder, descOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addTowerType(builder, towerType);
  clz_Torappu_ClimbTowerSingleTowerData.addLevels(builder, levelsOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addHardLevels(builder, hardLevelsOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addTaskInfo(builder, taskInfoOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addPreTowerId(builder, preTowerIdOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addMedalId(builder, medalIdOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addHiddenMedalId(builder, hiddenMedalIdOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addHardModeMedalId(builder, hardModeMedalIdOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addBossId(builder, bossIdOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addCardId(builder, cardIdOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addCurseCardIds(builder, curseCardIdsOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addDangerDesc(builder, dangerDescOffset);
  clz_Torappu_ClimbTowerSingleTowerData.addHardModeDesc(builder, hardModeDescOffset);
  return clz_Torappu_ClimbTowerSingleTowerData.endclz_Torappu_ClimbTowerSingleTowerData(builder);
}

unpack(): clz_Torappu_ClimbTowerSingleTowerDataT {
  return new clz_Torappu_ClimbTowerSingleTowerDataT(
    this.id(),
    this.sortId(),
    this.stageNum(),
    this.name(),
    this.subName(),
    this.desc(),
    this.towerType(),
    this.bb!.createScalarList<string>(this.levels.bind(this), this.levelsLength()),
    this.bb!.createScalarList<string>(this.hardLevels.bind(this), this.hardLevelsLength()),
    this.bb!.createObjList<clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData, clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataT>(this.taskInfo.bind(this), this.taskInfoLength()),
    this.preTowerId(),
    this.medalId(),
    this.hiddenMedalId(),
    this.hardModeMedalId(),
    this.bossId(),
    this.cardId(),
    this.bb!.createScalarList<string>(this.curseCardIds.bind(this), this.curseCardIdsLength()),
    this.dangerDesc(),
    this.hardModeDesc()
  );
}


unpackTo(_o: clz_Torappu_ClimbTowerSingleTowerDataT): void {
  _o.id = this.id();
  _o.sortId = this.sortId();
  _o.stageNum = this.stageNum();
  _o.name = this.name();
  _o.subName = this.subName();
  _o.desc = this.desc();
  _o.towerType = this.towerType();
  _o.levels = this.bb!.createScalarList<string>(this.levels.bind(this), this.levelsLength());
  _o.hardLevels = this.bb!.createScalarList<string>(this.hardLevels.bind(this), this.hardLevelsLength());
  _o.taskInfo = this.bb!.createObjList<clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData, clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataT>(this.taskInfo.bind(this), this.taskInfoLength());
  _o.preTowerId = this.preTowerId();
  _o.medalId = this.medalId();
  _o.hiddenMedalId = this.hiddenMedalId();
  _o.hardModeMedalId = this.hardModeMedalId();
  _o.bossId = this.bossId();
  _o.cardId = this.cardId();
  _o.curseCardIds = this.bb!.createScalarList<string>(this.curseCardIds.bind(this), this.curseCardIdsLength());
  _o.dangerDesc = this.dangerDesc();
  _o.hardModeDesc = this.hardModeDesc();
}
}

export class clz_Torappu_ClimbTowerSingleTowerDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public sortId: number = 0,
  public stageNum: number = 0,
  public name: string|Uint8Array|null = null,
  public subName: string|Uint8Array|null = null,
  public desc: string|Uint8Array|null = null,
  public towerType: enum__Torappu_ClimbTowerTowerType = enum__Torappu_ClimbTowerTowerType.TRAINING,
  public levels: (string)[] = [],
  public hardLevels: (string)[] = [],
  public taskInfo: (clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataT)[] = [],
  public preTowerId: string|Uint8Array|null = null,
  public medalId: string|Uint8Array|null = null,
  public hiddenMedalId: string|Uint8Array|null = null,
  public hardModeMedalId: string|Uint8Array|null = null,
  public bossId: string|Uint8Array|null = null,
  public cardId: string|Uint8Array|null = null,
  public curseCardIds: (string)[] = [],
  public dangerDesc: string|Uint8Array|null = null,
  public hardModeDesc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const subName = (this.subName !== null ? builder.createString(this.subName!) : 0);
  const desc = (this.desc !== null ? builder.createString(this.desc!) : 0);
  const levels = clz_Torappu_ClimbTowerSingleTowerData.createLevelsVector(builder, builder.createObjectOffsetList(this.levels));
  const hardLevels = clz_Torappu_ClimbTowerSingleTowerData.createHardLevelsVector(builder, builder.createObjectOffsetList(this.hardLevels));
  const taskInfo = clz_Torappu_ClimbTowerSingleTowerData.createTaskInfoVector(builder, builder.createObjectOffsetList(this.taskInfo));
  const preTowerId = (this.preTowerId !== null ? builder.createString(this.preTowerId!) : 0);
  const medalId = (this.medalId !== null ? builder.createString(this.medalId!) : 0);
  const hiddenMedalId = (this.hiddenMedalId !== null ? builder.createString(this.hiddenMedalId!) : 0);
  const hardModeMedalId = (this.hardModeMedalId !== null ? builder.createString(this.hardModeMedalId!) : 0);
  const bossId = (this.bossId !== null ? builder.createString(this.bossId!) : 0);
  const cardId = (this.cardId !== null ? builder.createString(this.cardId!) : 0);
  const curseCardIds = clz_Torappu_ClimbTowerSingleTowerData.createCurseCardIdsVector(builder, builder.createObjectOffsetList(this.curseCardIds));
  const dangerDesc = (this.dangerDesc !== null ? builder.createString(this.dangerDesc!) : 0);
  const hardModeDesc = (this.hardModeDesc !== null ? builder.createString(this.hardModeDesc!) : 0);

  return clz_Torappu_ClimbTowerSingleTowerData.createclz_Torappu_ClimbTowerSingleTowerData(builder,
    id,
    this.sortId,
    this.stageNum,
    name,
    subName,
    desc,
    this.towerType,
    levels,
    hardLevels,
    taskInfo,
    preTowerId,
    medalId,
    hiddenMedalId,
    hardModeMedalId,
    bossId,
    cardId,
    curseCardIds,
    dangerDesc,
    hardModeDesc
  );
}
}
