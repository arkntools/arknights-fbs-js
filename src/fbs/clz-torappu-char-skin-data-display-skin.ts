// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_CharSkinData_DisplaySkin implements flatbuffers.IUnpackableObject<clz_Torappu_CharSkinData_DisplaySkinT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_CharSkinData_DisplaySkin {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_CharSkinData_DisplaySkin(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharSkinData_DisplaySkin):clz_Torappu_CharSkinData_DisplaySkin {
  return (obj || new clz_Torappu_CharSkinData_DisplaySkin()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_CharSkinData_DisplaySkin(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharSkinData_DisplaySkin):clz_Torappu_CharSkinData_DisplaySkin {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_CharSkinData_DisplaySkin()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

skinName():string|null
skinName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skinName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

colorList(index: number):string
colorList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
colorList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

colorListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

titleList(index: number):string
titleList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
titleList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

titleListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

modelName():string|null
modelName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modelName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

drawerList(index: number):string
drawerList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
drawerList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

drawerListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

designerList(index: number):string
designerList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
designerList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

designerListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

skinGroupId():string|null
skinGroupId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skinGroupId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

skinGroupName():string|null
skinGroupName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skinGroupName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

skinGroupSortIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

content():string|null
content(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
content(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dialog():string|null
dialog(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dialog(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

usage():string|null
usage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
usage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

obtainApproach():string|null
obtainApproach(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obtainApproach(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

displayTagId():string|null
displayTagId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayTagId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

getTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

onYear():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

onPeriod():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_CharSkinData_DisplaySkin(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addSkinName(builder:flatbuffers.Builder, skinNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, skinNameOffset, 0);
}

static addColorList(builder:flatbuffers.Builder, colorListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorListOffset, 0);
}

static createColorListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColorListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTitleList(builder:flatbuffers.Builder, titleListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, titleListOffset, 0);
}

static createTitleListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTitleListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addModelName(builder:flatbuffers.Builder, modelNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, modelNameOffset, 0);
}

static addDrawerList(builder:flatbuffers.Builder, drawerListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, drawerListOffset, 0);
}

static createDrawerListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDrawerListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDesignerList(builder:flatbuffers.Builder, designerListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, designerListOffset, 0);
}

static createDesignerListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDesignerListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSkinGroupId(builder:flatbuffers.Builder, skinGroupIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, skinGroupIdOffset, 0);
}

static addSkinGroupName(builder:flatbuffers.Builder, skinGroupNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, skinGroupNameOffset, 0);
}

static addSkinGroupSortIndex(builder:flatbuffers.Builder, skinGroupSortIndex:number) {
  builder.addFieldInt32(8, skinGroupSortIndex, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, contentOffset, 0);
}

static addDialog(builder:flatbuffers.Builder, dialogOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, dialogOffset, 0);
}

static addUsage(builder:flatbuffers.Builder, usageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, usageOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, descriptionOffset, 0);
}

static addObtainApproach(builder:flatbuffers.Builder, obtainApproachOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, obtainApproachOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(14, sortId, 0);
}

static addDisplayTagId(builder:flatbuffers.Builder, displayTagIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, displayTagIdOffset, 0);
}

static addGetTime(builder:flatbuffers.Builder, getTime:bigint) {
  builder.addFieldInt64(16, getTime, BigInt('0'));
}

static addOnYear(builder:flatbuffers.Builder, onYear:number) {
  builder.addFieldInt32(17, onYear, 0);
}

static addOnPeriod(builder:flatbuffers.Builder, onPeriod:number) {
  builder.addFieldInt32(18, onPeriod, 0);
}

static endclz_Torappu_CharSkinData_DisplaySkin(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_CharSkinData_DisplaySkin(builder:flatbuffers.Builder, skinNameOffset:flatbuffers.Offset, colorListOffset:flatbuffers.Offset, titleListOffset:flatbuffers.Offset, modelNameOffset:flatbuffers.Offset, drawerListOffset:flatbuffers.Offset, designerListOffset:flatbuffers.Offset, skinGroupIdOffset:flatbuffers.Offset, skinGroupNameOffset:flatbuffers.Offset, skinGroupSortIndex:number, contentOffset:flatbuffers.Offset, dialogOffset:flatbuffers.Offset, usageOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, obtainApproachOffset:flatbuffers.Offset, sortId:number, displayTagIdOffset:flatbuffers.Offset, getTime:bigint, onYear:number, onPeriod:number):flatbuffers.Offset {
  clz_Torappu_CharSkinData_DisplaySkin.startclz_Torappu_CharSkinData_DisplaySkin(builder);
  clz_Torappu_CharSkinData_DisplaySkin.addSkinName(builder, skinNameOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addColorList(builder, colorListOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addTitleList(builder, titleListOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addModelName(builder, modelNameOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addDrawerList(builder, drawerListOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addDesignerList(builder, designerListOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addSkinGroupId(builder, skinGroupIdOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addSkinGroupName(builder, skinGroupNameOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addSkinGroupSortIndex(builder, skinGroupSortIndex);
  clz_Torappu_CharSkinData_DisplaySkin.addContent(builder, contentOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addDialog(builder, dialogOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addUsage(builder, usageOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addDescription(builder, descriptionOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addObtainApproach(builder, obtainApproachOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addSortId(builder, sortId);
  clz_Torappu_CharSkinData_DisplaySkin.addDisplayTagId(builder, displayTagIdOffset);
  clz_Torappu_CharSkinData_DisplaySkin.addGetTime(builder, getTime);
  clz_Torappu_CharSkinData_DisplaySkin.addOnYear(builder, onYear);
  clz_Torappu_CharSkinData_DisplaySkin.addOnPeriod(builder, onPeriod);
  return clz_Torappu_CharSkinData_DisplaySkin.endclz_Torappu_CharSkinData_DisplaySkin(builder);
}

unpack(): clz_Torappu_CharSkinData_DisplaySkinT {
  return new clz_Torappu_CharSkinData_DisplaySkinT(
    this.skinName(),
    this.bb!.createScalarList<string>(this.colorList.bind(this), this.colorListLength()),
    this.bb!.createScalarList<string>(this.titleList.bind(this), this.titleListLength()),
    this.modelName(),
    this.bb!.createScalarList<string>(this.drawerList.bind(this), this.drawerListLength()),
    this.bb!.createScalarList<string>(this.designerList.bind(this), this.designerListLength()),
    this.skinGroupId(),
    this.skinGroupName(),
    this.skinGroupSortIndex(),
    this.content(),
    this.dialog(),
    this.usage(),
    this.description(),
    this.obtainApproach(),
    this.sortId(),
    this.displayTagId(),
    this.getTime(),
    this.onYear(),
    this.onPeriod()
  );
}


unpackTo(_o: clz_Torappu_CharSkinData_DisplaySkinT): void {
  _o.skinName = this.skinName();
  _o.colorList = this.bb!.createScalarList<string>(this.colorList.bind(this), this.colorListLength());
  _o.titleList = this.bb!.createScalarList<string>(this.titleList.bind(this), this.titleListLength());
  _o.modelName = this.modelName();
  _o.drawerList = this.bb!.createScalarList<string>(this.drawerList.bind(this), this.drawerListLength());
  _o.designerList = this.bb!.createScalarList<string>(this.designerList.bind(this), this.designerListLength());
  _o.skinGroupId = this.skinGroupId();
  _o.skinGroupName = this.skinGroupName();
  _o.skinGroupSortIndex = this.skinGroupSortIndex();
  _o.content = this.content();
  _o.dialog = this.dialog();
  _o.usage = this.usage();
  _o.description = this.description();
  _o.obtainApproach = this.obtainApproach();
  _o.sortId = this.sortId();
  _o.displayTagId = this.displayTagId();
  _o.getTime = this.getTime();
  _o.onYear = this.onYear();
  _o.onPeriod = this.onPeriod();
}
}

export class clz_Torappu_CharSkinData_DisplaySkinT implements flatbuffers.IGeneratedObject {
constructor(
  public skinName: string|Uint8Array|null = null,
  public colorList: (string)[] = [],
  public titleList: (string)[] = [],
  public modelName: string|Uint8Array|null = null,
  public drawerList: (string)[] = [],
  public designerList: (string)[] = [],
  public skinGroupId: string|Uint8Array|null = null,
  public skinGroupName: string|Uint8Array|null = null,
  public skinGroupSortIndex: number = 0,
  public content: string|Uint8Array|null = null,
  public dialog: string|Uint8Array|null = null,
  public usage: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public obtainApproach: string|Uint8Array|null = null,
  public sortId: number = 0,
  public displayTagId: string|Uint8Array|null = null,
  public getTime: bigint = BigInt('0'),
  public onYear: number = 0,
  public onPeriod: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const skinName = (this.skinName !== null ? builder.createString(this.skinName!) : 0);
  const colorList = clz_Torappu_CharSkinData_DisplaySkin.createColorListVector(builder, builder.createObjectOffsetList(this.colorList));
  const titleList = clz_Torappu_CharSkinData_DisplaySkin.createTitleListVector(builder, builder.createObjectOffsetList(this.titleList));
  const modelName = (this.modelName !== null ? builder.createString(this.modelName!) : 0);
  const drawerList = clz_Torappu_CharSkinData_DisplaySkin.createDrawerListVector(builder, builder.createObjectOffsetList(this.drawerList));
  const designerList = clz_Torappu_CharSkinData_DisplaySkin.createDesignerListVector(builder, builder.createObjectOffsetList(this.designerList));
  const skinGroupId = (this.skinGroupId !== null ? builder.createString(this.skinGroupId!) : 0);
  const skinGroupName = (this.skinGroupName !== null ? builder.createString(this.skinGroupName!) : 0);
  const content = (this.content !== null ? builder.createString(this.content!) : 0);
  const dialog = (this.dialog !== null ? builder.createString(this.dialog!) : 0);
  const usage = (this.usage !== null ? builder.createString(this.usage!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const obtainApproach = (this.obtainApproach !== null ? builder.createString(this.obtainApproach!) : 0);
  const displayTagId = (this.displayTagId !== null ? builder.createString(this.displayTagId!) : 0);

  return clz_Torappu_CharSkinData_DisplaySkin.createclz_Torappu_CharSkinData_DisplaySkin(builder,
    skinName,
    colorList,
    titleList,
    modelName,
    drawerList,
    designerList,
    skinGroupId,
    skinGroupName,
    this.skinGroupSortIndex,
    content,
    dialog,
    usage,
    description,
    obtainApproach,
    this.sortId,
    displayTagId,
    this.getTime,
    this.onYear,
    this.onPeriod
  );
}
}
