// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo, clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoT } from './clz-torappu-act35-side-data-act35-side-mile-stone-grand-reward-info.js';


export class clz_Torappu_Act35SideData_Act35SideConstData implements flatbuffers.IUnpackableObject<clz_Torappu_Act35SideData_Act35SideConstDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act35SideData_Act35SideConstData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act35SideData_Act35SideConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act35SideData_Act35SideConstData):clz_Torappu_Act35SideData_Act35SideConstData {
  return (obj || new clz_Torappu_Act35SideData_Act35SideConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act35SideData_Act35SideConstData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act35SideData_Act35SideConstData):clz_Torappu_Act35SideData_Act35SideConstData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act35SideData_Act35SideConstData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

campaignStageId():string|null
campaignStageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
campaignStageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

campaignEnemyCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

milestoneGrandRewardInfoList(index: number, obj?:clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo):clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

milestoneGrandRewardInfoListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unlockLevelId():string|null
unlockLevelId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockLevelId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

birdSpineLowRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

birdSpineHighRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

cardMaxLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxSlotCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

cardRefreshNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

initSlotCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bonusMaterialId():string|null
bonusMaterialId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bonusMaterialId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

introRoundIdList(index: number):string
introRoundIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
introRoundIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

introRoundIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeUnlockText():string|null
challengeUnlockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
challengeUnlockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

slotUnlockText():string|null
slotUnlockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
slotUnlockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

estimateRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

carvingUnlockToastText():string|null
carvingUnlockToastText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
carvingUnlockToastText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_Act35SideData_Act35SideConstData(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addCampaignStageId(builder:flatbuffers.Builder, campaignStageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, campaignStageIdOffset, 0);
}

static addCampaignEnemyCnt(builder:flatbuffers.Builder, campaignEnemyCnt:number) {
  builder.addFieldInt32(1, campaignEnemyCnt, 0);
}

static addMilestoneGrandRewardInfoList(builder:flatbuffers.Builder, milestoneGrandRewardInfoListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, milestoneGrandRewardInfoListOffset, 0);
}

static createMilestoneGrandRewardInfoListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMilestoneGrandRewardInfoListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnlockLevelId(builder:flatbuffers.Builder, unlockLevelIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, unlockLevelIdOffset, 0);
}

static addBirdSpineLowRate(builder:flatbuffers.Builder, birdSpineLowRate:number) {
  builder.addFieldFloat32(4, birdSpineLowRate, 0.0);
}

static addBirdSpineHighRate(builder:flatbuffers.Builder, birdSpineHighRate:number) {
  builder.addFieldFloat32(5, birdSpineHighRate, 0.0);
}

static addCardMaxLevel(builder:flatbuffers.Builder, cardMaxLevel:number) {
  builder.addFieldInt32(6, cardMaxLevel, 0);
}

static addMaxSlotCnt(builder:flatbuffers.Builder, maxSlotCnt:number) {
  builder.addFieldInt32(7, maxSlotCnt, 0);
}

static addCardRefreshNum(builder:flatbuffers.Builder, cardRefreshNum:number) {
  builder.addFieldInt32(8, cardRefreshNum, 0);
}

static addInitSlotCnt(builder:flatbuffers.Builder, initSlotCnt:number) {
  builder.addFieldInt32(9, initSlotCnt, 0);
}

static addBonusMaterialId(builder:flatbuffers.Builder, bonusMaterialIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, bonusMaterialIdOffset, 0);
}

static addIntroRoundIdList(builder:flatbuffers.Builder, introRoundIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, introRoundIdListOffset, 0);
}

static createIntroRoundIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIntroRoundIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChallengeUnlockText(builder:flatbuffers.Builder, challengeUnlockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, challengeUnlockTextOffset, 0);
}

static addSlotUnlockText(builder:flatbuffers.Builder, slotUnlockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, slotUnlockTextOffset, 0);
}

static addEstimateRatio(builder:flatbuffers.Builder, estimateRatio:number) {
  builder.addFieldInt32(14, estimateRatio, 0);
}

static addCarvingUnlockToastText(builder:flatbuffers.Builder, carvingUnlockToastTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, carvingUnlockToastTextOffset, 0);
}

static endclz_Torappu_Act35SideData_Act35SideConstData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act35SideData_Act35SideConstData(builder:flatbuffers.Builder, campaignStageIdOffset:flatbuffers.Offset, campaignEnemyCnt:number, milestoneGrandRewardInfoListOffset:flatbuffers.Offset, unlockLevelIdOffset:flatbuffers.Offset, birdSpineLowRate:number, birdSpineHighRate:number, cardMaxLevel:number, maxSlotCnt:number, cardRefreshNum:number, initSlotCnt:number, bonusMaterialIdOffset:flatbuffers.Offset, introRoundIdListOffset:flatbuffers.Offset, challengeUnlockTextOffset:flatbuffers.Offset, slotUnlockTextOffset:flatbuffers.Offset, estimateRatio:number, carvingUnlockToastTextOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_Act35SideData_Act35SideConstData.startclz_Torappu_Act35SideData_Act35SideConstData(builder);
  clz_Torappu_Act35SideData_Act35SideConstData.addCampaignStageId(builder, campaignStageIdOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addCampaignEnemyCnt(builder, campaignEnemyCnt);
  clz_Torappu_Act35SideData_Act35SideConstData.addMilestoneGrandRewardInfoList(builder, milestoneGrandRewardInfoListOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addUnlockLevelId(builder, unlockLevelIdOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addBirdSpineLowRate(builder, birdSpineLowRate);
  clz_Torappu_Act35SideData_Act35SideConstData.addBirdSpineHighRate(builder, birdSpineHighRate);
  clz_Torappu_Act35SideData_Act35SideConstData.addCardMaxLevel(builder, cardMaxLevel);
  clz_Torappu_Act35SideData_Act35SideConstData.addMaxSlotCnt(builder, maxSlotCnt);
  clz_Torappu_Act35SideData_Act35SideConstData.addCardRefreshNum(builder, cardRefreshNum);
  clz_Torappu_Act35SideData_Act35SideConstData.addInitSlotCnt(builder, initSlotCnt);
  clz_Torappu_Act35SideData_Act35SideConstData.addBonusMaterialId(builder, bonusMaterialIdOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addIntroRoundIdList(builder, introRoundIdListOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addChallengeUnlockText(builder, challengeUnlockTextOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addSlotUnlockText(builder, slotUnlockTextOffset);
  clz_Torappu_Act35SideData_Act35SideConstData.addEstimateRatio(builder, estimateRatio);
  clz_Torappu_Act35SideData_Act35SideConstData.addCarvingUnlockToastText(builder, carvingUnlockToastTextOffset);
  return clz_Torappu_Act35SideData_Act35SideConstData.endclz_Torappu_Act35SideData_Act35SideConstData(builder);
}

unpack(): clz_Torappu_Act35SideData_Act35SideConstDataT {
  return new clz_Torappu_Act35SideData_Act35SideConstDataT(
    this.campaignStageId(),
    this.campaignEnemyCnt(),
    this.bb!.createObjList<clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo, clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoT>(this.milestoneGrandRewardInfoList.bind(this), this.milestoneGrandRewardInfoListLength()),
    this.unlockLevelId(),
    this.birdSpineLowRate(),
    this.birdSpineHighRate(),
    this.cardMaxLevel(),
    this.maxSlotCnt(),
    this.cardRefreshNum(),
    this.initSlotCnt(),
    this.bonusMaterialId(),
    this.bb!.createScalarList<string>(this.introRoundIdList.bind(this), this.introRoundIdListLength()),
    this.challengeUnlockText(),
    this.slotUnlockText(),
    this.estimateRatio(),
    this.carvingUnlockToastText()
  );
}


unpackTo(_o: clz_Torappu_Act35SideData_Act35SideConstDataT): void {
  _o.campaignStageId = this.campaignStageId();
  _o.campaignEnemyCnt = this.campaignEnemyCnt();
  _o.milestoneGrandRewardInfoList = this.bb!.createObjList<clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo, clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoT>(this.milestoneGrandRewardInfoList.bind(this), this.milestoneGrandRewardInfoListLength());
  _o.unlockLevelId = this.unlockLevelId();
  _o.birdSpineLowRate = this.birdSpineLowRate();
  _o.birdSpineHighRate = this.birdSpineHighRate();
  _o.cardMaxLevel = this.cardMaxLevel();
  _o.maxSlotCnt = this.maxSlotCnt();
  _o.cardRefreshNum = this.cardRefreshNum();
  _o.initSlotCnt = this.initSlotCnt();
  _o.bonusMaterialId = this.bonusMaterialId();
  _o.introRoundIdList = this.bb!.createScalarList<string>(this.introRoundIdList.bind(this), this.introRoundIdListLength());
  _o.challengeUnlockText = this.challengeUnlockText();
  _o.slotUnlockText = this.slotUnlockText();
  _o.estimateRatio = this.estimateRatio();
  _o.carvingUnlockToastText = this.carvingUnlockToastText();
}
}

export class clz_Torappu_Act35SideData_Act35SideConstDataT implements flatbuffers.IGeneratedObject {
constructor(
  public campaignStageId: string|Uint8Array|null = null,
  public campaignEnemyCnt: number = 0,
  public milestoneGrandRewardInfoList: (clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoT)[] = [],
  public unlockLevelId: string|Uint8Array|null = null,
  public birdSpineLowRate: number = 0.0,
  public birdSpineHighRate: number = 0.0,
  public cardMaxLevel: number = 0,
  public maxSlotCnt: number = 0,
  public cardRefreshNum: number = 0,
  public initSlotCnt: number = 0,
  public bonusMaterialId: string|Uint8Array|null = null,
  public introRoundIdList: (string)[] = [],
  public challengeUnlockText: string|Uint8Array|null = null,
  public slotUnlockText: string|Uint8Array|null = null,
  public estimateRatio: number = 0,
  public carvingUnlockToastText: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const campaignStageId = (this.campaignStageId !== null ? builder.createString(this.campaignStageId!) : 0);
  const milestoneGrandRewardInfoList = clz_Torappu_Act35SideData_Act35SideConstData.createMilestoneGrandRewardInfoListVector(builder, builder.createObjectOffsetList(this.milestoneGrandRewardInfoList));
  const unlockLevelId = (this.unlockLevelId !== null ? builder.createString(this.unlockLevelId!) : 0);
  const bonusMaterialId = (this.bonusMaterialId !== null ? builder.createString(this.bonusMaterialId!) : 0);
  const introRoundIdList = clz_Torappu_Act35SideData_Act35SideConstData.createIntroRoundIdListVector(builder, builder.createObjectOffsetList(this.introRoundIdList));
  const challengeUnlockText = (this.challengeUnlockText !== null ? builder.createString(this.challengeUnlockText!) : 0);
  const slotUnlockText = (this.slotUnlockText !== null ? builder.createString(this.slotUnlockText!) : 0);
  const carvingUnlockToastText = (this.carvingUnlockToastText !== null ? builder.createString(this.carvingUnlockToastText!) : 0);

  return clz_Torappu_Act35SideData_Act35SideConstData.createclz_Torappu_Act35SideData_Act35SideConstData(builder,
    campaignStageId,
    this.campaignEnemyCnt,
    milestoneGrandRewardInfoList,
    unlockLevelId,
    this.birdSpineLowRate,
    this.birdSpineHighRate,
    this.cardMaxLevel,
    this.maxSlotCnt,
    this.cardRefreshNum,
    this.initSlotCnt,
    bonusMaterialId,
    introRoundIdList,
    challengeUnlockText,
    slotUnlockText,
    this.estimateRatio,
    carvingUnlockToastText
  );
}
}
