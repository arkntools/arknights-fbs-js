// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_BuildingData_RoomData_PhaseData, clz_Torappu_BuildingData_RoomData_PhaseDataT } from './clz-torappu-building-data-room-data-phase-data.js';
import { clz_Torappu_GridPosition, clz_Torappu_GridPositionT } from './clz-torappu-grid-position.js';
import { enum__Torappu_BuildingData_RoomCategory } from './enum--torappu-building-data-room-category.js';
import { enum__Torappu_BuildingData_RoomType } from './enum--torappu-building-data-room-type.js';


export class clz_Torappu_BuildingData_RoomData implements flatbuffers.IUnpackableObject<clz_Torappu_BuildingData_RoomDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_BuildingData_RoomData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_BuildingData_RoomData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_RoomData):clz_Torappu_BuildingData_RoomData {
  return (obj || new clz_Torappu_BuildingData_RoomData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_BuildingData_RoomData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_BuildingData_RoomData):clz_Torappu_BuildingData_RoomData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_BuildingData_RoomData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():enum__Torappu_BuildingData_RoomType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuildingData_RoomType.NONE;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultPrefabId():string|null
defaultPrefabId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultPrefabId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

canLevelDown():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maxCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

category():enum__Torappu_BuildingData_RoomCategory {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_BuildingData_RoomCategory.NONE;
}

size(obj?:clz_Torappu_GridPosition):clz_Torappu_GridPosition|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new clz_Torappu_GridPosition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

phases(index: number, obj?:clz_Torappu_BuildingData_RoomData_PhaseData):clz_Torappu_BuildingData_RoomData_PhaseData|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new clz_Torappu_BuildingData_RoomData_PhaseData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

phasesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_BuildingData_RoomData(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, id:enum__Torappu_BuildingData_RoomType) {
  builder.addFieldInt32(0, id, enum__Torappu_BuildingData_RoomType.NONE);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, descriptionOffset, 0);
}

static addDefaultPrefabId(builder:flatbuffers.Builder, defaultPrefabIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, defaultPrefabIdOffset, 0);
}

static addCanLevelDown(builder:flatbuffers.Builder, canLevelDown:boolean) {
  builder.addFieldInt8(4, +canLevelDown, +false);
}

static addMaxCount(builder:flatbuffers.Builder, maxCount:number) {
  builder.addFieldInt32(5, maxCount, 0);
}

static addCategory(builder:flatbuffers.Builder, category:enum__Torappu_BuildingData_RoomCategory) {
  builder.addFieldInt32(6, category, enum__Torappu_BuildingData_RoomCategory.NONE);
}

static addSize(builder:flatbuffers.Builder, sizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, sizeOffset, 0);
}

static addPhases(builder:flatbuffers.Builder, phasesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, phasesOffset, 0);
}

static createPhasesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPhasesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_BuildingData_RoomData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_BuildingData_RoomDataT {
  return new clz_Torappu_BuildingData_RoomDataT(
    this.id(),
    this.name(),
    this.description(),
    this.defaultPrefabId(),
    this.canLevelDown(),
    this.maxCount(),
    this.category(),
    (this.size() !== null ? this.size()!.unpack() : null),
    this.bb!.createObjList<clz_Torappu_BuildingData_RoomData_PhaseData, clz_Torappu_BuildingData_RoomData_PhaseDataT>(this.phases.bind(this), this.phasesLength())
  );
}


unpackTo(_o: clz_Torappu_BuildingData_RoomDataT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.description = this.description();
  _o.defaultPrefabId = this.defaultPrefabId();
  _o.canLevelDown = this.canLevelDown();
  _o.maxCount = this.maxCount();
  _o.category = this.category();
  _o.size = (this.size() !== null ? this.size()!.unpack() : null);
  _o.phases = this.bb!.createObjList<clz_Torappu_BuildingData_RoomData_PhaseData, clz_Torappu_BuildingData_RoomData_PhaseDataT>(this.phases.bind(this), this.phasesLength());
}
}

export class clz_Torappu_BuildingData_RoomDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: enum__Torappu_BuildingData_RoomType = enum__Torappu_BuildingData_RoomType.NONE,
  public name: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public defaultPrefabId: string|Uint8Array|null = null,
  public canLevelDown: boolean = false,
  public maxCount: number = 0,
  public category: enum__Torappu_BuildingData_RoomCategory = enum__Torappu_BuildingData_RoomCategory.NONE,
  public size: clz_Torappu_GridPositionT|null = null,
  public phases: (clz_Torappu_BuildingData_RoomData_PhaseDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const defaultPrefabId = (this.defaultPrefabId !== null ? builder.createString(this.defaultPrefabId!) : 0);
  const size = (this.size !== null ? this.size!.pack(builder) : 0);
  const phases = clz_Torappu_BuildingData_RoomData.createPhasesVector(builder, builder.createObjectOffsetList(this.phases));

  clz_Torappu_BuildingData_RoomData.startclz_Torappu_BuildingData_RoomData(builder);
  clz_Torappu_BuildingData_RoomData.addId(builder, this.id);
  clz_Torappu_BuildingData_RoomData.addName(builder, name);
  clz_Torappu_BuildingData_RoomData.addDescription(builder, description);
  clz_Torappu_BuildingData_RoomData.addDefaultPrefabId(builder, defaultPrefabId);
  clz_Torappu_BuildingData_RoomData.addCanLevelDown(builder, this.canLevelDown);
  clz_Torappu_BuildingData_RoomData.addMaxCount(builder, this.maxCount);
  clz_Torappu_BuildingData_RoomData.addCategory(builder, this.category);
  clz_Torappu_BuildingData_RoomData.addSize(builder, size);
  clz_Torappu_BuildingData_RoomData.addPhases(builder, phases);

  return clz_Torappu_BuildingData_RoomData.endclz_Torappu_BuildingData_RoomData(builder);
}
}
