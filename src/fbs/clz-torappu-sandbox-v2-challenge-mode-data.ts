// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_SandboxV2ChallengeConst, clz_Torappu_SandboxV2ChallengeConstT } from './clz-torappu-sandbox-v2-challenge-const.js';
import { clz_Torappu_SandboxV2ChallengeModeDifficultyData, clz_Torappu_SandboxV2ChallengeModeDifficultyDataT } from './clz-torappu-sandbox-v2-challenge-mode-difficulty-data.js';
import { dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData, dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataT } from './dict--string--clz-torappu-sandbox-v2-challenge-mode-reward-data.js';
import { dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData, dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataT } from './dict--string--clz-torappu-sandbox-v2-challenge-mode-unlock-data.js';


export class clz_Torappu_SandboxV2ChallengeModeData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2ChallengeModeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2ChallengeModeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2ChallengeModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2ChallengeModeData):clz_Torappu_SandboxV2ChallengeModeData {
  return (obj || new clz_Torappu_SandboxV2ChallengeModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2ChallengeModeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2ChallengeModeData):clz_Torappu_SandboxV2ChallengeModeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2ChallengeModeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

challengeConst(obj?:clz_Torappu_SandboxV2ChallengeConst):clz_Torappu_SandboxV2ChallengeConst|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_SandboxV2ChallengeConst()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

challengeModeUnlockData(index: number, obj?:dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData):dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

challengeModeUnlockDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeModeRewardData(index: number, obj?:dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData):dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

challengeModeRewardDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeModeDifficultyData(index: number, obj?:clz_Torappu_SandboxV2ChallengeModeDifficultyData):clz_Torappu_SandboxV2ChallengeModeDifficultyData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_SandboxV2ChallengeModeDifficultyData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

challengeModeDifficultyDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SandboxV2ChallengeModeData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addChallengeConst(builder:flatbuffers.Builder, challengeConstOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, challengeConstOffset, 0);
}

static addChallengeModeUnlockData(builder:flatbuffers.Builder, challengeModeUnlockDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, challengeModeUnlockDataOffset, 0);
}

static createChallengeModeUnlockDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChallengeModeUnlockDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChallengeModeRewardData(builder:flatbuffers.Builder, challengeModeRewardDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, challengeModeRewardDataOffset, 0);
}

static createChallengeModeRewardDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChallengeModeRewardDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChallengeModeDifficultyData(builder:flatbuffers.Builder, challengeModeDifficultyDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, challengeModeDifficultyDataOffset, 0);
}

static createChallengeModeDifficultyDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChallengeModeDifficultyDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SandboxV2ChallengeModeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2ChallengeModeData(builder:flatbuffers.Builder, challengeConstOffset:flatbuffers.Offset, challengeModeUnlockDataOffset:flatbuffers.Offset, challengeModeRewardDataOffset:flatbuffers.Offset, challengeModeDifficultyDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SandboxV2ChallengeModeData.startclz_Torappu_SandboxV2ChallengeModeData(builder);
  clz_Torappu_SandboxV2ChallengeModeData.addChallengeConst(builder, challengeConstOffset);
  clz_Torappu_SandboxV2ChallengeModeData.addChallengeModeUnlockData(builder, challengeModeUnlockDataOffset);
  clz_Torappu_SandboxV2ChallengeModeData.addChallengeModeRewardData(builder, challengeModeRewardDataOffset);
  clz_Torappu_SandboxV2ChallengeModeData.addChallengeModeDifficultyData(builder, challengeModeDifficultyDataOffset);
  return clz_Torappu_SandboxV2ChallengeModeData.endclz_Torappu_SandboxV2ChallengeModeData(builder);
}

unpack(): clz_Torappu_SandboxV2ChallengeModeDataT {
  return new clz_Torappu_SandboxV2ChallengeModeDataT(
    (this.challengeConst() !== null ? this.challengeConst()!.unpack() : null),
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData, dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataT>(this.challengeModeUnlockData.bind(this), this.challengeModeUnlockDataLength()),
    this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData, dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataT>(this.challengeModeRewardData.bind(this), this.challengeModeRewardDataLength()),
    this.bb!.createObjList<clz_Torappu_SandboxV2ChallengeModeDifficultyData, clz_Torappu_SandboxV2ChallengeModeDifficultyDataT>(this.challengeModeDifficultyData.bind(this), this.challengeModeDifficultyDataLength())
  );
}


unpackTo(_o: clz_Torappu_SandboxV2ChallengeModeDataT): void {
  _o.challengeConst = (this.challengeConst() !== null ? this.challengeConst()!.unpack() : null);
  _o.challengeModeUnlockData = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData, dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataT>(this.challengeModeUnlockData.bind(this), this.challengeModeUnlockDataLength());
  _o.challengeModeRewardData = this.bb!.createObjList<dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData, dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataT>(this.challengeModeRewardData.bind(this), this.challengeModeRewardDataLength());
  _o.challengeModeDifficultyData = this.bb!.createObjList<clz_Torappu_SandboxV2ChallengeModeDifficultyData, clz_Torappu_SandboxV2ChallengeModeDifficultyDataT>(this.challengeModeDifficultyData.bind(this), this.challengeModeDifficultyDataLength());
}
}

export class clz_Torappu_SandboxV2ChallengeModeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public challengeConst: clz_Torappu_SandboxV2ChallengeConstT|null = null,
  public challengeModeUnlockData: (dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataT)[] = [],
  public challengeModeRewardData: (dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataT)[] = [],
  public challengeModeDifficultyData: (clz_Torappu_SandboxV2ChallengeModeDifficultyDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const challengeConst = (this.challengeConst !== null ? this.challengeConst!.pack(builder) : 0);
  const challengeModeUnlockData = clz_Torappu_SandboxV2ChallengeModeData.createChallengeModeUnlockDataVector(builder, builder.createObjectOffsetList(this.challengeModeUnlockData));
  const challengeModeRewardData = clz_Torappu_SandboxV2ChallengeModeData.createChallengeModeRewardDataVector(builder, builder.createObjectOffsetList(this.challengeModeRewardData));
  const challengeModeDifficultyData = clz_Torappu_SandboxV2ChallengeModeData.createChallengeModeDifficultyDataVector(builder, builder.createObjectOffsetList(this.challengeModeDifficultyData));

  return clz_Torappu_SandboxV2ChallengeModeData.createclz_Torappu_SandboxV2ChallengeModeData(builder,
    challengeConst,
    challengeModeUnlockData,
    challengeModeRewardData,
    challengeModeDifficultyData
  );
}
}
