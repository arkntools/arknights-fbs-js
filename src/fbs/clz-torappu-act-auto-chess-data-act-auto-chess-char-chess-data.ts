// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActAutoChessData_ActAutoChessCharChessStatusData, clz_Torappu_ActAutoChessData_ActAutoChessCharChessStatusDataT } from './clz-torappu-act-auto-chess-data-act-auto-chess-char-chess-status-data.js';


export class clz_Torappu_ActAutoChessData_ActAutoChessCharChessData implements flatbuffers.IUnpackableObject<clz_Torappu_ActAutoChessData_ActAutoChessCharChessDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActAutoChessData_ActAutoChessCharChessData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActAutoChessData_ActAutoChessCharChessData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessCharChessData):clz_Torappu_ActAutoChessData_ActAutoChessCharChessData {
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessCharChessData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActAutoChessData_ActAutoChessCharChessData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActAutoChessData_ActAutoChessCharChessData):clz_Torappu_ActAutoChessData_ActAutoChessCharChessData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActAutoChessData_ActAutoChessCharChessData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chessId():string|null
chessId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chessId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

identifier():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isGolden():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

status(obj?:clz_Torappu_ActAutoChessData_ActAutoChessCharChessStatusData):clz_Torappu_ActAutoChessData_ActAutoChessCharChessStatusData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_ActAutoChessData_ActAutoChessCharChessStatusData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

upgradeChessId():string|null
upgradeChessId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
upgradeChessId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

upgradeNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bondIds(index: number):string
bondIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
bondIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

bondIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

garrisonIds(index: number):string
garrisonIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
garrisonIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

garrisonIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActAutoChessData_ActAutoChessCharChessData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addChessId(builder:flatbuffers.Builder, chessIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chessIdOffset, 0);
}

static addIdentifier(builder:flatbuffers.Builder, identifier:number) {
  builder.addFieldInt32(1, identifier, 0);
}

static addIsGolden(builder:flatbuffers.Builder, isGolden:boolean) {
  builder.addFieldInt8(2, +isGolden, +false);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, statusOffset, 0);
}

static addUpgradeChessId(builder:flatbuffers.Builder, upgradeChessIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, upgradeChessIdOffset, 0);
}

static addUpgradeNum(builder:flatbuffers.Builder, upgradeNum:number) {
  builder.addFieldInt32(5, upgradeNum, 0);
}

static addBondIds(builder:flatbuffers.Builder, bondIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, bondIdsOffset, 0);
}

static createBondIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBondIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGarrisonIds(builder:flatbuffers.Builder, garrisonIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, garrisonIdsOffset, 0);
}

static createGarrisonIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGarrisonIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActAutoChessData_ActAutoChessCharChessData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_ActAutoChessData_ActAutoChessCharChessDataT {
  return new clz_Torappu_ActAutoChessData_ActAutoChessCharChessDataT(
    this.chessId(),
    this.identifier(),
    this.isGolden(),
    (this.status() !== null ? this.status()!.unpack() : null),
    this.upgradeChessId(),
    this.upgradeNum(),
    this.bb!.createScalarList<string>(this.bondIds.bind(this), this.bondIdsLength()),
    this.bb!.createScalarList<string>(this.garrisonIds.bind(this), this.garrisonIdsLength())
  );
}


unpackTo(_o: clz_Torappu_ActAutoChessData_ActAutoChessCharChessDataT): void {
  _o.chessId = this.chessId();
  _o.identifier = this.identifier();
  _o.isGolden = this.isGolden();
  _o.status = (this.status() !== null ? this.status()!.unpack() : null);
  _o.upgradeChessId = this.upgradeChessId();
  _o.upgradeNum = this.upgradeNum();
  _o.bondIds = this.bb!.createScalarList<string>(this.bondIds.bind(this), this.bondIdsLength());
  _o.garrisonIds = this.bb!.createScalarList<string>(this.garrisonIds.bind(this), this.garrisonIdsLength());
}
}

export class clz_Torappu_ActAutoChessData_ActAutoChessCharChessDataT implements flatbuffers.IGeneratedObject {
constructor(
  public chessId: string|Uint8Array|null = null,
  public identifier: number = 0,
  public isGolden: boolean = false,
  public status: clz_Torappu_ActAutoChessData_ActAutoChessCharChessStatusDataT|null = null,
  public upgradeChessId: string|Uint8Array|null = null,
  public upgradeNum: number = 0,
  public bondIds: (string)[] = [],
  public garrisonIds: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const chessId = (this.chessId !== null ? builder.createString(this.chessId!) : 0);
  const status = (this.status !== null ? this.status!.pack(builder) : 0);
  const upgradeChessId = (this.upgradeChessId !== null ? builder.createString(this.upgradeChessId!) : 0);
  const bondIds = clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.createBondIdsVector(builder, builder.createObjectOffsetList(this.bondIds));
  const garrisonIds = clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.createGarrisonIdsVector(builder, builder.createObjectOffsetList(this.garrisonIds));

  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.startclz_Torappu_ActAutoChessData_ActAutoChessCharChessData(builder);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addChessId(builder, chessId);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addIdentifier(builder, this.identifier);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addIsGolden(builder, this.isGolden);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addStatus(builder, status);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addUpgradeChessId(builder, upgradeChessId);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addUpgradeNum(builder, this.upgradeNum);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addBondIds(builder, bondIds);
  clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.addGarrisonIds(builder, garrisonIds);

  return clz_Torappu_ActAutoChessData_ActAutoChessCharChessData.endclz_Torappu_ActAutoChessData_ActAutoChessCharChessData(builder);
}
}
