// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_Act6FunAchievementRewardData implements flatbuffers.IUnpackableObject<clz_Torappu_Act6FunAchievementRewardDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_Act6FunAchievementRewardData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_Act6FunAchievementRewardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act6FunAchievementRewardData):clz_Torappu_Act6FunAchievementRewardData {
  return (obj || new clz_Torappu_Act6FunAchievementRewardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_Act6FunAchievementRewardData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_Act6FunAchievementRewardData):clz_Torappu_Act6FunAchievementRewardData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_Act6FunAchievementRewardData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

reward(obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

achievementCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_Act6FunAchievementRewardData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addReward(builder:flatbuffers.Builder, rewardOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rewardOffset, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(1, sortId, 0);
}

static addAchievementCount(builder:flatbuffers.Builder, achievementCount:number) {
  builder.addFieldInt32(2, achievementCount, 0);
}

static endclz_Torappu_Act6FunAchievementRewardData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_Act6FunAchievementRewardData(builder:flatbuffers.Builder, rewardOffset:flatbuffers.Offset, sortId:number, achievementCount:number):flatbuffers.Offset {
  clz_Torappu_Act6FunAchievementRewardData.startclz_Torappu_Act6FunAchievementRewardData(builder);
  clz_Torappu_Act6FunAchievementRewardData.addReward(builder, rewardOffset);
  clz_Torappu_Act6FunAchievementRewardData.addSortId(builder, sortId);
  clz_Torappu_Act6FunAchievementRewardData.addAchievementCount(builder, achievementCount);
  return clz_Torappu_Act6FunAchievementRewardData.endclz_Torappu_Act6FunAchievementRewardData(builder);
}

unpack(): clz_Torappu_Act6FunAchievementRewardDataT {
  return new clz_Torappu_Act6FunAchievementRewardDataT(
    (this.reward() !== null ? this.reward()!.unpack() : null),
    this.sortId(),
    this.achievementCount()
  );
}


unpackTo(_o: clz_Torappu_Act6FunAchievementRewardDataT): void {
  _o.reward = (this.reward() !== null ? this.reward()!.unpack() : null);
  _o.sortId = this.sortId();
  _o.achievementCount = this.achievementCount();
}
}

export class clz_Torappu_Act6FunAchievementRewardDataT implements flatbuffers.IGeneratedObject {
constructor(
  public reward: clz_Torappu_ItemBundleT|null = null,
  public sortId: number = 0,
  public achievementCount: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const reward = (this.reward !== null ? this.reward!.pack(builder) : 0);

  return clz_Torappu_Act6FunAchievementRewardData.createclz_Torappu_Act6FunAchievementRewardData(builder,
    reward,
    this.sortId,
    this.achievementCount
  );
}
}
