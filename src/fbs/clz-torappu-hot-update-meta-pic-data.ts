// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_HotUpdateMetaPicData_PicType } from './enum--torappu-hot-update-meta-pic-data-pic-type.js';


export class clz_Torappu_HotUpdateMetaPicData implements flatbuffers.IUnpackableObject<clz_Torappu_HotUpdateMetaPicDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_HotUpdateMetaPicData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_HotUpdateMetaPicData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HotUpdateMetaPicData):clz_Torappu_HotUpdateMetaPicData {
  return (obj || new clz_Torappu_HotUpdateMetaPicData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_HotUpdateMetaPicData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_HotUpdateMetaPicData):clz_Torappu_HotUpdateMetaPicData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_HotUpdateMetaPicData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

picId():string|null
picId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
picId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

startTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

endTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

textList(index: number):string
textList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
textList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

textListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

picType():enum__Torappu_HotUpdateMetaPicData_PicType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_HotUpdateMetaPicData_PicType.NONE;
}

logoId():string|null
logoId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logoId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_HotUpdateMetaPicData(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addPicId(builder:flatbuffers.Builder, picIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, picIdOffset, 0);
}

static addGroupId(builder:flatbuffers.Builder, groupId:number) {
  builder.addFieldInt32(1, groupId, 0);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(2, sortId, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTime:bigint) {
  builder.addFieldInt64(3, startTime, BigInt('0'));
}

static addEndTime(builder:flatbuffers.Builder, endTime:bigint) {
  builder.addFieldInt64(4, endTime, BigInt('0'));
}

static addTextList(builder:flatbuffers.Builder, textListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, textListOffset, 0);
}

static createTextListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTextListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPicType(builder:flatbuffers.Builder, picType:enum__Torappu_HotUpdateMetaPicData_PicType) {
  builder.addFieldInt32(6, picType, enum__Torappu_HotUpdateMetaPicData_PicType.NONE);
}

static addLogoId(builder:flatbuffers.Builder, logoIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, logoIdOffset, 0);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, colorOffset, 0);
}

static endclz_Torappu_HotUpdateMetaPicData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_HotUpdateMetaPicData(builder:flatbuffers.Builder, picIdOffset:flatbuffers.Offset, groupId:number, sortId:number, startTime:bigint, endTime:bigint, textListOffset:flatbuffers.Offset, picType:enum__Torappu_HotUpdateMetaPicData_PicType, logoIdOffset:flatbuffers.Offset, colorOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_HotUpdateMetaPicData.startclz_Torappu_HotUpdateMetaPicData(builder);
  clz_Torappu_HotUpdateMetaPicData.addPicId(builder, picIdOffset);
  clz_Torappu_HotUpdateMetaPicData.addGroupId(builder, groupId);
  clz_Torappu_HotUpdateMetaPicData.addSortId(builder, sortId);
  clz_Torappu_HotUpdateMetaPicData.addStartTime(builder, startTime);
  clz_Torappu_HotUpdateMetaPicData.addEndTime(builder, endTime);
  clz_Torappu_HotUpdateMetaPicData.addTextList(builder, textListOffset);
  clz_Torappu_HotUpdateMetaPicData.addPicType(builder, picType);
  clz_Torappu_HotUpdateMetaPicData.addLogoId(builder, logoIdOffset);
  clz_Torappu_HotUpdateMetaPicData.addColor(builder, colorOffset);
  return clz_Torappu_HotUpdateMetaPicData.endclz_Torappu_HotUpdateMetaPicData(builder);
}

unpack(): clz_Torappu_HotUpdateMetaPicDataT {
  return new clz_Torappu_HotUpdateMetaPicDataT(
    this.picId(),
    this.groupId(),
    this.sortId(),
    this.startTime(),
    this.endTime(),
    this.bb!.createScalarList<string>(this.textList.bind(this), this.textListLength()),
    this.picType(),
    this.logoId(),
    this.color()
  );
}


unpackTo(_o: clz_Torappu_HotUpdateMetaPicDataT): void {
  _o.picId = this.picId();
  _o.groupId = this.groupId();
  _o.sortId = this.sortId();
  _o.startTime = this.startTime();
  _o.endTime = this.endTime();
  _o.textList = this.bb!.createScalarList<string>(this.textList.bind(this), this.textListLength());
  _o.picType = this.picType();
  _o.logoId = this.logoId();
  _o.color = this.color();
}
}

export class clz_Torappu_HotUpdateMetaPicDataT implements flatbuffers.IGeneratedObject {
constructor(
  public picId: string|Uint8Array|null = null,
  public groupId: number = 0,
  public sortId: number = 0,
  public startTime: bigint = BigInt('0'),
  public endTime: bigint = BigInt('0'),
  public textList: (string)[] = [],
  public picType: enum__Torappu_HotUpdateMetaPicData_PicType = enum__Torappu_HotUpdateMetaPicData_PicType.NONE,
  public logoId: string|Uint8Array|null = null,
  public color: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const picId = (this.picId !== null ? builder.createString(this.picId!) : 0);
  const textList = clz_Torappu_HotUpdateMetaPicData.createTextListVector(builder, builder.createObjectOffsetList(this.textList));
  const logoId = (this.logoId !== null ? builder.createString(this.logoId!) : 0);
  const color = (this.color !== null ? builder.createString(this.color!) : 0);

  return clz_Torappu_HotUpdateMetaPicData.createclz_Torappu_HotUpdateMetaPicData(builder,
    picId,
    this.groupId,
    this.sortId,
    this.startTime,
    this.endTime,
    textList,
    this.picType,
    logoId,
    color
  );
}
}
