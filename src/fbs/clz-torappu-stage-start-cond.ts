// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_StageStartCond_RequireChar, clz_Torappu_StageStartCond_RequireCharT } from './clz-torappu-stage-start-cond-require-char.js';


export class clz_Torappu_StageStartCond implements flatbuffers.IUnpackableObject<clz_Torappu_StageStartCondT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_StageStartCond {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_StageStartCond(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StageStartCond):clz_Torappu_StageStartCond {
  return (obj || new clz_Torappu_StageStartCond()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_StageStartCond(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_StageStartCond):clz_Torappu_StageStartCond {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_StageStartCond()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

requireChars(index: number, obj?:clz_Torappu_StageStartCond_RequireChar):clz_Torappu_StageStartCond_RequireChar|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new clz_Torappu_StageStartCond_RequireChar()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

requireCharsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

excludeAssists(index: number):string
excludeAssists(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
excludeAssists(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

excludeAssistsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isNotPass():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_StageStartCond(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRequireChars(builder:flatbuffers.Builder, requireCharsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, requireCharsOffset, 0);
}

static createRequireCharsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequireCharsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addExcludeAssists(builder:flatbuffers.Builder, excludeAssistsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, excludeAssistsOffset, 0);
}

static createExcludeAssistsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExcludeAssistsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsNotPass(builder:flatbuffers.Builder, isNotPass:boolean) {
  builder.addFieldInt8(2, +isNotPass, +false);
}

static endclz_Torappu_StageStartCond(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_StageStartCond(builder:flatbuffers.Builder, requireCharsOffset:flatbuffers.Offset, excludeAssistsOffset:flatbuffers.Offset, isNotPass:boolean):flatbuffers.Offset {
  clz_Torappu_StageStartCond.startclz_Torappu_StageStartCond(builder);
  clz_Torappu_StageStartCond.addRequireChars(builder, requireCharsOffset);
  clz_Torappu_StageStartCond.addExcludeAssists(builder, excludeAssistsOffset);
  clz_Torappu_StageStartCond.addIsNotPass(builder, isNotPass);
  return clz_Torappu_StageStartCond.endclz_Torappu_StageStartCond(builder);
}

unpack(): clz_Torappu_StageStartCondT {
  return new clz_Torappu_StageStartCondT(
    this.bb!.createObjList<clz_Torappu_StageStartCond_RequireChar, clz_Torappu_StageStartCond_RequireCharT>(this.requireChars.bind(this), this.requireCharsLength()),
    this.bb!.createScalarList<string>(this.excludeAssists.bind(this), this.excludeAssistsLength()),
    this.isNotPass()
  );
}


unpackTo(_o: clz_Torappu_StageStartCondT): void {
  _o.requireChars = this.bb!.createObjList<clz_Torappu_StageStartCond_RequireChar, clz_Torappu_StageStartCond_RequireCharT>(this.requireChars.bind(this), this.requireCharsLength());
  _o.excludeAssists = this.bb!.createScalarList<string>(this.excludeAssists.bind(this), this.excludeAssistsLength());
  _o.isNotPass = this.isNotPass();
}
}

export class clz_Torappu_StageStartCondT implements flatbuffers.IGeneratedObject {
constructor(
  public requireChars: (clz_Torappu_StageStartCond_RequireCharT)[] = [],
  public excludeAssists: (string)[] = [],
  public isNotPass: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const requireChars = clz_Torappu_StageStartCond.createRequireCharsVector(builder, builder.createObjectOffsetList(this.requireChars));
  const excludeAssists = clz_Torappu_StageStartCond.createExcludeAssistsVector(builder, builder.createObjectOffsetList(this.excludeAssists));

  return clz_Torappu_StageStartCond.createclz_Torappu_StageStartCond(builder,
    requireChars,
    excludeAssists,
    this.isNotPass
  );
}
}
