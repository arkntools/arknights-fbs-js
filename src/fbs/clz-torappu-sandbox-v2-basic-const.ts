// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';
import { clz_Torappu_SandboxV2DiffModeData, clz_Torappu_SandboxV2DiffModeDataT } from './clz-torappu-sandbox-v2-diff-mode-data.js';
import { dict__string__string, dict__string__stringT } from './dict--string--string.js';


export class clz_Torappu_SandboxV2BasicConst implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2BasicConstT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2BasicConst {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2BasicConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2BasicConst):clz_Torappu_SandboxV2BasicConst {
  return (obj || new clz_Torappu_SandboxV2BasicConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2BasicConst(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2BasicConst):clz_Torappu_SandboxV2BasicConst {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2BasicConst()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

staminaItemId():string|null
staminaItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
staminaItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

goldItemId():string|null
goldItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
goldItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dimensioncoinItemId():string|null
dimensioncoinItemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dimensioncoinItemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

alwaysShowItemIdsConstruct(index: number):string
alwaysShowItemIdsConstruct(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alwaysShowItemIdsConstruct(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alwaysShowItemIdsConstructLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

alwaysShowItemIds(index: number):string
alwaysShowItemIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alwaysShowItemIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alwaysShowItemIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bagBottomBarResType(index: number):string
bagBottomBarResType(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
bagBottomBarResType(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

bagBottomBarResTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

failedCookFood():string|null
failedCookFood(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
failedCookFood(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxFoodDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

drinkCostOnce():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

drinkMakeLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

specialMatWater():string|null
specialMatWater(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
specialMatWater(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

workbenchMakeLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

logisticsPosLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

logisticsUnlockLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

logisticsDrinkCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

logisticsEvacuateTips():string|null
logisticsEvacuateTips(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logisticsEvacuateTips(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

logisticsEvacuateWarning():string|null
logisticsEvacuateWarning(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logisticsEvacuateWarning(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

baseRepairCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

portRepairCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unitFenceLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unitRareFenceLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

cageId():string|null
cageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fenceId():string|null
fenceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fenceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rareFenceId():string|null
rareFenceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rareFenceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

monthlyRushEntryText1():string|null
monthlyRushEntryText1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
monthlyRushEntryText1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

monthlyEntryUnlockText():string|null
monthlyEntryUnlockText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
monthlyEntryUnlockText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

monthlyEntryRiftText():string|null
monthlyEntryRiftText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
monthlyEntryRiftText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

monthlyRushIntro():string|null
monthlyRushIntro(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
monthlyRushIntro(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

monthlyCoin(obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

charRarityColorList(index: number):string
charRarityColorList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
charRarityColorList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

charRarityColorListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

squadCharCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

totalSquadCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

toolboxCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

toolCntLimitInSquad():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

miniSquadCharCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

miniSquadDrinkCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

normalSquadDrinkCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

emptySquadDrinkCost():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

achieveTypeAll():string|null
achieveTypeAll(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
achieveTypeAll(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

constructModeBgmHome():string|null
constructModeBgmHome(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
constructModeBgmHome(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleBgmCollect():string|null
battleBgmCollect(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleBgmCollect(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleBgmHunt():string|null
battleBgmHunt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleBgmHunt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleBgmEnemyRush():string|null
battleBgmEnemyRush(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleBgmEnemyRush(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

battleBgmBossRush():string|null
battleBgmBossRush(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
battleBgmBossRush(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

imgLoadingNormalName():string|null
imgLoadingNormalName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imgLoadingNormalName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

imgLoadingBaseName():string|null
imgLoadingBaseName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imgLoadingBaseName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

imgUnloadingBaseName():string|null
imgUnloadingBaseName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imgUnloadingBaseName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isChallengeOpen():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRacingOpen():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hasExploreMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

exploreModeBuffDescs(index: number):string
exploreModeBuffDescs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
exploreModeBuffDescs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

exploreModeBuffDescsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

modeSelectTips():string|null
modeSelectTips(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modeSelectTips(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stringRes(index: number, obj?:dict__string__string):dict__string__string|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? (obj || new dict__string__string()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stringResLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

diffList(index: number, obj?:clz_Torappu_SandboxV2DiffModeData):clz_Torappu_SandboxV2DiffModeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? (obj || new clz_Torappu_SandboxV2DiffModeData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

diffListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

battlePreloadEnemies(index: number):string
battlePreloadEnemies(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
battlePreloadEnemies(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

battlePreloadEnemiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

battleExcludedTrapsInRush(index: number):string
battleExcludedTrapsInRush(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
battleExcludedTrapsInRush(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

battleExcludedTrapsInRushLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_SandboxV2BasicConst(builder:flatbuffers.Builder) {
  builder.startObject(56);
}

static addStaminaItemId(builder:flatbuffers.Builder, staminaItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, staminaItemIdOffset, 0);
}

static addGoldItemId(builder:flatbuffers.Builder, goldItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, goldItemIdOffset, 0);
}

static addDimensioncoinItemId(builder:flatbuffers.Builder, dimensioncoinItemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dimensioncoinItemIdOffset, 0);
}

static addAlwaysShowItemIdsConstruct(builder:flatbuffers.Builder, alwaysShowItemIdsConstructOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, alwaysShowItemIdsConstructOffset, 0);
}

static createAlwaysShowItemIdsConstructVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlwaysShowItemIdsConstructVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAlwaysShowItemIds(builder:flatbuffers.Builder, alwaysShowItemIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, alwaysShowItemIdsOffset, 0);
}

static createAlwaysShowItemIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlwaysShowItemIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBagBottomBarResType(builder:flatbuffers.Builder, bagBottomBarResTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, bagBottomBarResTypeOffset, 0);
}

static createBagBottomBarResTypeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBagBottomBarResTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFailedCookFood(builder:flatbuffers.Builder, failedCookFoodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, failedCookFoodOffset, 0);
}

static addMaxFoodDuration(builder:flatbuffers.Builder, maxFoodDuration:number) {
  builder.addFieldInt32(7, maxFoodDuration, 0);
}

static addDrinkCostOnce(builder:flatbuffers.Builder, drinkCostOnce:number) {
  builder.addFieldInt32(8, drinkCostOnce, 0);
}

static addDrinkMakeLimit(builder:flatbuffers.Builder, drinkMakeLimit:number) {
  builder.addFieldInt32(9, drinkMakeLimit, 0);
}

static addSpecialMatWater(builder:flatbuffers.Builder, specialMatWaterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, specialMatWaterOffset, 0);
}

static addWorkbenchMakeLimit(builder:flatbuffers.Builder, workbenchMakeLimit:number) {
  builder.addFieldInt32(11, workbenchMakeLimit, 0);
}

static addLogisticsPosLimit(builder:flatbuffers.Builder, logisticsPosLimit:number) {
  builder.addFieldInt32(12, logisticsPosLimit, 0);
}

static addLogisticsUnlockLevel(builder:flatbuffers.Builder, logisticsUnlockLevel:number) {
  builder.addFieldInt32(13, logisticsUnlockLevel, 0);
}

static addLogisticsDrinkCost(builder:flatbuffers.Builder, logisticsDrinkCost:number) {
  builder.addFieldInt32(14, logisticsDrinkCost, 0);
}

static addLogisticsEvacuateTips(builder:flatbuffers.Builder, logisticsEvacuateTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, logisticsEvacuateTipsOffset, 0);
}

static addLogisticsEvacuateWarning(builder:flatbuffers.Builder, logisticsEvacuateWarningOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, logisticsEvacuateWarningOffset, 0);
}

static addBaseRepairCost(builder:flatbuffers.Builder, baseRepairCost:number) {
  builder.addFieldInt32(17, baseRepairCost, 0);
}

static addPortRepairCost(builder:flatbuffers.Builder, portRepairCost:number) {
  builder.addFieldInt32(18, portRepairCost, 0);
}

static addUnitFenceLimit(builder:flatbuffers.Builder, unitFenceLimit:number) {
  builder.addFieldInt32(19, unitFenceLimit, 0);
}

static addUnitRareFenceLimit(builder:flatbuffers.Builder, unitRareFenceLimit:number) {
  builder.addFieldInt32(20, unitRareFenceLimit, 0);
}

static addCageId(builder:flatbuffers.Builder, cageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, cageIdOffset, 0);
}

static addFenceId(builder:flatbuffers.Builder, fenceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, fenceIdOffset, 0);
}

static addRareFenceId(builder:flatbuffers.Builder, rareFenceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, rareFenceIdOffset, 0);
}

static addMonthlyRushEntryText1(builder:flatbuffers.Builder, monthlyRushEntryText1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(24, monthlyRushEntryText1Offset, 0);
}

static addMonthlyEntryUnlockText(builder:flatbuffers.Builder, monthlyEntryUnlockTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, monthlyEntryUnlockTextOffset, 0);
}

static addMonthlyEntryRiftText(builder:flatbuffers.Builder, monthlyEntryRiftTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, monthlyEntryRiftTextOffset, 0);
}

static addMonthlyRushIntro(builder:flatbuffers.Builder, monthlyRushIntroOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, monthlyRushIntroOffset, 0);
}

static addMonthlyCoin(builder:flatbuffers.Builder, monthlyCoinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, monthlyCoinOffset, 0);
}

static addCharRarityColorList(builder:flatbuffers.Builder, charRarityColorListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, charRarityColorListOffset, 0);
}

static createCharRarityColorListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCharRarityColorListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSquadCharCapacity(builder:flatbuffers.Builder, squadCharCapacity:number) {
  builder.addFieldInt32(30, squadCharCapacity, 0);
}

static addTotalSquadCnt(builder:flatbuffers.Builder, totalSquadCnt:number) {
  builder.addFieldInt32(31, totalSquadCnt, 0);
}

static addToolboxCapacity(builder:flatbuffers.Builder, toolboxCapacity:number) {
  builder.addFieldInt32(32, toolboxCapacity, 0);
}

static addToolCntLimitInSquad(builder:flatbuffers.Builder, toolCntLimitInSquad:number) {
  builder.addFieldInt32(33, toolCntLimitInSquad, 0);
}

static addMiniSquadCharCapacity(builder:flatbuffers.Builder, miniSquadCharCapacity:number) {
  builder.addFieldInt32(34, miniSquadCharCapacity, 0);
}

static addMiniSquadDrinkCost(builder:flatbuffers.Builder, miniSquadDrinkCost:number) {
  builder.addFieldInt32(35, miniSquadDrinkCost, 0);
}

static addNormalSquadDrinkCost(builder:flatbuffers.Builder, normalSquadDrinkCost:number) {
  builder.addFieldInt32(36, normalSquadDrinkCost, 0);
}

static addEmptySquadDrinkCost(builder:flatbuffers.Builder, emptySquadDrinkCost:number) {
  builder.addFieldInt32(37, emptySquadDrinkCost, 0);
}

static addAchieveTypeAll(builder:flatbuffers.Builder, achieveTypeAllOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, achieveTypeAllOffset, 0);
}

static addConstructModeBgmHome(builder:flatbuffers.Builder, constructModeBgmHomeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, constructModeBgmHomeOffset, 0);
}

static addBattleBgmCollect(builder:flatbuffers.Builder, battleBgmCollectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, battleBgmCollectOffset, 0);
}

static addBattleBgmHunt(builder:flatbuffers.Builder, battleBgmHuntOffset:flatbuffers.Offset) {
  builder.addFieldOffset(41, battleBgmHuntOffset, 0);
}

static addBattleBgmEnemyRush(builder:flatbuffers.Builder, battleBgmEnemyRushOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, battleBgmEnemyRushOffset, 0);
}

static addBattleBgmBossRush(builder:flatbuffers.Builder, battleBgmBossRushOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, battleBgmBossRushOffset, 0);
}

static addImgLoadingNormalName(builder:flatbuffers.Builder, imgLoadingNormalNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, imgLoadingNormalNameOffset, 0);
}

static addImgLoadingBaseName(builder:flatbuffers.Builder, imgLoadingBaseNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, imgLoadingBaseNameOffset, 0);
}

static addImgUnloadingBaseName(builder:flatbuffers.Builder, imgUnloadingBaseNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, imgUnloadingBaseNameOffset, 0);
}

static addIsChallengeOpen(builder:flatbuffers.Builder, isChallengeOpen:boolean) {
  builder.addFieldInt8(47, +isChallengeOpen, +false);
}

static addIsRacingOpen(builder:flatbuffers.Builder, isRacingOpen:boolean) {
  builder.addFieldInt8(48, +isRacingOpen, +false);
}

static addHasExploreMode(builder:flatbuffers.Builder, hasExploreMode:boolean) {
  builder.addFieldInt8(49, +hasExploreMode, +false);
}

static addExploreModeBuffDescs(builder:flatbuffers.Builder, exploreModeBuffDescsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, exploreModeBuffDescsOffset, 0);
}

static createExploreModeBuffDescsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExploreModeBuffDescsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addModeSelectTips(builder:flatbuffers.Builder, modeSelectTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, modeSelectTipsOffset, 0);
}

static addStringRes(builder:flatbuffers.Builder, stringResOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, stringResOffset, 0);
}

static createStringResVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStringResVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDiffList(builder:flatbuffers.Builder, diffListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, diffListOffset, 0);
}

static createDiffListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDiffListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBattlePreloadEnemies(builder:flatbuffers.Builder, battlePreloadEnemiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, battlePreloadEnemiesOffset, 0);
}

static createBattlePreloadEnemiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBattlePreloadEnemiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBattleExcludedTrapsInRush(builder:flatbuffers.Builder, battleExcludedTrapsInRushOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, battleExcludedTrapsInRushOffset, 0);
}

static createBattleExcludedTrapsInRushVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBattleExcludedTrapsInRushVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_SandboxV2BasicConst(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_SandboxV2BasicConstT {
  return new clz_Torappu_SandboxV2BasicConstT(
    this.staminaItemId(),
    this.goldItemId(),
    this.dimensioncoinItemId(),
    this.bb!.createScalarList<string>(this.alwaysShowItemIdsConstruct.bind(this), this.alwaysShowItemIdsConstructLength()),
    this.bb!.createScalarList<string>(this.alwaysShowItemIds.bind(this), this.alwaysShowItemIdsLength()),
    this.bb!.createScalarList<string>(this.bagBottomBarResType.bind(this), this.bagBottomBarResTypeLength()),
    this.failedCookFood(),
    this.maxFoodDuration(),
    this.drinkCostOnce(),
    this.drinkMakeLimit(),
    this.specialMatWater(),
    this.workbenchMakeLimit(),
    this.logisticsPosLimit(),
    this.logisticsUnlockLevel(),
    this.logisticsDrinkCost(),
    this.logisticsEvacuateTips(),
    this.logisticsEvacuateWarning(),
    this.baseRepairCost(),
    this.portRepairCost(),
    this.unitFenceLimit(),
    this.unitRareFenceLimit(),
    this.cageId(),
    this.fenceId(),
    this.rareFenceId(),
    this.monthlyRushEntryText1(),
    this.monthlyEntryUnlockText(),
    this.monthlyEntryRiftText(),
    this.monthlyRushIntro(),
    (this.monthlyCoin() !== null ? this.monthlyCoin()!.unpack() : null),
    this.bb!.createScalarList<string>(this.charRarityColorList.bind(this), this.charRarityColorListLength()),
    this.squadCharCapacity(),
    this.totalSquadCnt(),
    this.toolboxCapacity(),
    this.toolCntLimitInSquad(),
    this.miniSquadCharCapacity(),
    this.miniSquadDrinkCost(),
    this.normalSquadDrinkCost(),
    this.emptySquadDrinkCost(),
    this.achieveTypeAll(),
    this.constructModeBgmHome(),
    this.battleBgmCollect(),
    this.battleBgmHunt(),
    this.battleBgmEnemyRush(),
    this.battleBgmBossRush(),
    this.imgLoadingNormalName(),
    this.imgLoadingBaseName(),
    this.imgUnloadingBaseName(),
    this.isChallengeOpen(),
    this.isRacingOpen(),
    this.hasExploreMode(),
    this.bb!.createScalarList<string>(this.exploreModeBuffDescs.bind(this), this.exploreModeBuffDescsLength()),
    this.modeSelectTips(),
    this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.stringRes.bind(this), this.stringResLength()),
    this.bb!.createObjList<clz_Torappu_SandboxV2DiffModeData, clz_Torappu_SandboxV2DiffModeDataT>(this.diffList.bind(this), this.diffListLength()),
    this.bb!.createScalarList<string>(this.battlePreloadEnemies.bind(this), this.battlePreloadEnemiesLength()),
    this.bb!.createScalarList<string>(this.battleExcludedTrapsInRush.bind(this), this.battleExcludedTrapsInRushLength())
  );
}


unpackTo(_o: clz_Torappu_SandboxV2BasicConstT): void {
  _o.staminaItemId = this.staminaItemId();
  _o.goldItemId = this.goldItemId();
  _o.dimensioncoinItemId = this.dimensioncoinItemId();
  _o.alwaysShowItemIdsConstruct = this.bb!.createScalarList<string>(this.alwaysShowItemIdsConstruct.bind(this), this.alwaysShowItemIdsConstructLength());
  _o.alwaysShowItemIds = this.bb!.createScalarList<string>(this.alwaysShowItemIds.bind(this), this.alwaysShowItemIdsLength());
  _o.bagBottomBarResType = this.bb!.createScalarList<string>(this.bagBottomBarResType.bind(this), this.bagBottomBarResTypeLength());
  _o.failedCookFood = this.failedCookFood();
  _o.maxFoodDuration = this.maxFoodDuration();
  _o.drinkCostOnce = this.drinkCostOnce();
  _o.drinkMakeLimit = this.drinkMakeLimit();
  _o.specialMatWater = this.specialMatWater();
  _o.workbenchMakeLimit = this.workbenchMakeLimit();
  _o.logisticsPosLimit = this.logisticsPosLimit();
  _o.logisticsUnlockLevel = this.logisticsUnlockLevel();
  _o.logisticsDrinkCost = this.logisticsDrinkCost();
  _o.logisticsEvacuateTips = this.logisticsEvacuateTips();
  _o.logisticsEvacuateWarning = this.logisticsEvacuateWarning();
  _o.baseRepairCost = this.baseRepairCost();
  _o.portRepairCost = this.portRepairCost();
  _o.unitFenceLimit = this.unitFenceLimit();
  _o.unitRareFenceLimit = this.unitRareFenceLimit();
  _o.cageId = this.cageId();
  _o.fenceId = this.fenceId();
  _o.rareFenceId = this.rareFenceId();
  _o.monthlyRushEntryText1 = this.monthlyRushEntryText1();
  _o.monthlyEntryUnlockText = this.monthlyEntryUnlockText();
  _o.monthlyEntryRiftText = this.monthlyEntryRiftText();
  _o.monthlyRushIntro = this.monthlyRushIntro();
  _o.monthlyCoin = (this.monthlyCoin() !== null ? this.monthlyCoin()!.unpack() : null);
  _o.charRarityColorList = this.bb!.createScalarList<string>(this.charRarityColorList.bind(this), this.charRarityColorListLength());
  _o.squadCharCapacity = this.squadCharCapacity();
  _o.totalSquadCnt = this.totalSquadCnt();
  _o.toolboxCapacity = this.toolboxCapacity();
  _o.toolCntLimitInSquad = this.toolCntLimitInSquad();
  _o.miniSquadCharCapacity = this.miniSquadCharCapacity();
  _o.miniSquadDrinkCost = this.miniSquadDrinkCost();
  _o.normalSquadDrinkCost = this.normalSquadDrinkCost();
  _o.emptySquadDrinkCost = this.emptySquadDrinkCost();
  _o.achieveTypeAll = this.achieveTypeAll();
  _o.constructModeBgmHome = this.constructModeBgmHome();
  _o.battleBgmCollect = this.battleBgmCollect();
  _o.battleBgmHunt = this.battleBgmHunt();
  _o.battleBgmEnemyRush = this.battleBgmEnemyRush();
  _o.battleBgmBossRush = this.battleBgmBossRush();
  _o.imgLoadingNormalName = this.imgLoadingNormalName();
  _o.imgLoadingBaseName = this.imgLoadingBaseName();
  _o.imgUnloadingBaseName = this.imgUnloadingBaseName();
  _o.isChallengeOpen = this.isChallengeOpen();
  _o.isRacingOpen = this.isRacingOpen();
  _o.hasExploreMode = this.hasExploreMode();
  _o.exploreModeBuffDescs = this.bb!.createScalarList<string>(this.exploreModeBuffDescs.bind(this), this.exploreModeBuffDescsLength());
  _o.modeSelectTips = this.modeSelectTips();
  _o.stringRes = this.bb!.createObjList<dict__string__string, dict__string__stringT>(this.stringRes.bind(this), this.stringResLength());
  _o.diffList = this.bb!.createObjList<clz_Torappu_SandboxV2DiffModeData, clz_Torappu_SandboxV2DiffModeDataT>(this.diffList.bind(this), this.diffListLength());
  _o.battlePreloadEnemies = this.bb!.createScalarList<string>(this.battlePreloadEnemies.bind(this), this.battlePreloadEnemiesLength());
  _o.battleExcludedTrapsInRush = this.bb!.createScalarList<string>(this.battleExcludedTrapsInRush.bind(this), this.battleExcludedTrapsInRushLength());
}
}

export class clz_Torappu_SandboxV2BasicConstT implements flatbuffers.IGeneratedObject {
constructor(
  public staminaItemId: string|Uint8Array|null = null,
  public goldItemId: string|Uint8Array|null = null,
  public dimensioncoinItemId: string|Uint8Array|null = null,
  public alwaysShowItemIdsConstruct: (string)[] = [],
  public alwaysShowItemIds: (string)[] = [],
  public bagBottomBarResType: (string)[] = [],
  public failedCookFood: string|Uint8Array|null = null,
  public maxFoodDuration: number = 0,
  public drinkCostOnce: number = 0,
  public drinkMakeLimit: number = 0,
  public specialMatWater: string|Uint8Array|null = null,
  public workbenchMakeLimit: number = 0,
  public logisticsPosLimit: number = 0,
  public logisticsUnlockLevel: number = 0,
  public logisticsDrinkCost: number = 0,
  public logisticsEvacuateTips: string|Uint8Array|null = null,
  public logisticsEvacuateWarning: string|Uint8Array|null = null,
  public baseRepairCost: number = 0,
  public portRepairCost: number = 0,
  public unitFenceLimit: number = 0,
  public unitRareFenceLimit: number = 0,
  public cageId: string|Uint8Array|null = null,
  public fenceId: string|Uint8Array|null = null,
  public rareFenceId: string|Uint8Array|null = null,
  public monthlyRushEntryText1: string|Uint8Array|null = null,
  public monthlyEntryUnlockText: string|Uint8Array|null = null,
  public monthlyEntryRiftText: string|Uint8Array|null = null,
  public monthlyRushIntro: string|Uint8Array|null = null,
  public monthlyCoin: clz_Torappu_ItemBundleT|null = null,
  public charRarityColorList: (string)[] = [],
  public squadCharCapacity: number = 0,
  public totalSquadCnt: number = 0,
  public toolboxCapacity: number = 0,
  public toolCntLimitInSquad: number = 0,
  public miniSquadCharCapacity: number = 0,
  public miniSquadDrinkCost: number = 0,
  public normalSquadDrinkCost: number = 0,
  public emptySquadDrinkCost: number = 0,
  public achieveTypeAll: string|Uint8Array|null = null,
  public constructModeBgmHome: string|Uint8Array|null = null,
  public battleBgmCollect: string|Uint8Array|null = null,
  public battleBgmHunt: string|Uint8Array|null = null,
  public battleBgmEnemyRush: string|Uint8Array|null = null,
  public battleBgmBossRush: string|Uint8Array|null = null,
  public imgLoadingNormalName: string|Uint8Array|null = null,
  public imgLoadingBaseName: string|Uint8Array|null = null,
  public imgUnloadingBaseName: string|Uint8Array|null = null,
  public isChallengeOpen: boolean = false,
  public isRacingOpen: boolean = false,
  public hasExploreMode: boolean = false,
  public exploreModeBuffDescs: (string)[] = [],
  public modeSelectTips: string|Uint8Array|null = null,
  public stringRes: (dict__string__stringT)[] = [],
  public diffList: (clz_Torappu_SandboxV2DiffModeDataT)[] = [],
  public battlePreloadEnemies: (string)[] = [],
  public battleExcludedTrapsInRush: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const staminaItemId = (this.staminaItemId !== null ? builder.createString(this.staminaItemId!) : 0);
  const goldItemId = (this.goldItemId !== null ? builder.createString(this.goldItemId!) : 0);
  const dimensioncoinItemId = (this.dimensioncoinItemId !== null ? builder.createString(this.dimensioncoinItemId!) : 0);
  const alwaysShowItemIdsConstruct = clz_Torappu_SandboxV2BasicConst.createAlwaysShowItemIdsConstructVector(builder, builder.createObjectOffsetList(this.alwaysShowItemIdsConstruct));
  const alwaysShowItemIds = clz_Torappu_SandboxV2BasicConst.createAlwaysShowItemIdsVector(builder, builder.createObjectOffsetList(this.alwaysShowItemIds));
  const bagBottomBarResType = clz_Torappu_SandboxV2BasicConst.createBagBottomBarResTypeVector(builder, builder.createObjectOffsetList(this.bagBottomBarResType));
  const failedCookFood = (this.failedCookFood !== null ? builder.createString(this.failedCookFood!) : 0);
  const specialMatWater = (this.specialMatWater !== null ? builder.createString(this.specialMatWater!) : 0);
  const logisticsEvacuateTips = (this.logisticsEvacuateTips !== null ? builder.createString(this.logisticsEvacuateTips!) : 0);
  const logisticsEvacuateWarning = (this.logisticsEvacuateWarning !== null ? builder.createString(this.logisticsEvacuateWarning!) : 0);
  const cageId = (this.cageId !== null ? builder.createString(this.cageId!) : 0);
  const fenceId = (this.fenceId !== null ? builder.createString(this.fenceId!) : 0);
  const rareFenceId = (this.rareFenceId !== null ? builder.createString(this.rareFenceId!) : 0);
  const monthlyRushEntryText1 = (this.monthlyRushEntryText1 !== null ? builder.createString(this.monthlyRushEntryText1!) : 0);
  const monthlyEntryUnlockText = (this.monthlyEntryUnlockText !== null ? builder.createString(this.monthlyEntryUnlockText!) : 0);
  const monthlyEntryRiftText = (this.monthlyEntryRiftText !== null ? builder.createString(this.monthlyEntryRiftText!) : 0);
  const monthlyRushIntro = (this.monthlyRushIntro !== null ? builder.createString(this.monthlyRushIntro!) : 0);
  const monthlyCoin = (this.monthlyCoin !== null ? this.monthlyCoin!.pack(builder) : 0);
  const charRarityColorList = clz_Torappu_SandboxV2BasicConst.createCharRarityColorListVector(builder, builder.createObjectOffsetList(this.charRarityColorList));
  const achieveTypeAll = (this.achieveTypeAll !== null ? builder.createString(this.achieveTypeAll!) : 0);
  const constructModeBgmHome = (this.constructModeBgmHome !== null ? builder.createString(this.constructModeBgmHome!) : 0);
  const battleBgmCollect = (this.battleBgmCollect !== null ? builder.createString(this.battleBgmCollect!) : 0);
  const battleBgmHunt = (this.battleBgmHunt !== null ? builder.createString(this.battleBgmHunt!) : 0);
  const battleBgmEnemyRush = (this.battleBgmEnemyRush !== null ? builder.createString(this.battleBgmEnemyRush!) : 0);
  const battleBgmBossRush = (this.battleBgmBossRush !== null ? builder.createString(this.battleBgmBossRush!) : 0);
  const imgLoadingNormalName = (this.imgLoadingNormalName !== null ? builder.createString(this.imgLoadingNormalName!) : 0);
  const imgLoadingBaseName = (this.imgLoadingBaseName !== null ? builder.createString(this.imgLoadingBaseName!) : 0);
  const imgUnloadingBaseName = (this.imgUnloadingBaseName !== null ? builder.createString(this.imgUnloadingBaseName!) : 0);
  const exploreModeBuffDescs = clz_Torappu_SandboxV2BasicConst.createExploreModeBuffDescsVector(builder, builder.createObjectOffsetList(this.exploreModeBuffDescs));
  const modeSelectTips = (this.modeSelectTips !== null ? builder.createString(this.modeSelectTips!) : 0);
  const stringRes = clz_Torappu_SandboxV2BasicConst.createStringResVector(builder, builder.createObjectOffsetList(this.stringRes));
  const diffList = clz_Torappu_SandboxV2BasicConst.createDiffListVector(builder, builder.createObjectOffsetList(this.diffList));
  const battlePreloadEnemies = clz_Torappu_SandboxV2BasicConst.createBattlePreloadEnemiesVector(builder, builder.createObjectOffsetList(this.battlePreloadEnemies));
  const battleExcludedTrapsInRush = clz_Torappu_SandboxV2BasicConst.createBattleExcludedTrapsInRushVector(builder, builder.createObjectOffsetList(this.battleExcludedTrapsInRush));

  clz_Torappu_SandboxV2BasicConst.startclz_Torappu_SandboxV2BasicConst(builder);
  clz_Torappu_SandboxV2BasicConst.addStaminaItemId(builder, staminaItemId);
  clz_Torappu_SandboxV2BasicConst.addGoldItemId(builder, goldItemId);
  clz_Torappu_SandboxV2BasicConst.addDimensioncoinItemId(builder, dimensioncoinItemId);
  clz_Torappu_SandboxV2BasicConst.addAlwaysShowItemIdsConstruct(builder, alwaysShowItemIdsConstruct);
  clz_Torappu_SandboxV2BasicConst.addAlwaysShowItemIds(builder, alwaysShowItemIds);
  clz_Torappu_SandboxV2BasicConst.addBagBottomBarResType(builder, bagBottomBarResType);
  clz_Torappu_SandboxV2BasicConst.addFailedCookFood(builder, failedCookFood);
  clz_Torappu_SandboxV2BasicConst.addMaxFoodDuration(builder, this.maxFoodDuration);
  clz_Torappu_SandboxV2BasicConst.addDrinkCostOnce(builder, this.drinkCostOnce);
  clz_Torappu_SandboxV2BasicConst.addDrinkMakeLimit(builder, this.drinkMakeLimit);
  clz_Torappu_SandboxV2BasicConst.addSpecialMatWater(builder, specialMatWater);
  clz_Torappu_SandboxV2BasicConst.addWorkbenchMakeLimit(builder, this.workbenchMakeLimit);
  clz_Torappu_SandboxV2BasicConst.addLogisticsPosLimit(builder, this.logisticsPosLimit);
  clz_Torappu_SandboxV2BasicConst.addLogisticsUnlockLevel(builder, this.logisticsUnlockLevel);
  clz_Torappu_SandboxV2BasicConst.addLogisticsDrinkCost(builder, this.logisticsDrinkCost);
  clz_Torappu_SandboxV2BasicConst.addLogisticsEvacuateTips(builder, logisticsEvacuateTips);
  clz_Torappu_SandboxV2BasicConst.addLogisticsEvacuateWarning(builder, logisticsEvacuateWarning);
  clz_Torappu_SandboxV2BasicConst.addBaseRepairCost(builder, this.baseRepairCost);
  clz_Torappu_SandboxV2BasicConst.addPortRepairCost(builder, this.portRepairCost);
  clz_Torappu_SandboxV2BasicConst.addUnitFenceLimit(builder, this.unitFenceLimit);
  clz_Torappu_SandboxV2BasicConst.addUnitRareFenceLimit(builder, this.unitRareFenceLimit);
  clz_Torappu_SandboxV2BasicConst.addCageId(builder, cageId);
  clz_Torappu_SandboxV2BasicConst.addFenceId(builder, fenceId);
  clz_Torappu_SandboxV2BasicConst.addRareFenceId(builder, rareFenceId);
  clz_Torappu_SandboxV2BasicConst.addMonthlyRushEntryText1(builder, monthlyRushEntryText1);
  clz_Torappu_SandboxV2BasicConst.addMonthlyEntryUnlockText(builder, monthlyEntryUnlockText);
  clz_Torappu_SandboxV2BasicConst.addMonthlyEntryRiftText(builder, monthlyEntryRiftText);
  clz_Torappu_SandboxV2BasicConst.addMonthlyRushIntro(builder, monthlyRushIntro);
  clz_Torappu_SandboxV2BasicConst.addMonthlyCoin(builder, monthlyCoin);
  clz_Torappu_SandboxV2BasicConst.addCharRarityColorList(builder, charRarityColorList);
  clz_Torappu_SandboxV2BasicConst.addSquadCharCapacity(builder, this.squadCharCapacity);
  clz_Torappu_SandboxV2BasicConst.addTotalSquadCnt(builder, this.totalSquadCnt);
  clz_Torappu_SandboxV2BasicConst.addToolboxCapacity(builder, this.toolboxCapacity);
  clz_Torappu_SandboxV2BasicConst.addToolCntLimitInSquad(builder, this.toolCntLimitInSquad);
  clz_Torappu_SandboxV2BasicConst.addMiniSquadCharCapacity(builder, this.miniSquadCharCapacity);
  clz_Torappu_SandboxV2BasicConst.addMiniSquadDrinkCost(builder, this.miniSquadDrinkCost);
  clz_Torappu_SandboxV2BasicConst.addNormalSquadDrinkCost(builder, this.normalSquadDrinkCost);
  clz_Torappu_SandboxV2BasicConst.addEmptySquadDrinkCost(builder, this.emptySquadDrinkCost);
  clz_Torappu_SandboxV2BasicConst.addAchieveTypeAll(builder, achieveTypeAll);
  clz_Torappu_SandboxV2BasicConst.addConstructModeBgmHome(builder, constructModeBgmHome);
  clz_Torappu_SandboxV2BasicConst.addBattleBgmCollect(builder, battleBgmCollect);
  clz_Torappu_SandboxV2BasicConst.addBattleBgmHunt(builder, battleBgmHunt);
  clz_Torappu_SandboxV2BasicConst.addBattleBgmEnemyRush(builder, battleBgmEnemyRush);
  clz_Torappu_SandboxV2BasicConst.addBattleBgmBossRush(builder, battleBgmBossRush);
  clz_Torappu_SandboxV2BasicConst.addImgLoadingNormalName(builder, imgLoadingNormalName);
  clz_Torappu_SandboxV2BasicConst.addImgLoadingBaseName(builder, imgLoadingBaseName);
  clz_Torappu_SandboxV2BasicConst.addImgUnloadingBaseName(builder, imgUnloadingBaseName);
  clz_Torappu_SandboxV2BasicConst.addIsChallengeOpen(builder, this.isChallengeOpen);
  clz_Torappu_SandboxV2BasicConst.addIsRacingOpen(builder, this.isRacingOpen);
  clz_Torappu_SandboxV2BasicConst.addHasExploreMode(builder, this.hasExploreMode);
  clz_Torappu_SandboxV2BasicConst.addExploreModeBuffDescs(builder, exploreModeBuffDescs);
  clz_Torappu_SandboxV2BasicConst.addModeSelectTips(builder, modeSelectTips);
  clz_Torappu_SandboxV2BasicConst.addStringRes(builder, stringRes);
  clz_Torappu_SandboxV2BasicConst.addDiffList(builder, diffList);
  clz_Torappu_SandboxV2BasicConst.addBattlePreloadEnemies(builder, battlePreloadEnemies);
  clz_Torappu_SandboxV2BasicConst.addBattleExcludedTrapsInRush(builder, battleExcludedTrapsInRush);

  return clz_Torappu_SandboxV2BasicConst.endclz_Torappu_SandboxV2BasicConst(builder);
}
}
