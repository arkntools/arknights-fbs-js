// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_AutoChessData_AutoChessTurnInfoData implements flatbuffers.IUnpackableObject<clz_Torappu_AutoChessData_AutoChessTurnInfoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AutoChessData_AutoChessTurnInfoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AutoChessData_AutoChessTurnInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessTurnInfoData):clz_Torappu_AutoChessData_AutoChessTurnInfoData {
  return (obj || new clz_Torappu_AutoChessData_AutoChessTurnInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AutoChessData_AutoChessTurnInfoData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AutoChessData_AutoChessTurnInfoData):clz_Torappu_AutoChessData_AutoChessTurnInfoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AutoChessData_AutoChessTurnInfoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

normalPhaseTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isBossTurn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bossTurnHpReduceTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_AutoChessData_AutoChessTurnInfoData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt32(0, round, 0);
}

static addNormalPhaseTime(builder:flatbuffers.Builder, normalPhaseTime:number) {
  builder.addFieldInt32(1, normalPhaseTime, 0);
}

static addIsBossTurn(builder:flatbuffers.Builder, isBossTurn:boolean) {
  builder.addFieldInt8(2, +isBossTurn, +false);
}

static addBossTurnHpReduceTime(builder:flatbuffers.Builder, bossTurnHpReduceTime:number) {
  builder.addFieldInt32(3, bossTurnHpReduceTime, 0);
}

static endclz_Torappu_AutoChessData_AutoChessTurnInfoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AutoChessData_AutoChessTurnInfoData(builder:flatbuffers.Builder, round:number, normalPhaseTime:number, isBossTurn:boolean, bossTurnHpReduceTime:number):flatbuffers.Offset {
  clz_Torappu_AutoChessData_AutoChessTurnInfoData.startclz_Torappu_AutoChessData_AutoChessTurnInfoData(builder);
  clz_Torappu_AutoChessData_AutoChessTurnInfoData.addRound(builder, round);
  clz_Torappu_AutoChessData_AutoChessTurnInfoData.addNormalPhaseTime(builder, normalPhaseTime);
  clz_Torappu_AutoChessData_AutoChessTurnInfoData.addIsBossTurn(builder, isBossTurn);
  clz_Torappu_AutoChessData_AutoChessTurnInfoData.addBossTurnHpReduceTime(builder, bossTurnHpReduceTime);
  return clz_Torappu_AutoChessData_AutoChessTurnInfoData.endclz_Torappu_AutoChessData_AutoChessTurnInfoData(builder);
}

unpack(): clz_Torappu_AutoChessData_AutoChessTurnInfoDataT {
  return new clz_Torappu_AutoChessData_AutoChessTurnInfoDataT(
    this.round(),
    this.normalPhaseTime(),
    this.isBossTurn(),
    this.bossTurnHpReduceTime()
  );
}


unpackTo(_o: clz_Torappu_AutoChessData_AutoChessTurnInfoDataT): void {
  _o.round = this.round();
  _o.normalPhaseTime = this.normalPhaseTime();
  _o.isBossTurn = this.isBossTurn();
  _o.bossTurnHpReduceTime = this.bossTurnHpReduceTime();
}
}

export class clz_Torappu_AutoChessData_AutoChessTurnInfoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public round: number = 0,
  public normalPhaseTime: number = 0,
  public isBossTurn: boolean = false,
  public bossTurnHpReduceTime: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return clz_Torappu_AutoChessData_AutoChessTurnInfoData.createclz_Torappu_AutoChessData_AutoChessTurnInfoData(builder,
    this.round,
    this.normalPhaseTime,
    this.isBossTurn,
    this.bossTurnHpReduceTime
  );
}
}
