// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_AttributesData implements flatbuffers.IUnpackableObject<clz_Torappu_AttributesDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_AttributesData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_AttributesData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AttributesData):clz_Torappu_AttributesData {
  return (obj || new clz_Torappu_AttributesData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_AttributesData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_AttributesData):clz_Torappu_AttributesData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_AttributesData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxHp():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

atk():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

def():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

magicResistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

cost():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

blockCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

moveSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

attackSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

baseAttackTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

respawnTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hpRecoveryPerSec():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

spRecoveryPerSec():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maxDeployCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxDeckStackCnt():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tauntLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

massLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

baseForceLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stunImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

silenceImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

sleepImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frozenImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

levitateImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

disarmedCombatImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fearedImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

palsyImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

attractImmune():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startclz_Torappu_AttributesData(builder:flatbuffers.Builder) {
  builder.startObject(26);
}

static addMaxHp(builder:flatbuffers.Builder, maxHp:number) {
  builder.addFieldInt32(0, maxHp, 0);
}

static addAtk(builder:flatbuffers.Builder, atk:number) {
  builder.addFieldInt32(1, atk, 0);
}

static addDef(builder:flatbuffers.Builder, def:number) {
  builder.addFieldInt32(2, def, 0);
}

static addMagicResistance(builder:flatbuffers.Builder, magicResistance:number) {
  builder.addFieldFloat32(3, magicResistance, 0.0);
}

static addCost(builder:flatbuffers.Builder, cost:number) {
  builder.addFieldInt32(4, cost, 0);
}

static addBlockCnt(builder:flatbuffers.Builder, blockCnt:number) {
  builder.addFieldInt32(5, blockCnt, 0);
}

static addMoveSpeed(builder:flatbuffers.Builder, moveSpeed:number) {
  builder.addFieldFloat32(6, moveSpeed, 0.0);
}

static addAttackSpeed(builder:flatbuffers.Builder, attackSpeed:number) {
  builder.addFieldFloat32(7, attackSpeed, 0.0);
}

static addBaseAttackTime(builder:flatbuffers.Builder, baseAttackTime:number) {
  builder.addFieldFloat32(8, baseAttackTime, 0.0);
}

static addRespawnTime(builder:flatbuffers.Builder, respawnTime:number) {
  builder.addFieldInt32(9, respawnTime, 0);
}

static addHpRecoveryPerSec(builder:flatbuffers.Builder, hpRecoveryPerSec:number) {
  builder.addFieldFloat32(10, hpRecoveryPerSec, 0.0);
}

static addSpRecoveryPerSec(builder:flatbuffers.Builder, spRecoveryPerSec:number) {
  builder.addFieldFloat32(11, spRecoveryPerSec, 0.0);
}

static addMaxDeployCount(builder:flatbuffers.Builder, maxDeployCount:number) {
  builder.addFieldInt32(12, maxDeployCount, 0);
}

static addMaxDeckStackCnt(builder:flatbuffers.Builder, maxDeckStackCnt:number) {
  builder.addFieldInt32(13, maxDeckStackCnt, 0);
}

static addTauntLevel(builder:flatbuffers.Builder, tauntLevel:number) {
  builder.addFieldInt32(14, tauntLevel, 0);
}

static addMassLevel(builder:flatbuffers.Builder, massLevel:number) {
  builder.addFieldInt32(15, massLevel, 0);
}

static addBaseForceLevel(builder:flatbuffers.Builder, baseForceLevel:number) {
  builder.addFieldInt32(16, baseForceLevel, 0);
}

static addStunImmune(builder:flatbuffers.Builder, stunImmune:boolean) {
  builder.addFieldInt8(17, +stunImmune, +false);
}

static addSilenceImmune(builder:flatbuffers.Builder, silenceImmune:boolean) {
  builder.addFieldInt8(18, +silenceImmune, +false);
}

static addSleepImmune(builder:flatbuffers.Builder, sleepImmune:boolean) {
  builder.addFieldInt8(19, +sleepImmune, +false);
}

static addFrozenImmune(builder:flatbuffers.Builder, frozenImmune:boolean) {
  builder.addFieldInt8(20, +frozenImmune, +false);
}

static addLevitateImmune(builder:flatbuffers.Builder, levitateImmune:boolean) {
  builder.addFieldInt8(21, +levitateImmune, +false);
}

static addDisarmedCombatImmune(builder:flatbuffers.Builder, disarmedCombatImmune:boolean) {
  builder.addFieldInt8(22, +disarmedCombatImmune, +false);
}

static addFearedImmune(builder:flatbuffers.Builder, fearedImmune:boolean) {
  builder.addFieldInt8(23, +fearedImmune, +false);
}

static addPalsyImmune(builder:flatbuffers.Builder, palsyImmune:boolean) {
  builder.addFieldInt8(24, +palsyImmune, +false);
}

static addAttractImmune(builder:flatbuffers.Builder, attractImmune:boolean) {
  builder.addFieldInt8(25, +attractImmune, +false);
}

static endclz_Torappu_AttributesData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_AttributesData(builder:flatbuffers.Builder, maxHp:number, atk:number, def:number, magicResistance:number, cost:number, blockCnt:number, moveSpeed:number, attackSpeed:number, baseAttackTime:number, respawnTime:number, hpRecoveryPerSec:number, spRecoveryPerSec:number, maxDeployCount:number, maxDeckStackCnt:number, tauntLevel:number, massLevel:number, baseForceLevel:number, stunImmune:boolean, silenceImmune:boolean, sleepImmune:boolean, frozenImmune:boolean, levitateImmune:boolean, disarmedCombatImmune:boolean, fearedImmune:boolean, palsyImmune:boolean, attractImmune:boolean):flatbuffers.Offset {
  clz_Torappu_AttributesData.startclz_Torappu_AttributesData(builder);
  clz_Torappu_AttributesData.addMaxHp(builder, maxHp);
  clz_Torappu_AttributesData.addAtk(builder, atk);
  clz_Torappu_AttributesData.addDef(builder, def);
  clz_Torappu_AttributesData.addMagicResistance(builder, magicResistance);
  clz_Torappu_AttributesData.addCost(builder, cost);
  clz_Torappu_AttributesData.addBlockCnt(builder, blockCnt);
  clz_Torappu_AttributesData.addMoveSpeed(builder, moveSpeed);
  clz_Torappu_AttributesData.addAttackSpeed(builder, attackSpeed);
  clz_Torappu_AttributesData.addBaseAttackTime(builder, baseAttackTime);
  clz_Torappu_AttributesData.addRespawnTime(builder, respawnTime);
  clz_Torappu_AttributesData.addHpRecoveryPerSec(builder, hpRecoveryPerSec);
  clz_Torappu_AttributesData.addSpRecoveryPerSec(builder, spRecoveryPerSec);
  clz_Torappu_AttributesData.addMaxDeployCount(builder, maxDeployCount);
  clz_Torappu_AttributesData.addMaxDeckStackCnt(builder, maxDeckStackCnt);
  clz_Torappu_AttributesData.addTauntLevel(builder, tauntLevel);
  clz_Torappu_AttributesData.addMassLevel(builder, massLevel);
  clz_Torappu_AttributesData.addBaseForceLevel(builder, baseForceLevel);
  clz_Torappu_AttributesData.addStunImmune(builder, stunImmune);
  clz_Torappu_AttributesData.addSilenceImmune(builder, silenceImmune);
  clz_Torappu_AttributesData.addSleepImmune(builder, sleepImmune);
  clz_Torappu_AttributesData.addFrozenImmune(builder, frozenImmune);
  clz_Torappu_AttributesData.addLevitateImmune(builder, levitateImmune);
  clz_Torappu_AttributesData.addDisarmedCombatImmune(builder, disarmedCombatImmune);
  clz_Torappu_AttributesData.addFearedImmune(builder, fearedImmune);
  clz_Torappu_AttributesData.addPalsyImmune(builder, palsyImmune);
  clz_Torappu_AttributesData.addAttractImmune(builder, attractImmune);
  return clz_Torappu_AttributesData.endclz_Torappu_AttributesData(builder);
}

unpack(): clz_Torappu_AttributesDataT {
  return new clz_Torappu_AttributesDataT(
    this.maxHp(),
    this.atk(),
    this.def(),
    this.magicResistance(),
    this.cost(),
    this.blockCnt(),
    this.moveSpeed(),
    this.attackSpeed(),
    this.baseAttackTime(),
    this.respawnTime(),
    this.hpRecoveryPerSec(),
    this.spRecoveryPerSec(),
    this.maxDeployCount(),
    this.maxDeckStackCnt(),
    this.tauntLevel(),
    this.massLevel(),
    this.baseForceLevel(),
    this.stunImmune(),
    this.silenceImmune(),
    this.sleepImmune(),
    this.frozenImmune(),
    this.levitateImmune(),
    this.disarmedCombatImmune(),
    this.fearedImmune(),
    this.palsyImmune(),
    this.attractImmune()
  );
}


unpackTo(_o: clz_Torappu_AttributesDataT): void {
  _o.maxHp = this.maxHp();
  _o.atk = this.atk();
  _o.def = this.def();
  _o.magicResistance = this.magicResistance();
  _o.cost = this.cost();
  _o.blockCnt = this.blockCnt();
  _o.moveSpeed = this.moveSpeed();
  _o.attackSpeed = this.attackSpeed();
  _o.baseAttackTime = this.baseAttackTime();
  _o.respawnTime = this.respawnTime();
  _o.hpRecoveryPerSec = this.hpRecoveryPerSec();
  _o.spRecoveryPerSec = this.spRecoveryPerSec();
  _o.maxDeployCount = this.maxDeployCount();
  _o.maxDeckStackCnt = this.maxDeckStackCnt();
  _o.tauntLevel = this.tauntLevel();
  _o.massLevel = this.massLevel();
  _o.baseForceLevel = this.baseForceLevel();
  _o.stunImmune = this.stunImmune();
  _o.silenceImmune = this.silenceImmune();
  _o.sleepImmune = this.sleepImmune();
  _o.frozenImmune = this.frozenImmune();
  _o.levitateImmune = this.levitateImmune();
  _o.disarmedCombatImmune = this.disarmedCombatImmune();
  _o.fearedImmune = this.fearedImmune();
  _o.palsyImmune = this.palsyImmune();
  _o.attractImmune = this.attractImmune();
}
}

export class clz_Torappu_AttributesDataT implements flatbuffers.IGeneratedObject {
constructor(
  public maxHp: number = 0,
  public atk: number = 0,
  public def: number = 0,
  public magicResistance: number = 0.0,
  public cost: number = 0,
  public blockCnt: number = 0,
  public moveSpeed: number = 0.0,
  public attackSpeed: number = 0.0,
  public baseAttackTime: number = 0.0,
  public respawnTime: number = 0,
  public hpRecoveryPerSec: number = 0.0,
  public spRecoveryPerSec: number = 0.0,
  public maxDeployCount: number = 0,
  public maxDeckStackCnt: number = 0,
  public tauntLevel: number = 0,
  public massLevel: number = 0,
  public baseForceLevel: number = 0,
  public stunImmune: boolean = false,
  public silenceImmune: boolean = false,
  public sleepImmune: boolean = false,
  public frozenImmune: boolean = false,
  public levitateImmune: boolean = false,
  public disarmedCombatImmune: boolean = false,
  public fearedImmune: boolean = false,
  public palsyImmune: boolean = false,
  public attractImmune: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return clz_Torappu_AttributesData.createclz_Torappu_AttributesData(builder,
    this.maxHp,
    this.atk,
    this.def,
    this.magicResistance,
    this.cost,
    this.blockCnt,
    this.moveSpeed,
    this.attackSpeed,
    this.baseAttackTime,
    this.respawnTime,
    this.hpRecoveryPerSec,
    this.spRecoveryPerSec,
    this.maxDeployCount,
    this.maxDeckStackCnt,
    this.tauntLevel,
    this.massLevel,
    this.baseForceLevel,
    this.stunImmune,
    this.silenceImmune,
    this.sleepImmune,
    this.frozenImmune,
    this.levitateImmune,
    this.disarmedCombatImmune,
    this.fearedImmune,
    this.palsyImmune,
    this.attractImmune
  );
}
}
