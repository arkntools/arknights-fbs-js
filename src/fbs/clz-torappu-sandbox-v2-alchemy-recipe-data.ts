// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_SandboxV2AlchemyMaterialData, clz_Torappu_SandboxV2AlchemyMaterialDataT } from './clz-torappu-sandbox-v2-alchemy-material-data.js';


export class clz_Torappu_SandboxV2AlchemyRecipeData implements flatbuffers.IUnpackableObject<clz_Torappu_SandboxV2AlchemyRecipeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_SandboxV2AlchemyRecipeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_SandboxV2AlchemyRecipeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2AlchemyRecipeData):clz_Torappu_SandboxV2AlchemyRecipeData {
  return (obj || new clz_Torappu_SandboxV2AlchemyRecipeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_SandboxV2AlchemyRecipeData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_SandboxV2AlchemyRecipeData):clz_Torappu_SandboxV2AlchemyRecipeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_SandboxV2AlchemyRecipeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

recipeId():string|null
recipeId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recipeId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

materials(index: number, obj?:clz_Torappu_SandboxV2AlchemyMaterialData):clz_Torappu_SandboxV2AlchemyMaterialData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_SandboxV2AlchemyMaterialData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

materialsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

itemId():string|null
itemId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
itemId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

onceAlchemyRatio():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

recipeLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

unlockDesc():string|null
unlockDesc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
unlockDesc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_SandboxV2AlchemyRecipeData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addRecipeId(builder:flatbuffers.Builder, recipeIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, recipeIdOffset, 0);
}

static addMaterials(builder:flatbuffers.Builder, materialsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, materialsOffset, 0);
}

static createMaterialsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMaterialsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addItemId(builder:flatbuffers.Builder, itemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, itemIdOffset, 0);
}

static addOnceAlchemyRatio(builder:flatbuffers.Builder, onceAlchemyRatio:number) {
  builder.addFieldInt32(3, onceAlchemyRatio, 0);
}

static addRecipeLevel(builder:flatbuffers.Builder, recipeLevel:number) {
  builder.addFieldInt32(4, recipeLevel, 0);
}

static addUnlockDesc(builder:flatbuffers.Builder, unlockDescOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, unlockDescOffset, 0);
}

static endclz_Torappu_SandboxV2AlchemyRecipeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_SandboxV2AlchemyRecipeData(builder:flatbuffers.Builder, recipeIdOffset:flatbuffers.Offset, materialsOffset:flatbuffers.Offset, itemIdOffset:flatbuffers.Offset, onceAlchemyRatio:number, recipeLevel:number, unlockDescOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_SandboxV2AlchemyRecipeData.startclz_Torappu_SandboxV2AlchemyRecipeData(builder);
  clz_Torappu_SandboxV2AlchemyRecipeData.addRecipeId(builder, recipeIdOffset);
  clz_Torappu_SandboxV2AlchemyRecipeData.addMaterials(builder, materialsOffset);
  clz_Torappu_SandboxV2AlchemyRecipeData.addItemId(builder, itemIdOffset);
  clz_Torappu_SandboxV2AlchemyRecipeData.addOnceAlchemyRatio(builder, onceAlchemyRatio);
  clz_Torappu_SandboxV2AlchemyRecipeData.addRecipeLevel(builder, recipeLevel);
  clz_Torappu_SandboxV2AlchemyRecipeData.addUnlockDesc(builder, unlockDescOffset);
  return clz_Torappu_SandboxV2AlchemyRecipeData.endclz_Torappu_SandboxV2AlchemyRecipeData(builder);
}

unpack(): clz_Torappu_SandboxV2AlchemyRecipeDataT {
  return new clz_Torappu_SandboxV2AlchemyRecipeDataT(
    this.recipeId(),
    this.bb!.createObjList<clz_Torappu_SandboxV2AlchemyMaterialData, clz_Torappu_SandboxV2AlchemyMaterialDataT>(this.materials.bind(this), this.materialsLength()),
    this.itemId(),
    this.onceAlchemyRatio(),
    this.recipeLevel(),
    this.unlockDesc()
  );
}


unpackTo(_o: clz_Torappu_SandboxV2AlchemyRecipeDataT): void {
  _o.recipeId = this.recipeId();
  _o.materials = this.bb!.createObjList<clz_Torappu_SandboxV2AlchemyMaterialData, clz_Torappu_SandboxV2AlchemyMaterialDataT>(this.materials.bind(this), this.materialsLength());
  _o.itemId = this.itemId();
  _o.onceAlchemyRatio = this.onceAlchemyRatio();
  _o.recipeLevel = this.recipeLevel();
  _o.unlockDesc = this.unlockDesc();
}
}

export class clz_Torappu_SandboxV2AlchemyRecipeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public recipeId: string|Uint8Array|null = null,
  public materials: (clz_Torappu_SandboxV2AlchemyMaterialDataT)[] = [],
  public itemId: string|Uint8Array|null = null,
  public onceAlchemyRatio: number = 0,
  public recipeLevel: number = 0,
  public unlockDesc: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const recipeId = (this.recipeId !== null ? builder.createString(this.recipeId!) : 0);
  const materials = clz_Torappu_SandboxV2AlchemyRecipeData.createMaterialsVector(builder, builder.createObjectOffsetList(this.materials));
  const itemId = (this.itemId !== null ? builder.createString(this.itemId!) : 0);
  const unlockDesc = (this.unlockDesc !== null ? builder.createString(this.unlockDesc!) : 0);

  return clz_Torappu_SandboxV2AlchemyRecipeData.createclz_Torappu_SandboxV2AlchemyRecipeData(builder,
    recipeId,
    materials,
    itemId,
    this.onceAlchemyRatio,
    this.recipeLevel,
    unlockDesc
  );
}
}
