// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class clz_Torappu_RL02DevRawTextBuffGroup implements flatbuffers.IUnpackableObject<clz_Torappu_RL02DevRawTextBuffGroupT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_RL02DevRawTextBuffGroup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_RL02DevRawTextBuffGroup(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RL02DevRawTextBuffGroup):clz_Torappu_RL02DevRawTextBuffGroup {
  return (obj || new clz_Torappu_RL02DevRawTextBuffGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_RL02DevRawTextBuffGroup(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_RL02DevRawTextBuffGroup):clz_Torappu_RL02DevRawTextBuffGroup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_RL02DevRawTextBuffGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nodeIdList(index: number):string
nodeIdList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
nodeIdList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

nodeIdListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

useLevelMark():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

groupIconId():string|null
groupIconId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupIconId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

useUpBreak():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

sortId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startclz_Torappu_RL02DevRawTextBuffGroup(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addNodeIdList(builder:flatbuffers.Builder, nodeIdListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nodeIdListOffset, 0);
}

static createNodeIdListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNodeIdListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUseLevelMark(builder:flatbuffers.Builder, useLevelMark:boolean) {
  builder.addFieldInt8(1, +useLevelMark, +false);
}

static addGroupIconId(builder:flatbuffers.Builder, groupIconIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, groupIconIdOffset, 0);
}

static addUseUpBreak(builder:flatbuffers.Builder, useUpBreak:boolean) {
  builder.addFieldInt8(3, +useUpBreak, +false);
}

static addSortId(builder:flatbuffers.Builder, sortId:number) {
  builder.addFieldInt32(4, sortId, 0);
}

static endclz_Torappu_RL02DevRawTextBuffGroup(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_RL02DevRawTextBuffGroup(builder:flatbuffers.Builder, nodeIdListOffset:flatbuffers.Offset, useLevelMark:boolean, groupIconIdOffset:flatbuffers.Offset, useUpBreak:boolean, sortId:number):flatbuffers.Offset {
  clz_Torappu_RL02DevRawTextBuffGroup.startclz_Torappu_RL02DevRawTextBuffGroup(builder);
  clz_Torappu_RL02DevRawTextBuffGroup.addNodeIdList(builder, nodeIdListOffset);
  clz_Torappu_RL02DevRawTextBuffGroup.addUseLevelMark(builder, useLevelMark);
  clz_Torappu_RL02DevRawTextBuffGroup.addGroupIconId(builder, groupIconIdOffset);
  clz_Torappu_RL02DevRawTextBuffGroup.addUseUpBreak(builder, useUpBreak);
  clz_Torappu_RL02DevRawTextBuffGroup.addSortId(builder, sortId);
  return clz_Torappu_RL02DevRawTextBuffGroup.endclz_Torappu_RL02DevRawTextBuffGroup(builder);
}

unpack(): clz_Torappu_RL02DevRawTextBuffGroupT {
  return new clz_Torappu_RL02DevRawTextBuffGroupT(
    this.bb!.createScalarList<string>(this.nodeIdList.bind(this), this.nodeIdListLength()),
    this.useLevelMark(),
    this.groupIconId(),
    this.useUpBreak(),
    this.sortId()
  );
}


unpackTo(_o: clz_Torappu_RL02DevRawTextBuffGroupT): void {
  _o.nodeIdList = this.bb!.createScalarList<string>(this.nodeIdList.bind(this), this.nodeIdListLength());
  _o.useLevelMark = this.useLevelMark();
  _o.groupIconId = this.groupIconId();
  _o.useUpBreak = this.useUpBreak();
  _o.sortId = this.sortId();
}
}

export class clz_Torappu_RL02DevRawTextBuffGroupT implements flatbuffers.IGeneratedObject {
constructor(
  public nodeIdList: (string)[] = [],
  public useLevelMark: boolean = false,
  public groupIconId: string|Uint8Array|null = null,
  public useUpBreak: boolean = false,
  public sortId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const nodeIdList = clz_Torappu_RL02DevRawTextBuffGroup.createNodeIdListVector(builder, builder.createObjectOffsetList(this.nodeIdList));
  const groupIconId = (this.groupIconId !== null ? builder.createString(this.groupIconId!) : 0);

  return clz_Torappu_RL02DevRawTextBuffGroup.createclz_Torappu_RL02DevRawTextBuffGroup(builder,
    nodeIdList,
    this.useLevelMark,
    groupIconId,
    this.useUpBreak,
    this.sortId
  );
}
}
