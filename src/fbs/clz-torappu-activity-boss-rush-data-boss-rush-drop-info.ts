// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_ActivityBossRushData_DisplayDetailRewards, clz_Torappu_ActivityBossRushData_DisplayDetailRewardsT } from './clz-torappu-activity-boss-rush-data-display-detail-rewards.js';
import { clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT } from './clz-torappu-item-bundle.js';


export class clz_Torappu_ActivityBossRushData_BossRushDropInfo implements flatbuffers.IUnpackableObject<clz_Torappu_ActivityBossRushData_BossRushDropInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_ActivityBossRushData_BossRushDropInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_ActivityBossRushData_BossRushDropInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityBossRushData_BossRushDropInfo):clz_Torappu_ActivityBossRushData_BossRushDropInfo {
  return (obj || new clz_Torappu_ActivityBossRushData_BossRushDropInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_ActivityBossRushData_BossRushDropInfo(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_ActivityBossRushData_BossRushDropInfo):clz_Torappu_ActivityBossRushData_BossRushDropInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_ActivityBossRushData_BossRushDropInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clearWaveCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

displayDetailRewards(index: number, obj?:clz_Torappu_ActivityBossRushData_DisplayDetailRewards):clz_Torappu_ActivityBossRushData_DisplayDetailRewards|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new clz_Torappu_ActivityBossRushData_DisplayDetailRewards()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

displayDetailRewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

firstPassRewards(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

firstPassRewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

passRewards(index: number, obj?:clz_Torappu_ItemBundle):clz_Torappu_ItemBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_ItemBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

passRewardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startclz_Torappu_ActivityBossRushData_BossRushDropInfo(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addClearWaveCount(builder:flatbuffers.Builder, clearWaveCount:number) {
  builder.addFieldInt32(0, clearWaveCount, 0);
}

static addDisplayDetailRewards(builder:flatbuffers.Builder, displayDetailRewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, displayDetailRewardsOffset, 0);
}

static createDisplayDetailRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDisplayDetailRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFirstPassRewards(builder:flatbuffers.Builder, firstPassRewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, firstPassRewardsOffset, 0);
}

static createFirstPassRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFirstPassRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPassRewards(builder:flatbuffers.Builder, passRewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, passRewardsOffset, 0);
}

static createPassRewardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPassRewardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endclz_Torappu_ActivityBossRushData_BossRushDropInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_ActivityBossRushData_BossRushDropInfo(builder:flatbuffers.Builder, clearWaveCount:number, displayDetailRewardsOffset:flatbuffers.Offset, firstPassRewardsOffset:flatbuffers.Offset, passRewardsOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_ActivityBossRushData_BossRushDropInfo.startclz_Torappu_ActivityBossRushData_BossRushDropInfo(builder);
  clz_Torappu_ActivityBossRushData_BossRushDropInfo.addClearWaveCount(builder, clearWaveCount);
  clz_Torappu_ActivityBossRushData_BossRushDropInfo.addDisplayDetailRewards(builder, displayDetailRewardsOffset);
  clz_Torappu_ActivityBossRushData_BossRushDropInfo.addFirstPassRewards(builder, firstPassRewardsOffset);
  clz_Torappu_ActivityBossRushData_BossRushDropInfo.addPassRewards(builder, passRewardsOffset);
  return clz_Torappu_ActivityBossRushData_BossRushDropInfo.endclz_Torappu_ActivityBossRushData_BossRushDropInfo(builder);
}

unpack(): clz_Torappu_ActivityBossRushData_BossRushDropInfoT {
  return new clz_Torappu_ActivityBossRushData_BossRushDropInfoT(
    this.clearWaveCount(),
    this.bb!.createObjList<clz_Torappu_ActivityBossRushData_DisplayDetailRewards, clz_Torappu_ActivityBossRushData_DisplayDetailRewardsT>(this.displayDetailRewards.bind(this), this.displayDetailRewardsLength()),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.firstPassRewards.bind(this), this.firstPassRewardsLength()),
    this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.passRewards.bind(this), this.passRewardsLength())
  );
}


unpackTo(_o: clz_Torappu_ActivityBossRushData_BossRushDropInfoT): void {
  _o.clearWaveCount = this.clearWaveCount();
  _o.displayDetailRewards = this.bb!.createObjList<clz_Torappu_ActivityBossRushData_DisplayDetailRewards, clz_Torappu_ActivityBossRushData_DisplayDetailRewardsT>(this.displayDetailRewards.bind(this), this.displayDetailRewardsLength());
  _o.firstPassRewards = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.firstPassRewards.bind(this), this.firstPassRewardsLength());
  _o.passRewards = this.bb!.createObjList<clz_Torappu_ItemBundle, clz_Torappu_ItemBundleT>(this.passRewards.bind(this), this.passRewardsLength());
}
}

export class clz_Torappu_ActivityBossRushData_BossRushDropInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public clearWaveCount: number = 0,
  public displayDetailRewards: (clz_Torappu_ActivityBossRushData_DisplayDetailRewardsT)[] = [],
  public firstPassRewards: (clz_Torappu_ItemBundleT)[] = [],
  public passRewards: (clz_Torappu_ItemBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const displayDetailRewards = clz_Torappu_ActivityBossRushData_BossRushDropInfo.createDisplayDetailRewardsVector(builder, builder.createObjectOffsetList(this.displayDetailRewards));
  const firstPassRewards = clz_Torappu_ActivityBossRushData_BossRushDropInfo.createFirstPassRewardsVector(builder, builder.createObjectOffsetList(this.firstPassRewards));
  const passRewards = clz_Torappu_ActivityBossRushData_BossRushDropInfo.createPassRewardsVector(builder, builder.createObjectOffsetList(this.passRewards));

  return clz_Torappu_ActivityBossRushData_BossRushDropInfo.createclz_Torappu_ActivityBossRushData_BossRushDropInfo(builder,
    this.clearWaveCount,
    displayDetailRewards,
    firstPassRewards,
    passRewards
  );
}
}
