// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { enum__Torappu_TemplateMissionBigRewardType } from './enum--torappu-template-mission-big-reward-type.js';
import { enum__Torappu_TemplateMissionCoinInfoType } from './enum--torappu-template-mission-coin-info-type.js';
import { enum__Torappu_TemplateMissionTitleType } from './enum--torappu-template-mission-title-type.js';


export class clz_Torappu_TemplateMissionStyleData implements flatbuffers.IUnpackableObject<clz_Torappu_TemplateMissionStyleDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_TemplateMissionStyleData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_TemplateMissionStyleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TemplateMissionStyleData):clz_Torappu_TemplateMissionStyleData {
  return (obj || new clz_Torappu_TemplateMissionStyleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_TemplateMissionStyleData(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_TemplateMissionStyleData):clz_Torappu_TemplateMissionStyleData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_TemplateMissionStyleData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bigRewardType():enum__Torappu_TemplateMissionBigRewardType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_TemplateMissionBigRewardType.NONE;
}

bigRewardParamList(index: number):string
bigRewardParamList(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
bigRewardParamList(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

bigRewardParamListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isMissionListCommonType():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isMissionItemCommonType():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

missionItemMainColor():string|null
missionItemMainColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionItemMainColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isMissionItemCompleteUseMainColor():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

missionItemCompleteColor():string|null
missionItemCompleteColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionItemCompleteColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isMissionRewardItemCommonType():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isClaimAllBtnCommonType():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

claimAllBtnMainColor():string|null
claimAllBtnMainColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
claimAllBtnMainColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

claimAllBtnTips():string|null
claimAllBtnTips(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
claimAllBtnTips(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

titleType():enum__Torappu_TemplateMissionTitleType {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_TemplateMissionTitleType.COMMON;
}

coinType():enum__Torappu_TemplateMissionCoinInfoType {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : enum__Torappu_TemplateMissionCoinInfoType.COMMON;
}

coinBackColor():string|null
coinBackColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coinBackColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startclz_Torappu_TemplateMissionStyleData(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addBigRewardType(builder:flatbuffers.Builder, bigRewardType:enum__Torappu_TemplateMissionBigRewardType) {
  builder.addFieldInt32(0, bigRewardType, enum__Torappu_TemplateMissionBigRewardType.NONE);
}

static addBigRewardParamList(builder:flatbuffers.Builder, bigRewardParamListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bigRewardParamListOffset, 0);
}

static createBigRewardParamListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBigRewardParamListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsMissionListCommonType(builder:flatbuffers.Builder, isMissionListCommonType:boolean) {
  builder.addFieldInt8(2, +isMissionListCommonType, +false);
}

static addIsMissionItemCommonType(builder:flatbuffers.Builder, isMissionItemCommonType:boolean) {
  builder.addFieldInt8(3, +isMissionItemCommonType, +false);
}

static addMissionItemMainColor(builder:flatbuffers.Builder, missionItemMainColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, missionItemMainColorOffset, 0);
}

static addIsMissionItemCompleteUseMainColor(builder:flatbuffers.Builder, isMissionItemCompleteUseMainColor:boolean) {
  builder.addFieldInt8(5, +isMissionItemCompleteUseMainColor, +false);
}

static addMissionItemCompleteColor(builder:flatbuffers.Builder, missionItemCompleteColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, missionItemCompleteColorOffset, 0);
}

static addIsMissionRewardItemCommonType(builder:flatbuffers.Builder, isMissionRewardItemCommonType:boolean) {
  builder.addFieldInt8(7, +isMissionRewardItemCommonType, +false);
}

static addIsClaimAllBtnCommonType(builder:flatbuffers.Builder, isClaimAllBtnCommonType:boolean) {
  builder.addFieldInt8(8, +isClaimAllBtnCommonType, +false);
}

static addClaimAllBtnMainColor(builder:flatbuffers.Builder, claimAllBtnMainColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, claimAllBtnMainColorOffset, 0);
}

static addClaimAllBtnTips(builder:flatbuffers.Builder, claimAllBtnTipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, claimAllBtnTipsOffset, 0);
}

static addTitleType(builder:flatbuffers.Builder, titleType:enum__Torappu_TemplateMissionTitleType) {
  builder.addFieldInt32(11, titleType, enum__Torappu_TemplateMissionTitleType.COMMON);
}

static addCoinType(builder:flatbuffers.Builder, coinType:enum__Torappu_TemplateMissionCoinInfoType) {
  builder.addFieldInt32(12, coinType, enum__Torappu_TemplateMissionCoinInfoType.COMMON);
}

static addCoinBackColor(builder:flatbuffers.Builder, coinBackColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, coinBackColorOffset, 0);
}

static endclz_Torappu_TemplateMissionStyleData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createclz_Torappu_TemplateMissionStyleData(builder:flatbuffers.Builder, bigRewardType:enum__Torappu_TemplateMissionBigRewardType, bigRewardParamListOffset:flatbuffers.Offset, isMissionListCommonType:boolean, isMissionItemCommonType:boolean, missionItemMainColorOffset:flatbuffers.Offset, isMissionItemCompleteUseMainColor:boolean, missionItemCompleteColorOffset:flatbuffers.Offset, isMissionRewardItemCommonType:boolean, isClaimAllBtnCommonType:boolean, claimAllBtnMainColorOffset:flatbuffers.Offset, claimAllBtnTipsOffset:flatbuffers.Offset, titleType:enum__Torappu_TemplateMissionTitleType, coinType:enum__Torappu_TemplateMissionCoinInfoType, coinBackColorOffset:flatbuffers.Offset):flatbuffers.Offset {
  clz_Torappu_TemplateMissionStyleData.startclz_Torappu_TemplateMissionStyleData(builder);
  clz_Torappu_TemplateMissionStyleData.addBigRewardType(builder, bigRewardType);
  clz_Torappu_TemplateMissionStyleData.addBigRewardParamList(builder, bigRewardParamListOffset);
  clz_Torappu_TemplateMissionStyleData.addIsMissionListCommonType(builder, isMissionListCommonType);
  clz_Torappu_TemplateMissionStyleData.addIsMissionItemCommonType(builder, isMissionItemCommonType);
  clz_Torappu_TemplateMissionStyleData.addMissionItemMainColor(builder, missionItemMainColorOffset);
  clz_Torappu_TemplateMissionStyleData.addIsMissionItemCompleteUseMainColor(builder, isMissionItemCompleteUseMainColor);
  clz_Torappu_TemplateMissionStyleData.addMissionItemCompleteColor(builder, missionItemCompleteColorOffset);
  clz_Torappu_TemplateMissionStyleData.addIsMissionRewardItemCommonType(builder, isMissionRewardItemCommonType);
  clz_Torappu_TemplateMissionStyleData.addIsClaimAllBtnCommonType(builder, isClaimAllBtnCommonType);
  clz_Torappu_TemplateMissionStyleData.addClaimAllBtnMainColor(builder, claimAllBtnMainColorOffset);
  clz_Torappu_TemplateMissionStyleData.addClaimAllBtnTips(builder, claimAllBtnTipsOffset);
  clz_Torappu_TemplateMissionStyleData.addTitleType(builder, titleType);
  clz_Torappu_TemplateMissionStyleData.addCoinType(builder, coinType);
  clz_Torappu_TemplateMissionStyleData.addCoinBackColor(builder, coinBackColorOffset);
  return clz_Torappu_TemplateMissionStyleData.endclz_Torappu_TemplateMissionStyleData(builder);
}

unpack(): clz_Torappu_TemplateMissionStyleDataT {
  return new clz_Torappu_TemplateMissionStyleDataT(
    this.bigRewardType(),
    this.bb!.createScalarList<string>(this.bigRewardParamList.bind(this), this.bigRewardParamListLength()),
    this.isMissionListCommonType(),
    this.isMissionItemCommonType(),
    this.missionItemMainColor(),
    this.isMissionItemCompleteUseMainColor(),
    this.missionItemCompleteColor(),
    this.isMissionRewardItemCommonType(),
    this.isClaimAllBtnCommonType(),
    this.claimAllBtnMainColor(),
    this.claimAllBtnTips(),
    this.titleType(),
    this.coinType(),
    this.coinBackColor()
  );
}


unpackTo(_o: clz_Torappu_TemplateMissionStyleDataT): void {
  _o.bigRewardType = this.bigRewardType();
  _o.bigRewardParamList = this.bb!.createScalarList<string>(this.bigRewardParamList.bind(this), this.bigRewardParamListLength());
  _o.isMissionListCommonType = this.isMissionListCommonType();
  _o.isMissionItemCommonType = this.isMissionItemCommonType();
  _o.missionItemMainColor = this.missionItemMainColor();
  _o.isMissionItemCompleteUseMainColor = this.isMissionItemCompleteUseMainColor();
  _o.missionItemCompleteColor = this.missionItemCompleteColor();
  _o.isMissionRewardItemCommonType = this.isMissionRewardItemCommonType();
  _o.isClaimAllBtnCommonType = this.isClaimAllBtnCommonType();
  _o.claimAllBtnMainColor = this.claimAllBtnMainColor();
  _o.claimAllBtnTips = this.claimAllBtnTips();
  _o.titleType = this.titleType();
  _o.coinType = this.coinType();
  _o.coinBackColor = this.coinBackColor();
}
}

export class clz_Torappu_TemplateMissionStyleDataT implements flatbuffers.IGeneratedObject {
constructor(
  public bigRewardType: enum__Torappu_TemplateMissionBigRewardType = enum__Torappu_TemplateMissionBigRewardType.NONE,
  public bigRewardParamList: (string)[] = [],
  public isMissionListCommonType: boolean = false,
  public isMissionItemCommonType: boolean = false,
  public missionItemMainColor: string|Uint8Array|null = null,
  public isMissionItemCompleteUseMainColor: boolean = false,
  public missionItemCompleteColor: string|Uint8Array|null = null,
  public isMissionRewardItemCommonType: boolean = false,
  public isClaimAllBtnCommonType: boolean = false,
  public claimAllBtnMainColor: string|Uint8Array|null = null,
  public claimAllBtnTips: string|Uint8Array|null = null,
  public titleType: enum__Torappu_TemplateMissionTitleType = enum__Torappu_TemplateMissionTitleType.COMMON,
  public coinType: enum__Torappu_TemplateMissionCoinInfoType = enum__Torappu_TemplateMissionCoinInfoType.COMMON,
  public coinBackColor: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const bigRewardParamList = clz_Torappu_TemplateMissionStyleData.createBigRewardParamListVector(builder, builder.createObjectOffsetList(this.bigRewardParamList));
  const missionItemMainColor = (this.missionItemMainColor !== null ? builder.createString(this.missionItemMainColor!) : 0);
  const missionItemCompleteColor = (this.missionItemCompleteColor !== null ? builder.createString(this.missionItemCompleteColor!) : 0);
  const claimAllBtnMainColor = (this.claimAllBtnMainColor !== null ? builder.createString(this.claimAllBtnMainColor!) : 0);
  const claimAllBtnTips = (this.claimAllBtnTips !== null ? builder.createString(this.claimAllBtnTips!) : 0);
  const coinBackColor = (this.coinBackColor !== null ? builder.createString(this.coinBackColor!) : 0);

  return clz_Torappu_TemplateMissionStyleData.createclz_Torappu_TemplateMissionStyleData(builder,
    this.bigRewardType,
    bigRewardParamList,
    this.isMissionListCommonType,
    this.isMissionItemCommonType,
    missionItemMainColor,
    this.isMissionItemCompleteUseMainColor,
    missionItemCompleteColor,
    this.isMissionRewardItemCommonType,
    this.isClaimAllBtnCommonType,
    claimAllBtnMainColor,
    claimAllBtnTips,
    this.titleType,
    this.coinType,
    coinBackColor
  );
}
}
