// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { clz_Torappu_CharacterData_MainSkill_SpecializeLevelData, clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataT } from './clz-torappu-character-data-main-skill-specialize-level-data.js';
import { clz_Torappu_CharacterData_UnlockCondition, clz_Torappu_CharacterData_UnlockConditionT } from './clz-torappu-character-data-unlock-condition.js';


export class clz_Torappu_CharacterData_MainSkill implements flatbuffers.IUnpackableObject<clz_Torappu_CharacterData_MainSkillT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):clz_Torappu_CharacterData_MainSkill {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsclz_Torappu_CharacterData_MainSkill(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharacterData_MainSkill):clz_Torappu_CharacterData_MainSkill {
  return (obj || new clz_Torappu_CharacterData_MainSkill()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsclz_Torappu_CharacterData_MainSkill(bb:flatbuffers.ByteBuffer, obj?:clz_Torappu_CharacterData_MainSkill):clz_Torappu_CharacterData_MainSkill {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new clz_Torappu_CharacterData_MainSkill()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

skillId():string|null
skillId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
skillId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

overridePrefabKey():string|null
overridePrefabKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
overridePrefabKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

overrideTokenKey():string|null
overrideTokenKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
overrideTokenKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

levelUpCostCond(index: number, obj?:clz_Torappu_CharacterData_MainSkill_SpecializeLevelData):clz_Torappu_CharacterData_MainSkill_SpecializeLevelData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new clz_Torappu_CharacterData_MainSkill_SpecializeLevelData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

levelUpCostCondLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unlockCond(obj?:clz_Torappu_CharacterData_UnlockCondition):clz_Torappu_CharacterData_UnlockCondition|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new clz_Torappu_CharacterData_UnlockCondition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startclz_Torappu_CharacterData_MainSkill(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addSkillId(builder:flatbuffers.Builder, skillIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, skillIdOffset, 0);
}

static addOverridePrefabKey(builder:flatbuffers.Builder, overridePrefabKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, overridePrefabKeyOffset, 0);
}

static addOverrideTokenKey(builder:flatbuffers.Builder, overrideTokenKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, overrideTokenKeyOffset, 0);
}

static addLevelUpCostCond(builder:flatbuffers.Builder, levelUpCostCondOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, levelUpCostCondOffset, 0);
}

static createLevelUpCostCondVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLevelUpCostCondVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnlockCond(builder:flatbuffers.Builder, unlockCondOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, unlockCondOffset, 0);
}

static endclz_Torappu_CharacterData_MainSkill(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): clz_Torappu_CharacterData_MainSkillT {
  return new clz_Torappu_CharacterData_MainSkillT(
    this.skillId(),
    this.overridePrefabKey(),
    this.overrideTokenKey(),
    this.bb!.createObjList<clz_Torappu_CharacterData_MainSkill_SpecializeLevelData, clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataT>(this.levelUpCostCond.bind(this), this.levelUpCostCondLength()),
    (this.unlockCond() !== null ? this.unlockCond()!.unpack() : null)
  );
}


unpackTo(_o: clz_Torappu_CharacterData_MainSkillT): void {
  _o.skillId = this.skillId();
  _o.overridePrefabKey = this.overridePrefabKey();
  _o.overrideTokenKey = this.overrideTokenKey();
  _o.levelUpCostCond = this.bb!.createObjList<clz_Torappu_CharacterData_MainSkill_SpecializeLevelData, clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataT>(this.levelUpCostCond.bind(this), this.levelUpCostCondLength());
  _o.unlockCond = (this.unlockCond() !== null ? this.unlockCond()!.unpack() : null);
}
}

export class clz_Torappu_CharacterData_MainSkillT implements flatbuffers.IGeneratedObject {
constructor(
  public skillId: string|Uint8Array|null = null,
  public overridePrefabKey: string|Uint8Array|null = null,
  public overrideTokenKey: string|Uint8Array|null = null,
  public levelUpCostCond: (clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataT)[] = [],
  public unlockCond: clz_Torappu_CharacterData_UnlockConditionT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const skillId = (this.skillId !== null ? builder.createString(this.skillId!) : 0);
  const overridePrefabKey = (this.overridePrefabKey !== null ? builder.createString(this.overridePrefabKey!) : 0);
  const overrideTokenKey = (this.overrideTokenKey !== null ? builder.createString(this.overrideTokenKey!) : 0);
  const levelUpCostCond = clz_Torappu_CharacterData_MainSkill.createLevelUpCostCondVector(builder, builder.createObjectOffsetList(this.levelUpCostCond));
  const unlockCond = (this.unlockCond !== null ? this.unlockCond!.pack(builder) : 0);

  clz_Torappu_CharacterData_MainSkill.startclz_Torappu_CharacterData_MainSkill(builder);
  clz_Torappu_CharacterData_MainSkill.addSkillId(builder, skillId);
  clz_Torappu_CharacterData_MainSkill.addOverridePrefabKey(builder, overridePrefabKey);
  clz_Torappu_CharacterData_MainSkill.addOverrideTokenKey(builder, overrideTokenKey);
  clz_Torappu_CharacterData_MainSkill.addLevelUpCostCond(builder, levelUpCostCond);
  clz_Torappu_CharacterData_MainSkill.addUnlockCond(builder, unlockCond);

  return clz_Torappu_CharacterData_MainSkill.endclz_Torappu_CharacterData_MainSkill(builder);
}
}
